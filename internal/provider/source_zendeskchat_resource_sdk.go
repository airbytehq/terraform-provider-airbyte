// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZendeskChatResourceModel) ToCreateSDKType() *shared.SourceZendeskChatCreateRequest {
	var credentials *shared.SourceZendeskChatAuthorizationMethod
	var sourceZendeskChatAuthorizationMethodOAuth20 *shared.SourceZendeskChatAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
		accessToken := new(string)
		if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.IsNull() {
			*accessToken = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		credentials1 := shared.SourceZendeskChatAuthorizationMethodOAuth20Credentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials.ValueString())
		sourceZendeskChatAuthorizationMethodOAuth20 = &shared.SourceZendeskChatAuthorizationMethodOAuth20{
			AccessToken: accessToken,
			Credentials: credentials1,
		}
	}
	if sourceZendeskChatAuthorizationMethodOAuth20 != nil {
		credentials = &shared.SourceZendeskChatAuthorizationMethod{
			SourceZendeskChatAuthorizationMethodOAuth20: sourceZendeskChatAuthorizationMethodOAuth20,
		}
	}
	var sourceZendeskChatAuthorizationMethodAccessToken *shared.SourceZendeskChatAuthorizationMethodAccessToken
	if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
		accessToken1 := r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.ValueString()
		credentials2 := shared.SourceZendeskChatAuthorizationMethodAccessTokenCredentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials.ValueString())
		sourceZendeskChatAuthorizationMethodAccessToken = &shared.SourceZendeskChatAuthorizationMethodAccessToken{
			AccessToken: accessToken1,
			Credentials: credentials2,
		}
	}
	if sourceZendeskChatAuthorizationMethodAccessToken != nil {
		credentials = &shared.SourceZendeskChatAuthorizationMethod{
			SourceZendeskChatAuthorizationMethodAccessToken: sourceZendeskChatAuthorizationMethodAccessToken,
		}
	}
	sourceType := shared.SourceZendeskChatZendeskChat(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := new(string)
	if !r.Configuration.Subdomain.IsUnknown() && !r.Configuration.Subdomain.IsNull() {
		*subdomain = r.Configuration.Subdomain.ValueString()
	} else {
		subdomain = nil
	}
	configuration := shared.SourceZendeskChat{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskChatCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskChatResourceModel) ToGetSDKType() *shared.SourceZendeskChatCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskChatResourceModel) ToUpdateSDKType() *shared.SourceZendeskChatPutRequest {
	var credentials *shared.SourceZendeskChatUpdateAuthorizationMethod
	var sourceZendeskChatUpdateAuthorizationMethodOAuth20 *shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
		accessToken := new(string)
		if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.IsNull() {
			*accessToken = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		credentials1 := shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20Credentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials.ValueString())
		sourceZendeskChatUpdateAuthorizationMethodOAuth20 = &shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20{
			AccessToken: accessToken,
			Credentials: credentials1,
		}
	}
	if sourceZendeskChatUpdateAuthorizationMethodOAuth20 != nil {
		credentials = &shared.SourceZendeskChatUpdateAuthorizationMethod{
			SourceZendeskChatUpdateAuthorizationMethodOAuth20: sourceZendeskChatUpdateAuthorizationMethodOAuth20,
		}
	}
	var sourceZendeskChatUpdateAuthorizationMethodAccessToken *shared.SourceZendeskChatUpdateAuthorizationMethodAccessToken
	if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
		accessToken1 := r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.ValueString()
		credentials2 := shared.SourceZendeskChatUpdateAuthorizationMethodAccessTokenCredentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials.ValueString())
		sourceZendeskChatUpdateAuthorizationMethodAccessToken = &shared.SourceZendeskChatUpdateAuthorizationMethodAccessToken{
			AccessToken: accessToken1,
			Credentials: credentials2,
		}
	}
	if sourceZendeskChatUpdateAuthorizationMethodAccessToken != nil {
		credentials = &shared.SourceZendeskChatUpdateAuthorizationMethod{
			SourceZendeskChatUpdateAuthorizationMethodAccessToken: sourceZendeskChatUpdateAuthorizationMethodAccessToken,
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := new(string)
	if !r.Configuration.Subdomain.IsUnknown() && !r.Configuration.Subdomain.IsNull() {
		*subdomain = r.Configuration.Subdomain.ValueString()
	} else {
		subdomain = nil
	}
	configuration := shared.SourceZendeskChatUpdate{
		Credentials: credentials,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskChatPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskChatResourceModel) ToDeleteSDKType() *shared.SourceZendeskChatCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskChatResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceZendeskChatResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
