// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZendeskChatResourceModel) ToCreateSDKType() *shared.SourceZendeskChatCreateRequest {
	var credentials *shared.SourceZendeskChatAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskChatAuthorizationMethodOAuth20 *shared.SourceZendeskChatAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			credentials1 := shared.SourceZendeskChatAuthorizationMethodOAuth20Credentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials.ValueString())
			refreshToken := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.IsNull() {
				*refreshToken = r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.ValueString()
			} else {
				refreshToken = nil
			}
			sourceZendeskChatAuthorizationMethodOAuth20 = &shared.SourceZendeskChatAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				Credentials:  credentials1,
				RefreshToken: refreshToken,
			}
		}
		if sourceZendeskChatAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceZendeskChatAuthorizationMethod{
				SourceZendeskChatAuthorizationMethodOAuth20: sourceZendeskChatAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskChatAuthorizationMethodAccessToken *shared.SourceZendeskChatAuthorizationMethodAccessToken
		if r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
			accessToken1 := r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.ValueString()
			credentials2 := shared.SourceZendeskChatAuthorizationMethodAccessTokenCredentials(r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials.ValueString())
			sourceZendeskChatAuthorizationMethodAccessToken = &shared.SourceZendeskChatAuthorizationMethodAccessToken{
				AccessToken: accessToken1,
				Credentials: credentials2,
			}
		}
		if sourceZendeskChatAuthorizationMethodAccessToken != nil {
			credentials = &shared.SourceZendeskChatAuthorizationMethod{
				SourceZendeskChatAuthorizationMethodAccessToken: sourceZendeskChatAuthorizationMethodAccessToken,
			}
		}
	}
	sourceType := shared.SourceZendeskChatZendeskChat(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := new(string)
	if !r.Configuration.Subdomain.IsUnknown() && !r.Configuration.Subdomain.IsNull() {
		*subdomain = r.Configuration.Subdomain.ValueString()
	} else {
		subdomain = nil
	}
	configuration := shared.SourceZendeskChat{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskChatCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskChatResourceModel) ToGetSDKType() *shared.SourceZendeskChatCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskChatResourceModel) ToUpdateSDKType() *shared.SourceZendeskChatPutRequest {
	var credentials *shared.SourceZendeskChatUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskChatUpdateAuthorizationMethodOAuth20 *shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			credentials1 := shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20Credentials(r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.Credentials.ValueString())
			refreshToken := new(string)
			if !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.RefreshToken.IsUnknown() && !r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.RefreshToken.IsNull() {
				*refreshToken = r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20.RefreshToken.ValueString()
			} else {
				refreshToken = nil
			}
			sourceZendeskChatUpdateAuthorizationMethodOAuth20 = &shared.SourceZendeskChatUpdateAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				Credentials:  credentials1,
				RefreshToken: refreshToken,
			}
		}
		if sourceZendeskChatUpdateAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceZendeskChatUpdateAuthorizationMethod{
				SourceZendeskChatUpdateAuthorizationMethodOAuth20: sourceZendeskChatUpdateAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskChatUpdateAuthorizationMethodAccessToken *shared.SourceZendeskChatUpdateAuthorizationMethodAccessToken
		if r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodAccessToken != nil {
			accessToken1 := r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodAccessToken.AccessToken.ValueString()
			credentials2 := shared.SourceZendeskChatUpdateAuthorizationMethodAccessTokenCredentials(r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodAccessToken.Credentials.ValueString())
			sourceZendeskChatUpdateAuthorizationMethodAccessToken = &shared.SourceZendeskChatUpdateAuthorizationMethodAccessToken{
				AccessToken: accessToken1,
				Credentials: credentials2,
			}
		}
		if sourceZendeskChatUpdateAuthorizationMethodAccessToken != nil {
			credentials = &shared.SourceZendeskChatUpdateAuthorizationMethod{
				SourceZendeskChatUpdateAuthorizationMethodAccessToken: sourceZendeskChatUpdateAuthorizationMethodAccessToken,
			}
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := new(string)
	if !r.Configuration.Subdomain.IsUnknown() && !r.Configuration.Subdomain.IsNull() {
		*subdomain = r.Configuration.Subdomain.ValueString()
	} else {
		subdomain = nil
	}
	configuration := shared.SourceZendeskChatUpdate{
		Credentials: credentials,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskChatPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskChatResourceModel) ToDeleteSDKType() *shared.SourceZendeskChatCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskChatResourceModel) RefreshFromGetResponse(resp *shared.SourceZendeskChatGetResponse) {
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceZendeskChatAuthorizationMethod{}
		if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
			r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken = &SourceZendeskChatAuthorizationMethodAccessToken{}
			r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken)
			r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials = types.StringValue(string(resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials))
		}
		if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 = &SourceZendeskChatAuthorizationMethodOAuth20{}
			if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken != nil {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken = types.StringValue(*resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken)
			} else {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID != nil {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID)
			} else {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret != nil {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret)
			} else {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
			}
			r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials = types.StringValue(string(resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials))
			if resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken != nil {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken = types.StringValue(*resp.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken)
			} else {
				r.Configuration.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodAccessToken != nil {
			r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodAccessToken = &SourceZendeskChatAuthorizationMethodAccessToken{}
		}
		if resp.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceZendeskChatUpdateAuthorizationMethodOAuth20 = &SourceZendeskChatAuthorizationMethodOAuth20{}
		}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	if resp.Configuration.Subdomain != nil {
		r.Configuration.Subdomain = types.StringValue(*resp.Configuration.Subdomain)
	} else {
		r.Configuration.Subdomain = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceZendeskChatResourceModel) RefreshFromCreateResponse(resp *shared.SourceZendeskChatGetResponse) {
	r.RefreshFromGetResponse(resp)
}
