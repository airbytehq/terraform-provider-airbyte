// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceDatadogResourceModel) ToSharedSourceDatadogCreateRequest() *shared.SourceDatadogCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var applicationKey string
	applicationKey = r.Configuration.ApplicationKey.ValueString()

	query := new(string)
	if !r.Configuration.Query.IsUnknown() && !r.Configuration.Query.IsNull() {
		*query = r.Configuration.Query.ValueString()
	} else {
		query = nil
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	site := new(shared.Site)
	if !r.Configuration.Site.IsUnknown() && !r.Configuration.Site.IsNull() {
		*site = shared.Site(r.Configuration.Site.ValueString())
	} else {
		site = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	maxRecordsPerRequest := new(int64)
	if !r.Configuration.MaxRecordsPerRequest.IsUnknown() && !r.Configuration.MaxRecordsPerRequest.IsNull() {
		*maxRecordsPerRequest = r.Configuration.MaxRecordsPerRequest.ValueInt64()
	} else {
		maxRecordsPerRequest = nil
	}
	var queries []shared.Queries = []shared.Queries{}
	for _, queriesItem := range r.Configuration.Queries {
		var name1 string
		name1 = queriesItem.Name.ValueString()

		var query1 string
		query1 = queriesItem.Query.ValueString()

		dataSource := shared.DataSource(queriesItem.DataSource.ValueString())
		queries = append(queries, shared.Queries{
			Name:       name1,
			Query:      query1,
			DataSource: dataSource,
		})
	}
	configuration := shared.SourceDatadog{
		APIKey:               apiKey,
		ApplicationKey:       applicationKey,
		Query:                query,
		StartDate:            startDate,
		Site:                 site,
		EndDate:              endDate,
		MaxRecordsPerRequest: maxRecordsPerRequest,
		Queries:              queries,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceDatadogCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceDatadogResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceDatadogResourceModel) ToSharedSourceDatadogPutRequest() *shared.SourceDatadogPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var applicationKey string
	applicationKey = r.Configuration.ApplicationKey.ValueString()

	query := new(string)
	if !r.Configuration.Query.IsUnknown() && !r.Configuration.Query.IsNull() {
		*query = r.Configuration.Query.ValueString()
	} else {
		query = nil
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	site := new(shared.SourceDatadogUpdateSite)
	if !r.Configuration.Site.IsUnknown() && !r.Configuration.Site.IsNull() {
		*site = shared.SourceDatadogUpdateSite(r.Configuration.Site.ValueString())
	} else {
		site = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	maxRecordsPerRequest := new(int64)
	if !r.Configuration.MaxRecordsPerRequest.IsUnknown() && !r.Configuration.MaxRecordsPerRequest.IsNull() {
		*maxRecordsPerRequest = r.Configuration.MaxRecordsPerRequest.ValueInt64()
	} else {
		maxRecordsPerRequest = nil
	}
	var queries []shared.SourceDatadogUpdateQueries = []shared.SourceDatadogUpdateQueries{}
	for _, queriesItem := range r.Configuration.Queries {
		var name1 string
		name1 = queriesItem.Name.ValueString()

		var query1 string
		query1 = queriesItem.Query.ValueString()

		dataSource := shared.SourceDatadogUpdateDataSource(queriesItem.DataSource.ValueString())
		queries = append(queries, shared.SourceDatadogUpdateQueries{
			Name:       name1,
			Query:      query1,
			DataSource: dataSource,
		})
	}
	configuration := shared.SourceDatadogUpdate{
		APIKey:               apiKey,
		ApplicationKey:       applicationKey,
		Query:                query,
		StartDate:            startDate,
		Site:                 site,
		EndDate:              endDate,
		MaxRecordsPerRequest: maxRecordsPerRequest,
		Queries:              queries,
	}
	out := shared.SourceDatadogPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
