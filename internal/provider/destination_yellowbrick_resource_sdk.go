// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationYellowbrickResourceModel) ToSharedDestinationYellowbrickCreateRequest() *shared.DestinationYellowbrickCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationYellowbrickSSLModes
	if r.Configuration.SslMode != nil {
		var destinationYellowbrickDisable *shared.DestinationYellowbrickDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationYellowbrickDisable = &shared.DestinationYellowbrickDisable{}
		}
		if destinationYellowbrickDisable != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickDisable: destinationYellowbrickDisable,
			}
		}
		var destinationYellowbrickAllow *shared.DestinationYellowbrickAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationYellowbrickAllow = &shared.DestinationYellowbrickAllow{}
		}
		if destinationYellowbrickAllow != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickAllow: destinationYellowbrickAllow,
			}
		}
		var destinationYellowbrickPrefer *shared.DestinationYellowbrickPrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationYellowbrickPrefer = &shared.DestinationYellowbrickPrefer{}
		}
		if destinationYellowbrickPrefer != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickPrefer: destinationYellowbrickPrefer,
			}
		}
		var destinationYellowbrickRequire *shared.DestinationYellowbrickRequire
		if r.Configuration.SslMode.Require != nil {
			destinationYellowbrickRequire = &shared.DestinationYellowbrickRequire{}
		}
		if destinationYellowbrickRequire != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickRequire: destinationYellowbrickRequire,
			}
		}
		var destinationYellowbrickVerifyCa *shared.DestinationYellowbrickVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			destinationYellowbrickVerifyCa = &shared.DestinationYellowbrickVerifyCa{
				CaCertificate:     caCertificate,
				ClientKeyPassword: clientKeyPassword,
			}
		}
		if destinationYellowbrickVerifyCa != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickVerifyCa: destinationYellowbrickVerifyCa,
			}
		}
		var destinationYellowbrickVerifyFull *shared.DestinationYellowbrickVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate := r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			clientKey := r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			destinationYellowbrickVerifyFull = &shared.DestinationYellowbrickVerifyFull{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword1,
			}
		}
		if destinationYellowbrickVerifyFull != nil {
			sslMode = &shared.DestinationYellowbrickSSLModes{
				DestinationYellowbrickVerifyFull: destinationYellowbrickVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.DestinationYellowbrickSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationYellowbrickNoTunnel *shared.DestinationYellowbrickNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationYellowbrickNoTunnel = &shared.DestinationYellowbrickNoTunnel{}
		}
		if destinationYellowbrickNoTunnel != nil {
			tunnelMethod = &shared.DestinationYellowbrickSSHTunnelMethod{
				DestinationYellowbrickNoTunnel: destinationYellowbrickNoTunnel,
			}
		}
		var destinationYellowbrickSSHKeyAuthentication *shared.DestinationYellowbrickSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationYellowbrickSSHKeyAuthentication = &shared.DestinationYellowbrickSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationYellowbrickSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationYellowbrickSSHTunnelMethod{
				DestinationYellowbrickSSHKeyAuthentication: destinationYellowbrickSSHKeyAuthentication,
			}
		}
		var destinationYellowbrickPasswordAuthentication *shared.DestinationYellowbrickPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationYellowbrickPasswordAuthentication = &shared.DestinationYellowbrickPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationYellowbrickPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationYellowbrickSSHTunnelMethod{
				DestinationYellowbrickPasswordAuthentication: destinationYellowbrickPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationYellowbrick{
		Database:      database,
		Host:          host,
		JdbcURLParams: jdbcURLParams,
		Password:      password,
		Port:          port,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		TunnelMethod:  tunnelMethod,
		Username:      username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationYellowbrickCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationYellowbrickResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationYellowbrickResourceModel) ToSharedDestinationYellowbrickPutRequest() *shared.DestinationYellowbrickPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationYellowbrickUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var destinationYellowbrickUpdateDisable *shared.DestinationYellowbrickUpdateDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationYellowbrickUpdateDisable = &shared.DestinationYellowbrickUpdateDisable{}
		}
		if destinationYellowbrickUpdateDisable != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdateDisable: destinationYellowbrickUpdateDisable,
			}
		}
		var destinationYellowbrickUpdateAllow *shared.DestinationYellowbrickUpdateAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationYellowbrickUpdateAllow = &shared.DestinationYellowbrickUpdateAllow{}
		}
		if destinationYellowbrickUpdateAllow != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdateAllow: destinationYellowbrickUpdateAllow,
			}
		}
		var destinationYellowbrickUpdatePrefer *shared.DestinationYellowbrickUpdatePrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationYellowbrickUpdatePrefer = &shared.DestinationYellowbrickUpdatePrefer{}
		}
		if destinationYellowbrickUpdatePrefer != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdatePrefer: destinationYellowbrickUpdatePrefer,
			}
		}
		var destinationYellowbrickUpdateRequire *shared.DestinationYellowbrickUpdateRequire
		if r.Configuration.SslMode.Require != nil {
			destinationYellowbrickUpdateRequire = &shared.DestinationYellowbrickUpdateRequire{}
		}
		if destinationYellowbrickUpdateRequire != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdateRequire: destinationYellowbrickUpdateRequire,
			}
		}
		var destinationYellowbrickUpdateVerifyCa *shared.DestinationYellowbrickUpdateVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			destinationYellowbrickUpdateVerifyCa = &shared.DestinationYellowbrickUpdateVerifyCa{
				CaCertificate:     caCertificate,
				ClientKeyPassword: clientKeyPassword,
			}
		}
		if destinationYellowbrickUpdateVerifyCa != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdateVerifyCa: destinationYellowbrickUpdateVerifyCa,
			}
		}
		var destinationYellowbrickUpdateVerifyFull *shared.DestinationYellowbrickUpdateVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate := r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			clientKey := r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			destinationYellowbrickUpdateVerifyFull = &shared.DestinationYellowbrickUpdateVerifyFull{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword1,
			}
		}
		if destinationYellowbrickUpdateVerifyFull != nil {
			sslMode = &shared.DestinationYellowbrickUpdateSSLModes{
				DestinationYellowbrickUpdateVerifyFull: destinationYellowbrickUpdateVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.DestinationYellowbrickUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationYellowbrickUpdateNoTunnel *shared.DestinationYellowbrickUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationYellowbrickUpdateNoTunnel = &shared.DestinationYellowbrickUpdateNoTunnel{}
		}
		if destinationYellowbrickUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationYellowbrickUpdateSSHTunnelMethod{
				DestinationYellowbrickUpdateNoTunnel: destinationYellowbrickUpdateNoTunnel,
			}
		}
		var destinationYellowbrickUpdateSSHKeyAuthentication *shared.DestinationYellowbrickUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationYellowbrickUpdateSSHKeyAuthentication = &shared.DestinationYellowbrickUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationYellowbrickUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationYellowbrickUpdateSSHTunnelMethod{
				DestinationYellowbrickUpdateSSHKeyAuthentication: destinationYellowbrickUpdateSSHKeyAuthentication,
			}
		}
		var destinationYellowbrickUpdatePasswordAuthentication *shared.DestinationYellowbrickUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationYellowbrickUpdatePasswordAuthentication = &shared.DestinationYellowbrickUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationYellowbrickUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationYellowbrickUpdateSSHTunnelMethod{
				DestinationYellowbrickUpdatePasswordAuthentication: destinationYellowbrickUpdatePasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationYellowbrickUpdate{
		Database:      database,
		Host:          host,
		JdbcURLParams: jdbcURLParams,
		Password:      password,
		Port:          port,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		TunnelMethod:  tunnelMethod,
		Username:      username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationYellowbrickPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
