// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFileResourceModel) ToSharedSourceFileCreateRequest() *shared.SourceFileCreateRequest {
	datasetName := r.Configuration.DatasetName.ValueString()
	format := new(shared.SourceFileFileFormat)
	if !r.Configuration.Format.IsUnknown() && !r.Configuration.Format.IsNull() {
		*format = shared.SourceFileFileFormat(r.Configuration.Format.ValueString())
	} else {
		format = nil
	}
	var provider shared.SourceFileStorageProvider
	var sourceFileHTTPSPublicWeb *shared.SourceFileHTTPSPublicWeb
	if r.Configuration.Provider.HTTPSPublicWeb != nil {
		userAgent := new(bool)
		if !r.Configuration.Provider.HTTPSPublicWeb.UserAgent.IsUnknown() && !r.Configuration.Provider.HTTPSPublicWeb.UserAgent.IsNull() {
			*userAgent = r.Configuration.Provider.HTTPSPublicWeb.UserAgent.ValueBool()
		} else {
			userAgent = nil
		}
		sourceFileHTTPSPublicWeb = &shared.SourceFileHTTPSPublicWeb{
			UserAgent: userAgent,
		}
	}
	if sourceFileHTTPSPublicWeb != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileHTTPSPublicWeb: sourceFileHTTPSPublicWeb,
		}
	}
	var sourceFileGCSGoogleCloudStorage *shared.SourceFileGCSGoogleCloudStorage
	if r.Configuration.Provider.GCSGoogleCloudStorage != nil {
		serviceAccountJSON := new(string)
		if !r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.IsUnknown() && !r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.IsNull() {
			*serviceAccountJSON = r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.ValueString()
		} else {
			serviceAccountJSON = nil
		}
		sourceFileGCSGoogleCloudStorage = &shared.SourceFileGCSGoogleCloudStorage{
			ServiceAccountJSON: serviceAccountJSON,
		}
	}
	if sourceFileGCSGoogleCloudStorage != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileGCSGoogleCloudStorage: sourceFileGCSGoogleCloudStorage,
		}
	}
	var sourceFileS3AmazonWebServices *shared.SourceFileS3AmazonWebServices
	if r.Configuration.Provider.S3AmazonWebServices != nil {
		awsAccessKeyID := new(string)
		if !r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.IsNull() {
			*awsAccessKeyID = r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyID = nil
		}
		awsSecretAccessKey := new(string)
		if !r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey = r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey = nil
		}
		sourceFileS3AmazonWebServices = &shared.SourceFileS3AmazonWebServices{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if sourceFileS3AmazonWebServices != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileS3AmazonWebServices: sourceFileS3AmazonWebServices,
		}
	}
	var sourceFileAzBlobAzureBlobStorage *shared.SourceFileAzBlobAzureBlobStorage
	if r.Configuration.Provider.AzBlobAzureBlobStorage != nil {
		sasToken := new(string)
		if !r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.IsUnknown() && !r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.IsNull() {
			*sasToken = r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.ValueString()
		} else {
			sasToken = nil
		}
		sharedKey := new(string)
		if !r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.IsUnknown() && !r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.IsNull() {
			*sharedKey = r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.ValueString()
		} else {
			sharedKey = nil
		}
		storageAccount := r.Configuration.Provider.AzBlobAzureBlobStorage.StorageAccount.ValueString()
		sourceFileAzBlobAzureBlobStorage = &shared.SourceFileAzBlobAzureBlobStorage{
			SasToken:       sasToken,
			SharedKey:      sharedKey,
			StorageAccount: storageAccount,
		}
	}
	if sourceFileAzBlobAzureBlobStorage != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileAzBlobAzureBlobStorage: sourceFileAzBlobAzureBlobStorage,
		}
	}
	var sourceFileSSHSecureShell *shared.SourceFileSSHSecureShell
	if r.Configuration.Provider.SSHSecureShell != nil {
		host := r.Configuration.Provider.SSHSecureShell.Host.ValueString()
		password := new(string)
		if !r.Configuration.Provider.SSHSecureShell.Password.IsUnknown() && !r.Configuration.Provider.SSHSecureShell.Password.IsNull() {
			*password = r.Configuration.Provider.SSHSecureShell.Password.ValueString()
		} else {
			password = nil
		}
		port := new(string)
		if !r.Configuration.Provider.SSHSecureShell.Port.IsUnknown() && !r.Configuration.Provider.SSHSecureShell.Port.IsNull() {
			*port = r.Configuration.Provider.SSHSecureShell.Port.ValueString()
		} else {
			port = nil
		}
		user := r.Configuration.Provider.SSHSecureShell.User.ValueString()
		sourceFileSSHSecureShell = &shared.SourceFileSSHSecureShell{
			Host:     host,
			Password: password,
			Port:     port,
			User:     user,
		}
	}
	if sourceFileSSHSecureShell != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileSSHSecureShell: sourceFileSSHSecureShell,
		}
	}
	var sourceFileSCPSecureCopyProtocol *shared.SourceFileSCPSecureCopyProtocol
	if r.Configuration.Provider.SCPSecureCopyProtocol != nil {
		host1 := r.Configuration.Provider.SCPSecureCopyProtocol.Host.ValueString()
		password1 := new(string)
		if !r.Configuration.Provider.SCPSecureCopyProtocol.Password.IsUnknown() && !r.Configuration.Provider.SCPSecureCopyProtocol.Password.IsNull() {
			*password1 = r.Configuration.Provider.SCPSecureCopyProtocol.Password.ValueString()
		} else {
			password1 = nil
		}
		port1 := new(string)
		if !r.Configuration.Provider.SCPSecureCopyProtocol.Port.IsUnknown() && !r.Configuration.Provider.SCPSecureCopyProtocol.Port.IsNull() {
			*port1 = r.Configuration.Provider.SCPSecureCopyProtocol.Port.ValueString()
		} else {
			port1 = nil
		}
		user1 := r.Configuration.Provider.SCPSecureCopyProtocol.User.ValueString()
		sourceFileSCPSecureCopyProtocol = &shared.SourceFileSCPSecureCopyProtocol{
			Host:     host1,
			Password: password1,
			Port:     port1,
			User:     user1,
		}
	}
	if sourceFileSCPSecureCopyProtocol != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileSCPSecureCopyProtocol: sourceFileSCPSecureCopyProtocol,
		}
	}
	var sourceFileSFTPSecureFileTransferProtocol *shared.SourceFileSFTPSecureFileTransferProtocol
	if r.Configuration.Provider.SFTPSecureFileTransferProtocol != nil {
		host2 := r.Configuration.Provider.SFTPSecureFileTransferProtocol.Host.ValueString()
		password2 := new(string)
		if !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.IsUnknown() && !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.IsNull() {
			*password2 = r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.ValueString()
		} else {
			password2 = nil
		}
		port2 := new(string)
		if !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.IsUnknown() && !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.IsNull() {
			*port2 = r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.ValueString()
		} else {
			port2 = nil
		}
		user2 := r.Configuration.Provider.SFTPSecureFileTransferProtocol.User.ValueString()
		sourceFileSFTPSecureFileTransferProtocol = &shared.SourceFileSFTPSecureFileTransferProtocol{
			Host:     host2,
			Password: password2,
			Port:     port2,
			User:     user2,
		}
	}
	if sourceFileSFTPSecureFileTransferProtocol != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileSFTPSecureFileTransferProtocol: sourceFileSFTPSecureFileTransferProtocol,
		}
	}
	var sourceFileLocalFilesystemLimited *shared.SourceFileLocalFilesystemLimited
	if r.Configuration.Provider.LocalFilesystemLimited != nil {
		sourceFileLocalFilesystemLimited = &shared.SourceFileLocalFilesystemLimited{}
	}
	if sourceFileLocalFilesystemLimited != nil {
		provider = shared.SourceFileStorageProvider{
			SourceFileLocalFilesystemLimited: sourceFileLocalFilesystemLimited,
		}
	}
	readerOptions := new(string)
	if !r.Configuration.ReaderOptions.IsUnknown() && !r.Configuration.ReaderOptions.IsNull() {
		*readerOptions = r.Configuration.ReaderOptions.ValueString()
	} else {
		readerOptions = nil
	}
	url := r.Configuration.URL.ValueString()
	configuration := shared.SourceFile{
		DatasetName:   datasetName,
		Format:        format,
		Provider:      provider,
		ReaderOptions: readerOptions,
		URL:           url,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFileCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFileResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFileResourceModel) ToSharedSourceFilePutRequest() *shared.SourceFilePutRequest {
	datasetName := r.Configuration.DatasetName.ValueString()
	format := new(shared.FileFormat)
	if !r.Configuration.Format.IsUnknown() && !r.Configuration.Format.IsNull() {
		*format = shared.FileFormat(r.Configuration.Format.ValueString())
	} else {
		format = nil
	}
	var provider shared.StorageProvider
	var httpsPublicWeb *shared.HTTPSPublicWeb
	if r.Configuration.Provider.HTTPSPublicWeb != nil {
		userAgent := new(bool)
		if !r.Configuration.Provider.HTTPSPublicWeb.UserAgent.IsUnknown() && !r.Configuration.Provider.HTTPSPublicWeb.UserAgent.IsNull() {
			*userAgent = r.Configuration.Provider.HTTPSPublicWeb.UserAgent.ValueBool()
		} else {
			userAgent = nil
		}
		httpsPublicWeb = &shared.HTTPSPublicWeb{
			UserAgent: userAgent,
		}
	}
	if httpsPublicWeb != nil {
		provider = shared.StorageProvider{
			HTTPSPublicWeb: httpsPublicWeb,
		}
	}
	var gcsGoogleCloudStorage *shared.GCSGoogleCloudStorage
	if r.Configuration.Provider.GCSGoogleCloudStorage != nil {
		serviceAccountJSON := new(string)
		if !r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.IsUnknown() && !r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.IsNull() {
			*serviceAccountJSON = r.Configuration.Provider.GCSGoogleCloudStorage.ServiceAccountJSON.ValueString()
		} else {
			serviceAccountJSON = nil
		}
		gcsGoogleCloudStorage = &shared.GCSGoogleCloudStorage{
			ServiceAccountJSON: serviceAccountJSON,
		}
	}
	if gcsGoogleCloudStorage != nil {
		provider = shared.StorageProvider{
			GCSGoogleCloudStorage: gcsGoogleCloudStorage,
		}
	}
	var s3AmazonWebServices *shared.S3AmazonWebServices
	if r.Configuration.Provider.S3AmazonWebServices != nil {
		awsAccessKeyID := new(string)
		if !r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.IsNull() {
			*awsAccessKeyID = r.Configuration.Provider.S3AmazonWebServices.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyID = nil
		}
		awsSecretAccessKey := new(string)
		if !r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey = r.Configuration.Provider.S3AmazonWebServices.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey = nil
		}
		s3AmazonWebServices = &shared.S3AmazonWebServices{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if s3AmazonWebServices != nil {
		provider = shared.StorageProvider{
			S3AmazonWebServices: s3AmazonWebServices,
		}
	}
	var azBlobAzureBlobStorage *shared.AzBlobAzureBlobStorage
	if r.Configuration.Provider.AzBlobAzureBlobStorage != nil {
		sasToken := new(string)
		if !r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.IsUnknown() && !r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.IsNull() {
			*sasToken = r.Configuration.Provider.AzBlobAzureBlobStorage.SasToken.ValueString()
		} else {
			sasToken = nil
		}
		sharedKey := new(string)
		if !r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.IsUnknown() && !r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.IsNull() {
			*sharedKey = r.Configuration.Provider.AzBlobAzureBlobStorage.SharedKey.ValueString()
		} else {
			sharedKey = nil
		}
		storageAccount := r.Configuration.Provider.AzBlobAzureBlobStorage.StorageAccount.ValueString()
		azBlobAzureBlobStorage = &shared.AzBlobAzureBlobStorage{
			SasToken:       sasToken,
			SharedKey:      sharedKey,
			StorageAccount: storageAccount,
		}
	}
	if azBlobAzureBlobStorage != nil {
		provider = shared.StorageProvider{
			AzBlobAzureBlobStorage: azBlobAzureBlobStorage,
		}
	}
	var sshSecureShell *shared.SSHSecureShell
	if r.Configuration.Provider.SSHSecureShell != nil {
		host := r.Configuration.Provider.SSHSecureShell.Host.ValueString()
		password := new(string)
		if !r.Configuration.Provider.SSHSecureShell.Password.IsUnknown() && !r.Configuration.Provider.SSHSecureShell.Password.IsNull() {
			*password = r.Configuration.Provider.SSHSecureShell.Password.ValueString()
		} else {
			password = nil
		}
		port := new(string)
		if !r.Configuration.Provider.SSHSecureShell.Port.IsUnknown() && !r.Configuration.Provider.SSHSecureShell.Port.IsNull() {
			*port = r.Configuration.Provider.SSHSecureShell.Port.ValueString()
		} else {
			port = nil
		}
		user := r.Configuration.Provider.SSHSecureShell.User.ValueString()
		sshSecureShell = &shared.SSHSecureShell{
			Host:     host,
			Password: password,
			Port:     port,
			User:     user,
		}
	}
	if sshSecureShell != nil {
		provider = shared.StorageProvider{
			SSHSecureShell: sshSecureShell,
		}
	}
	var scpSecureCopyProtocol *shared.SCPSecureCopyProtocol
	if r.Configuration.Provider.SCPSecureCopyProtocol != nil {
		host1 := r.Configuration.Provider.SCPSecureCopyProtocol.Host.ValueString()
		password1 := new(string)
		if !r.Configuration.Provider.SCPSecureCopyProtocol.Password.IsUnknown() && !r.Configuration.Provider.SCPSecureCopyProtocol.Password.IsNull() {
			*password1 = r.Configuration.Provider.SCPSecureCopyProtocol.Password.ValueString()
		} else {
			password1 = nil
		}
		port1 := new(string)
		if !r.Configuration.Provider.SCPSecureCopyProtocol.Port.IsUnknown() && !r.Configuration.Provider.SCPSecureCopyProtocol.Port.IsNull() {
			*port1 = r.Configuration.Provider.SCPSecureCopyProtocol.Port.ValueString()
		} else {
			port1 = nil
		}
		user1 := r.Configuration.Provider.SCPSecureCopyProtocol.User.ValueString()
		scpSecureCopyProtocol = &shared.SCPSecureCopyProtocol{
			Host:     host1,
			Password: password1,
			Port:     port1,
			User:     user1,
		}
	}
	if scpSecureCopyProtocol != nil {
		provider = shared.StorageProvider{
			SCPSecureCopyProtocol: scpSecureCopyProtocol,
		}
	}
	var sftpSecureFileTransferProtocol *shared.SFTPSecureFileTransferProtocol
	if r.Configuration.Provider.SFTPSecureFileTransferProtocol != nil {
		host2 := r.Configuration.Provider.SFTPSecureFileTransferProtocol.Host.ValueString()
		password2 := new(string)
		if !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.IsUnknown() && !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.IsNull() {
			*password2 = r.Configuration.Provider.SFTPSecureFileTransferProtocol.Password.ValueString()
		} else {
			password2 = nil
		}
		port2 := new(string)
		if !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.IsUnknown() && !r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.IsNull() {
			*port2 = r.Configuration.Provider.SFTPSecureFileTransferProtocol.Port.ValueString()
		} else {
			port2 = nil
		}
		user2 := r.Configuration.Provider.SFTPSecureFileTransferProtocol.User.ValueString()
		sftpSecureFileTransferProtocol = &shared.SFTPSecureFileTransferProtocol{
			Host:     host2,
			Password: password2,
			Port:     port2,
			User:     user2,
		}
	}
	if sftpSecureFileTransferProtocol != nil {
		provider = shared.StorageProvider{
			SFTPSecureFileTransferProtocol: sftpSecureFileTransferProtocol,
		}
	}
	var localFilesystemLimited *shared.LocalFilesystemLimited
	if r.Configuration.Provider.LocalFilesystemLimited != nil {
		localFilesystemLimited = &shared.LocalFilesystemLimited{}
	}
	if localFilesystemLimited != nil {
		provider = shared.StorageProvider{
			LocalFilesystemLimited: localFilesystemLimited,
		}
	}
	readerOptions := new(string)
	if !r.Configuration.ReaderOptions.IsUnknown() && !r.Configuration.ReaderOptions.IsNull() {
		*readerOptions = r.Configuration.ReaderOptions.ValueString()
	} else {
		readerOptions = nil
	}
	url := r.Configuration.URL.ValueString()
	configuration := shared.SourceFileUpdate{
		DatasetName:   datasetName,
		Format:        format,
		Provider:      provider,
		ReaderOptions: readerOptions,
		URL:           url,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFilePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
