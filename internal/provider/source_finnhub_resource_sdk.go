// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceFinnhubResourceModel) ToSharedSourceFinnhubCreateRequest() *shared.SourceFinnhubCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbols []interface{} = []interface{}{}
	for _, symbolsItem := range r.Configuration.Symbols {
		var symbolsTmp interface{}
		_ = json.Unmarshal([]byte(symbolsItem.ValueString()), &symbolsTmp)
		symbols = append(symbols, symbolsTmp)
	}
	marketNewsCategory := new(shared.MarketNewsCategory)
	if !r.Configuration.MarketNewsCategory.IsUnknown() && !r.Configuration.MarketNewsCategory.IsNull() {
		*marketNewsCategory = shared.MarketNewsCategory(r.Configuration.MarketNewsCategory.ValueString())
	} else {
		marketNewsCategory = nil
	}
	exchange := new(string)
	if !r.Configuration.Exchange.IsUnknown() && !r.Configuration.Exchange.IsNull() {
		*exchange = r.Configuration.Exchange.ValueString()
	} else {
		exchange = nil
	}
	startDate2, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate2.ValueString())
	configuration := shared.SourceFinnhub{
		APIKey:             apiKey,
		Symbols:            symbols,
		MarketNewsCategory: marketNewsCategory,
		Exchange:           exchange,
		StartDate2:         startDate2,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceFinnhubCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceFinnhubResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFinnhubResourceModel) ToSharedSourceFinnhubPutRequest() *shared.SourceFinnhubPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbols []interface{} = []interface{}{}
	for _, symbolsItem := range r.Configuration.Symbols {
		var symbolsTmp interface{}
		_ = json.Unmarshal([]byte(symbolsItem.ValueString()), &symbolsTmp)
		symbols = append(symbols, symbolsTmp)
	}
	marketNewsCategory := new(shared.SourceFinnhubUpdateMarketNewsCategory)
	if !r.Configuration.MarketNewsCategory.IsUnknown() && !r.Configuration.MarketNewsCategory.IsNull() {
		*marketNewsCategory = shared.SourceFinnhubUpdateMarketNewsCategory(r.Configuration.MarketNewsCategory.ValueString())
	} else {
		marketNewsCategory = nil
	}
	exchange := new(string)
	if !r.Configuration.Exchange.IsUnknown() && !r.Configuration.Exchange.IsNull() {
		*exchange = r.Configuration.Exchange.ValueString()
	} else {
		exchange = nil
	}
	startDate2, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate2.ValueString())
	configuration := shared.SourceFinnhubUpdate{
		APIKey:             apiKey,
		Symbols:            symbols,
		MarketNewsCategory: marketNewsCategory,
		Exchange:           exchange,
		StartDate2:         startDate2,
	}
	out := shared.SourceFinnhubPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
