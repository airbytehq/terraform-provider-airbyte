// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceBabelforceResourceModel) ToSharedSourceBabelforceCreateRequest() *shared.SourceBabelforceCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accessKeyID string
	accessKeyID = r.Configuration.AccessKeyID.ValueString()

	var accessToken string
	accessToken = r.Configuration.AccessToken.ValueString()

	dateCreatedFrom := new(int64)
	if !r.Configuration.DateCreatedFrom.IsUnknown() && !r.Configuration.DateCreatedFrom.IsNull() {
		*dateCreatedFrom = r.Configuration.DateCreatedFrom.ValueInt64()
	} else {
		dateCreatedFrom = nil
	}
	dateCreatedTo := new(int64)
	if !r.Configuration.DateCreatedTo.IsUnknown() && !r.Configuration.DateCreatedTo.IsNull() {
		*dateCreatedTo = r.Configuration.DateCreatedTo.ValueInt64()
	} else {
		dateCreatedTo = nil
	}
	region := new(shared.SourceBabelforceRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceBabelforceRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	configuration := shared.SourceBabelforce{
		AccessKeyID:     accessKeyID,
		AccessToken:     accessToken,
		DateCreatedFrom: dateCreatedFrom,
		DateCreatedTo:   dateCreatedTo,
		Region:          region,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceBabelforceCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceBabelforceResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceBabelforceResourceModel) ToSharedSourceBabelforcePutRequest() *shared.SourceBabelforcePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accessKeyID string
	accessKeyID = r.Configuration.AccessKeyID.ValueString()

	var accessToken string
	accessToken = r.Configuration.AccessToken.ValueString()

	dateCreatedFrom := new(int64)
	if !r.Configuration.DateCreatedFrom.IsUnknown() && !r.Configuration.DateCreatedFrom.IsNull() {
		*dateCreatedFrom = r.Configuration.DateCreatedFrom.ValueInt64()
	} else {
		dateCreatedFrom = nil
	}
	dateCreatedTo := new(int64)
	if !r.Configuration.DateCreatedTo.IsUnknown() && !r.Configuration.DateCreatedTo.IsNull() {
		*dateCreatedTo = r.Configuration.DateCreatedTo.ValueInt64()
	} else {
		dateCreatedTo = nil
	}
	region := new(shared.SourceBabelforceUpdateRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceBabelforceUpdateRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	configuration := shared.SourceBabelforceUpdate{
		AccessKeyID:     accessKeyID,
		AccessToken:     accessToken,
		DateCreatedFrom: dateCreatedFrom,
		DateCreatedTo:   dateCreatedTo,
		Region:          region,
	}
	out := shared.SourceBabelforcePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
