// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceRedditResourceModel) ToSharedSourceRedditCreateRequest() *shared.SourceRedditCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	exact := new(bool)
	if !r.Configuration.Exact.IsUnknown() && !r.Configuration.Exact.IsNull() {
		*exact = r.Configuration.Exact.ValueBool()
	} else {
		exact = nil
	}
	includeOver18 := new(bool)
	if !r.Configuration.IncludeOver18.IsUnknown() && !r.Configuration.IncludeOver18.IsNull() {
		*includeOver18 = r.Configuration.IncludeOver18.ValueBool()
	} else {
		includeOver18 = nil
	}
	limit := new(float64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit, _ = r.Configuration.Limit.ValueBigFloat().Float64()
	} else {
		limit = nil
	}
	query := new(string)
	if !r.Configuration.Query.IsUnknown() && !r.Configuration.Query.IsNull() {
		*query = r.Configuration.Query.ValueString()
	} else {
		query = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var subreddits []interface{} = []interface{}{}
	for _, subredditsItem := range r.Configuration.Subreddits {
		var subredditsTmp interface{}
		_ = json.Unmarshal([]byte(subredditsItem.ValueString()), &subredditsTmp)
		subreddits = append(subreddits, subredditsTmp)
	}
	configuration := shared.SourceReddit{
		APIKey:        apiKey,
		Exact:         exact,
		IncludeOver18: includeOver18,
		Limit:         limit,
		Query:         query,
		StartDate:     startDate,
		Subreddits:    subreddits,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceRedditCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceRedditResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceRedditResourceModel) ToSharedSourceRedditPutRequest() *shared.SourceRedditPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	exact := new(bool)
	if !r.Configuration.Exact.IsUnknown() && !r.Configuration.Exact.IsNull() {
		*exact = r.Configuration.Exact.ValueBool()
	} else {
		exact = nil
	}
	includeOver18 := new(bool)
	if !r.Configuration.IncludeOver18.IsUnknown() && !r.Configuration.IncludeOver18.IsNull() {
		*includeOver18 = r.Configuration.IncludeOver18.ValueBool()
	} else {
		includeOver18 = nil
	}
	limit := new(float64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit, _ = r.Configuration.Limit.ValueBigFloat().Float64()
	} else {
		limit = nil
	}
	query := new(string)
	if !r.Configuration.Query.IsUnknown() && !r.Configuration.Query.IsNull() {
		*query = r.Configuration.Query.ValueString()
	} else {
		query = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var subreddits []interface{} = []interface{}{}
	for _, subredditsItem := range r.Configuration.Subreddits {
		var subredditsTmp interface{}
		_ = json.Unmarshal([]byte(subredditsItem.ValueString()), &subredditsTmp)
		subreddits = append(subreddits, subredditsTmp)
	}
	configuration := shared.SourceRedditUpdate{
		APIKey:        apiKey,
		Exact:         exact,
		IncludeOver18: includeOver18,
		Limit:         limit,
		Query:         query,
		StartDate:     startDate,
		Subreddits:    subreddits,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceRedditPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
