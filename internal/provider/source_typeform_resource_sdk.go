// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceTypeformResourceModel) ToSharedSourceTypeformCreateRequest() *shared.SourceTypeformCreateRequest {
	var credentials shared.SourceTypeformAuthorizationMethod
	var sourceTypeformOAuth20 *shared.SourceTypeformOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
		clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTypeformOAuth20 = &shared.SourceTypeformOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTypeformOAuth20 != nil {
		credentials = shared.SourceTypeformAuthorizationMethod{
			SourceTypeformOAuth20: sourceTypeformOAuth20,
		}
	}
	var sourceTypeformPrivateToken *shared.SourceTypeformPrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		accessToken1 := r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()
		sourceTypeformPrivateToken = &shared.SourceTypeformPrivateToken{
			AccessToken: accessToken1,
		}
	}
	if sourceTypeformPrivateToken != nil {
		credentials = shared.SourceTypeformAuthorizationMethod{
			SourceTypeformPrivateToken: sourceTypeformPrivateToken,
		}
	}
	var formIds []string = []string{}
	for _, formIdsItem := range r.Configuration.FormIds {
		formIds = append(formIds, formIdsItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTypeform{
		Credentials: credentials,
		FormIds:     formIds,
		StartDate:   startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTypeformCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceTypeformResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceTypeformResourceModel) ToSharedSourceTypeformPutRequest() *shared.SourceTypeformPutRequest {
	var credentials shared.SourceTypeformUpdateAuthorizationMethod
	var sourceTypeformUpdateOAuth20 *shared.SourceTypeformUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
		clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTypeformUpdateOAuth20 = &shared.SourceTypeformUpdateOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTypeformUpdateOAuth20 != nil {
		credentials = shared.SourceTypeformUpdateAuthorizationMethod{
			SourceTypeformUpdateOAuth20: sourceTypeformUpdateOAuth20,
		}
	}
	var sourceTypeformUpdatePrivateToken *shared.SourceTypeformUpdatePrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		accessToken1 := r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()
		sourceTypeformUpdatePrivateToken = &shared.SourceTypeformUpdatePrivateToken{
			AccessToken: accessToken1,
		}
	}
	if sourceTypeformUpdatePrivateToken != nil {
		credentials = shared.SourceTypeformUpdateAuthorizationMethod{
			SourceTypeformUpdatePrivateToken: sourceTypeformUpdatePrivateToken,
		}
	}
	var formIds []string = []string{}
	for _, formIdsItem := range r.Configuration.FormIds {
		formIds = append(formIds, formIdsItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTypeformUpdate{
		Credentials: credentials,
		FormIds:     formIds,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTypeformPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
