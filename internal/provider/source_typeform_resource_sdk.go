// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceTypeformResourceModel) ToSharedSourceTypeformCreateRequest() *shared.SourceTypeformCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceTypeformAuthorizationMethod
	var sourceTypeformOAuth20 *shared.SourceTypeformOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTypeformOAuth20 = &shared.SourceTypeformOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTypeformOAuth20 != nil {
		credentials = shared.SourceTypeformAuthorizationMethod{
			SourceTypeformOAuth20: sourceTypeformOAuth20,
		}
	}
	var sourceTypeformPrivateToken *shared.SourceTypeformPrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()

		sourceTypeformPrivateToken = &shared.SourceTypeformPrivateToken{
			AccessToken: accessToken1,
		}
	}
	if sourceTypeformPrivateToken != nil {
		credentials = shared.SourceTypeformAuthorizationMethod{
			SourceTypeformPrivateToken: sourceTypeformPrivateToken,
		}
	}
	var formIds []string = []string{}
	for _, formIdsItem := range r.Configuration.FormIds {
		formIds = append(formIds, formIdsItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTypeform{
		Credentials: credentials,
		FormIds:     formIds,
		StartDate:   startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceTypeformCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceTypeformResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceTypeformResourceModel) ToSharedSourceTypeformPutRequest() *shared.SourceTypeformPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceTypeformUpdateAuthorizationMethod
	var sourceTypeformUpdateOAuth20 *shared.SourceTypeformUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTypeformUpdateOAuth20 = &shared.SourceTypeformUpdateOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTypeformUpdateOAuth20 != nil {
		credentials = shared.SourceTypeformUpdateAuthorizationMethod{
			SourceTypeformUpdateOAuth20: sourceTypeformUpdateOAuth20,
		}
	}
	var sourceTypeformUpdatePrivateToken *shared.SourceTypeformUpdatePrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()

		sourceTypeformUpdatePrivateToken = &shared.SourceTypeformUpdatePrivateToken{
			AccessToken: accessToken1,
		}
	}
	if sourceTypeformUpdatePrivateToken != nil {
		credentials = shared.SourceTypeformUpdateAuthorizationMethod{
			SourceTypeformUpdatePrivateToken: sourceTypeformUpdatePrivateToken,
		}
	}
	var formIds []string = []string{}
	for _, formIdsItem := range r.Configuration.FormIds {
		formIds = append(formIds, formIdsItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTypeformUpdate{
		Credentials: credentials,
		FormIds:     formIds,
		StartDate:   startDate,
	}
	out := shared.SourceTypeformPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
