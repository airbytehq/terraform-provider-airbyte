// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceOutbrainAmplifyResourceModel) ToSharedSourceOutbrainAmplifyCreateRequest() *shared.SourceOutbrainAmplifyCreateRequest {
	var credentials shared.SourceOutbrainAmplifyAuthenticationMethod
	var sourceOutbrainAmplifyAccessToken *shared.SourceOutbrainAmplifyAccessToken
	if r.Configuration.Credentials.AccessToken != nil {
		accessToken := r.Configuration.Credentials.AccessToken.AccessToken.ValueString()
		sourceOutbrainAmplifyAccessToken = &shared.SourceOutbrainAmplifyAccessToken{
			AccessToken: accessToken,
		}
	}
	if sourceOutbrainAmplifyAccessToken != nil {
		credentials = shared.SourceOutbrainAmplifyAuthenticationMethod{
			SourceOutbrainAmplifyAccessToken: sourceOutbrainAmplifyAccessToken,
		}
	}
	var sourceOutbrainAmplifyUsernamePassword *shared.SourceOutbrainAmplifyUsernamePassword
	if r.Configuration.Credentials.UsernamePassword != nil {
		password := r.Configuration.Credentials.UsernamePassword.Password.ValueString()
		username := r.Configuration.Credentials.UsernamePassword.Username.ValueString()
		sourceOutbrainAmplifyUsernamePassword = &shared.SourceOutbrainAmplifyUsernamePassword{
			Password: password,
			Username: username,
		}
	}
	if sourceOutbrainAmplifyUsernamePassword != nil {
		credentials = shared.SourceOutbrainAmplifyAuthenticationMethod{
			SourceOutbrainAmplifyUsernamePassword: sourceOutbrainAmplifyUsernamePassword,
		}
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	geoLocationBreakdown := new(shared.SourceOutbrainAmplifyGranularityForGeoLocationRegion)
	if !r.Configuration.GeoLocationBreakdown.IsUnknown() && !r.Configuration.GeoLocationBreakdown.IsNull() {
		*geoLocationBreakdown = shared.SourceOutbrainAmplifyGranularityForGeoLocationRegion(r.Configuration.GeoLocationBreakdown.ValueString())
	} else {
		geoLocationBreakdown = nil
	}
	reportGranularity := new(shared.SourceOutbrainAmplifyGranularityForPeriodicReports)
	if !r.Configuration.ReportGranularity.IsUnknown() && !r.Configuration.ReportGranularity.IsNull() {
		*reportGranularity = shared.SourceOutbrainAmplifyGranularityForPeriodicReports(r.Configuration.ReportGranularity.ValueString())
	} else {
		reportGranularity = nil
	}
	startDate := r.Configuration.StartDate.ValueString()
	configuration := shared.SourceOutbrainAmplify{
		Credentials:          credentials,
		EndDate:              endDate,
		GeoLocationBreakdown: geoLocationBreakdown,
		ReportGranularity:    reportGranularity,
		StartDate:            startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOutbrainAmplifyCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceOutbrainAmplifyResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceOutbrainAmplifyResourceModel) ToSharedSourceOutbrainAmplifyPutRequest() *shared.SourceOutbrainAmplifyPutRequest {
	var credentials shared.SourceOutbrainAmplifyUpdateAuthenticationMethod
	var sourceOutbrainAmplifyUpdateAccessToken *shared.SourceOutbrainAmplifyUpdateAccessToken
	if r.Configuration.Credentials.AccessToken != nil {
		accessToken := r.Configuration.Credentials.AccessToken.AccessToken.ValueString()
		sourceOutbrainAmplifyUpdateAccessToken = &shared.SourceOutbrainAmplifyUpdateAccessToken{
			AccessToken: accessToken,
		}
	}
	if sourceOutbrainAmplifyUpdateAccessToken != nil {
		credentials = shared.SourceOutbrainAmplifyUpdateAuthenticationMethod{
			SourceOutbrainAmplifyUpdateAccessToken: sourceOutbrainAmplifyUpdateAccessToken,
		}
	}
	var sourceOutbrainAmplifyUpdateUsernamePassword *shared.SourceOutbrainAmplifyUpdateUsernamePassword
	if r.Configuration.Credentials.UsernamePassword != nil {
		password := r.Configuration.Credentials.UsernamePassword.Password.ValueString()
		username := r.Configuration.Credentials.UsernamePassword.Username.ValueString()
		sourceOutbrainAmplifyUpdateUsernamePassword = &shared.SourceOutbrainAmplifyUpdateUsernamePassword{
			Password: password,
			Username: username,
		}
	}
	if sourceOutbrainAmplifyUpdateUsernamePassword != nil {
		credentials = shared.SourceOutbrainAmplifyUpdateAuthenticationMethod{
			SourceOutbrainAmplifyUpdateUsernamePassword: sourceOutbrainAmplifyUpdateUsernamePassword,
		}
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	geoLocationBreakdown := new(shared.GranularityForGeoLocationRegion)
	if !r.Configuration.GeoLocationBreakdown.IsUnknown() && !r.Configuration.GeoLocationBreakdown.IsNull() {
		*geoLocationBreakdown = shared.GranularityForGeoLocationRegion(r.Configuration.GeoLocationBreakdown.ValueString())
	} else {
		geoLocationBreakdown = nil
	}
	reportGranularity := new(shared.GranularityForPeriodicReports)
	if !r.Configuration.ReportGranularity.IsUnknown() && !r.Configuration.ReportGranularity.IsNull() {
		*reportGranularity = shared.GranularityForPeriodicReports(r.Configuration.ReportGranularity.ValueString())
	} else {
		reportGranularity = nil
	}
	startDate := r.Configuration.StartDate.ValueString()
	configuration := shared.SourceOutbrainAmplifyUpdate{
		Credentials:          credentials,
		EndDate:              endDate,
		GeoLocationBreakdown: geoLocationBreakdown,
		ReportGranularity:    reportGranularity,
		StartDate:            startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOutbrainAmplifyPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
