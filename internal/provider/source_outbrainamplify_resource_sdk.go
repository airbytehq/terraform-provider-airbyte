// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceOutbrainAmplifyResourceModel) ToSharedSourceOutbrainAmplifyCreateRequest(ctx context.Context) (*shared.SourceOutbrainAmplifyCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceOutbrainAmplifyAuthenticationMethod
	var sourceOutbrainAmplifyAccessToken *shared.SourceOutbrainAmplifyAccessToken
	if r.Configuration.Credentials.AccessToken != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.AccessToken.AccessToken.ValueString()

		sourceOutbrainAmplifyAccessToken = &shared.SourceOutbrainAmplifyAccessToken{
			AccessToken: accessToken,
		}
	}
	if sourceOutbrainAmplifyAccessToken != nil {
		credentials = shared.SourceOutbrainAmplifyAuthenticationMethod{
			SourceOutbrainAmplifyAccessToken: sourceOutbrainAmplifyAccessToken,
		}
	}
	var usernamePassword *shared.UsernamePassword
	if r.Configuration.Credentials.UsernamePassword != nil {
		var username string
		username = r.Configuration.Credentials.UsernamePassword.Username.ValueString()

		var password string
		password = r.Configuration.Credentials.UsernamePassword.Password.ValueString()

		usernamePassword = &shared.UsernamePassword{
			Username: username,
			Password: password,
		}
	}
	if usernamePassword != nil {
		credentials = shared.SourceOutbrainAmplifyAuthenticationMethod{
			UsernamePassword: usernamePassword,
		}
	}
	reportGranularity := new(shared.GranularityForPeriodicReports)
	if !r.Configuration.ReportGranularity.IsUnknown() && !r.Configuration.ReportGranularity.IsNull() {
		*reportGranularity = shared.GranularityForPeriodicReports(r.Configuration.ReportGranularity.ValueString())
	} else {
		reportGranularity = nil
	}
	geoLocationBreakdown := new(shared.GranularityForGeoLocationRegion)
	if !r.Configuration.GeoLocationBreakdown.IsUnknown() && !r.Configuration.GeoLocationBreakdown.IsNull() {
		*geoLocationBreakdown = shared.GranularityForGeoLocationRegion(r.Configuration.GeoLocationBreakdown.ValueString())
	} else {
		geoLocationBreakdown = nil
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	conversionCount := new(shared.DefinitionOfConversionCountInReports)
	if !r.Configuration.ConversionCount.IsUnknown() && !r.Configuration.ConversionCount.IsNull() {
		*conversionCount = shared.DefinitionOfConversionCountInReports(r.Configuration.ConversionCount.ValueString())
	} else {
		conversionCount = nil
	}
	configuration := shared.SourceOutbrainAmplify{
		Credentials:          credentials,
		ReportGranularity:    reportGranularity,
		GeoLocationBreakdown: geoLocationBreakdown,
		StartDate:            startDate,
		EndDate:              endDate,
		ConversionCount:      conversionCount,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceOutbrainAmplifyCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceOutbrainAmplifyResourceModel) ToSharedSourceOutbrainAmplifyPutRequest(ctx context.Context) (*shared.SourceOutbrainAmplifyPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceOutbrainAmplifyUpdateAuthenticationMethod
	var sourceOutbrainAmplifyUpdateAccessToken *shared.SourceOutbrainAmplifyUpdateAccessToken
	if r.Configuration.Credentials.AccessToken != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.AccessToken.AccessToken.ValueString()

		sourceOutbrainAmplifyUpdateAccessToken = &shared.SourceOutbrainAmplifyUpdateAccessToken{
			AccessToken: accessToken,
		}
	}
	if sourceOutbrainAmplifyUpdateAccessToken != nil {
		credentials = shared.SourceOutbrainAmplifyUpdateAuthenticationMethod{
			SourceOutbrainAmplifyUpdateAccessToken: sourceOutbrainAmplifyUpdateAccessToken,
		}
	}
	var sourceOutbrainAmplifyUpdateUsernamePassword *shared.SourceOutbrainAmplifyUpdateUsernamePassword
	if r.Configuration.Credentials.UsernamePassword != nil {
		var username string
		username = r.Configuration.Credentials.UsernamePassword.Username.ValueString()

		var password string
		password = r.Configuration.Credentials.UsernamePassword.Password.ValueString()

		sourceOutbrainAmplifyUpdateUsernamePassword = &shared.SourceOutbrainAmplifyUpdateUsernamePassword{
			Username: username,
			Password: password,
		}
	}
	if sourceOutbrainAmplifyUpdateUsernamePassword != nil {
		credentials = shared.SourceOutbrainAmplifyUpdateAuthenticationMethod{
			SourceOutbrainAmplifyUpdateUsernamePassword: sourceOutbrainAmplifyUpdateUsernamePassword,
		}
	}
	reportGranularity := new(shared.SourceOutbrainAmplifyUpdateGranularityForPeriodicReports)
	if !r.Configuration.ReportGranularity.IsUnknown() && !r.Configuration.ReportGranularity.IsNull() {
		*reportGranularity = shared.SourceOutbrainAmplifyUpdateGranularityForPeriodicReports(r.Configuration.ReportGranularity.ValueString())
	} else {
		reportGranularity = nil
	}
	geoLocationBreakdown := new(shared.SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion)
	if !r.Configuration.GeoLocationBreakdown.IsUnknown() && !r.Configuration.GeoLocationBreakdown.IsNull() {
		*geoLocationBreakdown = shared.SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion(r.Configuration.GeoLocationBreakdown.ValueString())
	} else {
		geoLocationBreakdown = nil
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	conversionCount := new(shared.SourceOutbrainAmplifyUpdateDefinitionOfConversionCountInReports)
	if !r.Configuration.ConversionCount.IsUnknown() && !r.Configuration.ConversionCount.IsNull() {
		*conversionCount = shared.SourceOutbrainAmplifyUpdateDefinitionOfConversionCountInReports(r.Configuration.ConversionCount.ValueString())
	} else {
		conversionCount = nil
	}
	configuration := shared.SourceOutbrainAmplifyUpdate{
		Credentials:          credentials,
		ReportGranularity:    reportGranularity,
		GeoLocationBreakdown: geoLocationBreakdown,
		StartDate:            startDate,
		EndDate:              endDate,
		ConversionCount:      conversionCount,
	}
	out := shared.SourceOutbrainAmplifyPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceOutbrainAmplifyResourceModel) ToOperationsPutSourceOutbrainAmplifyRequest(ctx context.Context) (*operations.PutSourceOutbrainAmplifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceOutbrainAmplifyPutRequest, sourceOutbrainAmplifyPutRequestDiags := r.ToSharedSourceOutbrainAmplifyPutRequest(ctx)
	diags.Append(sourceOutbrainAmplifyPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceOutbrainAmplifyRequest{
		SourceID:                        sourceID,
		SourceOutbrainAmplifyPutRequest: sourceOutbrainAmplifyPutRequest,
	}

	return &out, diags
}

func (r *SourceOutbrainAmplifyResourceModel) ToOperationsGetSourceOutbrainAmplifyRequest(ctx context.Context) (*operations.GetSourceOutbrainAmplifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceOutbrainAmplifyRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceOutbrainAmplifyResourceModel) ToOperationsDeleteSourceOutbrainAmplifyRequest(ctx context.Context) (*operations.DeleteSourceOutbrainAmplifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceOutbrainAmplifyRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceOutbrainAmplifyResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
