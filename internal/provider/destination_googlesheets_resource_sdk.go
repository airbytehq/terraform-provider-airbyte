// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationGoogleSheetsResourceModel) ToSharedDestinationGoogleSheetsCreateRequest(ctx context.Context) (*shared.DestinationGoogleSheetsCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var spreadsheetID string
	spreadsheetID = r.Configuration.SpreadsheetID.ValueString()

	var credentials shared.DestinationGoogleSheetsAuthentication
	var destinationGoogleSheetsAuthenticateViaGoogleOAuth *shared.DestinationGoogleSheetsAuthenticateViaGoogleOAuth
	if r.Configuration.Credentials.AuthenticateViaGoogleOAuth != nil {
		var clientID string
		clientID = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.RefreshToken.ValueString()

		destinationGoogleSheetsAuthenticateViaGoogleOAuth = &shared.DestinationGoogleSheetsAuthenticateViaGoogleOAuth{
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if destinationGoogleSheetsAuthenticateViaGoogleOAuth != nil {
		credentials = shared.DestinationGoogleSheetsAuthentication{
			DestinationGoogleSheetsAuthenticateViaGoogleOAuth: destinationGoogleSheetsAuthenticateViaGoogleOAuth,
		}
	}
	var destinationGoogleSheetsServiceAccountKeyAuthentication *shared.DestinationGoogleSheetsServiceAccountKeyAuthentication
	if r.Configuration.Credentials.ServiceAccountKeyAuthentication != nil {
		var serviceAccountInfo string
		serviceAccountInfo = r.Configuration.Credentials.ServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()

		destinationGoogleSheetsServiceAccountKeyAuthentication = &shared.DestinationGoogleSheetsServiceAccountKeyAuthentication{
			ServiceAccountInfo: serviceAccountInfo,
		}
	}
	if destinationGoogleSheetsServiceAccountKeyAuthentication != nil {
		credentials = shared.DestinationGoogleSheetsAuthentication{
			DestinationGoogleSheetsServiceAccountKeyAuthentication: destinationGoogleSheetsServiceAccountKeyAuthentication,
		}
	}
	configuration := shared.DestinationGoogleSheets{
		SpreadsheetID: spreadsheetID,
		Credentials:   credentials,
	}
	out := shared.DestinationGoogleSheetsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationGoogleSheetsResourceModel) ToSharedDestinationGoogleSheetsPutRequest(ctx context.Context) (*shared.DestinationGoogleSheetsPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var spreadsheetID string
	spreadsheetID = r.Configuration.SpreadsheetID.ValueString()

	var credentials shared.DestinationGoogleSheetsUpdateAuthentication
	var destinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth *shared.DestinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth
	if r.Configuration.Credentials.AuthenticateViaGoogleOAuth != nil {
		var clientID string
		clientID = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.AuthenticateViaGoogleOAuth.RefreshToken.ValueString()

		destinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth = &shared.DestinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth{
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if destinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth != nil {
		credentials = shared.DestinationGoogleSheetsUpdateAuthentication{
			DestinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth: destinationGoogleSheetsUpdateAuthenticateViaGoogleOAuth,
		}
	}
	var destinationGoogleSheetsUpdateServiceAccountKeyAuthentication *shared.DestinationGoogleSheetsUpdateServiceAccountKeyAuthentication
	if r.Configuration.Credentials.ServiceAccountKeyAuthentication != nil {
		var serviceAccountInfo string
		serviceAccountInfo = r.Configuration.Credentials.ServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()

		destinationGoogleSheetsUpdateServiceAccountKeyAuthentication = &shared.DestinationGoogleSheetsUpdateServiceAccountKeyAuthentication{
			ServiceAccountInfo: serviceAccountInfo,
		}
	}
	if destinationGoogleSheetsUpdateServiceAccountKeyAuthentication != nil {
		credentials = shared.DestinationGoogleSheetsUpdateAuthentication{
			DestinationGoogleSheetsUpdateServiceAccountKeyAuthentication: destinationGoogleSheetsUpdateServiceAccountKeyAuthentication,
		}
	}
	configuration := shared.DestinationGoogleSheetsUpdate{
		SpreadsheetID: spreadsheetID,
		Credentials:   credentials,
	}
	out := shared.DestinationGoogleSheetsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationGoogleSheetsResourceModel) ToOperationsPutDestinationGoogleSheetsRequest(ctx context.Context) (*operations.PutDestinationGoogleSheetsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationGoogleSheetsPutRequest, destinationGoogleSheetsPutRequestDiags := r.ToSharedDestinationGoogleSheetsPutRequest(ctx)
	diags.Append(destinationGoogleSheetsPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationGoogleSheetsRequest{
		DestinationID:                     destinationID,
		DestinationGoogleSheetsPutRequest: destinationGoogleSheetsPutRequest,
	}

	return &out, diags
}

func (r *DestinationGoogleSheetsResourceModel) ToOperationsGetDestinationGoogleSheetsRequest(ctx context.Context) (*operations.GetDestinationGoogleSheetsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationGoogleSheetsRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationGoogleSheetsResourceModel) ToOperationsDeleteDestinationGoogleSheetsRequest(ctx context.Context) (*operations.DeleteDestinationGoogleSheetsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationGoogleSheetsRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationGoogleSheetsResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
