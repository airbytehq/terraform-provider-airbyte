// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourcePosthogResourceModel) ToCreateSDKType() *shared.SourcePosthogCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	baseURL := new(string)
	if !r.Configuration.BaseURL.IsUnknown() && !r.Configuration.BaseURL.IsNull() {
		*baseURL = r.Configuration.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	eventsTimeStep := new(int64)
	if !r.Configuration.EventsTimeStep.IsUnknown() && !r.Configuration.EventsTimeStep.IsNull() {
		*eventsTimeStep = r.Configuration.EventsTimeStep.ValueInt64()
	} else {
		eventsTimeStep = nil
	}
	sourceType := shared.SourcePosthogPosthog(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourcePosthog{
		APIKey:         apiKey,
		BaseURL:        baseURL,
		EventsTimeStep: eventsTimeStep,
		SourceType:     sourceType,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePosthogCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePosthogResourceModel) ToGetSDKType() *shared.SourcePosthogCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePosthogResourceModel) ToUpdateSDKType() *shared.SourcePosthogPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	baseURL := new(string)
	if !r.Configuration.BaseURL.IsUnknown() && !r.Configuration.BaseURL.IsNull() {
		*baseURL = r.Configuration.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	eventsTimeStep := new(int64)
	if !r.Configuration.EventsTimeStep.IsUnknown() && !r.Configuration.EventsTimeStep.IsNull() {
		*eventsTimeStep = r.Configuration.EventsTimeStep.ValueInt64()
	} else {
		eventsTimeStep = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourcePosthogUpdate{
		APIKey:         apiKey,
		BaseURL:        baseURL,
		EventsTimeStep: eventsTimeStep,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePosthogPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePosthogResourceModel) ToDeleteSDKType() *shared.SourcePosthogCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePosthogResourceModel) RefreshFromGetResponse(resp *shared.SourcePosthogGetResponse) {
	r.Configuration.APIKey = types.StringValue(resp.Configuration.APIKey)
	if resp.Configuration.BaseURL != nil {
		r.Configuration.BaseURL = types.StringValue(*resp.Configuration.BaseURL)
	} else {
		r.Configuration.BaseURL = types.StringNull()
	}
	if resp.Configuration.EventsTimeStep != nil {
		r.Configuration.EventsTimeStep = types.Int64Value(*resp.Configuration.EventsTimeStep)
	} else {
		r.Configuration.EventsTimeStep = types.Int64Null()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourcePosthogResourceModel) RefreshFromCreateResponse(resp *shared.SourcePosthogGetResponse) {
	r.RefreshFromGetResponse(resp)
}
