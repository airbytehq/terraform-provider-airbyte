// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceSurveySparrowResourceModel) ToCreateSDKType() *shared.SourceSurveySparrowCreateRequest {
	accessToken := r.Configuration.AccessToken.ValueString()
	var region *shared.SourceSurveySparrowBaseURL
	if r.Configuration.Region != nil {
		var sourceSurveySparrowEUBasedAccount *shared.SourceSurveySparrowEUBasedAccount
		if r.Configuration.Region.EUBasedAccount != nil {
			sourceSurveySparrowEUBasedAccount = &shared.SourceSurveySparrowEUBasedAccount{}
		}
		if sourceSurveySparrowEUBasedAccount != nil {
			region = &shared.SourceSurveySparrowBaseURL{
				SourceSurveySparrowEUBasedAccount: sourceSurveySparrowEUBasedAccount,
			}
		}
		var sourceSurveySparrowGlobalAccount *shared.SourceSurveySparrowGlobalAccount
		if r.Configuration.Region.GlobalAccount != nil {
			sourceSurveySparrowGlobalAccount = &shared.SourceSurveySparrowGlobalAccount{}
		}
		if sourceSurveySparrowGlobalAccount != nil {
			region = &shared.SourceSurveySparrowBaseURL{
				SourceSurveySparrowGlobalAccount: sourceSurveySparrowGlobalAccount,
			}
		}
	}
	var surveyID []interface{} = nil
	for _, surveyIDItem := range r.Configuration.SurveyID {
		var surveyIDTmp interface{}
		_ = json.Unmarshal([]byte(surveyIDItem.ValueString()), &surveyIDTmp)
		surveyID = append(surveyID, surveyIDTmp)
	}
	configuration := shared.SourceSurveySparrow{
		AccessToken: accessToken,
		Region:      region,
		SurveyID:    surveyID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSurveySparrowCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSurveySparrowResourceModel) ToGetSDKType() *shared.SourceSurveySparrowCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSurveySparrowResourceModel) ToUpdateSDKType() *shared.SourceSurveySparrowPutRequest {
	accessToken := r.Configuration.AccessToken.ValueString()
	var region *shared.BaseURL
	if r.Configuration.Region != nil {
		var euBasedAccount *shared.EUBasedAccount
		if r.Configuration.Region.EUBasedAccount != nil {
			euBasedAccount = &shared.EUBasedAccount{}
		}
		if euBasedAccount != nil {
			region = &shared.BaseURL{
				EUBasedAccount: euBasedAccount,
			}
		}
		var globalAccount *shared.GlobalAccount
		if r.Configuration.Region.GlobalAccount != nil {
			globalAccount = &shared.GlobalAccount{}
		}
		if globalAccount != nil {
			region = &shared.BaseURL{
				GlobalAccount: globalAccount,
			}
		}
	}
	var surveyID []interface{} = nil
	for _, surveyIDItem := range r.Configuration.SurveyID {
		var surveyIDTmp interface{}
		_ = json.Unmarshal([]byte(surveyIDItem.ValueString()), &surveyIDTmp)
		surveyID = append(surveyID, surveyIDTmp)
	}
	configuration := shared.SourceSurveySparrowUpdate{
		AccessToken: accessToken,
		Region:      region,
		SurveyID:    surveyID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSurveySparrowPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSurveySparrowResourceModel) ToDeleteSDKType() *shared.SourceSurveySparrowCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSurveySparrowResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSurveySparrowResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
