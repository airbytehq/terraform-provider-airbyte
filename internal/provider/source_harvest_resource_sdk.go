// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceHarvestResourceModel) ToSharedSourceHarvestCreateRequest() *shared.SourceHarvestCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accountID string
	accountID = r.Configuration.AccountID.ValueString()

	replicationStartDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	var credentials *shared.SourceHarvestAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var authenticateViaHarvestOAuth *shared.AuthenticateViaHarvestOAuth
		if r.Configuration.Credentials.AuthenticateViaHarvestOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.RefreshToken.ValueString()

			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			authenticateViaHarvestOAuth = &shared.AuthenticateViaHarvestOAuth{
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
				AdditionalProperties: additionalProperties,
			}
		}
		if authenticateViaHarvestOAuth != nil {
			credentials = &shared.SourceHarvestAuthenticationMechanism{
				AuthenticateViaHarvestOAuth: authenticateViaHarvestOAuth,
			}
		}
		var sourceHarvestAuthenticateWithPersonalAccessToken *shared.SourceHarvestAuthenticateWithPersonalAccessToken
		if r.Configuration.Credentials.AuthenticateWithPersonalAccessToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.APIToken.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceHarvestAuthenticateWithPersonalAccessToken = &shared.SourceHarvestAuthenticateWithPersonalAccessToken{
				APIToken:             apiToken,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceHarvestAuthenticateWithPersonalAccessToken != nil {
			credentials = &shared.SourceHarvestAuthenticationMechanism{
				SourceHarvestAuthenticateWithPersonalAccessToken: sourceHarvestAuthenticateWithPersonalAccessToken,
			}
		}
	}
	configuration := shared.SourceHarvest{
		AccountID:            accountID,
		ReplicationStartDate: replicationStartDate,
		Credentials:          credentials,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceHarvestCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceHarvestResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceHarvestResourceModel) ToSharedSourceHarvestPutRequest() *shared.SourceHarvestPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accountID string
	accountID = r.Configuration.AccountID.ValueString()

	replicationStartDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	var credentials *shared.SourceHarvestUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceHarvestUpdateAuthenticateViaHarvestOAuth *shared.SourceHarvestUpdateAuthenticateViaHarvestOAuth
		if r.Configuration.Credentials.AuthenticateViaHarvestOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaHarvestOAuth.RefreshToken.ValueString()

			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaHarvestOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceHarvestUpdateAuthenticateViaHarvestOAuth = &shared.SourceHarvestUpdateAuthenticateViaHarvestOAuth{
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
				AdditionalProperties: additionalProperties,
			}
		}
		if sourceHarvestUpdateAuthenticateViaHarvestOAuth != nil {
			credentials = &shared.SourceHarvestUpdateAuthenticationMechanism{
				SourceHarvestUpdateAuthenticateViaHarvestOAuth: sourceHarvestUpdateAuthenticateViaHarvestOAuth,
			}
		}
		var sourceHarvestUpdateAuthenticateWithPersonalAccessToken *shared.SourceHarvestUpdateAuthenticateWithPersonalAccessToken
		if r.Configuration.Credentials.AuthenticateWithPersonalAccessToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.APIToken.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithPersonalAccessToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceHarvestUpdateAuthenticateWithPersonalAccessToken = &shared.SourceHarvestUpdateAuthenticateWithPersonalAccessToken{
				APIToken:             apiToken,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceHarvestUpdateAuthenticateWithPersonalAccessToken != nil {
			credentials = &shared.SourceHarvestUpdateAuthenticationMechanism{
				SourceHarvestUpdateAuthenticateWithPersonalAccessToken: sourceHarvestUpdateAuthenticateWithPersonalAccessToken,
			}
		}
	}
	configuration := shared.SourceHarvestUpdate{
		AccountID:            accountID,
		ReplicationStartDate: replicationStartDate,
		Credentials:          credentials,
	}
	out := shared.SourceHarvestPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
