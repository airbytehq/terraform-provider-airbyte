// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk"

	speakeasy_stringplanmodifier "github.com/airbytehq/terraform-provider-airbyte/internal/planmodifiers/stringplanmodifier"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SourceGoogleAnalyticsDataAPIResource{}
var _ resource.ResourceWithImportState = &SourceGoogleAnalyticsDataAPIResource{}

func NewSourceGoogleAnalyticsDataAPIResource() resource.Resource {
	return &SourceGoogleAnalyticsDataAPIResource{}
}

// SourceGoogleAnalyticsDataAPIResource defines the resource implementation.
type SourceGoogleAnalyticsDataAPIResource struct {
	client *sdk.SDK
}

// SourceGoogleAnalyticsDataAPIResourceModel describes the resource data model.
type SourceGoogleAnalyticsDataAPIResourceModel struct {
	Configuration SourceGoogleAnalyticsDataAPI `tfsdk:"configuration"`
	DefinitionID  types.String                 `tfsdk:"definition_id"`
	Name          types.String                 `tfsdk:"name"`
	SecretID      types.String                 `tfsdk:"secret_id"`
	SourceID      types.String                 `tfsdk:"source_id"`
	SourceType    types.String                 `tfsdk:"source_type"`
	WorkspaceID   types.String                 `tfsdk:"workspace_id"`
}

func (r *SourceGoogleAnalyticsDataAPIResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_google_analytics_data_api"
}

func (r *SourceGoogleAnalyticsDataAPIResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceGoogleAnalyticsDataAPI Resource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"credentials": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"authenticate_via_google_oauth": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"access_token": schema.StringAttribute{
										Optional:    true,
										Sensitive:   true,
										Description: `Access Token for making authenticated requests.`,
									},
									"client_id": schema.StringAttribute{
										Required:    true,
										Description: `The Client ID of your Google Analytics developer application.`,
									},
									"client_secret": schema.StringAttribute{
										Required:    true,
										Description: `The Client Secret of your Google Analytics developer application.`,
									},
									"refresh_token": schema.StringAttribute{
										Required:    true,
										Sensitive:   true,
										Description: `The token for obtaining a new access token.`,
									},
								},
								Description: `Credentials for the service`,
							},
							"service_account_key_authentication": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"credentials_json": schema.StringAttribute{
										Required:    true,
										Description: `The JSON key linked to the service account used for authorization. For steps on obtaining this key, refer to <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api/#setup-guide">the setup guide</a>.`,
									},
								},
								Description: `Credentials for the service`,
							},
						},
						Description: `Credentials for the service`,
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"custom_reports_array": schema.ListNestedAttribute{
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"dimension_filter": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"and_group": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expressions": schema.ListNestedAttribute{
													Required: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_name": schema.StringAttribute{
																Required: true,
															},
															"filter": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"between_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"from_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"to_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"in_list_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"values": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																		},
																	},
																	"numeric_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"operation": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"string_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"match_type": schema.ListAttribute{
																				Optional:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.StringAttribute{
																				Required: true,
																			},
																		},
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
														},
													},
												},
											},
											Description: `The FilterExpressions in andGroup have an AND relationship.`,
										},
										"filter": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"field_name": schema.StringAttribute{
													Required: true,
												},
												"filter": schema.SingleNestedAttribute{
													Required: true,
													Attributes: map[string]schema.Attribute{
														"between_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"from_value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
																"to_value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
															},
														},
														"in_list_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"case_sensitive": schema.BoolAttribute{
																	Optional: true,
																},
																"values": schema.ListAttribute{
																	Required:    true,
																	ElementType: types.StringType,
																},
															},
														},
														"numeric_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"operation": schema.ListAttribute{
																	Required:    true,
																	ElementType: types.StringType,
																},
																"value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
															},
														},
														"string_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"case_sensitive": schema.BoolAttribute{
																	Optional: true,
																},
																"match_type": schema.ListAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																},
																"value": schema.StringAttribute{
																	Required: true,
																},
															},
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											Description: `A primitive filter. In the same FilterExpression, all of the filter's field names need to be either all dimensions.`,
										},
										"not_expression": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expression": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"field_name": schema.StringAttribute{
															Required: true,
														},
														"filter": schema.SingleNestedAttribute{
															Required: true,
															Attributes: map[string]schema.Attribute{
																"between_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"from_value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																		"to_value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																	},
																},
																"in_list_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"case_sensitive": schema.BoolAttribute{
																			Optional: true,
																		},
																		"values": schema.ListAttribute{
																			Required:    true,
																			ElementType: types.StringType,
																		},
																	},
																},
																"numeric_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"operation": schema.ListAttribute{
																			Required:    true,
																			ElementType: types.StringType,
																		},
																		"value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																	},
																},
																"string_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"case_sensitive": schema.BoolAttribute{
																			Optional: true,
																		},
																		"match_type": schema.ListAttribute{
																			Optional:    true,
																			ElementType: types.StringType,
																		},
																		"value": schema.StringAttribute{
																			Required: true,
																		},
																	},
																},
															},
															Validators: []validator.Object{
																validators.ExactlyOneChild(),
															},
														},
													},
												},
											},
											Description: `The FilterExpression is NOT of notExpression.`,
										},
										"or_group": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expressions": schema.ListNestedAttribute{
													Required: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_name": schema.StringAttribute{
																Required: true,
															},
															"filter": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"between_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"from_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"to_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"in_list_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"values": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																		},
																	},
																	"numeric_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"operation": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"string_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"match_type": schema.ListAttribute{
																				Optional:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.StringAttribute{
																				Required: true,
																			},
																		},
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
														},
													},
												},
											},
											Description: `The FilterExpressions in orGroup have an OR relationship.`,
										},
									},
									Description: `Dimensions filter`,
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
								"dimensions": schema.ListAttribute{
									Required:    true,
									ElementType: types.StringType,
									Description: `A list of dimensions.`,
								},
								"metric_filter": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"and_group": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expressions": schema.ListNestedAttribute{
													Required: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_name": schema.StringAttribute{
																Required: true,
															},
															"filter": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"between_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"from_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"to_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"in_list_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"values": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																		},
																	},
																	"numeric_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"operation": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"string_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"match_type": schema.ListAttribute{
																				Optional:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.StringAttribute{
																				Required: true,
																			},
																		},
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
														},
													},
												},
											},
											Description: `The FilterExpressions in andGroup have an AND relationship.`,
										},
										"filter": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"field_name": schema.StringAttribute{
													Required: true,
												},
												"filter": schema.SingleNestedAttribute{
													Required: true,
													Attributes: map[string]schema.Attribute{
														"between_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"from_value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
																"to_value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
															},
														},
														"in_list_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"case_sensitive": schema.BoolAttribute{
																	Optional: true,
																},
																"values": schema.ListAttribute{
																	Required:    true,
																	ElementType: types.StringType,
																},
															},
														},
														"numeric_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"operation": schema.ListAttribute{
																	Required:    true,
																	ElementType: types.StringType,
																},
																"value": schema.SingleNestedAttribute{
																	Required: true,
																	Attributes: map[string]schema.Attribute{
																		"double_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.NumberAttribute{
																					Required: true,
																				},
																			},
																		},
																		"int64_value": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"value": schema.StringAttribute{
																					Required: true,
																				},
																			},
																		},
																	},
																	Validators: []validator.Object{
																		validators.ExactlyOneChild(),
																	},
																},
															},
														},
														"string_filter": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"case_sensitive": schema.BoolAttribute{
																	Optional: true,
																},
																"match_type": schema.ListAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																},
																"value": schema.StringAttribute{
																	Required: true,
																},
															},
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											Description: `A primitive filter. In the same FilterExpression, all of the filter's field names need to be either all metrics.`,
										},
										"not_expression": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expression": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"field_name": schema.StringAttribute{
															Required: true,
														},
														"filter": schema.SingleNestedAttribute{
															Required: true,
															Attributes: map[string]schema.Attribute{
																"between_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"from_value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																		"to_value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																	},
																},
																"in_list_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"case_sensitive": schema.BoolAttribute{
																			Optional: true,
																		},
																		"values": schema.ListAttribute{
																			Required:    true,
																			ElementType: types.StringType,
																		},
																	},
																},
																"numeric_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"operation": schema.ListAttribute{
																			Required:    true,
																			ElementType: types.StringType,
																		},
																		"value": schema.SingleNestedAttribute{
																			Required: true,
																			Attributes: map[string]schema.Attribute{
																				"double_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.NumberAttribute{
																							Required: true,
																						},
																					},
																				},
																				"int64_value": schema.SingleNestedAttribute{
																					Optional: true,
																					Attributes: map[string]schema.Attribute{
																						"value": schema.StringAttribute{
																							Required: true,
																						},
																					},
																				},
																			},
																			Validators: []validator.Object{
																				validators.ExactlyOneChild(),
																			},
																		},
																	},
																},
																"string_filter": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"case_sensitive": schema.BoolAttribute{
																			Optional: true,
																		},
																		"match_type": schema.ListAttribute{
																			Optional:    true,
																			ElementType: types.StringType,
																		},
																		"value": schema.StringAttribute{
																			Required: true,
																		},
																	},
																},
															},
															Validators: []validator.Object{
																validators.ExactlyOneChild(),
															},
														},
													},
												},
											},
											Description: `The FilterExpression is NOT of notExpression.`,
										},
										"or_group": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"expressions": schema.ListNestedAttribute{
													Required: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_name": schema.StringAttribute{
																Required: true,
															},
															"filter": schema.SingleNestedAttribute{
																Required: true,
																Attributes: map[string]schema.Attribute{
																	"between_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"from_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																			"to_value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"in_list_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"values": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																		},
																	},
																	"numeric_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"operation": schema.ListAttribute{
																				Required:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.SingleNestedAttribute{
																				Required: true,
																				Attributes: map[string]schema.Attribute{
																					"double_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.NumberAttribute{
																								Required: true,
																							},
																						},
																					},
																					"int64_value": schema.SingleNestedAttribute{
																						Optional: true,
																						Attributes: map[string]schema.Attribute{
																							"value": schema.StringAttribute{
																								Required: true,
																							},
																						},
																					},
																				},
																				Validators: []validator.Object{
																					validators.ExactlyOneChild(),
																				},
																			},
																		},
																	},
																	"string_filter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"case_sensitive": schema.BoolAttribute{
																				Optional: true,
																			},
																			"match_type": schema.ListAttribute{
																				Optional:    true,
																				ElementType: types.StringType,
																			},
																			"value": schema.StringAttribute{
																				Required: true,
																			},
																		},
																	},
																},
																Validators: []validator.Object{
																	validators.ExactlyOneChild(),
																},
															},
														},
													},
												},
											},
											Description: `The FilterExpressions in orGroup have an OR relationship.`,
										},
									},
									Description: `Metrics filter`,
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
								"metrics": schema.ListAttribute{
									Required:    true,
									ElementType: types.StringType,
									Description: `A list of metrics.`,
								},
								"name": schema.StringAttribute{
									Required:    true,
									Description: `The name of the custom report, this name would be used as stream name.`,
								},
							},
						},
						Description: `You can add your Custom Analytics report by creating one.`,
					},
					"date_ranges_start_date": schema.StringAttribute{
						Optional:    true,
						Description: `The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.`,
						Validators: []validator.String{
							validators.IsValidDate(),
						},
					},
					"property_ids": schema.ListAttribute{
						Required:    true,
						ElementType: types.StringType,
						Description: `A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the <a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'>Google Analytics documentation</a> to locate your property ID.`,
					},
					"window_in_days": schema.Int64Attribute{
						Optional: true,
						MarkdownDescription: `Default: 1` + "\n" +
							`The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api">the documentation</a>.`,
					},
				},
			},
			"definition_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `The UUID of the connector definition. One of configuration.sourceType or definitionId must be provided.`,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
				Required:    true,
				Description: `Name of the source e.g. dev-mysql-instance.`,
			},
			"secret_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `Optional secretID obtained through the public API OAuth redirect flow.`,
			},
			"source_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
			},
			"source_type": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
			},
			"workspace_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
				Required: true,
			},
		},
	}
}

func (r *SourceGoogleAnalyticsDataAPIResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceGoogleAnalyticsDataAPIResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SourceGoogleAnalyticsDataAPIResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToCreateSDKType()
	res, err := r.client.Sources.CreateSourceGoogleAnalyticsDataAPI(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceGoogleAnalyticsDataAPIResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SourceGoogleAnalyticsDataAPIResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.GetSourceGoogleAnalyticsDataAPIRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.GetSourceGoogleAnalyticsDataAPI(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceGoogleAnalyticsDataAPIResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SourceGoogleAnalyticsDataAPIResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	sourceGoogleAnalyticsDataAPIPutRequest := data.ToUpdateSDKType()
	sourceID := data.SourceID.ValueString()
	request := operations.PutSourceGoogleAnalyticsDataAPIRequest{
		SourceGoogleAnalyticsDataAPIPutRequest: sourceGoogleAnalyticsDataAPIPutRequest,
		SourceID:                               sourceID,
	}
	res, err := r.client.Sources.PutSourceGoogleAnalyticsDataAPI(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	sourceId1 := data.SourceID.ValueString()
	getRequest := operations.GetSourceGoogleAnalyticsDataAPIRequest{
		SourceID: sourceId1,
	}
	getResponse, err := r.client.Sources.GetSourceGoogleAnalyticsDataAPI(ctx, getRequest)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if getResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", getResponse))
		return
	}
	if getResponse.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", getResponse.StatusCode), debugResponse(getResponse.RawResponse))
		return
	}
	if getResponse.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(getResponse.RawResponse))
		return
	}
	data.RefreshFromGetResponse(getResponse.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceGoogleAnalyticsDataAPIResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SourceGoogleAnalyticsDataAPIResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.DeleteSourceGoogleAnalyticsDataAPIRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.DeleteSourceGoogleAnalyticsDataAPI(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SourceGoogleAnalyticsDataAPIResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("source_id"), req.ID)...)
}
