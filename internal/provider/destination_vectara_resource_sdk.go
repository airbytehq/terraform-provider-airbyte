// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationVectaraResourceModel) ToSharedDestinationVectaraCreateRequest() *shared.DestinationVectaraCreateRequest {
	corpusName := r.Configuration.CorpusName.ValueString()
	customerID := r.Configuration.CustomerID.ValueString()
	var metadataFields []string = []string{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	clientID := r.Configuration.Oauth2.ClientID.ValueString()
	clientSecret := r.Configuration.Oauth2.ClientSecret.ValueString()
	oauth2 := shared.DestinationVectaraOAuth20Credentials{
		ClientID:     clientID,
		ClientSecret: clientSecret,
	}
	parallelize := new(bool)
	if !r.Configuration.Parallelize.IsUnknown() && !r.Configuration.Parallelize.IsNull() {
		*parallelize = r.Configuration.Parallelize.ValueBool()
	} else {
		parallelize = nil
	}
	var textFields []string = []string{}
	for _, textFieldsItem := range r.Configuration.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	titleField := new(string)
	if !r.Configuration.TitleField.IsUnknown() && !r.Configuration.TitleField.IsNull() {
		*titleField = r.Configuration.TitleField.ValueString()
	} else {
		titleField = nil
	}
	configuration := shared.DestinationVectara{
		CorpusName:     corpusName,
		CustomerID:     customerID,
		MetadataFields: metadataFields,
		Oauth2:         oauth2,
		Parallelize:    parallelize,
		TextFields:     textFields,
		TitleField:     titleField,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationVectaraCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationVectaraResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationVectaraResourceModel) ToSharedDestinationVectaraPutRequest() *shared.DestinationVectaraPutRequest {
	corpusName := r.Configuration.CorpusName.ValueString()
	customerID := r.Configuration.CustomerID.ValueString()
	var metadataFields []string = []string{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	clientID := r.Configuration.Oauth2.ClientID.ValueString()
	clientSecret := r.Configuration.Oauth2.ClientSecret.ValueString()
	oauth2 := shared.OAuth20Credentials{
		ClientID:     clientID,
		ClientSecret: clientSecret,
	}
	parallelize := new(bool)
	if !r.Configuration.Parallelize.IsUnknown() && !r.Configuration.Parallelize.IsNull() {
		*parallelize = r.Configuration.Parallelize.ValueBool()
	} else {
		parallelize = nil
	}
	var textFields []string = []string{}
	for _, textFieldsItem := range r.Configuration.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	titleField := new(string)
	if !r.Configuration.TitleField.IsUnknown() && !r.Configuration.TitleField.IsNull() {
		*titleField = r.Configuration.TitleField.ValueString()
	} else {
		titleField = nil
	}
	configuration := shared.DestinationVectaraUpdate{
		CorpusName:     corpusName,
		CustomerID:     customerID,
		MetadataFields: metadataFields,
		Oauth2:         oauth2,
		Parallelize:    parallelize,
		TextFields:     textFields,
		TitleField:     titleField,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationVectaraPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
