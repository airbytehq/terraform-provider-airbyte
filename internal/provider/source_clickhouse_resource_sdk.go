// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceClickhouseResourceModel) ToCreateSDKType() *shared.SourceClickhouseCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	sourceType := shared.SourceClickhouseClickhouse(r.Configuration.SourceType.ValueString())
	var tunnelMethod *shared.SourceClickhouseSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceClickhouseSSHTunnelMethodNoTunnel *shared.SourceClickhouseSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceClickhouseSSHTunnelMethodNoTunnel = &shared.SourceClickhouseSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourceClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodNoTunnel: sourceClickhouseSSHTunnelMethodNoTunnel,
			}
		}
		var sourceClickhouseSSHTunnelMethodSSHKeyAuthentication *shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceClickhouseSSHTunnelMethodSSHKeyAuthentication = &shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodSSHKeyAuthentication: sourceClickhouseSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceClickhouseSSHTunnelMethodPasswordAuthentication *shared.SourceClickhouseSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceClickhouseSSHTunnelMethodPasswordAuthentication = &shared.SourceClickhouseSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodPasswordAuthentication: sourceClickhouseSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceClickhouse{
		Database:     database,
		Host:         host,
		Password:     password,
		Port:         port,
		SourceType:   sourceType,
		TunnelMethod: tunnelMethod,
		Username:     username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceClickhouseCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceClickhouseResourceModel) ToGetSDKType() *shared.SourceClickhouseCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceClickhouseResourceModel) ToUpdateSDKType() *shared.SourceClickhousePutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var tunnelMethod *shared.SourceClickhouseUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceClickhouseUpdateSSHTunnelMethodNoTunnel *shared.SourceClickhouseUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceClickhouseUpdateSSHTunnelMethodNoTunnel = &shared.SourceClickhouseUpdateSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourceClickhouseUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceClickhouseUpdateSSHTunnelMethod{
				SourceClickhouseUpdateSSHTunnelMethodNoTunnel: sourceClickhouseUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceClickhouseUpdateSSHTunnelMethod{
				SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication: sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceClickhouseUpdateSSHTunnelMethod{
				SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication: sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceClickhouseUpdate{
		Database:     database,
		Host:         host,
		Password:     password,
		Port:         port,
		TunnelMethod: tunnelMethod,
		Username:     username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceClickhousePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceClickhouseResourceModel) ToDeleteSDKType() *shared.SourceClickhouseCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceClickhouseResourceModel) RefreshFromGetResponse(resp *shared.SourceClickhouseGetResponse) {
	r.Configuration.Database = types.StringValue(resp.Configuration.Database)
	r.Configuration.Host = types.StringValue(resp.Configuration.Host)
	if resp.Configuration.Password != nil {
		r.Configuration.Password = types.StringValue(*resp.Configuration.Password)
	} else {
		r.Configuration.Password = types.StringNull()
	}
	r.Configuration.Port = types.Int64Value(resp.Configuration.Port)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.TunnelMethod == nil {
		r.Configuration.TunnelMethod = nil
	} else {
		r.Configuration.TunnelMethod = &SourceClickhouseSSHTunnelMethod{}
		if resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod))
		}
		if resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
		}
		if resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
		}
		if resp.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
		}
		if resp.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
		}
		if resp.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
		}
	}
	r.Configuration.Username = types.StringValue(resp.Configuration.Username)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceClickhouseResourceModel) RefreshFromCreateResponse(resp *shared.SourceClickhouseGetResponse) {
	r.RefreshFromGetResponse(resp)
}
