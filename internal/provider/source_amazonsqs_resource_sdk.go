// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAmazonSqsResourceModel) ToCreateSDKType() *shared.SourceAmazonSqsCreateRequest {
	accessKey := new(string)
	if !r.Configuration.AccessKey.IsUnknown() && !r.Configuration.AccessKey.IsNull() {
		*accessKey = r.Configuration.AccessKey.ValueString()
	} else {
		accessKey = nil
	}
	attributesToReturn := new(string)
	if !r.Configuration.AttributesToReturn.IsUnknown() && !r.Configuration.AttributesToReturn.IsNull() {
		*attributesToReturn = r.Configuration.AttributesToReturn.ValueString()
	} else {
		attributesToReturn = nil
	}
	deleteMessages := r.Configuration.DeleteMessages.ValueBool()
	maxBatchSize := new(int64)
	if !r.Configuration.MaxBatchSize.IsUnknown() && !r.Configuration.MaxBatchSize.IsNull() {
		*maxBatchSize = r.Configuration.MaxBatchSize.ValueInt64()
	} else {
		maxBatchSize = nil
	}
	maxWaitTime := new(int64)
	if !r.Configuration.MaxWaitTime.IsUnknown() && !r.Configuration.MaxWaitTime.IsNull() {
		*maxWaitTime = r.Configuration.MaxWaitTime.ValueInt64()
	} else {
		maxWaitTime = nil
	}
	queueURL := r.Configuration.QueueURL.ValueString()
	region := shared.SourceAmazonSqsAWSRegion(r.Configuration.Region.ValueString())
	secretKey := new(string)
	if !r.Configuration.SecretKey.IsUnknown() && !r.Configuration.SecretKey.IsNull() {
		*secretKey = r.Configuration.SecretKey.ValueString()
	} else {
		secretKey = nil
	}
	sourceType := shared.SourceAmazonSqsAmazonSqs(r.Configuration.SourceType.ValueString())
	visibilityTimeout := new(int64)
	if !r.Configuration.VisibilityTimeout.IsUnknown() && !r.Configuration.VisibilityTimeout.IsNull() {
		*visibilityTimeout = r.Configuration.VisibilityTimeout.ValueInt64()
	} else {
		visibilityTimeout = nil
	}
	configuration := shared.SourceAmazonSqs{
		AccessKey:          accessKey,
		AttributesToReturn: attributesToReturn,
		DeleteMessages:     deleteMessages,
		MaxBatchSize:       maxBatchSize,
		MaxWaitTime:        maxWaitTime,
		QueueURL:           queueURL,
		Region:             region,
		SecretKey:          secretKey,
		SourceType:         sourceType,
		VisibilityTimeout:  visibilityTimeout,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAmazonSqsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAmazonSqsResourceModel) ToGetSDKType() *shared.SourceAmazonSqsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAmazonSqsResourceModel) ToUpdateSDKType() *shared.SourceAmazonSqsPutRequest {
	accessKey := new(string)
	if !r.Configuration.AccessKey.IsUnknown() && !r.Configuration.AccessKey.IsNull() {
		*accessKey = r.Configuration.AccessKey.ValueString()
	} else {
		accessKey = nil
	}
	attributesToReturn := new(string)
	if !r.Configuration.AttributesToReturn.IsUnknown() && !r.Configuration.AttributesToReturn.IsNull() {
		*attributesToReturn = r.Configuration.AttributesToReturn.ValueString()
	} else {
		attributesToReturn = nil
	}
	deleteMessages := r.Configuration.DeleteMessages.ValueBool()
	maxBatchSize := new(int64)
	if !r.Configuration.MaxBatchSize.IsUnknown() && !r.Configuration.MaxBatchSize.IsNull() {
		*maxBatchSize = r.Configuration.MaxBatchSize.ValueInt64()
	} else {
		maxBatchSize = nil
	}
	maxWaitTime := new(int64)
	if !r.Configuration.MaxWaitTime.IsUnknown() && !r.Configuration.MaxWaitTime.IsNull() {
		*maxWaitTime = r.Configuration.MaxWaitTime.ValueInt64()
	} else {
		maxWaitTime = nil
	}
	queueURL := r.Configuration.QueueURL.ValueString()
	region := shared.SourceAmazonSqsUpdateAWSRegion(r.Configuration.Region.ValueString())
	secretKey := new(string)
	if !r.Configuration.SecretKey.IsUnknown() && !r.Configuration.SecretKey.IsNull() {
		*secretKey = r.Configuration.SecretKey.ValueString()
	} else {
		secretKey = nil
	}
	visibilityTimeout := new(int64)
	if !r.Configuration.VisibilityTimeout.IsUnknown() && !r.Configuration.VisibilityTimeout.IsNull() {
		*visibilityTimeout = r.Configuration.VisibilityTimeout.ValueInt64()
	} else {
		visibilityTimeout = nil
	}
	configuration := shared.SourceAmazonSqsUpdate{
		AccessKey:          accessKey,
		AttributesToReturn: attributesToReturn,
		DeleteMessages:     deleteMessages,
		MaxBatchSize:       maxBatchSize,
		MaxWaitTime:        maxWaitTime,
		QueueURL:           queueURL,
		Region:             region,
		SecretKey:          secretKey,
		VisibilityTimeout:  visibilityTimeout,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAmazonSqsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAmazonSqsResourceModel) ToDeleteSDKType() *shared.SourceAmazonSqsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAmazonSqsResourceModel) RefreshFromGetResponse(resp *shared.SourceAmazonSqsGetResponse) {
	if resp.Configuration.AccessKey != nil {
		r.Configuration.AccessKey = types.StringValue(*resp.Configuration.AccessKey)
	} else {
		r.Configuration.AccessKey = types.StringNull()
	}
	if resp.Configuration.AttributesToReturn != nil {
		r.Configuration.AttributesToReturn = types.StringValue(*resp.Configuration.AttributesToReturn)
	} else {
		r.Configuration.AttributesToReturn = types.StringNull()
	}
	r.Configuration.DeleteMessages = types.BoolValue(resp.Configuration.DeleteMessages)
	if resp.Configuration.MaxBatchSize != nil {
		r.Configuration.MaxBatchSize = types.Int64Value(*resp.Configuration.MaxBatchSize)
	} else {
		r.Configuration.MaxBatchSize = types.Int64Null()
	}
	if resp.Configuration.MaxWaitTime != nil {
		r.Configuration.MaxWaitTime = types.Int64Value(*resp.Configuration.MaxWaitTime)
	} else {
		r.Configuration.MaxWaitTime = types.Int64Null()
	}
	r.Configuration.QueueURL = types.StringValue(resp.Configuration.QueueURL)
	r.Configuration.Region = types.StringValue(string(resp.Configuration.Region))
	if resp.Configuration.SecretKey != nil {
		r.Configuration.SecretKey = types.StringValue(*resp.Configuration.SecretKey)
	} else {
		r.Configuration.SecretKey = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.VisibilityTimeout != nil {
		r.Configuration.VisibilityTimeout = types.Int64Value(*resp.Configuration.VisibilityTimeout)
	} else {
		r.Configuration.VisibilityTimeout = types.Int64Null()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAmazonSqsResourceModel) RefreshFromCreateResponse(resp *shared.SourceAmazonSqsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
