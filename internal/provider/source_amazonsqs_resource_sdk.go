// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAmazonSqsResourceModel) ToSharedSourceAmazonSqsCreateRequest() *shared.SourceAmazonSqsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var queueURL string
	queueURL = r.Configuration.QueueURL.ValueString()

	region := new(shared.SourceAmazonSqsAWSRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceAmazonSqsAWSRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	maxBatchSize := new(int64)
	if !r.Configuration.MaxBatchSize.IsUnknown() && !r.Configuration.MaxBatchSize.IsNull() {
		*maxBatchSize = r.Configuration.MaxBatchSize.ValueInt64()
	} else {
		maxBatchSize = nil
	}
	maxWaitTime := new(int64)
	if !r.Configuration.MaxWaitTime.IsUnknown() && !r.Configuration.MaxWaitTime.IsNull() {
		*maxWaitTime = r.Configuration.MaxWaitTime.ValueInt64()
	} else {
		maxWaitTime = nil
	}
	attributesToReturn := new(string)
	if !r.Configuration.AttributesToReturn.IsUnknown() && !r.Configuration.AttributesToReturn.IsNull() {
		*attributesToReturn = r.Configuration.AttributesToReturn.ValueString()
	} else {
		attributesToReturn = nil
	}
	visibilityTimeout := new(int64)
	if !r.Configuration.VisibilityTimeout.IsUnknown() && !r.Configuration.VisibilityTimeout.IsNull() {
		*visibilityTimeout = r.Configuration.VisibilityTimeout.ValueInt64()
	} else {
		visibilityTimeout = nil
	}
	var accessKey string
	accessKey = r.Configuration.AccessKey.ValueString()

	var secretKey string
	secretKey = r.Configuration.SecretKey.ValueString()

	target := new(shared.TheTargetedActionResourceForTheFetch)
	if !r.Configuration.Target.IsUnknown() && !r.Configuration.Target.IsNull() {
		*target = shared.TheTargetedActionResourceForTheFetch(r.Configuration.Target.ValueString())
	} else {
		target = nil
	}
	configuration := shared.SourceAmazonSqs{
		QueueURL:           queueURL,
		Region:             region,
		MaxBatchSize:       maxBatchSize,
		MaxWaitTime:        maxWaitTime,
		AttributesToReturn: attributesToReturn,
		VisibilityTimeout:  visibilityTimeout,
		AccessKey:          accessKey,
		SecretKey:          secretKey,
		Target:             target,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceAmazonSqsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceAmazonSqsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceAmazonSqsResourceModel) ToSharedSourceAmazonSqsPutRequest() *shared.SourceAmazonSqsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var queueURL string
	queueURL = r.Configuration.QueueURL.ValueString()

	region := new(shared.SourceAmazonSqsUpdateAWSRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceAmazonSqsUpdateAWSRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	maxBatchSize := new(int64)
	if !r.Configuration.MaxBatchSize.IsUnknown() && !r.Configuration.MaxBatchSize.IsNull() {
		*maxBatchSize = r.Configuration.MaxBatchSize.ValueInt64()
	} else {
		maxBatchSize = nil
	}
	maxWaitTime := new(int64)
	if !r.Configuration.MaxWaitTime.IsUnknown() && !r.Configuration.MaxWaitTime.IsNull() {
		*maxWaitTime = r.Configuration.MaxWaitTime.ValueInt64()
	} else {
		maxWaitTime = nil
	}
	attributesToReturn := new(string)
	if !r.Configuration.AttributesToReturn.IsUnknown() && !r.Configuration.AttributesToReturn.IsNull() {
		*attributesToReturn = r.Configuration.AttributesToReturn.ValueString()
	} else {
		attributesToReturn = nil
	}
	visibilityTimeout := new(int64)
	if !r.Configuration.VisibilityTimeout.IsUnknown() && !r.Configuration.VisibilityTimeout.IsNull() {
		*visibilityTimeout = r.Configuration.VisibilityTimeout.ValueInt64()
	} else {
		visibilityTimeout = nil
	}
	var accessKey string
	accessKey = r.Configuration.AccessKey.ValueString()

	var secretKey string
	secretKey = r.Configuration.SecretKey.ValueString()

	target := new(shared.SourceAmazonSqsUpdateTheTargetedActionResourceForTheFetch)
	if !r.Configuration.Target.IsUnknown() && !r.Configuration.Target.IsNull() {
		*target = shared.SourceAmazonSqsUpdateTheTargetedActionResourceForTheFetch(r.Configuration.Target.ValueString())
	} else {
		target = nil
	}
	configuration := shared.SourceAmazonSqsUpdate{
		QueueURL:           queueURL,
		Region:             region,
		MaxBatchSize:       maxBatchSize,
		MaxWaitTime:        maxWaitTime,
		AttributesToReturn: attributesToReturn,
		VisibilityTimeout:  visibilityTimeout,
		AccessKey:          accessKey,
		SecretKey:          secretKey,
		Target:             target,
	}
	out := shared.SourceAmazonSqsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
