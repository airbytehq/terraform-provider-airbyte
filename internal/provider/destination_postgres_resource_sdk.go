// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPostgresResourceModel) ToCreateSDKType() *shared.DestinationPostgresCreateRequest {
	database := r.Configuration.Database.ValueString()
	destinationType := shared.DestinationPostgresPostgres(r.Configuration.DestinationType.ValueString())
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	schema := r.Configuration.Schema.ValueString()
	var sslMode *shared.DestinationPostgresSSLModes
	if r.Configuration.SslMode != nil {
		var destinationPostgresSSLModesDisable *shared.DestinationPostgresSSLModesDisable
		if r.Configuration.SslMode.DestinationPostgresSSLModesDisable != nil {
			mode := shared.DestinationPostgresSSLModesDisableMode(r.Configuration.SslMode.DestinationPostgresSSLModesDisable.Mode.ValueString())
			destinationPostgresSSLModesDisable = &shared.DestinationPostgresSSLModesDisable{
				Mode: mode,
			}
		}
		if destinationPostgresSSLModesDisable != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesDisable: destinationPostgresSSLModesDisable,
			}
		}
		var destinationPostgresSSLModesAllow *shared.DestinationPostgresSSLModesAllow
		if r.Configuration.SslMode.DestinationPostgresSSLModesAllow != nil {
			mode1 := shared.DestinationPostgresSSLModesAllowMode(r.Configuration.SslMode.DestinationPostgresSSLModesAllow.Mode.ValueString())
			destinationPostgresSSLModesAllow = &shared.DestinationPostgresSSLModesAllow{
				Mode: mode1,
			}
		}
		if destinationPostgresSSLModesAllow != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesAllow: destinationPostgresSSLModesAllow,
			}
		}
		var destinationPostgresSSLModesPrefer *shared.DestinationPostgresSSLModesPrefer
		if r.Configuration.SslMode.DestinationPostgresSSLModesPrefer != nil {
			mode2 := shared.DestinationPostgresSSLModesPreferMode(r.Configuration.SslMode.DestinationPostgresSSLModesPrefer.Mode.ValueString())
			destinationPostgresSSLModesPrefer = &shared.DestinationPostgresSSLModesPrefer{
				Mode: mode2,
			}
		}
		if destinationPostgresSSLModesPrefer != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesPrefer: destinationPostgresSSLModesPrefer,
			}
		}
		var destinationPostgresSSLModesRequire *shared.DestinationPostgresSSLModesRequire
		if r.Configuration.SslMode.DestinationPostgresSSLModesRequire != nil {
			mode3 := shared.DestinationPostgresSSLModesRequireMode(r.Configuration.SslMode.DestinationPostgresSSLModesRequire.Mode.ValueString())
			destinationPostgresSSLModesRequire = &shared.DestinationPostgresSSLModesRequire{
				Mode: mode3,
			}
		}
		if destinationPostgresSSLModesRequire != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesRequire: destinationPostgresSSLModesRequire,
			}
		}
		var destinationPostgresSSLModesVerifyCa *shared.DestinationPostgresSSLModesVerifyCa
		if r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate.ValueString()
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.DestinationPostgresSSLModesVerifyCaMode(r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.Mode.ValueString())
			destinationPostgresSSLModesVerifyCa = &shared.DestinationPostgresSSLModesVerifyCa{
				CaCertificate:     caCertificate,
				ClientKeyPassword: clientKeyPassword,
				Mode:              mode4,
			}
		}
		if destinationPostgresSSLModesVerifyCa != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesVerifyCa: destinationPostgresSSLModesVerifyCa,
			}
		}
		var destinationPostgresSSLModesVerifyFull *shared.DestinationPostgresSSLModesVerifyFull
		if r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate := r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate.ValueString()
			clientKey := r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey.ValueString()
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.DestinationPostgresSSLModesVerifyFullMode(r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.Mode.ValueString())
			destinationPostgresSSLModesVerifyFull = &shared.DestinationPostgresSSLModesVerifyFull{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword1,
				Mode:              mode5,
			}
		}
		if destinationPostgresSSLModesVerifyFull != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesVerifyFull: destinationPostgresSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.DestinationPostgresSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationPostgresSSHTunnelMethodNoTunnel *shared.DestinationPostgresSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.DestinationPostgresSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationPostgresSSHTunnelMethodNoTunnel = &shared.DestinationPostgresSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if destinationPostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodNoTunnel: destinationPostgresSSHTunnelMethodNoTunnel,
			}
		}
		var destinationPostgresSSHTunnelMethodSSHKeyAuthentication *shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationPostgresSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if destinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodSSHKeyAuthentication: destinationPostgresSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationPostgresSSHTunnelMethodPasswordAuthentication *shared.DestinationPostgresSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.DestinationPostgresSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationPostgresSSHTunnelMethodPasswordAuthentication = &shared.DestinationPostgresSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodPasswordAuthentication: destinationPostgresSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationPostgres{
		Database:        database,
		DestinationType: destinationType,
		Host:            host,
		JdbcURLParams:   jdbcURLParams,
		Password:        password,
		Port:            port,
		Schema:          schema,
		SslMode:         sslMode,
		TunnelMethod:    tunnelMethod,
		Username:        username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPostgresCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPostgresResourceModel) ToGetSDKType() *shared.DestinationPostgresCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPostgresResourceModel) ToUpdateSDKType() *shared.DestinationPostgresPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	schema := r.Configuration.Schema.ValueString()
	var sslMode *shared.DestinationPostgresUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var destinationPostgresUpdateSSLModesDisable *shared.DestinationPostgresUpdateSSLModesDisable
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesDisable != nil {
			mode := shared.DestinationPostgresUpdateSSLModesDisableMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesDisable.Mode.ValueString())
			destinationPostgresUpdateSSLModesDisable = &shared.DestinationPostgresUpdateSSLModesDisable{
				Mode: mode,
			}
		}
		if destinationPostgresUpdateSSLModesDisable != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesDisable: destinationPostgresUpdateSSLModesDisable,
			}
		}
		var destinationPostgresUpdateSSLModesAllow *shared.DestinationPostgresUpdateSSLModesAllow
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesAllow != nil {
			mode1 := shared.DestinationPostgresUpdateSSLModesAllowMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesAllow.Mode.ValueString())
			destinationPostgresUpdateSSLModesAllow = &shared.DestinationPostgresUpdateSSLModesAllow{
				Mode: mode1,
			}
		}
		if destinationPostgresUpdateSSLModesAllow != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesAllow: destinationPostgresUpdateSSLModesAllow,
			}
		}
		var destinationPostgresUpdateSSLModesPrefer *shared.DestinationPostgresUpdateSSLModesPrefer
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesPrefer != nil {
			mode2 := shared.DestinationPostgresUpdateSSLModesPreferMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesPrefer.Mode.ValueString())
			destinationPostgresUpdateSSLModesPrefer = &shared.DestinationPostgresUpdateSSLModesPrefer{
				Mode: mode2,
			}
		}
		if destinationPostgresUpdateSSLModesPrefer != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesPrefer: destinationPostgresUpdateSSLModesPrefer,
			}
		}
		var destinationPostgresUpdateSSLModesRequire *shared.DestinationPostgresUpdateSSLModesRequire
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesRequire != nil {
			mode3 := shared.DestinationPostgresUpdateSSLModesRequireMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesRequire.Mode.ValueString())
			destinationPostgresUpdateSSLModesRequire = &shared.DestinationPostgresUpdateSSLModesRequire{
				Mode: mode3,
			}
		}
		if destinationPostgresUpdateSSLModesRequire != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesRequire: destinationPostgresUpdateSSLModesRequire,
			}
		}
		var destinationPostgresUpdateSSLModesVerifyCa *shared.DestinationPostgresUpdateSSLModesVerifyCa
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa.CaCertificate.ValueString()
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.DestinationPostgresUpdateSSLModesVerifyCaMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa.Mode.ValueString())
			destinationPostgresUpdateSSLModesVerifyCa = &shared.DestinationPostgresUpdateSSLModesVerifyCa{
				CaCertificate:     caCertificate,
				ClientKeyPassword: clientKeyPassword,
				Mode:              mode4,
			}
		}
		if destinationPostgresUpdateSSLModesVerifyCa != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesVerifyCa: destinationPostgresUpdateSSLModesVerifyCa,
			}
		}
		var destinationPostgresUpdateSSLModesVerifyFull *shared.DestinationPostgresUpdateSSLModesVerifyFull
		if r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate := r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.ClientCertificate.ValueString()
			clientKey := r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.ClientKey.ValueString()
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.DestinationPostgresUpdateSSLModesVerifyFullMode(r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull.Mode.ValueString())
			destinationPostgresUpdateSSLModesVerifyFull = &shared.DestinationPostgresUpdateSSLModesVerifyFull{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword1,
				Mode:              mode5,
			}
		}
		if destinationPostgresUpdateSSLModesVerifyFull != nil {
			sslMode = &shared.DestinationPostgresUpdateSSLModes{
				DestinationPostgresUpdateSSLModesVerifyFull: destinationPostgresUpdateSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.DestinationPostgresUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationPostgresUpdateSSHTunnelMethodNoTunnel *shared.DestinationPostgresUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.DestinationPostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationPostgresUpdateSSHTunnelMethodNoTunnel = &shared.DestinationPostgresUpdateSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if destinationPostgresUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.DestinationPostgresUpdateSSHTunnelMethod{
				DestinationPostgresUpdateSSHTunnelMethodNoTunnel: destinationPostgresUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var destinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication *shared.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if destinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationPostgresUpdateSSHTunnelMethod{
				DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication: destinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationPostgresUpdateSSHTunnelMethodPasswordAuthentication *shared.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationPostgresUpdateSSHTunnelMethodPasswordAuthentication = &shared.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationPostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationPostgresUpdateSSHTunnelMethod{
				DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication: destinationPostgresUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationPostgresUpdate{
		Database:      database,
		Host:          host,
		JdbcURLParams: jdbcURLParams,
		Password:      password,
		Port:          port,
		Schema:        schema,
		SslMode:       sslMode,
		TunnelMethod:  tunnelMethod,
		Username:      username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPostgresPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPostgresResourceModel) ToDeleteSDKType() *shared.DestinationPostgresCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPostgresResourceModel) RefreshFromGetResponse(resp *shared.DestinationPostgresGetResponse) {
	r.Configuration.Database = types.StringValue(resp.Configuration.Database)
	r.Configuration.DestinationType = types.StringValue(string(resp.Configuration.DestinationType))
	r.Configuration.Host = types.StringValue(resp.Configuration.Host)
	if resp.Configuration.JdbcURLParams != nil {
		r.Configuration.JdbcURLParams = types.StringValue(*resp.Configuration.JdbcURLParams)
	} else {
		r.Configuration.JdbcURLParams = types.StringNull()
	}
	if resp.Configuration.Password != nil {
		r.Configuration.Password = types.StringValue(*resp.Configuration.Password)
	} else {
		r.Configuration.Password = types.StringNull()
	}
	r.Configuration.Port = types.Int64Value(resp.Configuration.Port)
	r.Configuration.Schema = types.StringValue(resp.Configuration.Schema)
	if resp.Configuration.SslMode == nil {
		r.Configuration.SslMode = nil
	} else {
		r.Configuration.SslMode = &DestinationPostgresSSLModes{}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesAllow != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesAllow = &DestinationPostgresSSLModesAllow{}
			r.Configuration.SslMode.DestinationPostgresSSLModesAllow.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesAllow.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesDisable != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesDisable = &DestinationPostgresSSLModesDisable{}
			r.Configuration.SslMode.DestinationPostgresSSLModesDisable.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesDisable.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesPrefer != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesPrefer = &DestinationPostgresSSLModesPrefer{}
			r.Configuration.SslMode.DestinationPostgresSSLModesPrefer.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesPrefer.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesRequire != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesRequire = &DestinationPostgresSSLModesRequire{}
			r.Configuration.SslMode.DestinationPostgresSSLModesRequire.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesRequire.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa = &DestinationPostgresSSLModesVerifyCa{}
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate = types.StringValue(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate)
			if resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword != nil {
				r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword = types.StringValue(*resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword)
			} else {
				r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword = types.StringNull()
			}
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyCa.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull != nil {
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull = &DestinationPostgresSSLModesVerifyFull{}
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate)
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate = types.StringValue(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate)
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey = types.StringValue(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey)
			if resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword != nil {
				r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword)
			} else {
				r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
			}
			r.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.SslMode.DestinationPostgresSSLModesVerifyFull.Mode))
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesAllow != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesAllow = &DestinationPostgresSSLModesAllow{}
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesDisable != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesDisable = &DestinationPostgresSSLModesDisable{}
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesPrefer != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesPrefer = &DestinationPostgresSSLModesPrefer{}
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesRequire != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesRequire = &DestinationPostgresSSLModesRequire{}
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyCa = &DestinationPostgresSSLModesVerifyCa{}
		}
		if resp.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull != nil {
			r.Configuration.SslMode.DestinationPostgresUpdateSSLModesVerifyFull = &DestinationPostgresSSLModesVerifyFull{}
		}
	}
	if resp.Configuration.TunnelMethod == nil {
		r.Configuration.TunnelMethod = nil
	} else {
		r.Configuration.TunnelMethod = &DestinationPostgresSSHTunnelMethod{}
		if resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod))
		}
		if resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
		}
		if resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
		}
		if resp.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
		}
		if resp.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
		}
		if resp.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.DestinationPostgresUpdateSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
		}
	}
	r.Configuration.Username = types.StringValue(resp.Configuration.Username)
	if resp.DestinationID != nil {
		r.DestinationID = types.StringValue(*resp.DestinationID)
	} else {
		r.DestinationID = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationPostgresResourceModel) RefreshFromCreateResponse(resp *shared.DestinationPostgresGetResponse) {
	r.RefreshFromGetResponse(resp)
}
