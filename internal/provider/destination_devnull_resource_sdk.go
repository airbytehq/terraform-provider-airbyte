// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationDevNullResourceModel) ToSharedDestinationDevNullCreateRequest() *shared.DestinationDevNullCreateRequest {
	var testDestination shared.DestinationDevNullTestDestination
	var destinationDevNullLogging *shared.DestinationDevNullLogging
	if r.Configuration.TestDestination.Logging != nil {
		var loggingConfig shared.DestinationDevNullLoggingConfiguration
		var destinationDevNullFirstNEntries *shared.DestinationDevNullFirstNEntries
		if r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries != nil {
			loggingType := new(shared.DestinationDevNullLoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.IsNull() {
				*loggingType = shared.DestinationDevNullLoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.ValueString())
			} else {
				loggingType = nil
			}
			maxEntryCount := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.IsNull() {
				*maxEntryCount, _ = r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount = nil
			}
			destinationDevNullFirstNEntries = &shared.DestinationDevNullFirstNEntries{
				LoggingType:   loggingType,
				MaxEntryCount: maxEntryCount,
			}
		}
		if destinationDevNullFirstNEntries != nil {
			loggingConfig = shared.DestinationDevNullLoggingConfiguration{
				DestinationDevNullFirstNEntries: destinationDevNullFirstNEntries,
			}
		}
		var destinationDevNullEveryNThEntry *shared.DestinationDevNullEveryNThEntry
		if r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry != nil {
			loggingType1 := new(shared.DestinationDevNullSchemasLoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.IsNull() {
				*loggingType1 = shared.DestinationDevNullSchemasLoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.ValueString())
			} else {
				loggingType1 = nil
			}
			maxEntryCount1 := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.IsNull() {
				*maxEntryCount1, _ = r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount1 = nil
			}
			var nthEntryToLog float64
			nthEntryToLog, _ = r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.NthEntryToLog.ValueBigFloat().Float64()

			destinationDevNullEveryNThEntry = &shared.DestinationDevNullEveryNThEntry{
				LoggingType:   loggingType1,
				MaxEntryCount: maxEntryCount1,
				NthEntryToLog: nthEntryToLog,
			}
		}
		if destinationDevNullEveryNThEntry != nil {
			loggingConfig = shared.DestinationDevNullLoggingConfiguration{
				DestinationDevNullEveryNThEntry: destinationDevNullEveryNThEntry,
			}
		}
		var destinationDevNullRandomSampling *shared.DestinationDevNullRandomSampling
		if r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling != nil {
			loggingType2 := new(shared.DestinationDevNullSchemasTestDestinationLoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.IsNull() {
				*loggingType2 = shared.DestinationDevNullSchemasTestDestinationLoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.ValueString())
			} else {
				loggingType2 = nil
			}
			maxEntryCount2 := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.IsNull() {
				*maxEntryCount2, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount2 = nil
			}
			samplingRatio := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.IsNull() {
				*samplingRatio, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.ValueBigFloat().Float64()
			} else {
				samplingRatio = nil
			}
			seed := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.IsNull() {
				*seed, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.ValueBigFloat().Float64()
			} else {
				seed = nil
			}
			destinationDevNullRandomSampling = &shared.DestinationDevNullRandomSampling{
				LoggingType:   loggingType2,
				MaxEntryCount: maxEntryCount2,
				SamplingRatio: samplingRatio,
				Seed:          seed,
			}
		}
		if destinationDevNullRandomSampling != nil {
			loggingConfig = shared.DestinationDevNullLoggingConfiguration{
				DestinationDevNullRandomSampling: destinationDevNullRandomSampling,
			}
		}
		destinationDevNullLogging = &shared.DestinationDevNullLogging{
			LoggingConfig: loggingConfig,
		}
	}
	if destinationDevNullLogging != nil {
		testDestination = shared.DestinationDevNullTestDestination{
			DestinationDevNullLogging: destinationDevNullLogging,
		}
	}
	var destinationDevNullSilent *shared.DestinationDevNullSilent
	if r.Configuration.TestDestination.Silent != nil {
		destinationDevNullSilent = &shared.DestinationDevNullSilent{}
	}
	if destinationDevNullSilent != nil {
		testDestination = shared.DestinationDevNullTestDestination{
			DestinationDevNullSilent: destinationDevNullSilent,
		}
	}
	var destinationDevNullThrottled *shared.DestinationDevNullThrottled
	if r.Configuration.TestDestination.Throttled != nil {
		var millisPerRecord int64
		millisPerRecord = r.Configuration.TestDestination.Throttled.MillisPerRecord.ValueInt64()

		destinationDevNullThrottled = &shared.DestinationDevNullThrottled{
			MillisPerRecord: millisPerRecord,
		}
	}
	if destinationDevNullThrottled != nil {
		testDestination = shared.DestinationDevNullTestDestination{
			DestinationDevNullThrottled: destinationDevNullThrottled,
		}
	}
	var destinationDevNullFailing *shared.DestinationDevNullFailing
	if r.Configuration.TestDestination.Failing != nil {
		var numMessages int64
		numMessages = r.Configuration.TestDestination.Failing.NumMessages.ValueInt64()

		destinationDevNullFailing = &shared.DestinationDevNullFailing{
			NumMessages: numMessages,
		}
	}
	if destinationDevNullFailing != nil {
		testDestination = shared.DestinationDevNullTestDestination{
			DestinationDevNullFailing: destinationDevNullFailing,
		}
	}
	configuration := shared.DestinationDevNull{
		TestDestination: testDestination,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationDevNullCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationDevNullResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationDevNullResourceModel) ToSharedDestinationDevNullPutRequest() *shared.DestinationDevNullPutRequest {
	var testDestination shared.TestDestination
	var logging *shared.Logging
	if r.Configuration.TestDestination.Logging != nil {
		var loggingConfig shared.LoggingConfiguration
		var firstNEntries *shared.FirstNEntries
		if r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries != nil {
			loggingType := new(shared.LoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.IsNull() {
				*loggingType = shared.LoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.LoggingType.ValueString())
			} else {
				loggingType = nil
			}
			maxEntryCount := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.IsNull() {
				*maxEntryCount, _ = r.Configuration.TestDestination.Logging.LoggingConfig.FirstNEntries.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount = nil
			}
			firstNEntries = &shared.FirstNEntries{
				LoggingType:   loggingType,
				MaxEntryCount: maxEntryCount,
			}
		}
		if firstNEntries != nil {
			loggingConfig = shared.LoggingConfiguration{
				FirstNEntries: firstNEntries,
			}
		}
		var everyNThEntry *shared.EveryNThEntry
		if r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry != nil {
			loggingType1 := new(shared.DestinationDevNullUpdateLoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.IsNull() {
				*loggingType1 = shared.DestinationDevNullUpdateLoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.LoggingType.ValueString())
			} else {
				loggingType1 = nil
			}
			maxEntryCount1 := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.IsNull() {
				*maxEntryCount1, _ = r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount1 = nil
			}
			var nthEntryToLog float64
			nthEntryToLog, _ = r.Configuration.TestDestination.Logging.LoggingConfig.EveryNThEntry.NthEntryToLog.ValueBigFloat().Float64()

			everyNThEntry = &shared.EveryNThEntry{
				LoggingType:   loggingType1,
				MaxEntryCount: maxEntryCount1,
				NthEntryToLog: nthEntryToLog,
			}
		}
		if everyNThEntry != nil {
			loggingConfig = shared.LoggingConfiguration{
				EveryNThEntry: everyNThEntry,
			}
		}
		var randomSampling *shared.RandomSampling
		if r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling != nil {
			loggingType2 := new(shared.DestinationDevNullUpdateSchemasLoggingType)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.IsNull() {
				*loggingType2 = shared.DestinationDevNullUpdateSchemasLoggingType(r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.LoggingType.ValueString())
			} else {
				loggingType2 = nil
			}
			maxEntryCount2 := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.IsNull() {
				*maxEntryCount2, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.MaxEntryCount.ValueBigFloat().Float64()
			} else {
				maxEntryCount2 = nil
			}
			samplingRatio := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.IsNull() {
				*samplingRatio, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.SamplingRatio.ValueBigFloat().Float64()
			} else {
				samplingRatio = nil
			}
			seed := new(float64)
			if !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.IsUnknown() && !r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.IsNull() {
				*seed, _ = r.Configuration.TestDestination.Logging.LoggingConfig.RandomSampling.Seed.ValueBigFloat().Float64()
			} else {
				seed = nil
			}
			randomSampling = &shared.RandomSampling{
				LoggingType:   loggingType2,
				MaxEntryCount: maxEntryCount2,
				SamplingRatio: samplingRatio,
				Seed:          seed,
			}
		}
		if randomSampling != nil {
			loggingConfig = shared.LoggingConfiguration{
				RandomSampling: randomSampling,
			}
		}
		logging = &shared.Logging{
			LoggingConfig: loggingConfig,
		}
	}
	if logging != nil {
		testDestination = shared.TestDestination{
			Logging: logging,
		}
	}
	var silent *shared.Silent
	if r.Configuration.TestDestination.Silent != nil {
		silent = &shared.Silent{}
	}
	if silent != nil {
		testDestination = shared.TestDestination{
			Silent: silent,
		}
	}
	var throttled *shared.Throttled
	if r.Configuration.TestDestination.Throttled != nil {
		var millisPerRecord int64
		millisPerRecord = r.Configuration.TestDestination.Throttled.MillisPerRecord.ValueInt64()

		throttled = &shared.Throttled{
			MillisPerRecord: millisPerRecord,
		}
	}
	if throttled != nil {
		testDestination = shared.TestDestination{
			Throttled: throttled,
		}
	}
	var failing *shared.Failing
	if r.Configuration.TestDestination.Failing != nil {
		var numMessages int64
		numMessages = r.Configuration.TestDestination.Failing.NumMessages.ValueInt64()

		failing = &shared.Failing{
			NumMessages: numMessages,
		}
	}
	if failing != nil {
		testDestination = shared.TestDestination{
			Failing: failing,
		}
	}
	configuration := shared.DestinationDevNullUpdate{
		TestDestination: testDestination,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationDevNullPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
