// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceE2eTestCloudResourceModel) ToCreateSDKType() *shared.SourceE2eTestCloudCreateRequest {
	maxMessages := new(int64)
	if !r.Configuration.MaxMessages.IsUnknown() && !r.Configuration.MaxMessages.IsNull() {
		*maxMessages = r.Configuration.MaxMessages.ValueInt64()
	} else {
		maxMessages = nil
	}
	messageIntervalMs := new(int64)
	if !r.Configuration.MessageIntervalMs.IsUnknown() && !r.Configuration.MessageIntervalMs.IsNull() {
		*messageIntervalMs = r.Configuration.MessageIntervalMs.ValueInt64()
	} else {
		messageIntervalMs = nil
	}
	var mockCatalog shared.SourceE2eTestCloudMockCatalog
	var sourceE2eTestCloudSingleSchema *shared.SourceE2eTestCloudSingleSchema
	if r.Configuration.MockCatalog.SingleSchema != nil {
		streamDuplication := new(int64)
		if !r.Configuration.MockCatalog.SingleSchema.StreamDuplication.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamDuplication.IsNull() {
			*streamDuplication = r.Configuration.MockCatalog.SingleSchema.StreamDuplication.ValueInt64()
		} else {
			streamDuplication = nil
		}
		streamName := new(string)
		if !r.Configuration.MockCatalog.SingleSchema.StreamName.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamName.IsNull() {
			*streamName = r.Configuration.MockCatalog.SingleSchema.StreamName.ValueString()
		} else {
			streamName = nil
		}
		streamSchema := new(string)
		if !r.Configuration.MockCatalog.SingleSchema.StreamSchema.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamSchema.IsNull() {
			*streamSchema = r.Configuration.MockCatalog.SingleSchema.StreamSchema.ValueString()
		} else {
			streamSchema = nil
		}
		sourceE2eTestCloudSingleSchema = &shared.SourceE2eTestCloudSingleSchema{
			StreamDuplication: streamDuplication,
			StreamName:        streamName,
			StreamSchema:      streamSchema,
		}
	}
	if sourceE2eTestCloudSingleSchema != nil {
		mockCatalog = shared.SourceE2eTestCloudMockCatalog{
			SingleSchema: sourceE2eTestCloudSingleSchema,
		}
	}
	var sourceE2eTestCloudMultiSchema *shared.SourceE2eTestCloudMultiSchema
	if r.Configuration.MockCatalog.MultiSchema != nil {
		streamSchemas := new(string)
		if !r.Configuration.MockCatalog.MultiSchema.StreamSchemas.IsUnknown() && !r.Configuration.MockCatalog.MultiSchema.StreamSchemas.IsNull() {
			*streamSchemas = r.Configuration.MockCatalog.MultiSchema.StreamSchemas.ValueString()
		} else {
			streamSchemas = nil
		}
		sourceE2eTestCloudMultiSchema = &shared.SourceE2eTestCloudMultiSchema{
			StreamSchemas: streamSchemas,
		}
	}
	if sourceE2eTestCloudMultiSchema != nil {
		mockCatalog = shared.SourceE2eTestCloudMockCatalog{
			MultiSchema: sourceE2eTestCloudMultiSchema,
		}
	}
	seed := new(int64)
	if !r.Configuration.Seed.IsUnknown() && !r.Configuration.Seed.IsNull() {
		*seed = r.Configuration.Seed.ValueInt64()
	} else {
		seed = nil
	}
	configuration := shared.SourceE2eTestCloud{
		MaxMessages:       maxMessages,
		MessageIntervalMs: messageIntervalMs,
		MockCatalog:       mockCatalog,
		Seed:              seed,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceE2eTestCloudCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceE2eTestCloudResourceModel) ToGetSDKType() *shared.SourceE2eTestCloudCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceE2eTestCloudResourceModel) ToUpdateSDKType() *shared.SourceE2eTestCloudPutRequest {
	maxMessages := new(int64)
	if !r.Configuration.MaxMessages.IsUnknown() && !r.Configuration.MaxMessages.IsNull() {
		*maxMessages = r.Configuration.MaxMessages.ValueInt64()
	} else {
		maxMessages = nil
	}
	messageIntervalMs := new(int64)
	if !r.Configuration.MessageIntervalMs.IsUnknown() && !r.Configuration.MessageIntervalMs.IsNull() {
		*messageIntervalMs = r.Configuration.MessageIntervalMs.ValueInt64()
	} else {
		messageIntervalMs = nil
	}
	var mockCatalog shared.MockCatalog
	var singleSchema *shared.SingleSchema
	if r.Configuration.MockCatalog.SingleSchema != nil {
		streamDuplication := new(int64)
		if !r.Configuration.MockCatalog.SingleSchema.StreamDuplication.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamDuplication.IsNull() {
			*streamDuplication = r.Configuration.MockCatalog.SingleSchema.StreamDuplication.ValueInt64()
		} else {
			streamDuplication = nil
		}
		streamName := new(string)
		if !r.Configuration.MockCatalog.SingleSchema.StreamName.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamName.IsNull() {
			*streamName = r.Configuration.MockCatalog.SingleSchema.StreamName.ValueString()
		} else {
			streamName = nil
		}
		streamSchema := new(string)
		if !r.Configuration.MockCatalog.SingleSchema.StreamSchema.IsUnknown() && !r.Configuration.MockCatalog.SingleSchema.StreamSchema.IsNull() {
			*streamSchema = r.Configuration.MockCatalog.SingleSchema.StreamSchema.ValueString()
		} else {
			streamSchema = nil
		}
		singleSchema = &shared.SingleSchema{
			StreamDuplication: streamDuplication,
			StreamName:        streamName,
			StreamSchema:      streamSchema,
		}
	}
	if singleSchema != nil {
		mockCatalog = shared.MockCatalog{
			SingleSchema: singleSchema,
		}
	}
	var multiSchema *shared.MultiSchema
	if r.Configuration.MockCatalog.MultiSchema != nil {
		streamSchemas := new(string)
		if !r.Configuration.MockCatalog.MultiSchema.StreamSchemas.IsUnknown() && !r.Configuration.MockCatalog.MultiSchema.StreamSchemas.IsNull() {
			*streamSchemas = r.Configuration.MockCatalog.MultiSchema.StreamSchemas.ValueString()
		} else {
			streamSchemas = nil
		}
		multiSchema = &shared.MultiSchema{
			StreamSchemas: streamSchemas,
		}
	}
	if multiSchema != nil {
		mockCatalog = shared.MockCatalog{
			MultiSchema: multiSchema,
		}
	}
	seed := new(int64)
	if !r.Configuration.Seed.IsUnknown() && !r.Configuration.Seed.IsNull() {
		*seed = r.Configuration.Seed.ValueInt64()
	} else {
		seed = nil
	}
	configuration := shared.SourceE2eTestCloudUpdate{
		MaxMessages:       maxMessages,
		MessageIntervalMs: messageIntervalMs,
		MockCatalog:       mockCatalog,
		Seed:              seed,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceE2eTestCloudPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceE2eTestCloudResourceModel) ToDeleteSDKType() *shared.SourceE2eTestCloudCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceE2eTestCloudResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceE2eTestCloudResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
