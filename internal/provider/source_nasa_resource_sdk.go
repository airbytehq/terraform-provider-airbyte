// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceNasaResourceModel) ToSharedSourceNasaCreateRequest() *shared.SourceNasaCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	conceptTags := new(bool)
	if !r.Configuration.ConceptTags.IsUnknown() && !r.Configuration.ConceptTags.IsNull() {
		*conceptTags = r.Configuration.ConceptTags.ValueBool()
	} else {
		conceptTags = nil
	}
	count := new(int64)
	if !r.Configuration.Count.IsUnknown() && !r.Configuration.Count.IsNull() {
		*count = r.Configuration.Count.ValueInt64()
	} else {
		count = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	thumbs := new(bool)
	if !r.Configuration.Thumbs.IsUnknown() && !r.Configuration.Thumbs.IsNull() {
		*thumbs = r.Configuration.Thumbs.ValueBool()
	} else {
		thumbs = nil
	}
	configuration := shared.SourceNasa{
		APIKey:      apiKey,
		ConceptTags: conceptTags,
		Count:       count,
		EndDate:     endDate,
		StartDate:   startDate,
		Thumbs:      thumbs,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceNasaCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceNasaResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNasaResourceModel) ToSharedSourceNasaPutRequest() *shared.SourceNasaPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	conceptTags := new(bool)
	if !r.Configuration.ConceptTags.IsUnknown() && !r.Configuration.ConceptTags.IsNull() {
		*conceptTags = r.Configuration.ConceptTags.ValueBool()
	} else {
		conceptTags = nil
	}
	count := new(int64)
	if !r.Configuration.Count.IsUnknown() && !r.Configuration.Count.IsNull() {
		*count = r.Configuration.Count.ValueInt64()
	} else {
		count = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	thumbs := new(bool)
	if !r.Configuration.Thumbs.IsUnknown() && !r.Configuration.Thumbs.IsNull() {
		*thumbs = r.Configuration.Thumbs.ValueBool()
	} else {
		thumbs = nil
	}
	configuration := shared.SourceNasaUpdate{
		APIKey:      apiKey,
		ConceptTags: conceptTags,
		Count:       count,
		EndDate:     endDate,
		StartDate:   startDate,
		Thumbs:      thumbs,
	}
	out := shared.SourceNasaPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
