// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceSftpResourceModel) ToSharedSourceSftpCreateRequest(ctx context.Context) (*shared.SourceSftpCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var user string
	user = r.Configuration.User.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var credentials *shared.SourceSftpAuthentication
	if r.Configuration.Credentials != nil {
		var sourceSftpPasswordAuthentication *shared.SourceSftpPasswordAuthentication
		if r.Configuration.Credentials.PasswordAuthentication != nil {
			var authUserPassword string
			authUserPassword = r.Configuration.Credentials.PasswordAuthentication.AuthUserPassword.ValueString()

			sourceSftpPasswordAuthentication = &shared.SourceSftpPasswordAuthentication{
				AuthUserPassword: authUserPassword,
			}
		}
		if sourceSftpPasswordAuthentication != nil {
			credentials = &shared.SourceSftpAuthentication{
				SourceSftpPasswordAuthentication: sourceSftpPasswordAuthentication,
			}
		}
		var sourceSftpSSHKeyAuthentication *shared.SourceSftpSSHKeyAuthentication
		if r.Configuration.Credentials.SSHKeyAuthentication != nil {
			var authSSHKey string
			authSSHKey = r.Configuration.Credentials.SSHKeyAuthentication.AuthSSHKey.ValueString()

			sourceSftpSSHKeyAuthentication = &shared.SourceSftpSSHKeyAuthentication{
				AuthSSHKey: authSSHKey,
			}
		}
		if sourceSftpSSHKeyAuthentication != nil {
			credentials = &shared.SourceSftpAuthentication{
				SourceSftpSSHKeyAuthentication: sourceSftpSSHKeyAuthentication,
			}
		}
	}
	fileTypes := new(string)
	if !r.Configuration.FileTypes.IsUnknown() && !r.Configuration.FileTypes.IsNull() {
		*fileTypes = r.Configuration.FileTypes.ValueString()
	} else {
		fileTypes = nil
	}
	folderPath := new(string)
	if !r.Configuration.FolderPath.IsUnknown() && !r.Configuration.FolderPath.IsNull() {
		*folderPath = r.Configuration.FolderPath.ValueString()
	} else {
		folderPath = nil
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	configuration := shared.SourceSftp{
		User:        user,
		Host:        host,
		Port:        port,
		Credentials: credentials,
		FileTypes:   fileTypes,
		FolderPath:  folderPath,
		FilePattern: filePattern,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSftpCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceSftpResourceModel) ToSharedSourceSftpPutRequest(ctx context.Context) (*shared.SourceSftpPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var user string
	user = r.Configuration.User.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var credentials *shared.SourceSftpUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceSftpUpdatePasswordAuthentication *shared.SourceSftpUpdatePasswordAuthentication
		if r.Configuration.Credentials.PasswordAuthentication != nil {
			var authUserPassword string
			authUserPassword = r.Configuration.Credentials.PasswordAuthentication.AuthUserPassword.ValueString()

			sourceSftpUpdatePasswordAuthentication = &shared.SourceSftpUpdatePasswordAuthentication{
				AuthUserPassword: authUserPassword,
			}
		}
		if sourceSftpUpdatePasswordAuthentication != nil {
			credentials = &shared.SourceSftpUpdateAuthentication{
				SourceSftpUpdatePasswordAuthentication: sourceSftpUpdatePasswordAuthentication,
			}
		}
		var sourceSftpUpdateSSHKeyAuthentication *shared.SourceSftpUpdateSSHKeyAuthentication
		if r.Configuration.Credentials.SSHKeyAuthentication != nil {
			var authSSHKey string
			authSSHKey = r.Configuration.Credentials.SSHKeyAuthentication.AuthSSHKey.ValueString()

			sourceSftpUpdateSSHKeyAuthentication = &shared.SourceSftpUpdateSSHKeyAuthentication{
				AuthSSHKey: authSSHKey,
			}
		}
		if sourceSftpUpdateSSHKeyAuthentication != nil {
			credentials = &shared.SourceSftpUpdateAuthentication{
				SourceSftpUpdateSSHKeyAuthentication: sourceSftpUpdateSSHKeyAuthentication,
			}
		}
	}
	fileTypes := new(string)
	if !r.Configuration.FileTypes.IsUnknown() && !r.Configuration.FileTypes.IsNull() {
		*fileTypes = r.Configuration.FileTypes.ValueString()
	} else {
		fileTypes = nil
	}
	folderPath := new(string)
	if !r.Configuration.FolderPath.IsUnknown() && !r.Configuration.FolderPath.IsNull() {
		*folderPath = r.Configuration.FolderPath.ValueString()
	} else {
		folderPath = nil
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	configuration := shared.SourceSftpUpdate{
		User:        user,
		Host:        host,
		Port:        port,
		Credentials: credentials,
		FileTypes:   fileTypes,
		FolderPath:  folderPath,
		FilePattern: filePattern,
	}
	out := shared.SourceSftpPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceSftpResourceModel) ToOperationsPutSourceSftpRequest(ctx context.Context) (*operations.PutSourceSftpRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceSftpPutRequest, sourceSftpPutRequestDiags := r.ToSharedSourceSftpPutRequest(ctx)
	diags.Append(sourceSftpPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceSftpRequest{
		SourceID:             sourceID,
		SourceSftpPutRequest: sourceSftpPutRequest,
	}

	return &out, diags
}

func (r *SourceSftpResourceModel) ToOperationsGetSourceSftpRequest(ctx context.Context) (*operations.GetSourceSftpRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceSftpRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSftpResourceModel) ToOperationsDeleteSourceSftpRequest(ctx context.Context) (*operations.DeleteSourceSftpRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceSftpRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSftpResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
