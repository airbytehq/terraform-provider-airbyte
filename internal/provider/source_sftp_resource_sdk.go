// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceSftpResourceModel) ToSharedSourceSftpCreateRequest() *shared.SourceSftpCreateRequest {
	var credentials *shared.SourceSftpAuthentication
	if r.Configuration.Credentials != nil {
		var sourceSftpPasswordAuthentication *shared.SourceSftpPasswordAuthentication
		if r.Configuration.Credentials.PasswordAuthentication != nil {
			authUserPassword := r.Configuration.Credentials.PasswordAuthentication.AuthUserPassword.ValueString()
			sourceSftpPasswordAuthentication = &shared.SourceSftpPasswordAuthentication{
				AuthUserPassword: authUserPassword,
			}
		}
		if sourceSftpPasswordAuthentication != nil {
			credentials = &shared.SourceSftpAuthentication{
				SourceSftpPasswordAuthentication: sourceSftpPasswordAuthentication,
			}
		}
		var sourceSftpSSHKeyAuthentication *shared.SourceSftpSSHKeyAuthentication
		if r.Configuration.Credentials.SSHKeyAuthentication != nil {
			authSSHKey := r.Configuration.Credentials.SSHKeyAuthentication.AuthSSHKey.ValueString()
			sourceSftpSSHKeyAuthentication = &shared.SourceSftpSSHKeyAuthentication{
				AuthSSHKey: authSSHKey,
			}
		}
		if sourceSftpSSHKeyAuthentication != nil {
			credentials = &shared.SourceSftpAuthentication{
				SourceSftpSSHKeyAuthentication: sourceSftpSSHKeyAuthentication,
			}
		}
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	fileTypes := new(string)
	if !r.Configuration.FileTypes.IsUnknown() && !r.Configuration.FileTypes.IsNull() {
		*fileTypes = r.Configuration.FileTypes.ValueString()
	} else {
		fileTypes = nil
	}
	folderPath := new(string)
	if !r.Configuration.FolderPath.IsUnknown() && !r.Configuration.FolderPath.IsNull() {
		*folderPath = r.Configuration.FolderPath.ValueString()
	} else {
		folderPath = nil
	}
	host := r.Configuration.Host.ValueString()
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	user := r.Configuration.User.ValueString()
	configuration := shared.SourceSftp{
		Credentials: credentials,
		FilePattern: filePattern,
		FileTypes:   fileTypes,
		FolderPath:  folderPath,
		Host:        host,
		Port:        port,
		User:        user,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSftpCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSftpResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSftpResourceModel) ToSharedSourceSftpPutRequest() *shared.SourceSftpPutRequest {
	var credentials *shared.SourceSftpUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceSftpUpdatePasswordAuthentication *shared.SourceSftpUpdatePasswordAuthentication
		if r.Configuration.Credentials.PasswordAuthentication != nil {
			authUserPassword := r.Configuration.Credentials.PasswordAuthentication.AuthUserPassword.ValueString()
			sourceSftpUpdatePasswordAuthentication = &shared.SourceSftpUpdatePasswordAuthentication{
				AuthUserPassword: authUserPassword,
			}
		}
		if sourceSftpUpdatePasswordAuthentication != nil {
			credentials = &shared.SourceSftpUpdateAuthentication{
				SourceSftpUpdatePasswordAuthentication: sourceSftpUpdatePasswordAuthentication,
			}
		}
		var sourceSftpUpdateSSHKeyAuthentication *shared.SourceSftpUpdateSSHKeyAuthentication
		if r.Configuration.Credentials.SSHKeyAuthentication != nil {
			authSSHKey := r.Configuration.Credentials.SSHKeyAuthentication.AuthSSHKey.ValueString()
			sourceSftpUpdateSSHKeyAuthentication = &shared.SourceSftpUpdateSSHKeyAuthentication{
				AuthSSHKey: authSSHKey,
			}
		}
		if sourceSftpUpdateSSHKeyAuthentication != nil {
			credentials = &shared.SourceSftpUpdateAuthentication{
				SourceSftpUpdateSSHKeyAuthentication: sourceSftpUpdateSSHKeyAuthentication,
			}
		}
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	fileTypes := new(string)
	if !r.Configuration.FileTypes.IsUnknown() && !r.Configuration.FileTypes.IsNull() {
		*fileTypes = r.Configuration.FileTypes.ValueString()
	} else {
		fileTypes = nil
	}
	folderPath := new(string)
	if !r.Configuration.FolderPath.IsUnknown() && !r.Configuration.FolderPath.IsNull() {
		*folderPath = r.Configuration.FolderPath.ValueString()
	} else {
		folderPath = nil
	}
	host := r.Configuration.Host.ValueString()
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	user := r.Configuration.User.ValueString()
	configuration := shared.SourceSftpUpdate{
		Credentials: credentials,
		FilePattern: filePattern,
		FileTypes:   fileTypes,
		FolderPath:  folderPath,
		Host:        host,
		Port:        port,
		User:        user,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSftpPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
