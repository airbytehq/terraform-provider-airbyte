// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceGitlabResourceModel) ToSharedSourceGitlabCreateRequest() *shared.SourceGitlabCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	apiURL := new(string)
	if !r.Configuration.APIURL.IsUnknown() && !r.Configuration.APIURL.IsNull() {
		*apiURL = r.Configuration.APIURL.ValueString()
	} else {
		apiURL = nil
	}
	var credentials shared.SourceGitlabAuthorizationMethod
	var sourceGitlabOAuth20 *shared.SourceGitlabOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceGitlabOAuth20 = &shared.SourceGitlabOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceGitlabOAuth20 != nil {
		credentials = shared.SourceGitlabAuthorizationMethod{
			SourceGitlabOAuth20: sourceGitlabOAuth20,
		}
	}
	var privateToken *shared.PrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()

		privateToken = &shared.PrivateToken{
			AccessToken: accessToken1,
		}
	}
	if privateToken != nil {
		credentials = shared.SourceGitlabAuthorizationMethod{
			PrivateToken: privateToken,
		}
	}
	var groupsList []string = []string{}
	for _, groupsListItem := range r.Configuration.GroupsList {
		groupsList = append(groupsList, groupsListItem.ValueString())
	}
	var projectsList []string = []string{}
	for _, projectsListItem := range r.Configuration.ProjectsList {
		projectsList = append(projectsList, projectsListItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGitlab{
		APIURL:       apiURL,
		Credentials:  credentials,
		GroupsList:   groupsList,
		ProjectsList: projectsList,
		StartDate:    startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceGitlabCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceGitlabResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceGitlabResourceModel) ToSharedSourceGitlabPutRequest() *shared.SourceGitlabPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	apiURL := new(string)
	if !r.Configuration.APIURL.IsUnknown() && !r.Configuration.APIURL.IsNull() {
		*apiURL = r.Configuration.APIURL.ValueString()
	} else {
		apiURL = nil
	}
	var credentials shared.SourceGitlabUpdateAuthorizationMethod
	var sourceGitlabUpdateOAuth20 *shared.SourceGitlabUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceGitlabUpdateOAuth20 = &shared.SourceGitlabUpdateOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceGitlabUpdateOAuth20 != nil {
		credentials = shared.SourceGitlabUpdateAuthorizationMethod{
			SourceGitlabUpdateOAuth20: sourceGitlabUpdateOAuth20,
		}
	}
	var sourceGitlabUpdatePrivateToken *shared.SourceGitlabUpdatePrivateToken
	if r.Configuration.Credentials.PrivateToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.PrivateToken.AccessToken.ValueString()

		sourceGitlabUpdatePrivateToken = &shared.SourceGitlabUpdatePrivateToken{
			AccessToken: accessToken1,
		}
	}
	if sourceGitlabUpdatePrivateToken != nil {
		credentials = shared.SourceGitlabUpdateAuthorizationMethod{
			SourceGitlabUpdatePrivateToken: sourceGitlabUpdatePrivateToken,
		}
	}
	var groupsList []string = []string{}
	for _, groupsListItem := range r.Configuration.GroupsList {
		groupsList = append(groupsList, groupsListItem.ValueString())
	}
	var projectsList []string = []string{}
	for _, projectsListItem := range r.Configuration.ProjectsList {
		projectsList = append(projectsList, projectsListItem.ValueString())
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGitlabUpdate{
		APIURL:       apiURL,
		Credentials:  credentials,
		GroupsList:   groupsList,
		ProjectsList: projectsList,
		StartDate:    startDate,
	}
	out := shared.SourceGitlabPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
