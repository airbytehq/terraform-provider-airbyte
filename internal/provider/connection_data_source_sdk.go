// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ConnectionDataSourceModel) ToOperationsGetConnectionRequest(ctx context.Context) (*operations.GetConnectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var connectionID string
	connectionID = r.ConnectionID.ValueString()

	out := operations.GetConnectionRequest{
		ConnectionID: connectionID,
	}

	return &out, diags
}

func (r *ConnectionDataSourceModel) RefreshFromSharedConnectionResponse(ctx context.Context, resp *shared.ConnectionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Configurations.Streams = []tfTypes.StreamConfiguration{}
		if len(r.Configurations.Streams) > len(resp.Configurations.Streams) {
			r.Configurations.Streams = r.Configurations.Streams[:len(resp.Configurations.Streams)]
		}
		for streamsCount, streamsItem := range resp.Configurations.Streams {
			var streams tfTypes.StreamConfiguration
			streams.CursorField = make([]types.String, 0, len(streamsItem.CursorField))
			for _, v := range streamsItem.CursorField {
				streams.CursorField = append(streams.CursorField, types.StringValue(v))
			}
			streams.IncludeFiles = types.BoolPointerValue(streamsItem.IncludeFiles)
			streams.Mappers = []tfTypes.ConfiguredStreamMapper{}
			for mappersCount, mappersItem := range streamsItem.Mappers {
				var mappers tfTypes.ConfiguredStreamMapper
				mappers.ID = types.StringPointerValue(mappersItem.ID)
				if mappersItem.MapperConfiguration.Encryption != nil {
					mappers.MapperConfiguration.Encryption = &tfTypes.Encryption{}
					if mappersItem.MapperConfiguration.Encryption.EncryptionAES != nil {
						mappers.MapperConfiguration.Encryption.Aes = &tfTypes.EncryptionAES{}
						mappers.MapperConfiguration.Encryption.Aes.Algorithm = types.StringValue(string(mappersItem.MapperConfiguration.Encryption.EncryptionAES.Algorithm))
						mappers.MapperConfiguration.Encryption.Aes.FieldNameSuffix = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionAES.FieldNameSuffix)
						mappers.MapperConfiguration.Encryption.Aes.Key = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionAES.Key)
						mappers.MapperConfiguration.Encryption.Aes.Mode = types.StringValue(string(mappersItem.MapperConfiguration.Encryption.EncryptionAES.Mode))
						mappers.MapperConfiguration.Encryption.Aes.Padding = types.StringValue(string(mappersItem.MapperConfiguration.Encryption.EncryptionAES.Padding))
						mappers.MapperConfiguration.Encryption.Aes.TargetField = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionAES.TargetField)
					}
					if mappersItem.MapperConfiguration.Encryption.EncryptionRSA != nil {
						mappers.MapperConfiguration.Encryption.Rsa = &tfTypes.EncryptionRSA{}
						mappers.MapperConfiguration.Encryption.Rsa.Algorithm = types.StringValue(string(mappersItem.MapperConfiguration.Encryption.EncryptionRSA.Algorithm))
						mappers.MapperConfiguration.Encryption.Rsa.FieldNameSuffix = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionRSA.FieldNameSuffix)
						mappers.MapperConfiguration.Encryption.Rsa.PublicKey = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionRSA.PublicKey)
						mappers.MapperConfiguration.Encryption.Rsa.TargetField = types.StringValue(mappersItem.MapperConfiguration.Encryption.EncryptionRSA.TargetField)
					}
				}
				if mappersItem.MapperConfiguration.FieldRenaming != nil {
					mappers.MapperConfiguration.FieldRenaming = &tfTypes.FieldRenaming{}
					mappers.MapperConfiguration.FieldRenaming.NewFieldName = types.StringValue(mappersItem.MapperConfiguration.FieldRenaming.NewFieldName)
					mappers.MapperConfiguration.FieldRenaming.OriginalFieldName = types.StringValue(mappersItem.MapperConfiguration.FieldRenaming.OriginalFieldName)
				}
				if mappersItem.MapperConfiguration.Hashing != nil {
					mappers.MapperConfiguration.Hashing = &tfTypes.Hashing{}
					mappers.MapperConfiguration.Hashing.FieldNameSuffix = types.StringValue(mappersItem.MapperConfiguration.Hashing.FieldNameSuffix)
					mappers.MapperConfiguration.Hashing.Method = types.StringValue(string(mappersItem.MapperConfiguration.Hashing.Method))
					mappers.MapperConfiguration.Hashing.TargetField = types.StringValue(mappersItem.MapperConfiguration.Hashing.TargetField)
				}
				if mappersItem.MapperConfiguration.RowFiltering != nil {
					mappers.MapperConfiguration.RowFiltering = &tfTypes.RowFiltering{}
					conditionsResult, _ := json.Marshal(mappersItem.MapperConfiguration.RowFiltering.Conditions)
					mappers.MapperConfiguration.RowFiltering.Conditions = types.StringValue(string(conditionsResult))
				}
				mappers.Type = types.StringValue(string(mappersItem.Type))
				if mappersCount+1 > len(streams.Mappers) {
					streams.Mappers = append(streams.Mappers, mappers)
				} else {
					streams.Mappers[mappersCount].ID = mappers.ID
					streams.Mappers[mappersCount].MapperConfiguration = mappers.MapperConfiguration
					streams.Mappers[mappersCount].Type = mappers.Type
				}
			}
			streams.Name = types.StringValue(streamsItem.Name)
			streams.Namespace = types.StringPointerValue(streamsItem.Namespace)
			streams.PrimaryKey = nil
			for _, primaryKeyItem := range streamsItem.PrimaryKey {
				var primaryKey []types.String
				primaryKey = make([]types.String, 0, len(primaryKeyItem))
				for _, v := range primaryKeyItem {
					primaryKey = append(primaryKey, types.StringValue(v))
				}
				streams.PrimaryKey = append(streams.PrimaryKey, primaryKey)
			}
			streams.SelectedFields = []tfTypes.SelectedFieldInfo{}
			for selectedFieldsCount, selectedFieldsItem := range streamsItem.SelectedFields {
				var selectedFields tfTypes.SelectedFieldInfo
				selectedFields.FieldPath = make([]types.String, 0, len(selectedFieldsItem.FieldPath))
				for _, v := range selectedFieldsItem.FieldPath {
					selectedFields.FieldPath = append(selectedFields.FieldPath, types.StringValue(v))
				}
				if selectedFieldsCount+1 > len(streams.SelectedFields) {
					streams.SelectedFields = append(streams.SelectedFields, selectedFields)
				} else {
					streams.SelectedFields[selectedFieldsCount].FieldPath = selectedFields.FieldPath
				}
			}
			if streamsItem.SyncMode != nil {
				streams.SyncMode = types.StringValue(string(*streamsItem.SyncMode))
			} else {
				streams.SyncMode = types.StringNull()
			}
			if streamsCount+1 > len(r.Configurations.Streams) {
				r.Configurations.Streams = append(r.Configurations.Streams, streams)
			} else {
				r.Configurations.Streams[streamsCount].CursorField = streams.CursorField
				r.Configurations.Streams[streamsCount].IncludeFiles = streams.IncludeFiles
				r.Configurations.Streams[streamsCount].Mappers = streams.Mappers
				r.Configurations.Streams[streamsCount].Name = streams.Name
				r.Configurations.Streams[streamsCount].Namespace = streams.Namespace
				r.Configurations.Streams[streamsCount].PrimaryKey = streams.PrimaryKey
				r.Configurations.Streams[streamsCount].SelectedFields = streams.SelectedFields
				r.Configurations.Streams[streamsCount].SyncMode = streams.SyncMode
			}
		}
		r.ConnectionID = types.StringValue(resp.ConnectionID)
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DataResidency = types.StringValue(resp.DataResidency)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.Name = types.StringValue(resp.Name)
		if resp.NamespaceDefinition != nil {
			r.NamespaceDefinition = types.StringValue(string(*resp.NamespaceDefinition))
		} else {
			r.NamespaceDefinition = types.StringNull()
		}
		r.NamespaceFormat = types.StringPointerValue(resp.NamespaceFormat)
		if resp.NonBreakingSchemaUpdatesBehavior != nil {
			r.NonBreakingSchemaUpdatesBehavior = types.StringValue(string(*resp.NonBreakingSchemaUpdatesBehavior))
		} else {
			r.NonBreakingSchemaUpdatesBehavior = types.StringNull()
		}
		r.Prefix = types.StringPointerValue(resp.Prefix)
		r.Schedule.BasicTiming = types.StringPointerValue(resp.Schedule.BasicTiming)
		r.Schedule.CronExpression = types.StringPointerValue(resp.Schedule.CronExpression)
		r.Schedule.ScheduleType = types.StringValue(string(resp.Schedule.ScheduleType))
		r.SourceID = types.StringValue(resp.SourceID)
		r.Status = types.StringValue(string(resp.Status))
		r.Tags = []tfTypes.Tag{}
		if len(r.Tags) > len(resp.Tags) {
			r.Tags = r.Tags[:len(resp.Tags)]
		}
		for tagsCount, tagsItem := range resp.Tags {
			var tags tfTypes.Tag
			tags.Color = types.StringValue(tagsItem.Color)
			tags.Name = types.StringValue(tagsItem.Name)
			tags.TagID = types.StringValue(tagsItem.TagID)
			tags.WorkspaceID = types.StringValue(tagsItem.WorkspaceID)
			if tagsCount+1 > len(r.Tags) {
				r.Tags = append(r.Tags, tags)
			} else {
				r.Tags[tagsCount].Color = tags.Color
				r.Tags[tagsCount].Name = tags.Name
				r.Tags[tagsCount].TagID = tags.TagID
				r.Tags[tagsCount].WorkspaceID = tags.WorkspaceID
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
