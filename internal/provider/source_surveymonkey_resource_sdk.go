// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSurveymonkeyResourceModel) ToCreateSDKType() *shared.SourceSurveymonkeyCreateRequest {
	var credentials *shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		accessToken := r.Configuration.Credentials.AccessToken.ValueString()
		authMethod := shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod(r.Configuration.Credentials.AuthMethod.ValueString())
		clientID := new(string)
		if !r.Configuration.Credentials.ClientID.IsUnknown() && !r.Configuration.Credentials.ClientID.IsNull() {
			*clientID = r.Configuration.Credentials.ClientID.ValueString()
		} else {
			clientID = nil
		}
		clientSecret := new(string)
		if !r.Configuration.Credentials.ClientSecret.IsUnknown() && !r.Configuration.Credentials.ClientSecret.IsNull() {
			*clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		credentials = &shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethod{
			AccessToken:  accessToken,
			AuthMethod:   authMethod,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	origin := new(shared.SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount)
	if !r.Configuration.Origin.IsUnknown() && !r.Configuration.Origin.IsNull() {
		*origin = shared.SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount(r.Configuration.Origin.ValueString())
	} else {
		origin = nil
	}
	sourceType := shared.SourceSurveymonkeySurveymonkey(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var surveyIds []string = nil
	for _, surveyIdsItem := range r.Configuration.SurveyIds {
		surveyIds = append(surveyIds, surveyIdsItem.ValueString())
	}
	configuration := shared.SourceSurveymonkey{
		Credentials: credentials,
		Origin:      origin,
		SourceType:  sourceType,
		StartDate:   startDate,
		SurveyIds:   surveyIds,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSurveymonkeyCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSurveymonkeyResourceModel) ToGetSDKType() *shared.SourceSurveymonkeyCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSurveymonkeyResourceModel) ToUpdateSDKType() *shared.SourceSurveymonkeyPutRequest {
	var credentials *shared.SourceSurveymonkeyUpdateSurveyMonkeyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		accessToken := r.Configuration.Credentials.AccessToken.ValueString()
		authMethod := shared.SourceSurveymonkeyUpdateSurveyMonkeyAuthorizationMethodAuthMethod(r.Configuration.Credentials.AuthMethod.ValueString())
		clientID := new(string)
		if !r.Configuration.Credentials.ClientID.IsUnknown() && !r.Configuration.Credentials.ClientID.IsNull() {
			*clientID = r.Configuration.Credentials.ClientID.ValueString()
		} else {
			clientID = nil
		}
		clientSecret := new(string)
		if !r.Configuration.Credentials.ClientSecret.IsUnknown() && !r.Configuration.Credentials.ClientSecret.IsNull() {
			*clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		credentials = &shared.SourceSurveymonkeyUpdateSurveyMonkeyAuthorizationMethod{
			AccessToken:  accessToken,
			AuthMethod:   authMethod,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	origin := new(shared.SourceSurveymonkeyUpdateOriginDatacenterOfTheSurveyMonkeyAccount)
	if !r.Configuration.Origin.IsUnknown() && !r.Configuration.Origin.IsNull() {
		*origin = shared.SourceSurveymonkeyUpdateOriginDatacenterOfTheSurveyMonkeyAccount(r.Configuration.Origin.ValueString())
	} else {
		origin = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var surveyIds []string = nil
	for _, surveyIdsItem := range r.Configuration.SurveyIds {
		surveyIds = append(surveyIds, surveyIdsItem.ValueString())
	}
	configuration := shared.SourceSurveymonkeyUpdate{
		Credentials: credentials,
		Origin:      origin,
		StartDate:   startDate,
		SurveyIds:   surveyIds,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSurveymonkeyPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSurveymonkeyResourceModel) ToDeleteSDKType() *shared.SourceSurveymonkeyCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSurveymonkeyResourceModel) RefreshFromGetResponse(resp *shared.SourceSurveymonkeyGetResponse) {
	if r.Configuration.Credentials == nil {
		r.Configuration.Credentials = &SourceSurveymonkeySurveyMonkeyAuthorizationMethod{}
	}
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceSurveymonkeySurveyMonkeyAuthorizationMethod{}
		r.Configuration.Credentials.AccessToken = types.StringValue(resp.Configuration.Credentials.AccessToken)
		r.Configuration.Credentials.AuthMethod = types.StringValue(string(resp.Configuration.Credentials.AuthMethod))
		if resp.Configuration.Credentials.ClientID != nil {
			r.Configuration.Credentials.ClientID = types.StringValue(*resp.Configuration.Credentials.ClientID)
		} else {
			r.Configuration.Credentials.ClientID = types.StringNull()
		}
		if resp.Configuration.Credentials.ClientSecret != nil {
			r.Configuration.Credentials.ClientSecret = types.StringValue(*resp.Configuration.Credentials.ClientSecret)
		} else {
			r.Configuration.Credentials.ClientSecret = types.StringNull()
		}
	}
	if resp.Configuration.Origin != nil {
		r.Configuration.Origin = types.StringValue(string(*resp.Configuration.Origin))
	} else {
		r.Configuration.Origin = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Configuration.SurveyIds = nil
	for _, v := range resp.Configuration.SurveyIds {
		r.Configuration.SurveyIds = append(r.Configuration.SurveyIds, types.StringValue(v))
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSurveymonkeyResourceModel) RefreshFromCreateResponse(resp *shared.SourceSurveymonkeyGetResponse) {
	r.RefreshFromGetResponse(resp)
}
