// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceYandexMetricaResourceModel) ToCreateSDKType() *shared.SourceYandexMetricaCreateRequest {
	authToken := r.Configuration.AuthToken.ValueString()
	counterID := r.Configuration.CounterID.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	sourceType := shared.SourceYandexMetricaYandexMetrica(r.Configuration.SourceType.ValueString())
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceYandexMetrica{
		AuthToken:  authToken,
		CounterID:  counterID,
		EndDate:    endDate,
		SourceType: sourceType,
		StartDate:  startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceYandexMetricaCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceYandexMetricaResourceModel) ToGetSDKType() *shared.SourceYandexMetricaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceYandexMetricaResourceModel) ToUpdateSDKType() *shared.SourceYandexMetricaPutRequest {
	authToken := r.Configuration.AuthToken.ValueString()
	counterID := r.Configuration.CounterID.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceYandexMetricaUpdate{
		AuthToken: authToken,
		CounterID: counterID,
		EndDate:   endDate,
		StartDate: startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceYandexMetricaPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceYandexMetricaResourceModel) ToDeleteSDKType() *shared.SourceYandexMetricaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceYandexMetricaResourceModel) RefreshFromGetResponse(resp *shared.SourceYandexMetricaGetResponse) {
	r.Configuration.AuthToken = types.StringValue(resp.Configuration.AuthToken)
	r.Configuration.CounterID = types.StringValue(resp.Configuration.CounterID)
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(resp.Configuration.EndDate.String())
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceYandexMetricaResourceModel) RefreshFromCreateResponse(resp *shared.SourceYandexMetricaGetResponse) {
	r.RefreshFromGetResponse(resp)
}
