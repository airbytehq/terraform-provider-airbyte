// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAzureBlobStorageResourceModel) ToSharedDestinationAzureBlobStorageCreateRequest() *shared.DestinationAzureBlobStorageCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	azureBlobStorageEndpointDomainName := new(string)
	if !r.Configuration.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.AzureBlobStorageEndpointDomainName.IsNull() {
		*azureBlobStorageEndpointDomainName = r.Configuration.AzureBlobStorageEndpointDomainName.ValueString()
	} else {
		azureBlobStorageEndpointDomainName = nil
	}
	azureBlobStorageContainerName := new(string)
	if !r.Configuration.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.AzureBlobStorageContainerName.IsNull() {
		*azureBlobStorageContainerName = r.Configuration.AzureBlobStorageContainerName.ValueString()
	} else {
		azureBlobStorageContainerName = nil
	}
	var azureBlobStorageAccountName string
	azureBlobStorageAccountName = r.Configuration.AzureBlobStorageAccountName.ValueString()

	var azureBlobStorageAccountKey string
	azureBlobStorageAccountKey = r.Configuration.AzureBlobStorageAccountKey.ValueString()

	azureBlobStorageOutputBufferSize := new(int64)
	if !r.Configuration.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.AzureBlobStorageOutputBufferSize.IsNull() {
		*azureBlobStorageOutputBufferSize = r.Configuration.AzureBlobStorageOutputBufferSize.ValueInt64()
	} else {
		azureBlobStorageOutputBufferSize = nil
	}
	azureBlobStorageSpillSize := new(int64)
	if !r.Configuration.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.AzureBlobStorageSpillSize.IsNull() {
		*azureBlobStorageSpillSize = r.Configuration.AzureBlobStorageSpillSize.ValueInt64()
	} else {
		azureBlobStorageSpillSize = nil
	}
	var format shared.OutputFormat
	var csvCommaSeparatedValues *shared.CSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		flattening := new(shared.NormalizationFlattening)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.NormalizationFlattening(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		fileExtension := new(bool)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsNull() {
			*fileExtension = r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.ValueBool()
		} else {
			fileExtension = nil
		}
		csvCommaSeparatedValues = &shared.CSVCommaSeparatedValues{
			Flattening:    flattening,
			FileExtension: fileExtension,
		}
	}
	if csvCommaSeparatedValues != nil {
		format = shared.OutputFormat{
			CSVCommaSeparatedValues: csvCommaSeparatedValues,
		}
	}
	var destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		fileExtension1 := new(bool)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsNull() {
			*fileExtension1 = r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.ValueBool()
		} else {
			fileExtension1 = nil
		}
		destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON{
			FileExtension: fileExtension1,
		}
	}
	if destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON != nil {
		format = shared.OutputFormat{
			DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON,
		}
	}
	configuration := shared.DestinationAzureBlobStorage{
		AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
		AzureBlobStorageContainerName:      azureBlobStorageContainerName,
		AzureBlobStorageAccountName:        azureBlobStorageAccountName,
		AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
		AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
		AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
		Format:                             format,
	}
	out := shared.DestinationAzureBlobStorageCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationAzureBlobStorageResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationAzureBlobStorageResourceModel) ToSharedDestinationAzureBlobStoragePutRequest() *shared.DestinationAzureBlobStoragePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	azureBlobStorageEndpointDomainName := new(string)
	if !r.Configuration.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.AzureBlobStorageEndpointDomainName.IsNull() {
		*azureBlobStorageEndpointDomainName = r.Configuration.AzureBlobStorageEndpointDomainName.ValueString()
	} else {
		azureBlobStorageEndpointDomainName = nil
	}
	azureBlobStorageContainerName := new(string)
	if !r.Configuration.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.AzureBlobStorageContainerName.IsNull() {
		*azureBlobStorageContainerName = r.Configuration.AzureBlobStorageContainerName.ValueString()
	} else {
		azureBlobStorageContainerName = nil
	}
	var azureBlobStorageAccountName string
	azureBlobStorageAccountName = r.Configuration.AzureBlobStorageAccountName.ValueString()

	var azureBlobStorageAccountKey string
	azureBlobStorageAccountKey = r.Configuration.AzureBlobStorageAccountKey.ValueString()

	azureBlobStorageOutputBufferSize := new(int64)
	if !r.Configuration.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.AzureBlobStorageOutputBufferSize.IsNull() {
		*azureBlobStorageOutputBufferSize = r.Configuration.AzureBlobStorageOutputBufferSize.ValueInt64()
	} else {
		azureBlobStorageOutputBufferSize = nil
	}
	azureBlobStorageSpillSize := new(int64)
	if !r.Configuration.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.AzureBlobStorageSpillSize.IsNull() {
		*azureBlobStorageSpillSize = r.Configuration.AzureBlobStorageSpillSize.ValueInt64()
	} else {
		azureBlobStorageSpillSize = nil
	}
	var format shared.DestinationAzureBlobStorageUpdateOutputFormat
	var destinationAzureBlobStorageUpdateCSVCommaSeparatedValues *shared.DestinationAzureBlobStorageUpdateCSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		flattening := new(shared.DestinationAzureBlobStorageUpdateNormalizationFlattening)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.DestinationAzureBlobStorageUpdateNormalizationFlattening(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		fileExtension := new(bool)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsNull() {
			*fileExtension = r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.ValueBool()
		} else {
			fileExtension = nil
		}
		destinationAzureBlobStorageUpdateCSVCommaSeparatedValues = &shared.DestinationAzureBlobStorageUpdateCSVCommaSeparatedValues{
			Flattening:    flattening,
			FileExtension: fileExtension,
		}
	}
	if destinationAzureBlobStorageUpdateCSVCommaSeparatedValues != nil {
		format = shared.DestinationAzureBlobStorageUpdateOutputFormat{
			DestinationAzureBlobStorageUpdateCSVCommaSeparatedValues: destinationAzureBlobStorageUpdateCSVCommaSeparatedValues,
		}
	}
	var destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		fileExtension1 := new(bool)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsNull() {
			*fileExtension1 = r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.ValueBool()
		} else {
			fileExtension1 = nil
		}
		destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON{
			FileExtension: fileExtension1,
		}
	}
	if destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationAzureBlobStorageUpdateOutputFormat{
			DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON,
		}
	}
	configuration := shared.DestinationAzureBlobStorageUpdate{
		AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
		AzureBlobStorageContainerName:      azureBlobStorageContainerName,
		AzureBlobStorageAccountName:        azureBlobStorageAccountName,
		AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
		AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
		AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
		Format:                             format,
	}
	out := shared.DestinationAzureBlobStoragePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
