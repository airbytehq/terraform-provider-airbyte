// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAzureBlobStorageResourceModel) ToSharedDestinationAzureBlobStorageCreateRequest() *shared.DestinationAzureBlobStorageCreateRequest {
	var azureBlobStorageAccountKey string
	azureBlobStorageAccountKey = r.Configuration.AzureBlobStorageAccountKey.ValueString()

	var azureBlobStorageAccountName string
	azureBlobStorageAccountName = r.Configuration.AzureBlobStorageAccountName.ValueString()

	azureBlobStorageContainerName := new(string)
	if !r.Configuration.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.AzureBlobStorageContainerName.IsNull() {
		*azureBlobStorageContainerName = r.Configuration.AzureBlobStorageContainerName.ValueString()
	} else {
		azureBlobStorageContainerName = nil
	}
	azureBlobStorageEndpointDomainName := new(string)
	if !r.Configuration.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.AzureBlobStorageEndpointDomainName.IsNull() {
		*azureBlobStorageEndpointDomainName = r.Configuration.AzureBlobStorageEndpointDomainName.ValueString()
	} else {
		azureBlobStorageEndpointDomainName = nil
	}
	azureBlobStorageOutputBufferSize := new(int64)
	if !r.Configuration.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.AzureBlobStorageOutputBufferSize.IsNull() {
		*azureBlobStorageOutputBufferSize = r.Configuration.AzureBlobStorageOutputBufferSize.ValueInt64()
	} else {
		azureBlobStorageOutputBufferSize = nil
	}
	azureBlobStorageSpillSize := new(int64)
	if !r.Configuration.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.AzureBlobStorageSpillSize.IsNull() {
		*azureBlobStorageSpillSize = r.Configuration.AzureBlobStorageSpillSize.ValueInt64()
	} else {
		azureBlobStorageSpillSize = nil
	}
	var format shared.DestinationAzureBlobStorageOutputFormat
	var destinationAzureBlobStorageCSVCommaSeparatedValues *shared.DestinationAzureBlobStorageCSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		fileExtension := new(bool)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsNull() {
			*fileExtension = r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.ValueBool()
		} else {
			fileExtension = nil
		}
		flattening := new(shared.DestinationAzureBlobStorageNormalizationFlattening)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.DestinationAzureBlobStorageNormalizationFlattening(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		destinationAzureBlobStorageCSVCommaSeparatedValues = &shared.DestinationAzureBlobStorageCSVCommaSeparatedValues{
			FileExtension: fileExtension,
			Flattening:    flattening,
		}
	}
	if destinationAzureBlobStorageCSVCommaSeparatedValues != nil {
		format = shared.DestinationAzureBlobStorageOutputFormat{
			DestinationAzureBlobStorageCSVCommaSeparatedValues: destinationAzureBlobStorageCSVCommaSeparatedValues,
		}
	}
	var destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		fileExtension1 := new(bool)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsNull() {
			*fileExtension1 = r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.ValueBool()
		} else {
			fileExtension1 = nil
		}
		destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON{
			FileExtension: fileExtension1,
		}
	}
	if destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationAzureBlobStorageOutputFormat{
			DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON,
		}
	}
	configuration := shared.DestinationAzureBlobStorage{
		AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
		AzureBlobStorageAccountName:        azureBlobStorageAccountName,
		AzureBlobStorageContainerName:      azureBlobStorageContainerName,
		AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
		AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
		AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
		Format:                             format,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationAzureBlobStorageCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAzureBlobStorageResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationAzureBlobStorageResourceModel) ToSharedDestinationAzureBlobStoragePutRequest() *shared.DestinationAzureBlobStoragePutRequest {
	var azureBlobStorageAccountKey string
	azureBlobStorageAccountKey = r.Configuration.AzureBlobStorageAccountKey.ValueString()

	var azureBlobStorageAccountName string
	azureBlobStorageAccountName = r.Configuration.AzureBlobStorageAccountName.ValueString()

	azureBlobStorageContainerName := new(string)
	if !r.Configuration.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.AzureBlobStorageContainerName.IsNull() {
		*azureBlobStorageContainerName = r.Configuration.AzureBlobStorageContainerName.ValueString()
	} else {
		azureBlobStorageContainerName = nil
	}
	azureBlobStorageEndpointDomainName := new(string)
	if !r.Configuration.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.AzureBlobStorageEndpointDomainName.IsNull() {
		*azureBlobStorageEndpointDomainName = r.Configuration.AzureBlobStorageEndpointDomainName.ValueString()
	} else {
		azureBlobStorageEndpointDomainName = nil
	}
	azureBlobStorageOutputBufferSize := new(int64)
	if !r.Configuration.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.AzureBlobStorageOutputBufferSize.IsNull() {
		*azureBlobStorageOutputBufferSize = r.Configuration.AzureBlobStorageOutputBufferSize.ValueInt64()
	} else {
		azureBlobStorageOutputBufferSize = nil
	}
	azureBlobStorageSpillSize := new(int64)
	if !r.Configuration.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.AzureBlobStorageSpillSize.IsNull() {
		*azureBlobStorageSpillSize = r.Configuration.AzureBlobStorageSpillSize.ValueInt64()
	} else {
		azureBlobStorageSpillSize = nil
	}
	var format shared.OutputFormat
	var csvCommaSeparatedValues *shared.CSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		fileExtension := new(bool)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.IsNull() {
			*fileExtension = r.Configuration.Format.CSVCommaSeparatedValues.FileExtension.ValueBool()
		} else {
			fileExtension = nil
		}
		flattening := new(shared.NormalizationFlattening)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.NormalizationFlattening(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		csvCommaSeparatedValues = &shared.CSVCommaSeparatedValues{
			FileExtension: fileExtension,
			Flattening:    flattening,
		}
	}
	if csvCommaSeparatedValues != nil {
		format = shared.OutputFormat{
			CSVCommaSeparatedValues: csvCommaSeparatedValues,
		}
	}
	var destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		fileExtension1 := new(bool)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.IsNull() {
			*fileExtension1 = r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FileExtension.ValueBool()
		} else {
			fileExtension1 = nil
		}
		destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON{
			FileExtension: fileExtension1,
		}
	}
	if destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON != nil {
		format = shared.OutputFormat{
			DestinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageUpdateJSONLinesNewlineDelimitedJSON,
		}
	}
	configuration := shared.DestinationAzureBlobStorageUpdate{
		AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
		AzureBlobStorageAccountName:        azureBlobStorageAccountName,
		AzureBlobStorageContainerName:      azureBlobStorageContainerName,
		AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
		AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
		AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
		Format:                             format,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationAzureBlobStoragePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
