// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationKinesisResourceModel) ToCreateSDKType() *shared.DestinationKinesisCreateRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	bufferSize := new(int64)
	if !r.Configuration.BufferSize.IsUnknown() && !r.Configuration.BufferSize.IsNull() {
		*bufferSize = r.Configuration.BufferSize.ValueInt64()
	} else {
		bufferSize = nil
	}
	endpoint := r.Configuration.Endpoint.ValueString()
	privateKey := r.Configuration.PrivateKey.ValueString()
	region := r.Configuration.Region.ValueString()
	shardCount := new(int64)
	if !r.Configuration.ShardCount.IsUnknown() && !r.Configuration.ShardCount.IsNull() {
		*shardCount = r.Configuration.ShardCount.ValueInt64()
	} else {
		shardCount = nil
	}
	configuration := shared.DestinationKinesis{
		AccessKey:  accessKey,
		BufferSize: bufferSize,
		Endpoint:   endpoint,
		PrivateKey: privateKey,
		Region:     region,
		ShardCount: shardCount,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationKinesisCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationKinesisResourceModel) ToGetSDKType() *shared.DestinationKinesisCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationKinesisResourceModel) ToUpdateSDKType() *shared.DestinationKinesisPutRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	bufferSize := new(int64)
	if !r.Configuration.BufferSize.IsUnknown() && !r.Configuration.BufferSize.IsNull() {
		*bufferSize = r.Configuration.BufferSize.ValueInt64()
	} else {
		bufferSize = nil
	}
	endpoint := r.Configuration.Endpoint.ValueString()
	privateKey := r.Configuration.PrivateKey.ValueString()
	region := r.Configuration.Region.ValueString()
	shardCount := new(int64)
	if !r.Configuration.ShardCount.IsUnknown() && !r.Configuration.ShardCount.IsNull() {
		*shardCount = r.Configuration.ShardCount.ValueInt64()
	} else {
		shardCount = nil
	}
	configuration := shared.DestinationKinesisUpdate{
		AccessKey:  accessKey,
		BufferSize: bufferSize,
		Endpoint:   endpoint,
		PrivateKey: privateKey,
		Region:     region,
		ShardCount: shardCount,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationKinesisPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationKinesisResourceModel) ToDeleteSDKType() *shared.DestinationKinesisCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationKinesisResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationKinesisResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
