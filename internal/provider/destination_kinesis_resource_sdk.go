// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationKinesisResourceModel) ToCreateSDKType() *shared.DestinationKinesisCreateRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	bufferSize := r.Configuration.BufferSize.ValueInt64()
	destinationType := shared.DestinationKinesisKinesis(r.Configuration.DestinationType.ValueString())
	endpoint := r.Configuration.Endpoint.ValueString()
	privateKey := r.Configuration.PrivateKey.ValueString()
	region := r.Configuration.Region.ValueString()
	shardCount := r.Configuration.ShardCount.ValueInt64()
	configuration := shared.DestinationKinesis{
		AccessKey:       accessKey,
		BufferSize:      bufferSize,
		DestinationType: destinationType,
		Endpoint:        endpoint,
		PrivateKey:      privateKey,
		Region:          region,
		ShardCount:      shardCount,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationKinesisCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationKinesisResourceModel) ToGetSDKType() *shared.DestinationKinesisCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationKinesisResourceModel) ToUpdateSDKType() *shared.DestinationKinesisPutRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	bufferSize := r.Configuration.BufferSize.ValueInt64()
	endpoint := r.Configuration.Endpoint.ValueString()
	privateKey := r.Configuration.PrivateKey.ValueString()
	region := r.Configuration.Region.ValueString()
	shardCount := r.Configuration.ShardCount.ValueInt64()
	configuration := shared.DestinationKinesisUpdate{
		AccessKey:  accessKey,
		BufferSize: bufferSize,
		Endpoint:   endpoint,
		PrivateKey: privateKey,
		Region:     region,
		ShardCount: shardCount,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationKinesisPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationKinesisResourceModel) ToDeleteSDKType() *shared.DestinationKinesisCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationKinesisResourceModel) RefreshFromGetResponse(resp *shared.DestinationKinesisGetResponse) {
	r.Configuration.AccessKey = types.StringValue(resp.Configuration.AccessKey)
	r.Configuration.BufferSize = types.Int64Value(resp.Configuration.BufferSize)
	r.Configuration.DestinationType = types.StringValue(string(resp.Configuration.DestinationType))
	r.Configuration.Endpoint = types.StringValue(resp.Configuration.Endpoint)
	r.Configuration.PrivateKey = types.StringValue(resp.Configuration.PrivateKey)
	r.Configuration.Region = types.StringValue(resp.Configuration.Region)
	r.Configuration.ShardCount = types.Int64Value(resp.Configuration.ShardCount)
	if resp.DestinationID != nil {
		r.DestinationID = types.StringValue(*resp.DestinationID)
	} else {
		r.DestinationID = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationKinesisResourceModel) RefreshFromCreateResponse(resp *shared.DestinationKinesisGetResponse) {
	r.RefreshFromGetResponse(resp)
}
