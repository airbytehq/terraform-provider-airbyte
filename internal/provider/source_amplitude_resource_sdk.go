// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAmplitudeResourceModel) ToCreateSDKType() *shared.SourceAmplitudeCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	dataRegion := new(shared.SourceAmplitudeDataRegion)
	if !r.Configuration.DataRegion.IsUnknown() && !r.Configuration.DataRegion.IsNull() {
		*dataRegion = shared.SourceAmplitudeDataRegion(r.Configuration.DataRegion.ValueString())
	} else {
		dataRegion = nil
	}
	requestTimeRange := new(int64)
	if !r.Configuration.RequestTimeRange.IsUnknown() && !r.Configuration.RequestTimeRange.IsNull() {
		*requestTimeRange = r.Configuration.RequestTimeRange.ValueInt64()
	} else {
		requestTimeRange = nil
	}
	secretKey := r.Configuration.SecretKey.ValueString()
	sourceType := shared.SourceAmplitudeAmplitude(r.Configuration.SourceType.ValueString())
	startDate := r.Configuration.StartDate.ValueString()
	configuration := shared.SourceAmplitude{
		APIKey:           apiKey,
		DataRegion:       dataRegion,
		RequestTimeRange: requestTimeRange,
		SecretKey:        secretKey,
		SourceType:       sourceType,
		StartDate:        startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAmplitudeCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAmplitudeResourceModel) ToGetSDKType() *shared.SourceAmplitudeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAmplitudeResourceModel) ToUpdateSDKType() *shared.SourceAmplitudePutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	dataRegion := new(shared.SourceAmplitudeUpdateDataRegion)
	if !r.Configuration.DataRegion.IsUnknown() && !r.Configuration.DataRegion.IsNull() {
		*dataRegion = shared.SourceAmplitudeUpdateDataRegion(r.Configuration.DataRegion.ValueString())
	} else {
		dataRegion = nil
	}
	requestTimeRange := new(int64)
	if !r.Configuration.RequestTimeRange.IsUnknown() && !r.Configuration.RequestTimeRange.IsNull() {
		*requestTimeRange = r.Configuration.RequestTimeRange.ValueInt64()
	} else {
		requestTimeRange = nil
	}
	secretKey := r.Configuration.SecretKey.ValueString()
	startDate := r.Configuration.StartDate.ValueString()
	configuration := shared.SourceAmplitudeUpdate{
		APIKey:           apiKey,
		DataRegion:       dataRegion,
		RequestTimeRange: requestTimeRange,
		SecretKey:        secretKey,
		StartDate:        startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAmplitudePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAmplitudeResourceModel) ToDeleteSDKType() *shared.SourceAmplitudeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAmplitudeResourceModel) RefreshFromGetResponse(resp *shared.SourceAmplitudeGetResponse) {
	r.Configuration.APIKey = types.StringValue(resp.Configuration.APIKey)
	if resp.Configuration.DataRegion != nil {
		r.Configuration.DataRegion = types.StringValue(string(*resp.Configuration.DataRegion))
	} else {
		r.Configuration.DataRegion = types.StringNull()
	}
	if resp.Configuration.RequestTimeRange != nil {
		r.Configuration.RequestTimeRange = types.Int64Value(*resp.Configuration.RequestTimeRange)
	} else {
		r.Configuration.RequestTimeRange = types.Int64Null()
	}
	r.Configuration.SecretKey = types.StringValue(resp.Configuration.SecretKey)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAmplitudeResourceModel) RefreshFromCreateResponse(resp *shared.SourceAmplitudeGetResponse) {
	r.RefreshFromGetResponse(resp)
}
