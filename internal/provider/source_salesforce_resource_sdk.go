// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSalesforceResourceModel) ToCreateSDKType() *shared.SourceSalesforceCreateRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	forceUseBulkAPI := new(bool)
	if !r.Configuration.ForceUseBulkAPI.IsUnknown() && !r.Configuration.ForceUseBulkAPI.IsNull() {
		*forceUseBulkAPI = r.Configuration.ForceUseBulkAPI.ValueBool()
	} else {
		forceUseBulkAPI = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var streamsCriteria []shared.SourceSalesforceStreamsCriteria = nil
	for _, streamsCriteriaItem := range r.Configuration.StreamsCriteria {
		criteria := new(shared.SourceSalesforceStreamsCriteriaSearchCriteria)
		if !streamsCriteriaItem.Criteria.IsUnknown() && !streamsCriteriaItem.Criteria.IsNull() {
			*criteria = shared.SourceSalesforceStreamsCriteriaSearchCriteria(streamsCriteriaItem.Criteria.ValueString())
		} else {
			criteria = nil
		}
		value := streamsCriteriaItem.Value.ValueString()
		streamsCriteria = append(streamsCriteria, shared.SourceSalesforceStreamsCriteria{
			Criteria: criteria,
			Value:    value,
		})
	}
	configuration := shared.SourceSalesforce{
		ClientID:        clientID,
		ClientSecret:    clientSecret,
		ForceUseBulkAPI: forceUseBulkAPI,
		IsSandbox:       isSandbox,
		RefreshToken:    refreshToken,
		StartDate:       startDate,
		StreamsCriteria: streamsCriteria,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSalesforceCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSalesforceResourceModel) ToGetSDKType() *shared.SourceSalesforceCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSalesforceResourceModel) ToUpdateSDKType() *shared.SourceSalesforcePutRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	forceUseBulkAPI := new(bool)
	if !r.Configuration.ForceUseBulkAPI.IsUnknown() && !r.Configuration.ForceUseBulkAPI.IsNull() {
		*forceUseBulkAPI = r.Configuration.ForceUseBulkAPI.ValueBool()
	} else {
		forceUseBulkAPI = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var streamsCriteria []shared.SourceSalesforceUpdateStreamsCriteria = nil
	for _, streamsCriteriaItem := range r.Configuration.StreamsCriteria {
		criteria := new(shared.SourceSalesforceUpdateStreamsCriteriaSearchCriteria)
		if !streamsCriteriaItem.Criteria.IsUnknown() && !streamsCriteriaItem.Criteria.IsNull() {
			*criteria = shared.SourceSalesforceUpdateStreamsCriteriaSearchCriteria(streamsCriteriaItem.Criteria.ValueString())
		} else {
			criteria = nil
		}
		value := streamsCriteriaItem.Value.ValueString()
		streamsCriteria = append(streamsCriteria, shared.SourceSalesforceUpdateStreamsCriteria{
			Criteria: criteria,
			Value:    value,
		})
	}
	configuration := shared.SourceSalesforceUpdate{
		ClientID:        clientID,
		ClientSecret:    clientSecret,
		ForceUseBulkAPI: forceUseBulkAPI,
		IsSandbox:       isSandbox,
		RefreshToken:    refreshToken,
		StartDate:       startDate,
		StreamsCriteria: streamsCriteria,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSalesforcePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSalesforceResourceModel) ToDeleteSDKType() *shared.SourceSalesforceCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSalesforceResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSalesforceResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
