// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSalesforceResourceModel) ToSharedSourceSalesforceCreateRequest() *shared.SourceSalesforceCreateRequest {
	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	forceUseBulkAPI := new(bool)
	if !r.Configuration.ForceUseBulkAPI.IsUnknown() && !r.Configuration.ForceUseBulkAPI.IsNull() {
		*forceUseBulkAPI = r.Configuration.ForceUseBulkAPI.ValueBool()
	} else {
		forceUseBulkAPI = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	streamSliceStep := new(string)
	if !r.Configuration.StreamSliceStep.IsUnknown() && !r.Configuration.StreamSliceStep.IsNull() {
		*streamSliceStep = r.Configuration.StreamSliceStep.ValueString()
	} else {
		streamSliceStep = nil
	}
	var streamsCriteria []shared.SourceSalesforceStreamsCriteria = []shared.SourceSalesforceStreamsCriteria{}
	for _, streamsCriteriaItem := range r.Configuration.StreamsCriteria {
		criteria := new(shared.SourceSalesforceSearchCriteria)
		if !streamsCriteriaItem.Criteria.IsUnknown() && !streamsCriteriaItem.Criteria.IsNull() {
			*criteria = shared.SourceSalesforceSearchCriteria(streamsCriteriaItem.Criteria.ValueString())
		} else {
			criteria = nil
		}
		var value string
		value = streamsCriteriaItem.Value.ValueString()

		streamsCriteria = append(streamsCriteria, shared.SourceSalesforceStreamsCriteria{
			Criteria: criteria,
			Value:    value,
		})
	}
	configuration := shared.SourceSalesforce{
		ClientID:        clientID,
		ClientSecret:    clientSecret,
		ForceUseBulkAPI: forceUseBulkAPI,
		IsSandbox:       isSandbox,
		RefreshToken:    refreshToken,
		StartDate:       startDate,
		StreamSliceStep: streamSliceStep,
		StreamsCriteria: streamsCriteria,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceSalesforceCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSalesforceResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSalesforceResourceModel) ToSharedSourceSalesforcePutRequest() *shared.SourceSalesforcePutRequest {
	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	forceUseBulkAPI := new(bool)
	if !r.Configuration.ForceUseBulkAPI.IsUnknown() && !r.Configuration.ForceUseBulkAPI.IsNull() {
		*forceUseBulkAPI = r.Configuration.ForceUseBulkAPI.ValueBool()
	} else {
		forceUseBulkAPI = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	streamSliceStep := new(string)
	if !r.Configuration.StreamSliceStep.IsUnknown() && !r.Configuration.StreamSliceStep.IsNull() {
		*streamSliceStep = r.Configuration.StreamSliceStep.ValueString()
	} else {
		streamSliceStep = nil
	}
	var streamsCriteria []shared.StreamsCriteria = []shared.StreamsCriteria{}
	for _, streamsCriteriaItem := range r.Configuration.StreamsCriteria {
		criteria := new(shared.SearchCriteria)
		if !streamsCriteriaItem.Criteria.IsUnknown() && !streamsCriteriaItem.Criteria.IsNull() {
			*criteria = shared.SearchCriteria(streamsCriteriaItem.Criteria.ValueString())
		} else {
			criteria = nil
		}
		var value string
		value = streamsCriteriaItem.Value.ValueString()

		streamsCriteria = append(streamsCriteria, shared.StreamsCriteria{
			Criteria: criteria,
			Value:    value,
		})
	}
	configuration := shared.SourceSalesforceUpdate{
		ClientID:        clientID,
		ClientSecret:    clientSecret,
		ForceUseBulkAPI: forceUseBulkAPI,
		IsSandbox:       isSandbox,
		RefreshToken:    refreshToken,
		StartDate:       startDate,
		StreamSliceStep: streamSliceStep,
		StreamsCriteria: streamsCriteria,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceSalesforcePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
