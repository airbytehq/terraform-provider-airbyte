// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceBreezometerResourceModel) ToSharedSourceBreezometerCreateRequest() *shared.SourceBreezometerCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var latitude string
	latitude = r.Configuration.Latitude.ValueString()

	var longitude string
	longitude = r.Configuration.Longitude.ValueString()

	daysToForecast := new(int64)
	if !r.Configuration.DaysToForecast.IsUnknown() && !r.Configuration.DaysToForecast.IsNull() {
		*daysToForecast = r.Configuration.DaysToForecast.ValueInt64()
	} else {
		daysToForecast = nil
	}
	hoursToForecast := new(int64)
	if !r.Configuration.HoursToForecast.IsUnknown() && !r.Configuration.HoursToForecast.IsNull() {
		*hoursToForecast = r.Configuration.HoursToForecast.ValueInt64()
	} else {
		hoursToForecast = nil
	}
	historicHours := new(int64)
	if !r.Configuration.HistoricHours.IsUnknown() && !r.Configuration.HistoricHours.IsNull() {
		*historicHours = r.Configuration.HistoricHours.ValueInt64()
	} else {
		historicHours = nil
	}
	radius := new(int64)
	if !r.Configuration.Radius.IsUnknown() && !r.Configuration.Radius.IsNull() {
		*radius = r.Configuration.Radius.ValueInt64()
	} else {
		radius = nil
	}
	configuration := shared.SourceBreezometer{
		APIKey:          apiKey,
		Latitude:        latitude,
		Longitude:       longitude,
		DaysToForecast:  daysToForecast,
		HoursToForecast: hoursToForecast,
		HistoricHours:   historicHours,
		Radius:          radius,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceBreezometerCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceBreezometerResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceBreezometerResourceModel) ToSharedSourceBreezometerPutRequest() *shared.SourceBreezometerPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var latitude string
	latitude = r.Configuration.Latitude.ValueString()

	var longitude string
	longitude = r.Configuration.Longitude.ValueString()

	daysToForecast := new(int64)
	if !r.Configuration.DaysToForecast.IsUnknown() && !r.Configuration.DaysToForecast.IsNull() {
		*daysToForecast = r.Configuration.DaysToForecast.ValueInt64()
	} else {
		daysToForecast = nil
	}
	hoursToForecast := new(int64)
	if !r.Configuration.HoursToForecast.IsUnknown() && !r.Configuration.HoursToForecast.IsNull() {
		*hoursToForecast = r.Configuration.HoursToForecast.ValueInt64()
	} else {
		hoursToForecast = nil
	}
	historicHours := new(int64)
	if !r.Configuration.HistoricHours.IsUnknown() && !r.Configuration.HistoricHours.IsNull() {
		*historicHours = r.Configuration.HistoricHours.ValueInt64()
	} else {
		historicHours = nil
	}
	radius := new(int64)
	if !r.Configuration.Radius.IsUnknown() && !r.Configuration.Radius.IsNull() {
		*radius = r.Configuration.Radius.ValueInt64()
	} else {
		radius = nil
	}
	configuration := shared.SourceBreezometerUpdate{
		APIKey:          apiKey,
		Latitude:        latitude,
		Longitude:       longitude,
		DaysToForecast:  daysToForecast,
		HoursToForecast: hoursToForecast,
		HistoricHours:   historicHours,
		Radius:          radius,
	}
	out := shared.SourceBreezometerPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
