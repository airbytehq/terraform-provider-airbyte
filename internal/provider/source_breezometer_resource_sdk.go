// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceBreezometerResourceModel) ToSharedSourceBreezometerCreateRequest() *shared.SourceBreezometerCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var latitude string
	latitude = r.Configuration.Latitude.ValueString()

	var longitude string
	longitude = r.Configuration.Longitude.ValueString()

	daysToForecast := new(int64)
	if !r.Configuration.DaysToForecast.IsUnknown() && !r.Configuration.DaysToForecast.IsNull() {
		*daysToForecast = r.Configuration.DaysToForecast.ValueInt64()
	} else {
		daysToForecast = nil
	}
	hoursToForecast := new(int64)
	if !r.Configuration.HoursToForecast.IsUnknown() && !r.Configuration.HoursToForecast.IsNull() {
		*hoursToForecast = r.Configuration.HoursToForecast.ValueInt64()
	} else {
		hoursToForecast = nil
	}
	historicHours := new(int64)
	if !r.Configuration.HistoricHours.IsUnknown() && !r.Configuration.HistoricHours.IsNull() {
		*historicHours = r.Configuration.HistoricHours.ValueInt64()
	} else {
		historicHours = nil
	}
	radius := new(int64)
	if !r.Configuration.Radius.IsUnknown() && !r.Configuration.Radius.IsNull() {
		*radius = r.Configuration.Radius.ValueInt64()
	} else {
		radius = nil
	}
	configuration := shared.SourceBreezometer{
		APIKey:          apiKey,
		Latitude:        latitude,
		Longitude:       longitude,
		DaysToForecast:  daysToForecast,
		HoursToForecast: hoursToForecast,
		HistoricHours:   historicHours,
		Radius:          radius,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceBreezometerCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceBreezometerResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceBreezometerResourceModel) ToSharedSourceBreezometerPutRequest() *shared.SourceBreezometerPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var latitude string
	latitude = r.Configuration.Latitude.ValueString()

	var longitude string
	longitude = r.Configuration.Longitude.ValueString()

	daysToForecast := new(int64)
	if !r.Configuration.DaysToForecast.IsUnknown() && !r.Configuration.DaysToForecast.IsNull() {
		*daysToForecast = r.Configuration.DaysToForecast.ValueInt64()
	} else {
		daysToForecast = nil
	}
	hoursToForecast := new(int64)
	if !r.Configuration.HoursToForecast.IsUnknown() && !r.Configuration.HoursToForecast.IsNull() {
		*hoursToForecast = r.Configuration.HoursToForecast.ValueInt64()
	} else {
		hoursToForecast = nil
	}
	historicHours := new(int64)
	if !r.Configuration.HistoricHours.IsUnknown() && !r.Configuration.HistoricHours.IsNull() {
		*historicHours = r.Configuration.HistoricHours.ValueInt64()
	} else {
		historicHours = nil
	}
	radius := new(int64)
	if !r.Configuration.Radius.IsUnknown() && !r.Configuration.Radius.IsNull() {
		*radius = r.Configuration.Radius.ValueInt64()
	} else {
		radius = nil
	}
	configuration := shared.SourceBreezometerUpdate{
		APIKey:          apiKey,
		Latitude:        latitude,
		Longitude:       longitude,
		DaysToForecast:  daysToForecast,
		HoursToForecast: hoursToForecast,
		HistoricHours:   historicHours,
		Radius:          radius,
	}
	out := shared.SourceBreezometerPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
