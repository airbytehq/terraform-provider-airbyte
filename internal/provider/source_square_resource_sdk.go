// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceSquareResourceModel) ToSharedSourceSquareCreateRequest(ctx context.Context) (*shared.SourceSquareCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceSquareAuthentication
	if r.Configuration.Credentials != nil {
		var oauthAuthentication *shared.OauthAuthentication
		if r.Configuration.Credentials.OauthAuthentication != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OauthAuthentication.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OauthAuthentication.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OauthAuthentication.RefreshToken.ValueString()

			oauthAuthentication = &shared.OauthAuthentication{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if oauthAuthentication != nil {
			credentials = &shared.SourceSquareAuthentication{
				OauthAuthentication: oauthAuthentication,
			}
		}
		var sourceSquareAPIKey *shared.SourceSquareAPIKey
		if r.Configuration.Credentials.APIKey != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.APIKey.APIKey.ValueString()

			sourceSquareAPIKey = &shared.SourceSquareAPIKey{
				APIKey: apiKey,
			}
		}
		if sourceSquareAPIKey != nil {
			credentials = &shared.SourceSquareAuthentication{
				SourceSquareAPIKey: sourceSquareAPIKey,
			}
		}
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	includeDeletedObjects := new(bool)
	if !r.Configuration.IncludeDeletedObjects.IsUnknown() && !r.Configuration.IncludeDeletedObjects.IsNull() {
		*includeDeletedObjects = r.Configuration.IncludeDeletedObjects.ValueBool()
	} else {
		includeDeletedObjects = nil
	}
	configuration := shared.SourceSquare{
		Credentials:           credentials,
		IsSandbox:             isSandbox,
		StartDate:             startDate,
		IncludeDeletedObjects: includeDeletedObjects,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSquareCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceSquareResourceModel) ToSharedSourceSquarePutRequest(ctx context.Context) (*shared.SourceSquarePutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceSquareUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceSquareUpdateOauthAuthentication *shared.SourceSquareUpdateOauthAuthentication
		if r.Configuration.Credentials.OauthAuthentication != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OauthAuthentication.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OauthAuthentication.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OauthAuthentication.RefreshToken.ValueString()

			sourceSquareUpdateOauthAuthentication = &shared.SourceSquareUpdateOauthAuthentication{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceSquareUpdateOauthAuthentication != nil {
			credentials = &shared.SourceSquareUpdateAuthentication{
				SourceSquareUpdateOauthAuthentication: sourceSquareUpdateOauthAuthentication,
			}
		}
		var sourceSquareUpdateAPIKey *shared.SourceSquareUpdateAPIKey
		if r.Configuration.Credentials.APIKey != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.APIKey.APIKey.ValueString()

			sourceSquareUpdateAPIKey = &shared.SourceSquareUpdateAPIKey{
				APIKey: apiKey,
			}
		}
		if sourceSquareUpdateAPIKey != nil {
			credentials = &shared.SourceSquareUpdateAuthentication{
				SourceSquareUpdateAPIKey: sourceSquareUpdateAPIKey,
			}
		}
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	includeDeletedObjects := new(bool)
	if !r.Configuration.IncludeDeletedObjects.IsUnknown() && !r.Configuration.IncludeDeletedObjects.IsNull() {
		*includeDeletedObjects = r.Configuration.IncludeDeletedObjects.ValueBool()
	} else {
		includeDeletedObjects = nil
	}
	configuration := shared.SourceSquareUpdate{
		Credentials:           credentials,
		IsSandbox:             isSandbox,
		StartDate:             startDate,
		IncludeDeletedObjects: includeDeletedObjects,
	}
	out := shared.SourceSquarePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceSquareResourceModel) ToOperationsPutSourceSquareRequest(ctx context.Context) (*operations.PutSourceSquareRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceSquarePutRequest, sourceSquarePutRequestDiags := r.ToSharedSourceSquarePutRequest(ctx)
	diags.Append(sourceSquarePutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceSquareRequest{
		SourceID:               sourceID,
		SourceSquarePutRequest: sourceSquarePutRequest,
	}

	return &out, diags
}

func (r *SourceSquareResourceModel) ToOperationsGetSourceSquareRequest(ctx context.Context) (*operations.GetSourceSquareRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceSquareRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSquareResourceModel) ToOperationsDeleteSourceSquareRequest(ctx context.Context) (*operations.DeleteSourceSquareRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceSquareRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSquareResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
