// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZendeskTalkResourceModel) ToSharedSourceZendeskTalkCreateRequest() *shared.SourceZendeskTalkCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var subdomain string
	subdomain = r.Configuration.Subdomain.ValueString()

	var credentials *shared.SourceZendeskTalkAuthentication
	if r.Configuration.Credentials != nil {
		var sourceZendeskTalkOAuth20 *shared.SourceZendeskTalkOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var additionalProperties interface{}
			if !r.Configuration.Credentials.OAuth20.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.OAuth20.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.OAuth20.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceZendeskTalkOAuth20 = &shared.SourceZendeskTalkOAuth20{
				AccessToken:          accessToken,
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				AdditionalProperties: additionalProperties,
			}
		}
		if sourceZendeskTalkOAuth20 != nil {
			credentials = &shared.SourceZendeskTalkAuthentication{
				SourceZendeskTalkOAuth20: sourceZendeskTalkOAuth20,
			}
		}
		var sourceZendeskTalkAPIToken *shared.SourceZendeskTalkAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var email string
			email = r.Configuration.Credentials.APIToken.Email.ValueString()

			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.APIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.APIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.APIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceZendeskTalkAPIToken = &shared.SourceZendeskTalkAPIToken{
				Email:                email,
				APIToken:             apiToken,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceZendeskTalkAPIToken != nil {
			credentials = &shared.SourceZendeskTalkAuthentication{
				SourceZendeskTalkAPIToken: sourceZendeskTalkAPIToken,
			}
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceZendeskTalk{
		Subdomain:   subdomain,
		Credentials: credentials,
		StartDate:   startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceZendeskTalkCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceZendeskTalkResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceZendeskTalkResourceModel) ToSharedSourceZendeskTalkPutRequest() *shared.SourceZendeskTalkPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var subdomain string
	subdomain = r.Configuration.Subdomain.ValueString()

	var credentials *shared.SourceZendeskTalkUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceZendeskTalkUpdateOAuth20 *shared.SourceZendeskTalkUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var additionalProperties interface{}
			if !r.Configuration.Credentials.OAuth20.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.OAuth20.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.OAuth20.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceZendeskTalkUpdateOAuth20 = &shared.SourceZendeskTalkUpdateOAuth20{
				AccessToken:          accessToken,
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				AdditionalProperties: additionalProperties,
			}
		}
		if sourceZendeskTalkUpdateOAuth20 != nil {
			credentials = &shared.SourceZendeskTalkUpdateAuthentication{
				SourceZendeskTalkUpdateOAuth20: sourceZendeskTalkUpdateOAuth20,
			}
		}
		var sourceZendeskTalkUpdateAPIToken *shared.SourceZendeskTalkUpdateAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var email string
			email = r.Configuration.Credentials.APIToken.Email.ValueString()

			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.APIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.APIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.APIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceZendeskTalkUpdateAPIToken = &shared.SourceZendeskTalkUpdateAPIToken{
				Email:                email,
				APIToken:             apiToken,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceZendeskTalkUpdateAPIToken != nil {
			credentials = &shared.SourceZendeskTalkUpdateAuthentication{
				SourceZendeskTalkUpdateAPIToken: sourceZendeskTalkUpdateAPIToken,
			}
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceZendeskTalkUpdate{
		Subdomain:   subdomain,
		Credentials: credentials,
		StartDate:   startDate,
	}
	out := shared.SourceZendeskTalkPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
