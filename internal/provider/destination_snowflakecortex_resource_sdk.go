// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationSnowflakeCortexResourceModel) ToSharedDestinationSnowflakeCortexCreateRequest() *shared.DestinationSnowflakeCortexCreateRequest {
	var embedding shared.DestinationSnowflakeCortexEmbedding
	var destinationSnowflakeCortexOpenAI *shared.DestinationSnowflakeCortexOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationSnowflakeCortexOpenAI = &shared.DestinationSnowflakeCortexOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationSnowflakeCortexOpenAI != nil {
		embedding = shared.DestinationSnowflakeCortexEmbedding{
			DestinationSnowflakeCortexOpenAI: destinationSnowflakeCortexOpenAI,
		}
	}
	var destinationSnowflakeCortexCohere *shared.DestinationSnowflakeCortexCohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		destinationSnowflakeCortexCohere = &shared.DestinationSnowflakeCortexCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationSnowflakeCortexCohere != nil {
		embedding = shared.DestinationSnowflakeCortexEmbedding{
			DestinationSnowflakeCortexCohere: destinationSnowflakeCortexCohere,
		}
	}
	var destinationSnowflakeCortexFake *shared.DestinationSnowflakeCortexFake
	if r.Configuration.Embedding.Fake != nil {
		destinationSnowflakeCortexFake = &shared.DestinationSnowflakeCortexFake{}
	}
	if destinationSnowflakeCortexFake != nil {
		embedding = shared.DestinationSnowflakeCortexEmbedding{
			DestinationSnowflakeCortexFake: destinationSnowflakeCortexFake,
		}
	}
	var destinationSnowflakeCortexAzureOpenAI *shared.DestinationSnowflakeCortexAzureOpenAI
	if r.Configuration.Embedding.AzureOpenAI != nil {
		apiBase := r.Configuration.Embedding.AzureOpenAI.APIBase.ValueString()
		deployment := r.Configuration.Embedding.AzureOpenAI.Deployment.ValueString()
		openaiKey1 := r.Configuration.Embedding.AzureOpenAI.OpenaiKey.ValueString()
		destinationSnowflakeCortexAzureOpenAI = &shared.DestinationSnowflakeCortexAzureOpenAI{
			APIBase:    apiBase,
			Deployment: deployment,
			OpenaiKey:  openaiKey1,
		}
	}
	if destinationSnowflakeCortexAzureOpenAI != nil {
		embedding = shared.DestinationSnowflakeCortexEmbedding{
			DestinationSnowflakeCortexAzureOpenAI: destinationSnowflakeCortexAzureOpenAI,
		}
	}
	var destinationSnowflakeCortexOpenAICompatible *shared.DestinationSnowflakeCortexOpenAICompatible
	if r.Configuration.Embedding.OpenAICompatible != nil {
		apiKey := new(string)
		if !r.Configuration.Embedding.OpenAICompatible.APIKey.IsUnknown() && !r.Configuration.Embedding.OpenAICompatible.APIKey.IsNull() {
			*apiKey = r.Configuration.Embedding.OpenAICompatible.APIKey.ValueString()
		} else {
			apiKey = nil
		}
		baseURL := r.Configuration.Embedding.OpenAICompatible.BaseURL.ValueString()
		dimensions := r.Configuration.Embedding.OpenAICompatible.Dimensions.ValueInt64()
		modelName := new(string)
		if !r.Configuration.Embedding.OpenAICompatible.ModelName.IsUnknown() && !r.Configuration.Embedding.OpenAICompatible.ModelName.IsNull() {
			*modelName = r.Configuration.Embedding.OpenAICompatible.ModelName.ValueString()
		} else {
			modelName = nil
		}
		destinationSnowflakeCortexOpenAICompatible = &shared.DestinationSnowflakeCortexOpenAICompatible{
			APIKey:     apiKey,
			BaseURL:    baseURL,
			Dimensions: dimensions,
			ModelName:  modelName,
		}
	}
	if destinationSnowflakeCortexOpenAICompatible != nil {
		embedding = shared.DestinationSnowflakeCortexEmbedding{
			DestinationSnowflakeCortexOpenAICompatible: destinationSnowflakeCortexOpenAICompatible,
		}
	}
	password := r.Configuration.Indexing.Credentials.Password.ValueString()
	credentials := shared.DestinationSnowflakeCortexCredentials{
		Password: password,
	}
	database := r.Configuration.Indexing.Database.ValueString()
	defaultSchema := r.Configuration.Indexing.DefaultSchema.ValueString()
	host := r.Configuration.Indexing.Host.ValueString()
	role := r.Configuration.Indexing.Role.ValueString()
	username := r.Configuration.Indexing.Username.ValueString()
	warehouse := r.Configuration.Indexing.Warehouse.ValueString()
	indexing := shared.DestinationSnowflakeCortexIndexing{
		Credentials:   credentials,
		Database:      database,
		DefaultSchema: defaultSchema,
		Host:          host,
		Role:          role,
		Username:      username,
		Warehouse:     warehouse,
	}
	omitRawText := new(bool)
	if !r.Configuration.OmitRawText.IsUnknown() && !r.Configuration.OmitRawText.IsNull() {
		*omitRawText = r.Configuration.OmitRawText.ValueBool()
	} else {
		omitRawText = nil
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var fieldNameMappings []shared.DestinationSnowflakeCortexFieldNameMappingConfigModel = []shared.DestinationSnowflakeCortexFieldNameMappingConfigModel{}
	for _, fieldNameMappingsItem := range r.Configuration.Processing.FieldNameMappings {
		fromField := fieldNameMappingsItem.FromField.ValueString()
		toField := fieldNameMappingsItem.ToField.ValueString()
		fieldNameMappings = append(fieldNameMappings, shared.DestinationSnowflakeCortexFieldNameMappingConfigModel{
			FromField: fromField,
			ToField:   toField,
		})
	}
	var metadataFields []string = []string{}
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = []string{}
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	var textSplitter *shared.DestinationSnowflakeCortexTextSplitter
	if r.Configuration.Processing.TextSplitter != nil {
		var destinationSnowflakeCortexBySeparator *shared.DestinationSnowflakeCortexBySeparator
		if r.Configuration.Processing.TextSplitter.BySeparator != nil {
			keepSeparator := new(bool)
			if !r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.IsUnknown() && !r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.IsNull() {
				*keepSeparator = r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.ValueBool()
			} else {
				keepSeparator = nil
			}
			var separators []string = []string{}
			for _, separatorsItem := range r.Configuration.Processing.TextSplitter.BySeparator.Separators {
				separators = append(separators, separatorsItem.ValueString())
			}
			destinationSnowflakeCortexBySeparator = &shared.DestinationSnowflakeCortexBySeparator{
				KeepSeparator: keepSeparator,
				Separators:    separators,
			}
		}
		if destinationSnowflakeCortexBySeparator != nil {
			textSplitter = &shared.DestinationSnowflakeCortexTextSplitter{
				DestinationSnowflakeCortexBySeparator: destinationSnowflakeCortexBySeparator,
			}
		}
		var destinationSnowflakeCortexByMarkdownHeader *shared.DestinationSnowflakeCortexByMarkdownHeader
		if r.Configuration.Processing.TextSplitter.ByMarkdownHeader != nil {
			splitLevel := new(int64)
			if !r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.IsUnknown() && !r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.IsNull() {
				*splitLevel = r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.ValueInt64()
			} else {
				splitLevel = nil
			}
			destinationSnowflakeCortexByMarkdownHeader = &shared.DestinationSnowflakeCortexByMarkdownHeader{
				SplitLevel: splitLevel,
			}
		}
		if destinationSnowflakeCortexByMarkdownHeader != nil {
			textSplitter = &shared.DestinationSnowflakeCortexTextSplitter{
				DestinationSnowflakeCortexByMarkdownHeader: destinationSnowflakeCortexByMarkdownHeader,
			}
		}
		var destinationSnowflakeCortexByProgrammingLanguage *shared.DestinationSnowflakeCortexByProgrammingLanguage
		if r.Configuration.Processing.TextSplitter.ByProgrammingLanguage != nil {
			language := shared.DestinationSnowflakeCortexLanguage(r.Configuration.Processing.TextSplitter.ByProgrammingLanguage.Language.ValueString())
			destinationSnowflakeCortexByProgrammingLanguage = &shared.DestinationSnowflakeCortexByProgrammingLanguage{
				Language: language,
			}
		}
		if destinationSnowflakeCortexByProgrammingLanguage != nil {
			textSplitter = &shared.DestinationSnowflakeCortexTextSplitter{
				DestinationSnowflakeCortexByProgrammingLanguage: destinationSnowflakeCortexByProgrammingLanguage,
			}
		}
	}
	processing := shared.DestinationSnowflakeCortexProcessingConfigModel{
		ChunkOverlap:      chunkOverlap,
		ChunkSize:         chunkSize,
		FieldNameMappings: fieldNameMappings,
		MetadataFields:    metadataFields,
		TextFields:        textFields,
		TextSplitter:      textSplitter,
	}
	configuration := shared.DestinationSnowflakeCortex{
		Embedding:   embedding,
		Indexing:    indexing,
		OmitRawText: omitRawText,
		Processing:  processing,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationSnowflakeCortexCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationSnowflakeCortexResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationSnowflakeCortexResourceModel) ToSharedDestinationSnowflakeCortexPutRequest() *shared.DestinationSnowflakeCortexPutRequest {
	var embedding shared.DestinationSnowflakeCortexUpdateEmbedding
	var destinationSnowflakeCortexUpdateOpenAI *shared.DestinationSnowflakeCortexUpdateOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationSnowflakeCortexUpdateOpenAI = &shared.DestinationSnowflakeCortexUpdateOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationSnowflakeCortexUpdateOpenAI != nil {
		embedding = shared.DestinationSnowflakeCortexUpdateEmbedding{
			DestinationSnowflakeCortexUpdateOpenAI: destinationSnowflakeCortexUpdateOpenAI,
		}
	}
	var destinationSnowflakeCortexUpdateCohere *shared.DestinationSnowflakeCortexUpdateCohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		destinationSnowflakeCortexUpdateCohere = &shared.DestinationSnowflakeCortexUpdateCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationSnowflakeCortexUpdateCohere != nil {
		embedding = shared.DestinationSnowflakeCortexUpdateEmbedding{
			DestinationSnowflakeCortexUpdateCohere: destinationSnowflakeCortexUpdateCohere,
		}
	}
	var destinationSnowflakeCortexUpdateFake *shared.DestinationSnowflakeCortexUpdateFake
	if r.Configuration.Embedding.Fake != nil {
		destinationSnowflakeCortexUpdateFake = &shared.DestinationSnowflakeCortexUpdateFake{}
	}
	if destinationSnowflakeCortexUpdateFake != nil {
		embedding = shared.DestinationSnowflakeCortexUpdateEmbedding{
			DestinationSnowflakeCortexUpdateFake: destinationSnowflakeCortexUpdateFake,
		}
	}
	var destinationSnowflakeCortexUpdateAzureOpenAI *shared.DestinationSnowflakeCortexUpdateAzureOpenAI
	if r.Configuration.Embedding.AzureOpenAI != nil {
		apiBase := r.Configuration.Embedding.AzureOpenAI.APIBase.ValueString()
		deployment := r.Configuration.Embedding.AzureOpenAI.Deployment.ValueString()
		openaiKey1 := r.Configuration.Embedding.AzureOpenAI.OpenaiKey.ValueString()
		destinationSnowflakeCortexUpdateAzureOpenAI = &shared.DestinationSnowflakeCortexUpdateAzureOpenAI{
			APIBase:    apiBase,
			Deployment: deployment,
			OpenaiKey:  openaiKey1,
		}
	}
	if destinationSnowflakeCortexUpdateAzureOpenAI != nil {
		embedding = shared.DestinationSnowflakeCortexUpdateEmbedding{
			DestinationSnowflakeCortexUpdateAzureOpenAI: destinationSnowflakeCortexUpdateAzureOpenAI,
		}
	}
	var destinationSnowflakeCortexUpdateOpenAICompatible *shared.DestinationSnowflakeCortexUpdateOpenAICompatible
	if r.Configuration.Embedding.OpenAICompatible != nil {
		apiKey := new(string)
		if !r.Configuration.Embedding.OpenAICompatible.APIKey.IsUnknown() && !r.Configuration.Embedding.OpenAICompatible.APIKey.IsNull() {
			*apiKey = r.Configuration.Embedding.OpenAICompatible.APIKey.ValueString()
		} else {
			apiKey = nil
		}
		baseURL := r.Configuration.Embedding.OpenAICompatible.BaseURL.ValueString()
		dimensions := r.Configuration.Embedding.OpenAICompatible.Dimensions.ValueInt64()
		modelName := new(string)
		if !r.Configuration.Embedding.OpenAICompatible.ModelName.IsUnknown() && !r.Configuration.Embedding.OpenAICompatible.ModelName.IsNull() {
			*modelName = r.Configuration.Embedding.OpenAICompatible.ModelName.ValueString()
		} else {
			modelName = nil
		}
		destinationSnowflakeCortexUpdateOpenAICompatible = &shared.DestinationSnowflakeCortexUpdateOpenAICompatible{
			APIKey:     apiKey,
			BaseURL:    baseURL,
			Dimensions: dimensions,
			ModelName:  modelName,
		}
	}
	if destinationSnowflakeCortexUpdateOpenAICompatible != nil {
		embedding = shared.DestinationSnowflakeCortexUpdateEmbedding{
			DestinationSnowflakeCortexUpdateOpenAICompatible: destinationSnowflakeCortexUpdateOpenAICompatible,
		}
	}
	password := r.Configuration.Indexing.Credentials.Password.ValueString()
	credentials := shared.DestinationSnowflakeCortexUpdateCredentials{
		Password: password,
	}
	database := r.Configuration.Indexing.Database.ValueString()
	defaultSchema := r.Configuration.Indexing.DefaultSchema.ValueString()
	host := r.Configuration.Indexing.Host.ValueString()
	role := r.Configuration.Indexing.Role.ValueString()
	username := r.Configuration.Indexing.Username.ValueString()
	warehouse := r.Configuration.Indexing.Warehouse.ValueString()
	indexing := shared.DestinationSnowflakeCortexUpdateIndexing{
		Credentials:   credentials,
		Database:      database,
		DefaultSchema: defaultSchema,
		Host:          host,
		Role:          role,
		Username:      username,
		Warehouse:     warehouse,
	}
	omitRawText := new(bool)
	if !r.Configuration.OmitRawText.IsUnknown() && !r.Configuration.OmitRawText.IsNull() {
		*omitRawText = r.Configuration.OmitRawText.ValueBool()
	} else {
		omitRawText = nil
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var fieldNameMappings []shared.DestinationSnowflakeCortexUpdateFieldNameMappingConfigModel = []shared.DestinationSnowflakeCortexUpdateFieldNameMappingConfigModel{}
	for _, fieldNameMappingsItem := range r.Configuration.Processing.FieldNameMappings {
		fromField := fieldNameMappingsItem.FromField.ValueString()
		toField := fieldNameMappingsItem.ToField.ValueString()
		fieldNameMappings = append(fieldNameMappings, shared.DestinationSnowflakeCortexUpdateFieldNameMappingConfigModel{
			FromField: fromField,
			ToField:   toField,
		})
	}
	var metadataFields []string = []string{}
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = []string{}
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	var textSplitter *shared.DestinationSnowflakeCortexUpdateTextSplitter
	if r.Configuration.Processing.TextSplitter != nil {
		var destinationSnowflakeCortexUpdateBySeparator *shared.DestinationSnowflakeCortexUpdateBySeparator
		if r.Configuration.Processing.TextSplitter.BySeparator != nil {
			keepSeparator := new(bool)
			if !r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.IsUnknown() && !r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.IsNull() {
				*keepSeparator = r.Configuration.Processing.TextSplitter.BySeparator.KeepSeparator.ValueBool()
			} else {
				keepSeparator = nil
			}
			var separators []string = []string{}
			for _, separatorsItem := range r.Configuration.Processing.TextSplitter.BySeparator.Separators {
				separators = append(separators, separatorsItem.ValueString())
			}
			destinationSnowflakeCortexUpdateBySeparator = &shared.DestinationSnowflakeCortexUpdateBySeparator{
				KeepSeparator: keepSeparator,
				Separators:    separators,
			}
		}
		if destinationSnowflakeCortexUpdateBySeparator != nil {
			textSplitter = &shared.DestinationSnowflakeCortexUpdateTextSplitter{
				DestinationSnowflakeCortexUpdateBySeparator: destinationSnowflakeCortexUpdateBySeparator,
			}
		}
		var destinationSnowflakeCortexUpdateByMarkdownHeader *shared.DestinationSnowflakeCortexUpdateByMarkdownHeader
		if r.Configuration.Processing.TextSplitter.ByMarkdownHeader != nil {
			splitLevel := new(int64)
			if !r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.IsUnknown() && !r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.IsNull() {
				*splitLevel = r.Configuration.Processing.TextSplitter.ByMarkdownHeader.SplitLevel.ValueInt64()
			} else {
				splitLevel = nil
			}
			destinationSnowflakeCortexUpdateByMarkdownHeader = &shared.DestinationSnowflakeCortexUpdateByMarkdownHeader{
				SplitLevel: splitLevel,
			}
		}
		if destinationSnowflakeCortexUpdateByMarkdownHeader != nil {
			textSplitter = &shared.DestinationSnowflakeCortexUpdateTextSplitter{
				DestinationSnowflakeCortexUpdateByMarkdownHeader: destinationSnowflakeCortexUpdateByMarkdownHeader,
			}
		}
		var destinationSnowflakeCortexUpdateByProgrammingLanguage *shared.DestinationSnowflakeCortexUpdateByProgrammingLanguage
		if r.Configuration.Processing.TextSplitter.ByProgrammingLanguage != nil {
			language := shared.DestinationSnowflakeCortexUpdateLanguage(r.Configuration.Processing.TextSplitter.ByProgrammingLanguage.Language.ValueString())
			destinationSnowflakeCortexUpdateByProgrammingLanguage = &shared.DestinationSnowflakeCortexUpdateByProgrammingLanguage{
				Language: language,
			}
		}
		if destinationSnowflakeCortexUpdateByProgrammingLanguage != nil {
			textSplitter = &shared.DestinationSnowflakeCortexUpdateTextSplitter{
				DestinationSnowflakeCortexUpdateByProgrammingLanguage: destinationSnowflakeCortexUpdateByProgrammingLanguage,
			}
		}
	}
	processing := shared.DestinationSnowflakeCortexUpdateProcessingConfigModel{
		ChunkOverlap:      chunkOverlap,
		ChunkSize:         chunkSize,
		FieldNameMappings: fieldNameMappings,
		MetadataFields:    metadataFields,
		TextFields:        textFields,
		TextSplitter:      textSplitter,
	}
	configuration := shared.DestinationSnowflakeCortexUpdate{
		Embedding:   embedding,
		Indexing:    indexing,
		OmitRawText: omitRawText,
		Processing:  processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationSnowflakeCortexPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
