// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationMssqlV2ResourceModel) ToSharedDestinationMssqlV2CreateRequest() *shared.DestinationMssqlV2CreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	var port int64
	port = r.Configuration.Port.ValueInt64()

	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var user string
	user = r.Configuration.User.ValueString()

	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var sslMethod shared.DestinationMssqlV2SSLMethod
	var destinationMssqlV2Unencrypted *shared.DestinationMssqlV2Unencrypted
	if r.Configuration.SslMethod.Unencrypted != nil {
		name1 := new(shared.Name)
		if !r.Configuration.SslMethod.Unencrypted.Name.IsUnknown() && !r.Configuration.SslMethod.Unencrypted.Name.IsNull() {
			*name1 = shared.Name(r.Configuration.SslMethod.Unencrypted.Name.ValueString())
		} else {
			name1 = nil
		}
		var additionalProperties interface{}
		if !r.Configuration.SslMethod.Unencrypted.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.Unencrypted.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.Unencrypted.AdditionalProperties.ValueString()), &additionalProperties)
		}
		destinationMssqlV2Unencrypted = &shared.DestinationMssqlV2Unencrypted{
			Name:                 name1,
			AdditionalProperties: additionalProperties,
		}
	}
	if destinationMssqlV2Unencrypted != nil {
		sslMethod = shared.DestinationMssqlV2SSLMethod{
			DestinationMssqlV2Unencrypted: destinationMssqlV2Unencrypted,
		}
	}
	var destinationMssqlV2EncryptedTrustServerCertificate *shared.DestinationMssqlV2EncryptedTrustServerCertificate
	if r.Configuration.SslMethod.EncryptedTrustServerCertificate != nil {
		name2 := new(shared.DestinationMssqlV2Name)
		if !r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.IsUnknown() && !r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.IsNull() {
			*name2 = shared.DestinationMssqlV2Name(r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.ValueString())
		} else {
			name2 = nil
		}
		var additionalProperties1 interface{}
		if !r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.ValueString()), &additionalProperties1)
		}
		destinationMssqlV2EncryptedTrustServerCertificate = &shared.DestinationMssqlV2EncryptedTrustServerCertificate{
			Name:                 name2,
			AdditionalProperties: additionalProperties1,
		}
	}
	if destinationMssqlV2EncryptedTrustServerCertificate != nil {
		sslMethod = shared.DestinationMssqlV2SSLMethod{
			DestinationMssqlV2EncryptedTrustServerCertificate: destinationMssqlV2EncryptedTrustServerCertificate,
		}
	}
	var destinationMssqlV2EncryptedVerifyCertificate *shared.DestinationMssqlV2EncryptedVerifyCertificate
	if r.Configuration.SslMethod.EncryptedVerifyCertificate != nil {
		name3 := new(shared.DestinationMssqlV2SchemasName)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.IsNull() {
			*name3 = shared.DestinationMssqlV2SchemasName(r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.ValueString())
		} else {
			name3 = nil
		}
		trustStoreName := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.IsNull() {
			*trustStoreName = r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.ValueString()
		} else {
			trustStoreName = nil
		}
		trustStorePassword := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.IsNull() {
			*trustStorePassword = r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.ValueString()
		} else {
			trustStorePassword = nil
		}
		hostNameInCertificate := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
			*hostNameInCertificate = r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.ValueString()
		} else {
			hostNameInCertificate = nil
		}
		var additionalProperties2 interface{}
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.ValueString()), &additionalProperties2)
		}
		destinationMssqlV2EncryptedVerifyCertificate = &shared.DestinationMssqlV2EncryptedVerifyCertificate{
			Name:                  name3,
			TrustStoreName:        trustStoreName,
			TrustStorePassword:    trustStorePassword,
			HostNameInCertificate: hostNameInCertificate,
			AdditionalProperties:  additionalProperties2,
		}
	}
	if destinationMssqlV2EncryptedVerifyCertificate != nil {
		sslMethod = shared.DestinationMssqlV2SSLMethod{
			DestinationMssqlV2EncryptedVerifyCertificate: destinationMssqlV2EncryptedVerifyCertificate,
		}
	}
	configuration := shared.DestinationMssqlV2{
		Host:          host,
		Port:          port,
		Database:      database,
		Schema:        schema,
		User:          user,
		Password:      password,
		JdbcURLParams: jdbcURLParams,
		SslMethod:     sslMethod,
	}
	out := shared.DestinationMssqlV2CreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationMssqlV2ResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationMssqlV2ResourceModel) ToSharedDestinationMssqlV2PutRequest() *shared.DestinationMssqlV2PutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	var port int64
	port = r.Configuration.Port.ValueInt64()

	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var user string
	user = r.Configuration.User.ValueString()

	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var sslMethod shared.DestinationMssqlV2UpdateSSLMethod
	var destinationMssqlV2UpdateUnencrypted *shared.DestinationMssqlV2UpdateUnencrypted
	if r.Configuration.SslMethod.Unencrypted != nil {
		name1 := new(shared.DestinationMssqlV2UpdateName)
		if !r.Configuration.SslMethod.Unencrypted.Name.IsUnknown() && !r.Configuration.SslMethod.Unencrypted.Name.IsNull() {
			*name1 = shared.DestinationMssqlV2UpdateName(r.Configuration.SslMethod.Unencrypted.Name.ValueString())
		} else {
			name1 = nil
		}
		var additionalProperties interface{}
		if !r.Configuration.SslMethod.Unencrypted.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.Unencrypted.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.Unencrypted.AdditionalProperties.ValueString()), &additionalProperties)
		}
		destinationMssqlV2UpdateUnencrypted = &shared.DestinationMssqlV2UpdateUnencrypted{
			Name:                 name1,
			AdditionalProperties: additionalProperties,
		}
	}
	if destinationMssqlV2UpdateUnencrypted != nil {
		sslMethod = shared.DestinationMssqlV2UpdateSSLMethod{
			DestinationMssqlV2UpdateUnencrypted: destinationMssqlV2UpdateUnencrypted,
		}
	}
	var destinationMssqlV2UpdateEncryptedTrustServerCertificate *shared.DestinationMssqlV2UpdateEncryptedTrustServerCertificate
	if r.Configuration.SslMethod.EncryptedTrustServerCertificate != nil {
		name2 := new(shared.DestinationMssqlV2UpdateSchemasName)
		if !r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.IsUnknown() && !r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.IsNull() {
			*name2 = shared.DestinationMssqlV2UpdateSchemasName(r.Configuration.SslMethod.EncryptedTrustServerCertificate.Name.ValueString())
		} else {
			name2 = nil
		}
		var additionalProperties1 interface{}
		if !r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.EncryptedTrustServerCertificate.AdditionalProperties.ValueString()), &additionalProperties1)
		}
		destinationMssqlV2UpdateEncryptedTrustServerCertificate = &shared.DestinationMssqlV2UpdateEncryptedTrustServerCertificate{
			Name:                 name2,
			AdditionalProperties: additionalProperties1,
		}
	}
	if destinationMssqlV2UpdateEncryptedTrustServerCertificate != nil {
		sslMethod = shared.DestinationMssqlV2UpdateSSLMethod{
			DestinationMssqlV2UpdateEncryptedTrustServerCertificate: destinationMssqlV2UpdateEncryptedTrustServerCertificate,
		}
	}
	var destinationMssqlV2UpdateEncryptedVerifyCertificate *shared.DestinationMssqlV2UpdateEncryptedVerifyCertificate
	if r.Configuration.SslMethod.EncryptedVerifyCertificate != nil {
		name3 := new(shared.DestinationMssqlV2UpdateSchemasSslMethodName)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.IsNull() {
			*name3 = shared.DestinationMssqlV2UpdateSchemasSslMethodName(r.Configuration.SslMethod.EncryptedVerifyCertificate.Name.ValueString())
		} else {
			name3 = nil
		}
		trustStoreName := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.IsNull() {
			*trustStoreName = r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStoreName.ValueString()
		} else {
			trustStoreName = nil
		}
		trustStorePassword := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.IsNull() {
			*trustStorePassword = r.Configuration.SslMethod.EncryptedVerifyCertificate.TrustStorePassword.ValueString()
		} else {
			trustStorePassword = nil
		}
		hostNameInCertificate := new(string)
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
			*hostNameInCertificate = r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.ValueString()
		} else {
			hostNameInCertificate = nil
		}
		var additionalProperties2 interface{}
		if !r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.Configuration.SslMethod.EncryptedVerifyCertificate.AdditionalProperties.ValueString()), &additionalProperties2)
		}
		destinationMssqlV2UpdateEncryptedVerifyCertificate = &shared.DestinationMssqlV2UpdateEncryptedVerifyCertificate{
			Name:                  name3,
			TrustStoreName:        trustStoreName,
			TrustStorePassword:    trustStorePassword,
			HostNameInCertificate: hostNameInCertificate,
			AdditionalProperties:  additionalProperties2,
		}
	}
	if destinationMssqlV2UpdateEncryptedVerifyCertificate != nil {
		sslMethod = shared.DestinationMssqlV2UpdateSSLMethod{
			DestinationMssqlV2UpdateEncryptedVerifyCertificate: destinationMssqlV2UpdateEncryptedVerifyCertificate,
		}
	}
	configuration := shared.DestinationMssqlV2Update{
		Host:          host,
		Port:          port,
		Database:      database,
		Schema:        schema,
		User:          user,
		Password:      password,
		JdbcURLParams: jdbcURLParams,
		SslMethod:     sslMethod,
	}
	out := shared.DestinationMssqlV2PutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
