// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZendeskSunshineResourceModel) ToSharedSourceZendeskSunshineCreateRequest() *shared.SourceZendeskSunshineCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var subdomain string
	subdomain = r.Configuration.Subdomain.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var credentials *shared.SourceZendeskSunshineAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskSunshineOAuth20 *shared.SourceZendeskSunshineOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			sourceZendeskSunshineOAuth20 = &shared.SourceZendeskSunshineOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceZendeskSunshineOAuth20 != nil {
			credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineOAuth20: sourceZendeskSunshineOAuth20,
			}
		}
		var sourceZendeskSunshineAPIToken *shared.SourceZendeskSunshineAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			var email string
			email = r.Configuration.Credentials.APIToken.Email.ValueString()

			sourceZendeskSunshineAPIToken = &shared.SourceZendeskSunshineAPIToken{
				APIToken: apiToken,
				Email:    email,
			}
		}
		if sourceZendeskSunshineAPIToken != nil {
			credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineAPIToken: sourceZendeskSunshineAPIToken,
			}
		}
	}
	configuration := shared.SourceZendeskSunshine{
		Subdomain:   subdomain,
		StartDate:   startDate,
		Credentials: credentials,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceZendeskSunshineCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceZendeskSunshineResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceZendeskSunshineResourceModel) ToSharedSourceZendeskSunshinePutRequest() *shared.SourceZendeskSunshinePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var subdomain string
	subdomain = r.Configuration.Subdomain.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var credentials *shared.SourceZendeskSunshineUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskSunshineUpdateOAuth20 *shared.SourceZendeskSunshineUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			sourceZendeskSunshineUpdateOAuth20 = &shared.SourceZendeskSunshineUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceZendeskSunshineUpdateOAuth20 != nil {
			credentials = &shared.SourceZendeskSunshineUpdateAuthorizationMethod{
				SourceZendeskSunshineUpdateOAuth20: sourceZendeskSunshineUpdateOAuth20,
			}
		}
		var sourceZendeskSunshineUpdateAPIToken *shared.SourceZendeskSunshineUpdateAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			var email string
			email = r.Configuration.Credentials.APIToken.Email.ValueString()

			sourceZendeskSunshineUpdateAPIToken = &shared.SourceZendeskSunshineUpdateAPIToken{
				APIToken: apiToken,
				Email:    email,
			}
		}
		if sourceZendeskSunshineUpdateAPIToken != nil {
			credentials = &shared.SourceZendeskSunshineUpdateAuthorizationMethod{
				SourceZendeskSunshineUpdateAPIToken: sourceZendeskSunshineUpdateAPIToken,
			}
		}
	}
	configuration := shared.SourceZendeskSunshineUpdate{
		Subdomain:   subdomain,
		StartDate:   startDate,
		Credentials: credentials,
	}
	out := shared.SourceZendeskSunshinePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
