// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZendeskSunshineResourceModel) ToCreateSDKType() *shared.SourceZendeskSunshineCreateRequest {
	var credentials *shared.SourceZendeskSunshineAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskSunshineAuthorizationMethodOAuth20 *shared.SourceZendeskSunshineAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken.ValueString()
			authMethod := shared.SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod(r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientID := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret.ValueString()
			sourceZendeskSunshineAuthorizationMethodOAuth20 = &shared.SourceZendeskSunshineAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineAuthorizationMethodOAuth20: sourceZendeskSunshineAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskSunshineAuthorizationMethodAPIToken *shared.SourceZendeskSunshineAuthorizationMethodAPIToken
		if r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
			apiToken := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken.ValueString()
			authMethod1 := shared.SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod(r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod.ValueString())
			email := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email.ValueString()
			sourceZendeskSunshineAuthorizationMethodAPIToken = &shared.SourceZendeskSunshineAuthorizationMethodAPIToken{
				APIToken:   apiToken,
				AuthMethod: authMethod1,
				Email:      email,
			}
		}
		if sourceZendeskSunshineAuthorizationMethodAPIToken != nil {
			credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineAuthorizationMethodAPIToken: sourceZendeskSunshineAuthorizationMethodAPIToken,
			}
		}
	}
	sourceType := shared.SourceZendeskSunshineZendeskSunshine(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := r.Configuration.Subdomain.ValueString()
	configuration := shared.SourceZendeskSunshine{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskSunshineCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskSunshineResourceModel) ToGetSDKType() *shared.SourceZendeskSunshineCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskSunshineResourceModel) ToUpdateSDKType() *shared.SourceZendeskSunshinePutRequest {
	var credentials *shared.SourceZendeskSunshineUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceZendeskSunshineUpdateAuthorizationMethodOAuth20 *shared.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20.AccessToken.ValueString()
			authMethod := shared.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20AuthMethod(r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientID := r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20.ClientSecret.ValueString()
			sourceZendeskSunshineUpdateAuthorizationMethodOAuth20 = &shared.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceZendeskSunshineUpdateAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceZendeskSunshineUpdateAuthorizationMethod{
				SourceZendeskSunshineUpdateAuthorizationMethodOAuth20: sourceZendeskSunshineUpdateAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskSunshineUpdateAuthorizationMethodAPIToken *shared.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken
		if r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken != nil {
			apiToken := r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken.APIToken.ValueString()
			authMethod1 := shared.SourceZendeskSunshineUpdateAuthorizationMethodAPITokenAuthMethod(r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken.AuthMethod.ValueString())
			email := r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken.Email.ValueString()
			sourceZendeskSunshineUpdateAuthorizationMethodAPIToken = &shared.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken{
				APIToken:   apiToken,
				AuthMethod: authMethod1,
				Email:      email,
			}
		}
		if sourceZendeskSunshineUpdateAuthorizationMethodAPIToken != nil {
			credentials = &shared.SourceZendeskSunshineUpdateAuthorizationMethod{
				SourceZendeskSunshineUpdateAuthorizationMethodAPIToken: sourceZendeskSunshineUpdateAuthorizationMethodAPIToken,
			}
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := r.Configuration.Subdomain.ValueString()
	configuration := shared.SourceZendeskSunshineUpdate{
		Credentials: credentials,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskSunshinePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskSunshineResourceModel) ToDeleteSDKType() *shared.SourceZendeskSunshineCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceZendeskSunshineResourceModel) RefreshFromGetResponse(resp *shared.SourceZendeskSunshineGetResponse) {
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceZendeskSunshineAuthorizationMethod{}
		if resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken = &SourceZendeskSunshineAuthorizationMethodAPIToken{}
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken = types.StringValue(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken)
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod = types.StringValue(string(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod))
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email = types.StringValue(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email)
		}
		if resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 = &SourceZendeskSunshineAuthorizationMethodOAuth20{}
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken)
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod = types.StringValue(string(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod))
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID)
			r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret)
		}
		if resp.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken != nil {
			r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodAPIToken = &SourceZendeskSunshineAuthorizationMethodAPIToken{}
		}
		if resp.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceZendeskSunshineUpdateAuthorizationMethodOAuth20 = &SourceZendeskSunshineAuthorizationMethodOAuth20{}
		}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Configuration.Subdomain = types.StringValue(resp.Configuration.Subdomain)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceZendeskSunshineResourceModel) RefreshFromCreateResponse(resp *shared.SourceZendeskSunshineGetResponse) {
	r.RefreshFromGetResponse(resp)
}
