// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceHubspotResourceModel) ToCreateSDKType() *shared.SourceHubspotCreateRequest {
	var credentials shared.SourceHubspotAuthentication
	var sourceHubspotAuthenticationOAuth *shared.SourceHubspotAuthenticationOAuth
	if r.Configuration.Credentials.SourceHubspotAuthenticationOAuth != nil {
		clientID := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.ClientSecret.ValueString()
		credentialsTitle := shared.SourceHubspotAuthenticationOAuthAuthType(r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.CredentialsTitle.ValueString())
		refreshToken := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.RefreshToken.ValueString()
		sourceHubspotAuthenticationOAuth = &shared.SourceHubspotAuthenticationOAuth{
			ClientID:         clientID,
			ClientSecret:     clientSecret,
			CredentialsTitle: credentialsTitle,
			RefreshToken:     refreshToken,
		}
	}
	if sourceHubspotAuthenticationOAuth != nil {
		credentials = shared.SourceHubspotAuthentication{
			SourceHubspotAuthenticationOAuth: sourceHubspotAuthenticationOAuth,
		}
	}
	var sourceHubspotAuthenticationPrivateApp *shared.SourceHubspotAuthenticationPrivateApp
	if r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp != nil {
		accessToken := r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp.AccessToken.ValueString()
		credentialsTitle1 := shared.SourceHubspotAuthenticationPrivateAppAuthType(r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp.CredentialsTitle.ValueString())
		sourceHubspotAuthenticationPrivateApp = &shared.SourceHubspotAuthenticationPrivateApp{
			AccessToken:      accessToken,
			CredentialsTitle: credentialsTitle1,
		}
	}
	if sourceHubspotAuthenticationPrivateApp != nil {
		credentials = shared.SourceHubspotAuthentication{
			SourceHubspotAuthenticationPrivateApp: sourceHubspotAuthenticationPrivateApp,
		}
	}
	sourceType := shared.SourceHubspotHubspot(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceHubspot{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceHubspotCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceHubspotResourceModel) ToGetSDKType() *shared.SourceHubspotCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceHubspotResourceModel) ToUpdateSDKType() *shared.SourceHubspotPutRequest {
	var credentials shared.SourceHubspotUpdateAuthentication
	var sourceHubspotUpdateAuthenticationOAuth *shared.SourceHubspotUpdateAuthenticationOAuth
	if r.Configuration.Credentials.SourceHubspotUpdateAuthenticationOAuth != nil {
		clientID := r.Configuration.Credentials.SourceHubspotUpdateAuthenticationOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceHubspotUpdateAuthenticationOAuth.ClientSecret.ValueString()
		credentialsTitle := shared.SourceHubspotUpdateAuthenticationOAuthAuthType(r.Configuration.Credentials.SourceHubspotUpdateAuthenticationOAuth.CredentialsTitle.ValueString())
		refreshToken := r.Configuration.Credentials.SourceHubspotUpdateAuthenticationOAuth.RefreshToken.ValueString()
		sourceHubspotUpdateAuthenticationOAuth = &shared.SourceHubspotUpdateAuthenticationOAuth{
			ClientID:         clientID,
			ClientSecret:     clientSecret,
			CredentialsTitle: credentialsTitle,
			RefreshToken:     refreshToken,
		}
	}
	if sourceHubspotUpdateAuthenticationOAuth != nil {
		credentials = shared.SourceHubspotUpdateAuthentication{
			SourceHubspotUpdateAuthenticationOAuth: sourceHubspotUpdateAuthenticationOAuth,
		}
	}
	var sourceHubspotUpdateAuthenticationPrivateApp *shared.SourceHubspotUpdateAuthenticationPrivateApp
	if r.Configuration.Credentials.SourceHubspotUpdateAuthenticationPrivateApp != nil {
		accessToken := r.Configuration.Credentials.SourceHubspotUpdateAuthenticationPrivateApp.AccessToken.ValueString()
		credentialsTitle1 := shared.SourceHubspotUpdateAuthenticationPrivateAppAuthType(r.Configuration.Credentials.SourceHubspotUpdateAuthenticationPrivateApp.CredentialsTitle.ValueString())
		sourceHubspotUpdateAuthenticationPrivateApp = &shared.SourceHubspotUpdateAuthenticationPrivateApp{
			AccessToken:      accessToken,
			CredentialsTitle: credentialsTitle1,
		}
	}
	if sourceHubspotUpdateAuthenticationPrivateApp != nil {
		credentials = shared.SourceHubspotUpdateAuthentication{
			SourceHubspotUpdateAuthenticationPrivateApp: sourceHubspotUpdateAuthenticationPrivateApp,
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceHubspotUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceHubspotPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceHubspotResourceModel) ToDeleteSDKType() *shared.SourceHubspotCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceHubspotResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceHubspotResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
