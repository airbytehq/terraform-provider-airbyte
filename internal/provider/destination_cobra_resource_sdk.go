// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationCobraResourceModel) ToSharedDestinationCobraCreateRequest(ctx context.Context) (*shared.DestinationCobraCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	var streamMappings []shared.StreamMapping = []shared.StreamMapping{}
	for _, streamMappingsItem := range r.Configuration.StreamMappings {
		var sourceStream string
		sourceStream = streamMappingsItem.SourceStream.ValueString()

		var destinationTable string
		destinationTable = streamMappingsItem.DestinationTable.ValueString()

		updateMode := shared.UpdateMode(streamMappingsItem.UpdateMode.ValueString())
		upsertKey := new(string)
		if !streamMappingsItem.UpsertKey.IsUnknown() && !streamMappingsItem.UpsertKey.IsNull() {
			*upsertKey = streamMappingsItem.UpsertKey.ValueString()
		} else {
			upsertKey = nil
		}
		streamMappings = append(streamMappings, shared.StreamMapping{
			SourceStream:     sourceStream,
			DestinationTable: destinationTable,
			UpdateMode:       updateMode,
			UpsertKey:        upsertKey,
		})
	}
	var streamOrder []string = []string{}
	for _, streamOrderItem := range r.Configuration.StreamOrder {
		streamOrder = append(streamOrder, streamOrderItem.ValueString())
	}
	printRecordContentOnError := new(bool)
	if !r.Configuration.PrintRecordContentOnError.IsUnknown() && !r.Configuration.PrintRecordContentOnError.IsNull() {
		*printRecordContentOnError = r.Configuration.PrintRecordContentOnError.ValueBool()
	} else {
		printRecordContentOnError = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	configuration := shared.DestinationCobra{
		ClientID:                  clientID,
		ClientSecret:              clientSecret,
		RefreshToken:              refreshToken,
		StreamMappings:            streamMappings,
		StreamOrder:               streamOrder,
		PrintRecordContentOnError: printRecordContentOnError,
		IsSandbox:                 isSandbox,
	}
	out := shared.DestinationCobraCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationCobraResourceModel) ToSharedDestinationCobraPutRequest(ctx context.Context) (*shared.DestinationCobraPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	var streamMappings []shared.DestinationCobraUpdateStreamMapping = []shared.DestinationCobraUpdateStreamMapping{}
	for _, streamMappingsItem := range r.Configuration.StreamMappings {
		var sourceStream string
		sourceStream = streamMappingsItem.SourceStream.ValueString()

		var destinationTable string
		destinationTable = streamMappingsItem.DestinationTable.ValueString()

		updateMode := shared.DestinationCobraUpdateUpdateMode(streamMappingsItem.UpdateMode.ValueString())
		upsertKey := new(string)
		if !streamMappingsItem.UpsertKey.IsUnknown() && !streamMappingsItem.UpsertKey.IsNull() {
			*upsertKey = streamMappingsItem.UpsertKey.ValueString()
		} else {
			upsertKey = nil
		}
		streamMappings = append(streamMappings, shared.DestinationCobraUpdateStreamMapping{
			SourceStream:     sourceStream,
			DestinationTable: destinationTable,
			UpdateMode:       updateMode,
			UpsertKey:        upsertKey,
		})
	}
	var streamOrder []string = []string{}
	for _, streamOrderItem := range r.Configuration.StreamOrder {
		streamOrder = append(streamOrder, streamOrderItem.ValueString())
	}
	printRecordContentOnError := new(bool)
	if !r.Configuration.PrintRecordContentOnError.IsUnknown() && !r.Configuration.PrintRecordContentOnError.IsNull() {
		*printRecordContentOnError = r.Configuration.PrintRecordContentOnError.ValueBool()
	} else {
		printRecordContentOnError = nil
	}
	isSandbox := new(bool)
	if !r.Configuration.IsSandbox.IsUnknown() && !r.Configuration.IsSandbox.IsNull() {
		*isSandbox = r.Configuration.IsSandbox.ValueBool()
	} else {
		isSandbox = nil
	}
	configuration := shared.DestinationCobraUpdate{
		ClientID:                  clientID,
		ClientSecret:              clientSecret,
		RefreshToken:              refreshToken,
		StreamMappings:            streamMappings,
		StreamOrder:               streamOrder,
		PrintRecordContentOnError: printRecordContentOnError,
		IsSandbox:                 isSandbox,
	}
	out := shared.DestinationCobraPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationCobraResourceModel) ToOperationsPutDestinationCobraRequest(ctx context.Context) (*operations.PutDestinationCobraRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationCobraPutRequest, destinationCobraPutRequestDiags := r.ToSharedDestinationCobraPutRequest(ctx)
	diags.Append(destinationCobraPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationCobraRequest{
		DestinationID:              destinationID,
		DestinationCobraPutRequest: destinationCobraPutRequest,
	}

	return &out, diags
}

func (r *DestinationCobraResourceModel) ToOperationsGetDestinationCobraRequest(ctx context.Context) (*operations.GetDestinationCobraRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationCobraRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationCobraResourceModel) ToOperationsDeleteDestinationCobraRequest(ctx context.Context) (*operations.DeleteDestinationCobraRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationCobraRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationCobraResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
