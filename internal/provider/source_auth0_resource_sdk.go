// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAuth0ResourceModel) ToCreateSDKType() *shared.SourceAuth0CreateRequest {
	baseURL := r.Configuration.BaseURL.ValueString()
	var credentials shared.SourceAuth0AuthenticationMethod
	var sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication *shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication
	if r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
		audience := r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience.ValueString()
		authType := shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod(r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret.ValueString()
		sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication = &shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication{
			Audience:     audience,
			AuthType:     authType,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	if sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
		credentials = shared.SourceAuth0AuthenticationMethod{
			SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication: sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication,
		}
	}
	var sourceAuth0AuthenticationMethodOAuth2AccessToken *shared.SourceAuth0AuthenticationMethodOAuth2AccessToken
	if r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
		accessToken := r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken.ValueString()
		authType1 := shared.SourceAuth0AuthenticationMethodOAuth2AccessTokenAuthenticationMethod(r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType.ValueString())
		sourceAuth0AuthenticationMethodOAuth2AccessToken = &shared.SourceAuth0AuthenticationMethodOAuth2AccessToken{
			AccessToken: accessToken,
			AuthType:    authType1,
		}
	}
	if sourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
		credentials = shared.SourceAuth0AuthenticationMethod{
			SourceAuth0AuthenticationMethodOAuth2AccessToken: sourceAuth0AuthenticationMethodOAuth2AccessToken,
		}
	}
	sourceType := shared.SourceAuth0Auth0(r.Configuration.SourceType.ValueString())
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	configuration := shared.SourceAuth0{
		BaseURL:     baseURL,
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAuth0CreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAuth0ResourceModel) ToGetSDKType() *shared.SourceAuth0CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAuth0ResourceModel) ToUpdateSDKType() *shared.SourceAuth0PutRequest {
	baseURL := r.Configuration.BaseURL.ValueString()
	var credentials shared.SourceAuth0UpdateAuthenticationMethod
	var sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication *shared.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication
	if r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication != nil {
		audience := r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.Audience.ValueString()
		authType := shared.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod(r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication.ClientSecret.ValueString()
		sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication = &shared.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication{
			Audience:     audience,
			AuthType:     authType,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	if sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication != nil {
		credentials = shared.SourceAuth0UpdateAuthenticationMethod{
			SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication: sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication,
		}
	}
	var sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken *shared.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken
	if r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken != nil {
		accessToken := r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken.AccessToken.ValueString()
		authType1 := shared.SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod(r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken.AuthType.ValueString())
		sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken = &shared.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken{
			AccessToken: accessToken,
			AuthType:    authType1,
		}
	}
	if sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken != nil {
		credentials = shared.SourceAuth0UpdateAuthenticationMethod{
			SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken: sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken,
		}
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	configuration := shared.SourceAuth0Update{
		BaseURL:     baseURL,
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAuth0PutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAuth0ResourceModel) ToDeleteSDKType() *shared.SourceAuth0CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAuth0ResourceModel) RefreshFromGetResponse(resp *shared.SourceAuth0GetResponse) {
	r.Configuration.BaseURL = types.StringValue(resp.Configuration.BaseURL)
	if resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken = &SourceAuth0AuthenticationMethodOAuth2AccessToken{}
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken)
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType))
	}
	if resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication = &SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication{}
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience = types.StringValue(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience)
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType))
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID = types.StringValue(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID)
		r.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret = types.StringValue(resp.Configuration.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret)
	}
	if resp.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken != nil {
		r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken = &SourceAuth0AuthenticationMethodOAuth2AccessToken{}
	}
	if resp.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication != nil {
		r.Configuration.Credentials.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication = &SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication{}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(*resp.Configuration.StartDate)
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAuth0ResourceModel) RefreshFromCreateResponse(resp *shared.SourceAuth0GetResponse) {
	r.RefreshFromGetResponse(resp)
}
