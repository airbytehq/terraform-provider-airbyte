// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceTwilioResourceModel) ToCreateSDKType() *shared.SourceTwilioCreateRequest {
	accountSid := r.Configuration.AccountSid.ValueString()
	authToken := r.Configuration.AuthToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	sourceType := shared.SourceTwilioTwilio(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceTwilio{
		AccountSid:     accountSid,
		AuthToken:      authToken,
		LookbackWindow: lookbackWindow,
		SourceType:     sourceType,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTwilioCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceTwilioResourceModel) ToGetSDKType() *shared.SourceTwilioCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceTwilioResourceModel) ToUpdateSDKType() *shared.SourceTwilioPutRequest {
	accountSid := r.Configuration.AccountSid.ValueString()
	authToken := r.Configuration.AuthToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceTwilioUpdate{
		AccountSid:     accountSid,
		AuthToken:      authToken,
		LookbackWindow: lookbackWindow,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTwilioPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceTwilioResourceModel) ToDeleteSDKType() *shared.SourceTwilioCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceTwilioResourceModel) RefreshFromGetResponse(resp *shared.SourceTwilioGetResponse) {
	r.Configuration.AccountSid = types.StringValue(resp.Configuration.AccountSid)
	r.Configuration.AuthToken = types.StringValue(resp.Configuration.AuthToken)
	if resp.Configuration.LookbackWindow != nil {
		r.Configuration.LookbackWindow = types.Int64Value(*resp.Configuration.LookbackWindow)
	} else {
		r.Configuration.LookbackWindow = types.Int64Null()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceTwilioResourceModel) RefreshFromCreateResponse(resp *shared.SourceTwilioGetResponse) {
	r.RefreshFromGetResponse(resp)
}
