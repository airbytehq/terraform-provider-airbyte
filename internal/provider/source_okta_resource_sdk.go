// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceOktaResourceModel) ToSharedSourceOktaCreateRequest(ctx context.Context) (*shared.SourceOktaCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceOktaAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceOktaOAuth20 *shared.SourceOktaOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

			sourceOktaOAuth20 = &shared.SourceOktaOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceOktaOAuth20 != nil {
			credentials = &shared.SourceOktaAuthorizationMethod{
				SourceOktaOAuth20: sourceOktaOAuth20,
			}
		}
		var oAuth20WithPrivateKey *shared.OAuth20WithPrivateKey
		if r.Configuration.Credentials.OAuth20WithPrivateKey != nil {
			var clientId1 string
			clientId1 = r.Configuration.Credentials.OAuth20WithPrivateKey.ClientID.ValueString()

			var keyID string
			keyID = r.Configuration.Credentials.OAuth20WithPrivateKey.KeyID.ValueString()

			var privateKey string
			privateKey = r.Configuration.Credentials.OAuth20WithPrivateKey.PrivateKey.ValueString()

			var scope string
			scope = r.Configuration.Credentials.OAuth20WithPrivateKey.Scope.ValueString()

			oAuth20WithPrivateKey = &shared.OAuth20WithPrivateKey{
				ClientID:   clientId1,
				KeyID:      keyID,
				PrivateKey: privateKey,
				Scope:      scope,
			}
		}
		if oAuth20WithPrivateKey != nil {
			credentials = &shared.SourceOktaAuthorizationMethod{
				OAuth20WithPrivateKey: oAuth20WithPrivateKey,
			}
		}
		var sourceOktaAPIToken *shared.SourceOktaAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			sourceOktaAPIToken = &shared.SourceOktaAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceOktaAPIToken != nil {
			credentials = &shared.SourceOktaAuthorizationMethod{
				SourceOktaAPIToken: sourceOktaAPIToken,
			}
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceOkta{
		Credentials: credentials,
		Domain:      domain,
		StartDate:   startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceOktaCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceOktaResourceModel) ToSharedSourceOktaPutRequest(ctx context.Context) (*shared.SourceOktaPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceOktaUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceOktaUpdateOAuth20 *shared.SourceOktaUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

			sourceOktaUpdateOAuth20 = &shared.SourceOktaUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceOktaUpdateOAuth20 != nil {
			credentials = &shared.SourceOktaUpdateAuthorizationMethod{
				SourceOktaUpdateOAuth20: sourceOktaUpdateOAuth20,
			}
		}
		var sourceOktaUpdateOAuth20WithPrivateKey *shared.SourceOktaUpdateOAuth20WithPrivateKey
		if r.Configuration.Credentials.OAuth20WithPrivateKey != nil {
			var clientId1 string
			clientId1 = r.Configuration.Credentials.OAuth20WithPrivateKey.ClientID.ValueString()

			var keyID string
			keyID = r.Configuration.Credentials.OAuth20WithPrivateKey.KeyID.ValueString()

			var privateKey string
			privateKey = r.Configuration.Credentials.OAuth20WithPrivateKey.PrivateKey.ValueString()

			var scope string
			scope = r.Configuration.Credentials.OAuth20WithPrivateKey.Scope.ValueString()

			sourceOktaUpdateOAuth20WithPrivateKey = &shared.SourceOktaUpdateOAuth20WithPrivateKey{
				ClientID:   clientId1,
				KeyID:      keyID,
				PrivateKey: privateKey,
				Scope:      scope,
			}
		}
		if sourceOktaUpdateOAuth20WithPrivateKey != nil {
			credentials = &shared.SourceOktaUpdateAuthorizationMethod{
				SourceOktaUpdateOAuth20WithPrivateKey: sourceOktaUpdateOAuth20WithPrivateKey,
			}
		}
		var sourceOktaUpdateAPIToken *shared.SourceOktaUpdateAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			sourceOktaUpdateAPIToken = &shared.SourceOktaUpdateAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceOktaUpdateAPIToken != nil {
			credentials = &shared.SourceOktaUpdateAuthorizationMethod{
				SourceOktaUpdateAPIToken: sourceOktaUpdateAPIToken,
			}
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceOktaUpdate{
		Credentials: credentials,
		Domain:      domain,
		StartDate:   startDate,
	}
	out := shared.SourceOktaPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceOktaResourceModel) ToOperationsPutSourceOktaRequest(ctx context.Context) (*operations.PutSourceOktaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceOktaPutRequest, sourceOktaPutRequestDiags := r.ToSharedSourceOktaPutRequest(ctx)
	diags.Append(sourceOktaPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceOktaRequest{
		SourceID:             sourceID,
		SourceOktaPutRequest: sourceOktaPutRequest,
	}

	return &out, diags
}

func (r *SourceOktaResourceModel) ToOperationsGetSourceOktaRequest(ctx context.Context) (*operations.GetSourceOktaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceOktaRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceOktaResourceModel) ToOperationsDeleteSourceOktaRequest(ctx context.Context) (*operations.DeleteSourceOktaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceOktaRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceOktaResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
