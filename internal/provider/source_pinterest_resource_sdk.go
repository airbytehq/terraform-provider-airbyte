// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourcePinterestResourceModel) ToSharedSourcePinterestCreateRequest() *shared.SourcePinterestCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var status []shared.Status = []shared.Status{}
	for _, statusItem := range r.Configuration.Status {
		status = append(status, shared.Status(statusItem.ValueString()))
	}
	var credentials *shared.OAuth20
	if r.Configuration.Credentials != nil {
		var clientID string
		clientID = r.Configuration.Credentials.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.RefreshToken.ValueString()

		credentials = &shared.OAuth20{
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	var customReports []shared.ReportConfig = []shared.ReportConfig{}
	for _, customReportsItem := range r.Configuration.CustomReports {
		var name1 string
		name1 = customReportsItem.Name.ValueString()

		level := new(shared.SourcePinterestLevel)
		if !customReportsItem.Level.IsUnknown() && !customReportsItem.Level.IsNull() {
			*level = shared.SourcePinterestLevel(customReportsItem.Level.ValueString())
		} else {
			level = nil
		}
		granularity := new(shared.Granularity)
		if !customReportsItem.Granularity.IsUnknown() && !customReportsItem.Granularity.IsNull() {
			*granularity = shared.Granularity(customReportsItem.Granularity.ValueString())
		} else {
			granularity = nil
		}
		var columns []shared.SourcePinterestValidEnums = []shared.SourcePinterestValidEnums{}
		for _, columnsItem := range customReportsItem.Columns {
			columns = append(columns, shared.SourcePinterestValidEnums(columnsItem.ValueString()))
		}
		clickWindowDays := new(shared.ClickWindowDays)
		if !customReportsItem.ClickWindowDays.IsUnknown() && !customReportsItem.ClickWindowDays.IsNull() {
			*clickWindowDays = shared.ClickWindowDays(customReportsItem.ClickWindowDays.ValueInt64())
		} else {
			clickWindowDays = nil
		}
		engagementWindowDays := new(shared.EngagementWindowDays)
		if !customReportsItem.EngagementWindowDays.IsUnknown() && !customReportsItem.EngagementWindowDays.IsNull() {
			*engagementWindowDays = shared.EngagementWindowDays(customReportsItem.EngagementWindowDays.ValueInt64())
		} else {
			engagementWindowDays = nil
		}
		viewWindowDays := new(shared.ViewWindowDays)
		if !customReportsItem.ViewWindowDays.IsUnknown() && !customReportsItem.ViewWindowDays.IsNull() {
			*viewWindowDays = shared.ViewWindowDays(customReportsItem.ViewWindowDays.ValueInt64())
		} else {
			viewWindowDays = nil
		}
		conversionReportTime := new(shared.ConversionReportTime)
		if !customReportsItem.ConversionReportTime.IsUnknown() && !customReportsItem.ConversionReportTime.IsNull() {
			*conversionReportTime = shared.ConversionReportTime(customReportsItem.ConversionReportTime.ValueString())
		} else {
			conversionReportTime = nil
		}
		var attributionTypes []shared.SourcePinterestSchemasValidEnums = []shared.SourcePinterestSchemasValidEnums{}
		for _, attributionTypesItem := range customReportsItem.AttributionTypes {
			attributionTypes = append(attributionTypes, shared.SourcePinterestSchemasValidEnums(attributionTypesItem.ValueString()))
		}
		startDate1 := new(customTypes.Date)
		if !customReportsItem.StartDate.IsUnknown() && !customReportsItem.StartDate.IsNull() {
			startDate1 = customTypes.MustNewDateFromString(customReportsItem.StartDate.ValueString())
		} else {
			startDate1 = nil
		}
		customReports = append(customReports, shared.ReportConfig{
			Name:                 name1,
			Level:                level,
			Granularity:          granularity,
			Columns:              columns,
			ClickWindowDays:      clickWindowDays,
			EngagementWindowDays: engagementWindowDays,
			ViewWindowDays:       viewWindowDays,
			ConversionReportTime: conversionReportTime,
			AttributionTypes:     attributionTypes,
			StartDate:            startDate1,
		})
	}
	configuration := shared.SourcePinterest{
		StartDate:     startDate,
		Status:        status,
		Credentials:   credentials,
		CustomReports: customReports,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourcePinterestCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourcePinterestResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourcePinterestResourceModel) ToSharedSourcePinterestPutRequest() *shared.SourcePinterestPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var status []shared.SourcePinterestUpdateStatus = []shared.SourcePinterestUpdateStatus{}
	for _, statusItem := range r.Configuration.Status {
		status = append(status, shared.SourcePinterestUpdateStatus(statusItem.ValueString()))
	}
	var credentials *shared.SourcePinterestUpdateOAuth20
	if r.Configuration.Credentials != nil {
		var clientID string
		clientID = r.Configuration.Credentials.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.RefreshToken.ValueString()

		credentials = &shared.SourcePinterestUpdateOAuth20{
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	var customReports []shared.SourcePinterestUpdateReportConfig = []shared.SourcePinterestUpdateReportConfig{}
	for _, customReportsItem := range r.Configuration.CustomReports {
		var name1 string
		name1 = customReportsItem.Name.ValueString()

		level := new(shared.SourcePinterestUpdateLevel)
		if !customReportsItem.Level.IsUnknown() && !customReportsItem.Level.IsNull() {
			*level = shared.SourcePinterestUpdateLevel(customReportsItem.Level.ValueString())
		} else {
			level = nil
		}
		granularity := new(shared.SourcePinterestUpdateGranularity)
		if !customReportsItem.Granularity.IsUnknown() && !customReportsItem.Granularity.IsNull() {
			*granularity = shared.SourcePinterestUpdateGranularity(customReportsItem.Granularity.ValueString())
		} else {
			granularity = nil
		}
		var columns []shared.SourcePinterestUpdateValidEnums = []shared.SourcePinterestUpdateValidEnums{}
		for _, columnsItem := range customReportsItem.Columns {
			columns = append(columns, shared.SourcePinterestUpdateValidEnums(columnsItem.ValueString()))
		}
		clickWindowDays := new(shared.SourcePinterestUpdateClickWindowDays)
		if !customReportsItem.ClickWindowDays.IsUnknown() && !customReportsItem.ClickWindowDays.IsNull() {
			*clickWindowDays = shared.SourcePinterestUpdateClickWindowDays(customReportsItem.ClickWindowDays.ValueInt64())
		} else {
			clickWindowDays = nil
		}
		engagementWindowDays := new(shared.SourcePinterestUpdateEngagementWindowDays)
		if !customReportsItem.EngagementWindowDays.IsUnknown() && !customReportsItem.EngagementWindowDays.IsNull() {
			*engagementWindowDays = shared.SourcePinterestUpdateEngagementWindowDays(customReportsItem.EngagementWindowDays.ValueInt64())
		} else {
			engagementWindowDays = nil
		}
		viewWindowDays := new(shared.SourcePinterestUpdateViewWindowDays)
		if !customReportsItem.ViewWindowDays.IsUnknown() && !customReportsItem.ViewWindowDays.IsNull() {
			*viewWindowDays = shared.SourcePinterestUpdateViewWindowDays(customReportsItem.ViewWindowDays.ValueInt64())
		} else {
			viewWindowDays = nil
		}
		conversionReportTime := new(shared.SourcePinterestUpdateConversionReportTime)
		if !customReportsItem.ConversionReportTime.IsUnknown() && !customReportsItem.ConversionReportTime.IsNull() {
			*conversionReportTime = shared.SourcePinterestUpdateConversionReportTime(customReportsItem.ConversionReportTime.ValueString())
		} else {
			conversionReportTime = nil
		}
		var attributionTypes []shared.SourcePinterestUpdateSchemasValidEnums = []shared.SourcePinterestUpdateSchemasValidEnums{}
		for _, attributionTypesItem := range customReportsItem.AttributionTypes {
			attributionTypes = append(attributionTypes, shared.SourcePinterestUpdateSchemasValidEnums(attributionTypesItem.ValueString()))
		}
		startDate1 := new(customTypes.Date)
		if !customReportsItem.StartDate.IsUnknown() && !customReportsItem.StartDate.IsNull() {
			startDate1 = customTypes.MustNewDateFromString(customReportsItem.StartDate.ValueString())
		} else {
			startDate1 = nil
		}
		customReports = append(customReports, shared.SourcePinterestUpdateReportConfig{
			Name:                 name1,
			Level:                level,
			Granularity:          granularity,
			Columns:              columns,
			ClickWindowDays:      clickWindowDays,
			EngagementWindowDays: engagementWindowDays,
			ViewWindowDays:       viewWindowDays,
			ConversionReportTime: conversionReportTime,
			AttributionTypes:     attributionTypes,
			StartDate:            startDate1,
		})
	}
	configuration := shared.SourcePinterestUpdate{
		StartDate:     startDate,
		Status:        status,
		Credentials:   credentials,
		CustomReports: customReports,
	}
	out := shared.SourcePinterestPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
