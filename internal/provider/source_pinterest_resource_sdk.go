// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourcePinterestResourceModel) ToCreateSDKType() *shared.SourcePinterestCreateRequest {
	var credentials *shared.SourcePinterestAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourcePinterestOAuth20 *shared.SourcePinterestOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
			sourcePinterestOAuth20 = &shared.SourcePinterestOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourcePinterestOAuth20 != nil {
			credentials = &shared.SourcePinterestAuthorizationMethod{
				SourcePinterestOAuth20: sourcePinterestOAuth20,
			}
		}
		var sourcePinterestAccessToken *shared.SourcePinterestAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			accessToken := r.Configuration.Credentials.AccessToken.AccessToken.ValueString()
			sourcePinterestAccessToken = &shared.SourcePinterestAccessToken{
				AccessToken: accessToken,
			}
		}
		if sourcePinterestAccessToken != nil {
			credentials = &shared.SourcePinterestAuthorizationMethod{
				SourcePinterestAccessToken: sourcePinterestAccessToken,
			}
		}
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	var status []shared.SourcePinterestStatus = nil
	for _, statusItem := range r.Configuration.Status {
		status = append(status, shared.SourcePinterestStatus(statusItem.ValueString()))
	}
	configuration := shared.SourcePinterest{
		Credentials: credentials,
		StartDate:   startDate,
		Status:      status,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePinterestCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePinterestResourceModel) ToGetSDKType() *shared.SourcePinterestCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePinterestResourceModel) ToUpdateSDKType() *shared.SourcePinterestPutRequest {
	var credentials *shared.SourcePinterestUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourcePinterestUpdateOAuth20 *shared.SourcePinterestUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
			sourcePinterestUpdateOAuth20 = &shared.SourcePinterestUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourcePinterestUpdateOAuth20 != nil {
			credentials = &shared.SourcePinterestUpdateAuthorizationMethod{
				SourcePinterestUpdateOAuth20: sourcePinterestUpdateOAuth20,
			}
		}
		var sourcePinterestUpdateAccessToken *shared.SourcePinterestUpdateAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			accessToken := r.Configuration.Credentials.AccessToken.AccessToken.ValueString()
			sourcePinterestUpdateAccessToken = &shared.SourcePinterestUpdateAccessToken{
				AccessToken: accessToken,
			}
		}
		if sourcePinterestUpdateAccessToken != nil {
			credentials = &shared.SourcePinterestUpdateAuthorizationMethod{
				SourcePinterestUpdateAccessToken: sourcePinterestUpdateAccessToken,
			}
		}
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	var status []shared.Status = nil
	for _, statusItem := range r.Configuration.Status {
		status = append(status, shared.Status(statusItem.ValueString()))
	}
	configuration := shared.SourcePinterestUpdate{
		Credentials: credentials,
		StartDate:   startDate,
		Status:      status,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePinterestPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePinterestResourceModel) ToDeleteSDKType() *shared.SourcePinterestCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePinterestResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourcePinterestResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
