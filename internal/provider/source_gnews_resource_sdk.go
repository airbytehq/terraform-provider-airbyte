// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGnewsResourceModel) ToCreateSDKType() *shared.SourceGnewsCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	country := new(shared.SourceGnewsCountry)
	if !r.Configuration.Country.IsUnknown() && !r.Configuration.Country.IsNull() {
		*country = shared.SourceGnewsCountry(r.Configuration.Country.ValueString())
	} else {
		country = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	var in []shared.SourceGnewsIn = nil
	for _, inItem := range r.Configuration.In {
		in = append(in, shared.SourceGnewsIn(inItem.ValueString()))
	}
	language := new(shared.SourceGnewsLanguage)
	if !r.Configuration.Language.IsUnknown() && !r.Configuration.Language.IsNull() {
		*language = shared.SourceGnewsLanguage(r.Configuration.Language.ValueString())
	} else {
		language = nil
	}
	var nullable []shared.SourceGnewsNullable = nil
	for _, nullableItem := range r.Configuration.Nullable {
		nullable = append(nullable, shared.SourceGnewsNullable(nullableItem.ValueString()))
	}
	query := r.Configuration.Query.ValueString()
	sortby := new(shared.SourceGnewsSortBy)
	if !r.Configuration.Sortby.IsUnknown() && !r.Configuration.Sortby.IsNull() {
		*sortby = shared.SourceGnewsSortBy(r.Configuration.Sortby.ValueString())
	} else {
		sortby = nil
	}
	sourceType := shared.SourceGnewsGnews(r.Configuration.SourceType.ValueString())
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	topHeadlinesQuery := new(string)
	if !r.Configuration.TopHeadlinesQuery.IsUnknown() && !r.Configuration.TopHeadlinesQuery.IsNull() {
		*topHeadlinesQuery = r.Configuration.TopHeadlinesQuery.ValueString()
	} else {
		topHeadlinesQuery = nil
	}
	topHeadlinesTopic := new(shared.SourceGnewsTopHeadlinesTopic)
	if !r.Configuration.TopHeadlinesTopic.IsUnknown() && !r.Configuration.TopHeadlinesTopic.IsNull() {
		*topHeadlinesTopic = shared.SourceGnewsTopHeadlinesTopic(r.Configuration.TopHeadlinesTopic.ValueString())
	} else {
		topHeadlinesTopic = nil
	}
	configuration := shared.SourceGnews{
		APIKey:            apiKey,
		Country:           country,
		EndDate:           endDate,
		In:                in,
		Language:          language,
		Nullable:          nullable,
		Query:             query,
		Sortby:            sortby,
		SourceType:        sourceType,
		StartDate:         startDate,
		TopHeadlinesQuery: topHeadlinesQuery,
		TopHeadlinesTopic: topHeadlinesTopic,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGnewsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGnewsResourceModel) ToGetSDKType() *shared.SourceGnewsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGnewsResourceModel) ToUpdateSDKType() *shared.SourceGnewsPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	country := new(shared.SourceGnewsUpdateCountry)
	if !r.Configuration.Country.IsUnknown() && !r.Configuration.Country.IsNull() {
		*country = shared.SourceGnewsUpdateCountry(r.Configuration.Country.ValueString())
	} else {
		country = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	var in []shared.SourceGnewsUpdateIn = nil
	for _, inItem := range r.Configuration.In {
		in = append(in, shared.SourceGnewsUpdateIn(inItem.ValueString()))
	}
	language := new(shared.SourceGnewsUpdateLanguage)
	if !r.Configuration.Language.IsUnknown() && !r.Configuration.Language.IsNull() {
		*language = shared.SourceGnewsUpdateLanguage(r.Configuration.Language.ValueString())
	} else {
		language = nil
	}
	var nullable []shared.SourceGnewsUpdateNullable = nil
	for _, nullableItem := range r.Configuration.Nullable {
		nullable = append(nullable, shared.SourceGnewsUpdateNullable(nullableItem.ValueString()))
	}
	query := r.Configuration.Query.ValueString()
	sortby := new(shared.SourceGnewsUpdateSortBy)
	if !r.Configuration.Sortby.IsUnknown() && !r.Configuration.Sortby.IsNull() {
		*sortby = shared.SourceGnewsUpdateSortBy(r.Configuration.Sortby.ValueString())
	} else {
		sortby = nil
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	topHeadlinesQuery := new(string)
	if !r.Configuration.TopHeadlinesQuery.IsUnknown() && !r.Configuration.TopHeadlinesQuery.IsNull() {
		*topHeadlinesQuery = r.Configuration.TopHeadlinesQuery.ValueString()
	} else {
		topHeadlinesQuery = nil
	}
	topHeadlinesTopic := new(shared.SourceGnewsUpdateTopHeadlinesTopic)
	if !r.Configuration.TopHeadlinesTopic.IsUnknown() && !r.Configuration.TopHeadlinesTopic.IsNull() {
		*topHeadlinesTopic = shared.SourceGnewsUpdateTopHeadlinesTopic(r.Configuration.TopHeadlinesTopic.ValueString())
	} else {
		topHeadlinesTopic = nil
	}
	configuration := shared.SourceGnewsUpdate{
		APIKey:            apiKey,
		Country:           country,
		EndDate:           endDate,
		In:                in,
		Language:          language,
		Nullable:          nullable,
		Query:             query,
		Sortby:            sortby,
		StartDate:         startDate,
		TopHeadlinesQuery: topHeadlinesQuery,
		TopHeadlinesTopic: topHeadlinesTopic,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGnewsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGnewsResourceModel) ToDeleteSDKType() *shared.SourceGnewsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGnewsResourceModel) RefreshFromGetResponse(resp *shared.SourceGnewsGetResponse) {
	r.Configuration.APIKey = types.StringValue(resp.Configuration.APIKey)
	if resp.Configuration.Country != nil {
		r.Configuration.Country = types.StringValue(string(*resp.Configuration.Country))
	} else {
		r.Configuration.Country = types.StringNull()
	}
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(*resp.Configuration.EndDate)
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	r.Configuration.In = nil
	for _, v := range resp.Configuration.In {
		r.Configuration.In = append(r.Configuration.In, types.StringValue(string(v)))
	}
	if resp.Configuration.Language != nil {
		r.Configuration.Language = types.StringValue(string(*resp.Configuration.Language))
	} else {
		r.Configuration.Language = types.StringNull()
	}
	r.Configuration.Nullable = nil
	for _, v := range resp.Configuration.Nullable {
		r.Configuration.Nullable = append(r.Configuration.Nullable, types.StringValue(string(v)))
	}
	r.Configuration.Query = types.StringValue(resp.Configuration.Query)
	if resp.Configuration.Sortby != nil {
		r.Configuration.Sortby = types.StringValue(string(*resp.Configuration.Sortby))
	} else {
		r.Configuration.Sortby = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(*resp.Configuration.StartDate)
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	if resp.Configuration.TopHeadlinesQuery != nil {
		r.Configuration.TopHeadlinesQuery = types.StringValue(*resp.Configuration.TopHeadlinesQuery)
	} else {
		r.Configuration.TopHeadlinesQuery = types.StringNull()
	}
	if resp.Configuration.TopHeadlinesTopic != nil {
		r.Configuration.TopHeadlinesTopic = types.StringValue(string(*resp.Configuration.TopHeadlinesTopic))
	} else {
		r.Configuration.TopHeadlinesTopic = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGnewsResourceModel) RefreshFromCreateResponse(resp *shared.SourceGnewsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
