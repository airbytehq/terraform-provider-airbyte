// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourcePaystackResourceModel) ToCreateSDKType() *shared.SourcePaystackCreateRequest {
	lookbackWindowDays := new(int64)
	if !r.Configuration.LookbackWindowDays.IsUnknown() && !r.Configuration.LookbackWindowDays.IsNull() {
		*lookbackWindowDays = r.Configuration.LookbackWindowDays.ValueInt64()
	} else {
		lookbackWindowDays = nil
	}
	secretKey := r.Configuration.SecretKey.ValueString()
	sourceType := shared.SourcePaystackPaystack(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourcePaystack{
		LookbackWindowDays: lookbackWindowDays,
		SecretKey:          secretKey,
		SourceType:         sourceType,
		StartDate:          startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePaystackCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePaystackResourceModel) ToGetSDKType() *shared.SourcePaystackCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePaystackResourceModel) ToUpdateSDKType() *shared.SourcePaystackPutRequest {
	lookbackWindowDays := new(int64)
	if !r.Configuration.LookbackWindowDays.IsUnknown() && !r.Configuration.LookbackWindowDays.IsNull() {
		*lookbackWindowDays = r.Configuration.LookbackWindowDays.ValueInt64()
	} else {
		lookbackWindowDays = nil
	}
	secretKey := r.Configuration.SecretKey.ValueString()
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourcePaystackUpdate{
		LookbackWindowDays: lookbackWindowDays,
		SecretKey:          secretKey,
		StartDate:          startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePaystackPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePaystackResourceModel) ToDeleteSDKType() *shared.SourcePaystackCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePaystackResourceModel) RefreshFromGetResponse(resp *shared.SourcePaystackGetResponse) {
	if resp.Configuration.LookbackWindowDays != nil {
		r.Configuration.LookbackWindowDays = types.Int64Value(*resp.Configuration.LookbackWindowDays)
	} else {
		r.Configuration.LookbackWindowDays = types.Int64Null()
	}
	r.Configuration.SecretKey = types.StringValue(resp.Configuration.SecretKey)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourcePaystackResourceModel) RefreshFromCreateResponse(resp *shared.SourcePaystackGetResponse) {
	r.RefreshFromGetResponse(resp)
}
