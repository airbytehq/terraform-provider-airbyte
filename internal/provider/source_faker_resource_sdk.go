// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFakerResourceModel) ToSharedSourceFakerCreateRequest() *shared.SourceFakerCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	count := new(int64)
	if !r.Configuration.Count.IsUnknown() && !r.Configuration.Count.IsNull() {
		*count = r.Configuration.Count.ValueInt64()
	} else {
		count = nil
	}
	seed := new(int64)
	if !r.Configuration.Seed.IsUnknown() && !r.Configuration.Seed.IsNull() {
		*seed = r.Configuration.Seed.ValueInt64()
	} else {
		seed = nil
	}
	recordsPerSlice := new(int64)
	if !r.Configuration.RecordsPerSlice.IsUnknown() && !r.Configuration.RecordsPerSlice.IsNull() {
		*recordsPerSlice = r.Configuration.RecordsPerSlice.ValueInt64()
	} else {
		recordsPerSlice = nil
	}
	alwaysUpdated := new(bool)
	if !r.Configuration.AlwaysUpdated.IsUnknown() && !r.Configuration.AlwaysUpdated.IsNull() {
		*alwaysUpdated = r.Configuration.AlwaysUpdated.ValueBool()
	} else {
		alwaysUpdated = nil
	}
	parallelism := new(int64)
	if !r.Configuration.Parallelism.IsUnknown() && !r.Configuration.Parallelism.IsNull() {
		*parallelism = r.Configuration.Parallelism.ValueInt64()
	} else {
		parallelism = nil
	}
	configuration := shared.SourceFaker{
		Count:           count,
		Seed:            seed,
		RecordsPerSlice: recordsPerSlice,
		AlwaysUpdated:   alwaysUpdated,
		Parallelism:     parallelism,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceFakerCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceFakerResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFakerResourceModel) ToSharedSourceFakerPutRequest() *shared.SourceFakerPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	count := new(int64)
	if !r.Configuration.Count.IsUnknown() && !r.Configuration.Count.IsNull() {
		*count = r.Configuration.Count.ValueInt64()
	} else {
		count = nil
	}
	seed := new(int64)
	if !r.Configuration.Seed.IsUnknown() && !r.Configuration.Seed.IsNull() {
		*seed = r.Configuration.Seed.ValueInt64()
	} else {
		seed = nil
	}
	recordsPerSlice := new(int64)
	if !r.Configuration.RecordsPerSlice.IsUnknown() && !r.Configuration.RecordsPerSlice.IsNull() {
		*recordsPerSlice = r.Configuration.RecordsPerSlice.ValueInt64()
	} else {
		recordsPerSlice = nil
	}
	alwaysUpdated := new(bool)
	if !r.Configuration.AlwaysUpdated.IsUnknown() && !r.Configuration.AlwaysUpdated.IsNull() {
		*alwaysUpdated = r.Configuration.AlwaysUpdated.ValueBool()
	} else {
		alwaysUpdated = nil
	}
	parallelism := new(int64)
	if !r.Configuration.Parallelism.IsUnknown() && !r.Configuration.Parallelism.IsNull() {
		*parallelism = r.Configuration.Parallelism.ValueInt64()
	} else {
		parallelism = nil
	}
	configuration := shared.SourceFakerUpdate{
		Count:           count,
		Seed:            seed,
		RecordsPerSlice: recordsPerSlice,
		AlwaysUpdated:   alwaysUpdated,
		Parallelism:     parallelism,
	}
	out := shared.SourceFakerPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
