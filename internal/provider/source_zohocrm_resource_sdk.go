// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceZohoCrmResourceModel) ToSharedSourceZohoCrmCreateRequest() *shared.SourceZohoCrmCreateRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	dcRegion := shared.SourceZohoCrmDataCenterLocation(r.Configuration.DcRegion.ValueString())
	edition := new(shared.SourceZohoCRMZohoCRMEdition)
	if !r.Configuration.Edition.IsUnknown() && !r.Configuration.Edition.IsNull() {
		*edition = shared.SourceZohoCRMZohoCRMEdition(r.Configuration.Edition.ValueString())
	} else {
		edition = nil
	}
	environment := shared.SourceZohoCrmEnvironment(r.Configuration.Environment.ValueString())
	refreshToken := r.Configuration.RefreshToken.ValueString()
	startDatetime := new(time.Time)
	if !r.Configuration.StartDatetime.IsUnknown() && !r.Configuration.StartDatetime.IsNull() {
		*startDatetime, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDatetime.ValueString())
	} else {
		startDatetime = nil
	}
	configuration := shared.SourceZohoCrm{
		ClientID:      clientID,
		ClientSecret:  clientSecret,
		DcRegion:      dcRegion,
		Edition:       edition,
		Environment:   environment,
		RefreshToken:  refreshToken,
		StartDatetime: startDatetime,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZohoCrmCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZohoCrmResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceZohoCrmResourceModel) ToSharedSourceZohoCrmPutRequest() *shared.SourceZohoCrmPutRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	dcRegion := shared.DataCenterLocation(r.Configuration.DcRegion.ValueString())
	edition := new(shared.ZohoCRMEdition)
	if !r.Configuration.Edition.IsUnknown() && !r.Configuration.Edition.IsNull() {
		*edition = shared.ZohoCRMEdition(r.Configuration.Edition.ValueString())
	} else {
		edition = nil
	}
	environment := shared.SourceZohoCrmUpdateEnvironment(r.Configuration.Environment.ValueString())
	refreshToken := r.Configuration.RefreshToken.ValueString()
	startDatetime := new(time.Time)
	if !r.Configuration.StartDatetime.IsUnknown() && !r.Configuration.StartDatetime.IsNull() {
		*startDatetime, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDatetime.ValueString())
	} else {
		startDatetime = nil
	}
	configuration := shared.SourceZohoCrmUpdate{
		ClientID:      clientID,
		ClientSecret:  clientSecret,
		DcRegion:      dcRegion,
		Edition:       edition,
		Environment:   environment,
		RefreshToken:  refreshToken,
		StartDatetime: startDatetime,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZohoCrmPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
