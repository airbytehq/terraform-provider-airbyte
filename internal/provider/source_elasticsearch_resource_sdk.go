// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceElasticsearchResourceModel) ToSharedSourceElasticsearchCreateRequest() *shared.SourceElasticsearchCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authenticationMethod *shared.SourceElasticsearchAuthenticationMethod
	if r.Configuration.AuthenticationMethod != nil {
		var none *shared.None
		if r.Configuration.AuthenticationMethod.None != nil {
			var additionalProperties interface{}
			if !r.Configuration.AuthenticationMethod.None.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.None.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.None.AdditionalProperties.ValueString()), &additionalProperties)
			}
			none = &shared.None{
				AdditionalProperties: additionalProperties,
			}
		}
		if none != nil {
			authenticationMethod = &shared.SourceElasticsearchAuthenticationMethod{
				None: none,
			}
		}
		var apiKeySecret *shared.APIKeySecret
		if r.Configuration.AuthenticationMethod.APIKeySecret != nil {
			var apiKeyID string
			apiKeyID = r.Configuration.AuthenticationMethod.APIKeySecret.APIKeyID.ValueString()

			var apiKeySecret1 string
			apiKeySecret1 = r.Configuration.AuthenticationMethod.APIKeySecret.APIKeySecret.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			apiKeySecret = &shared.APIKeySecret{
				APIKeyID:             apiKeyID,
				APIKeySecret:         apiKeySecret1,
				AdditionalProperties: additionalProperties1,
			}
		}
		if apiKeySecret != nil {
			authenticationMethod = &shared.SourceElasticsearchAuthenticationMethod{
				APIKeySecret: apiKeySecret,
			}
		}
		var usernamePassword *shared.UsernamePassword
		if r.Configuration.AuthenticationMethod.UsernamePassword != nil {
			var password string
			password = r.Configuration.AuthenticationMethod.UsernamePassword.Password.ValueString()

			var username string
			username = r.Configuration.AuthenticationMethod.UsernamePassword.Username.ValueString()

			var additionalProperties2 interface{}
			if !r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			usernamePassword = &shared.UsernamePassword{
				Password:             password,
				Username:             username,
				AdditionalProperties: additionalProperties2,
			}
		}
		if usernamePassword != nil {
			authenticationMethod = &shared.SourceElasticsearchAuthenticationMethod{
				UsernamePassword: usernamePassword,
			}
		}
	}
	var endpoint string
	endpoint = r.Configuration.Endpoint.ValueString()

	configuration := shared.SourceElasticsearch{
		AuthenticationMethod: authenticationMethod,
		Endpoint:             endpoint,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceElasticsearchCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceElasticsearchResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceElasticsearchResourceModel) ToSharedSourceElasticsearchPutRequest() *shared.SourceElasticsearchPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authenticationMethod *shared.SourceElasticsearchUpdateAuthenticationMethod
	if r.Configuration.AuthenticationMethod != nil {
		var sourceElasticsearchUpdateNone *shared.SourceElasticsearchUpdateNone
		if r.Configuration.AuthenticationMethod.None != nil {
			var additionalProperties interface{}
			if !r.Configuration.AuthenticationMethod.None.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.None.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.None.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceElasticsearchUpdateNone = &shared.SourceElasticsearchUpdateNone{
				AdditionalProperties: additionalProperties,
			}
		}
		if sourceElasticsearchUpdateNone != nil {
			authenticationMethod = &shared.SourceElasticsearchUpdateAuthenticationMethod{
				SourceElasticsearchUpdateNone: sourceElasticsearchUpdateNone,
			}
		}
		var sourceElasticsearchUpdateAPIKeySecret *shared.SourceElasticsearchUpdateAPIKeySecret
		if r.Configuration.AuthenticationMethod.APIKeySecret != nil {
			var apiKeyID string
			apiKeyID = r.Configuration.AuthenticationMethod.APIKeySecret.APIKeyID.ValueString()

			var apiKeySecret string
			apiKeySecret = r.Configuration.AuthenticationMethod.APIKeySecret.APIKeySecret.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.APIKeySecret.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceElasticsearchUpdateAPIKeySecret = &shared.SourceElasticsearchUpdateAPIKeySecret{
				APIKeyID:             apiKeyID,
				APIKeySecret:         apiKeySecret,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceElasticsearchUpdateAPIKeySecret != nil {
			authenticationMethod = &shared.SourceElasticsearchUpdateAuthenticationMethod{
				SourceElasticsearchUpdateAPIKeySecret: sourceElasticsearchUpdateAPIKeySecret,
			}
		}
		var sourceElasticsearchUpdateUsernamePassword *shared.SourceElasticsearchUpdateUsernamePassword
		if r.Configuration.AuthenticationMethod.UsernamePassword != nil {
			var password string
			password = r.Configuration.AuthenticationMethod.UsernamePassword.Password.ValueString()

			var username string
			username = r.Configuration.AuthenticationMethod.UsernamePassword.Username.ValueString()

			var additionalProperties2 interface{}
			if !r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.IsUnknown() && !r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.AuthenticationMethod.UsernamePassword.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceElasticsearchUpdateUsernamePassword = &shared.SourceElasticsearchUpdateUsernamePassword{
				Password:             password,
				Username:             username,
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceElasticsearchUpdateUsernamePassword != nil {
			authenticationMethod = &shared.SourceElasticsearchUpdateAuthenticationMethod{
				SourceElasticsearchUpdateUsernamePassword: sourceElasticsearchUpdateUsernamePassword,
			}
		}
	}
	var endpoint string
	endpoint = r.Configuration.Endpoint.ValueString()

	configuration := shared.SourceElasticsearchUpdate{
		AuthenticationMethod: authenticationMethod,
		Endpoint:             endpoint,
	}
	out := shared.SourceElasticsearchPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
