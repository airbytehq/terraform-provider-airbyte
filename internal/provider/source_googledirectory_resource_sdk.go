// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGoogleDirectoryResourceModel) ToSharedSourceGoogleDirectoryCreateRequest() *shared.SourceGoogleDirectoryCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceGoogleDirectoryGoogleCredentials
	if r.Configuration.Credentials != nil {
		var signInViaGoogleOAuth *shared.SignInViaGoogleOAuth
		if r.Configuration.Credentials.SignInViaGoogleOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.SignInViaGoogleOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.SignInViaGoogleOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.SignInViaGoogleOAuth.RefreshToken.ValueString()

			signInViaGoogleOAuth = &shared.SignInViaGoogleOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if signInViaGoogleOAuth != nil {
			credentials = &shared.SourceGoogleDirectoryGoogleCredentials{
				SignInViaGoogleOAuth: signInViaGoogleOAuth,
			}
		}
		var serviceAccountKey *shared.ServiceAccountKey
		if r.Configuration.Credentials.ServiceAccountKey != nil {
			var credentialsJSON string
			credentialsJSON = r.Configuration.Credentials.ServiceAccountKey.CredentialsJSON.ValueString()

			var email string
			email = r.Configuration.Credentials.ServiceAccountKey.Email.ValueString()

			serviceAccountKey = &shared.ServiceAccountKey{
				CredentialsJSON: credentialsJSON,
				Email:           email,
			}
		}
		if serviceAccountKey != nil {
			credentials = &shared.SourceGoogleDirectoryGoogleCredentials{
				ServiceAccountKey: serviceAccountKey,
			}
		}
	}
	configuration := shared.SourceGoogleDirectory{
		Credentials: credentials,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceGoogleDirectoryCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceGoogleDirectoryResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceGoogleDirectoryResourceModel) ToSharedSourceGoogleDirectoryPutRequest() *shared.SourceGoogleDirectoryPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceGoogleDirectoryUpdateGoogleCredentials
	if r.Configuration.Credentials != nil {
		var sourceGoogleDirectoryUpdateSignInViaGoogleOAuth *shared.SourceGoogleDirectoryUpdateSignInViaGoogleOAuth
		if r.Configuration.Credentials.SignInViaGoogleOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.SignInViaGoogleOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.SignInViaGoogleOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.SignInViaGoogleOAuth.RefreshToken.ValueString()

			sourceGoogleDirectoryUpdateSignInViaGoogleOAuth = &shared.SourceGoogleDirectoryUpdateSignInViaGoogleOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceGoogleDirectoryUpdateSignInViaGoogleOAuth != nil {
			credentials = &shared.SourceGoogleDirectoryUpdateGoogleCredentials{
				SourceGoogleDirectoryUpdateSignInViaGoogleOAuth: sourceGoogleDirectoryUpdateSignInViaGoogleOAuth,
			}
		}
		var sourceGoogleDirectoryUpdateServiceAccountKey *shared.SourceGoogleDirectoryUpdateServiceAccountKey
		if r.Configuration.Credentials.ServiceAccountKey != nil {
			var credentialsJSON string
			credentialsJSON = r.Configuration.Credentials.ServiceAccountKey.CredentialsJSON.ValueString()

			var email string
			email = r.Configuration.Credentials.ServiceAccountKey.Email.ValueString()

			sourceGoogleDirectoryUpdateServiceAccountKey = &shared.SourceGoogleDirectoryUpdateServiceAccountKey{
				CredentialsJSON: credentialsJSON,
				Email:           email,
			}
		}
		if sourceGoogleDirectoryUpdateServiceAccountKey != nil {
			credentials = &shared.SourceGoogleDirectoryUpdateGoogleCredentials{
				SourceGoogleDirectoryUpdateServiceAccountKey: sourceGoogleDirectoryUpdateServiceAccountKey,
			}
		}
	}
	configuration := shared.SourceGoogleDirectoryUpdate{
		Credentials: credentials,
	}
	out := shared.SourceGoogleDirectoryPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
