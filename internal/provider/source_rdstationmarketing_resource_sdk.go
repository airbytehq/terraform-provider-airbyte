// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceRdStationMarketingResourceModel) ToSharedSourceRdStationMarketingCreateRequest() *shared.SourceRdStationMarketingCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authorization *shared.SourceRdStationMarketingAuthenticationType
	if r.Configuration.Authorization != nil {
		var signInViaRDStationOAuth *shared.SignInViaRDStationOAuth
		if r.Configuration.Authorization.SignInViaRDStationOAuth != nil {
			clientID := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.IsNull() {
				*refreshToken = r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.ValueString()
			} else {
				refreshToken = nil
			}
			signInViaRDStationOAuth = &shared.SignInViaRDStationOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if signInViaRDStationOAuth != nil {
			authorization = &shared.SourceRdStationMarketingAuthenticationType{
				SignInViaRDStationOAuth: signInViaRDStationOAuth,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceRdStationMarketing{
		Authorization: authorization,
		StartDate:     startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceRdStationMarketingCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceRdStationMarketingResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceRdStationMarketingResourceModel) ToSharedSourceRdStationMarketingPutRequest() *shared.SourceRdStationMarketingPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authorization *shared.SourceRdStationMarketingUpdateAuthenticationType
	if r.Configuration.Authorization != nil {
		var sourceRDStationMarketingUpdateSignInViaRDStationOAuth *shared.SourceRDStationMarketingUpdateSignInViaRDStationOAuth
		if r.Configuration.Authorization.SignInViaRDStationOAuth != nil {
			clientID := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Authorization.SignInViaRDStationOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Authorization.SignInViaRDStationOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := new(string)
			if !r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.IsUnknown() && !r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.IsNull() {
				*refreshToken = r.Configuration.Authorization.SignInViaRDStationOAuth.RefreshToken.ValueString()
			} else {
				refreshToken = nil
			}
			sourceRDStationMarketingUpdateSignInViaRDStationOAuth = &shared.SourceRDStationMarketingUpdateSignInViaRDStationOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceRDStationMarketingUpdateSignInViaRDStationOAuth != nil {
			authorization = &shared.SourceRdStationMarketingUpdateAuthenticationType{
				SourceRDStationMarketingUpdateSignInViaRDStationOAuth: sourceRDStationMarketingUpdateSignInViaRDStationOAuth,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceRdStationMarketingUpdate{
		Authorization: authorization,
		StartDate:     startDate,
	}
	out := shared.SourceRdStationMarketingPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
