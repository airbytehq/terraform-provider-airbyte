// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFaunaResourceModel) ToSharedSourceFaunaCreateRequest() *shared.SourceFaunaCreateRequest {
	var collection *shared.SourceFaunaCollection
	if r.Configuration.Collection != nil {
		var deletions shared.SourceFaunaDeletionMode
		var sourceFaunaDisabled *shared.SourceFaunaDisabled
		if r.Configuration.Collection.Deletions.Disabled != nil {
			sourceFaunaDisabled = &shared.SourceFaunaDisabled{}
		}
		if sourceFaunaDisabled != nil {
			deletions = shared.SourceFaunaDeletionMode{
				SourceFaunaDisabled: sourceFaunaDisabled,
			}
		}
		var sourceFaunaEnabled *shared.SourceFaunaEnabled
		if r.Configuration.Collection.Deletions.Enabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.Enabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.Enabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.Enabled.Column.ValueString()
			} else {
				column = nil
			}
			sourceFaunaEnabled = &shared.SourceFaunaEnabled{
				Column: column,
			}
		}
		if sourceFaunaEnabled != nil {
			deletions = shared.SourceFaunaDeletionMode{
				SourceFaunaEnabled: sourceFaunaEnabled,
			}
		}
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		collection = &shared.SourceFaunaCollection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	secret := r.Configuration.Secret.ValueString()
	configuration := shared.SourceFauna{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFaunaResourceModel) ToSharedSourceFaunaPutRequest() *shared.SourceFaunaPutRequest {
	var collection *shared.Collection
	if r.Configuration.Collection != nil {
		var deletions shared.DeletionMode
		var disabled *shared.Disabled
		if r.Configuration.Collection.Deletions.Disabled != nil {
			disabled = &shared.Disabled{}
		}
		if disabled != nil {
			deletions = shared.DeletionMode{
				Disabled: disabled,
			}
		}
		var enabled *shared.Enabled
		if r.Configuration.Collection.Deletions.Enabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.Enabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.Enabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.Enabled.Column.ValueString()
			} else {
				column = nil
			}
			enabled = &shared.Enabled{
				Column: column,
			}
		}
		if enabled != nil {
			deletions = shared.DeletionMode{
				Enabled: enabled,
			}
		}
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		collection = &shared.Collection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	secret := r.Configuration.Secret.ValueString()
	configuration := shared.SourceFaunaUpdate{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
