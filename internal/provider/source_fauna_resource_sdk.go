// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFaunaResourceModel) ToSharedSourceFaunaCreateRequest() *shared.SourceFaunaCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	var secret string
	secret = r.Configuration.Secret.ValueString()

	var collection *shared.Collection
	if r.Configuration.Collection != nil {
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		var deletions shared.DeletionMode
		var disabled *shared.Disabled
		if r.Configuration.Collection.Deletions.Disabled != nil {
			disabled = &shared.Disabled{}
		}
		if disabled != nil {
			deletions = shared.DeletionMode{
				Disabled: disabled,
			}
		}
		var enabled *shared.Enabled
		if r.Configuration.Collection.Deletions.Enabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.Enabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.Enabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.Enabled.Column.ValueString()
			} else {
				column = nil
			}
			enabled = &shared.Enabled{
				Column: column,
			}
		}
		if enabled != nil {
			deletions = shared.DeletionMode{
				Enabled: enabled,
			}
		}
		collection = &shared.Collection{
			PageSize:  pageSize,
			Deletions: deletions,
		}
	}
	configuration := shared.SourceFauna{
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
		Collection: collection,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceFaunaCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFaunaResourceModel) ToSharedSourceFaunaPutRequest() *shared.SourceFaunaPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	var secret string
	secret = r.Configuration.Secret.ValueString()

	var collection *shared.SourceFaunaUpdateCollection
	if r.Configuration.Collection != nil {
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		var deletions shared.SourceFaunaUpdateDeletionMode
		var sourceFaunaUpdateDisabled *shared.SourceFaunaUpdateDisabled
		if r.Configuration.Collection.Deletions.Disabled != nil {
			sourceFaunaUpdateDisabled = &shared.SourceFaunaUpdateDisabled{}
		}
		if sourceFaunaUpdateDisabled != nil {
			deletions = shared.SourceFaunaUpdateDeletionMode{
				SourceFaunaUpdateDisabled: sourceFaunaUpdateDisabled,
			}
		}
		var sourceFaunaUpdateEnabled *shared.SourceFaunaUpdateEnabled
		if r.Configuration.Collection.Deletions.Enabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.Enabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.Enabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.Enabled.Column.ValueString()
			} else {
				column = nil
			}
			sourceFaunaUpdateEnabled = &shared.SourceFaunaUpdateEnabled{
				Column: column,
			}
		}
		if sourceFaunaUpdateEnabled != nil {
			deletions = shared.SourceFaunaUpdateDeletionMode{
				SourceFaunaUpdateEnabled: sourceFaunaUpdateEnabled,
			}
		}
		collection = &shared.SourceFaunaUpdateCollection{
			PageSize:  pageSize,
			Deletions: deletions,
		}
	}
	configuration := shared.SourceFaunaUpdate{
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
		Collection: collection,
	}
	out := shared.SourceFaunaPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
