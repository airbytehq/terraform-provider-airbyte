// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFaunaResourceModel) ToCreateSDKType() *shared.SourceFaunaCreateRequest {
	var collection *shared.SourceFaunaCollection
	if r.Configuration.Collection != nil {
		var deletions shared.SourceFaunaCollectionDeletionMode
		var sourceFaunaCollectionDeletionModeDisabled *shared.SourceFaunaCollectionDeletionModeDisabled
		if r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled != nil {
			sourceFaunaCollectionDeletionModeDisabled = &shared.SourceFaunaCollectionDeletionModeDisabled{}
		}
		if sourceFaunaCollectionDeletionModeDisabled != nil {
			deletions = shared.SourceFaunaCollectionDeletionMode{
				SourceFaunaCollectionDeletionModeDisabled: sourceFaunaCollectionDeletionModeDisabled,
			}
		}
		var sourceFaunaCollectionDeletionModeEnabled *shared.SourceFaunaCollectionDeletionModeEnabled
		if r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column.ValueString()
			} else {
				column = nil
			}
			sourceFaunaCollectionDeletionModeEnabled = &shared.SourceFaunaCollectionDeletionModeEnabled{
				Column: column,
			}
		}
		if sourceFaunaCollectionDeletionModeEnabled != nil {
			deletions = shared.SourceFaunaCollectionDeletionMode{
				SourceFaunaCollectionDeletionModeEnabled: sourceFaunaCollectionDeletionModeEnabled,
			}
		}
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		collection = &shared.SourceFaunaCollection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	secret := r.Configuration.Secret.ValueString()
	configuration := shared.SourceFauna{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) ToGetSDKType() *shared.SourceFaunaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceFaunaResourceModel) ToUpdateSDKType() *shared.SourceFaunaPutRequest {
	var collection *shared.SourceFaunaUpdateCollection
	if r.Configuration.Collection != nil {
		var deletions shared.SourceFaunaUpdateCollectionDeletionMode
		var sourceFaunaUpdateCollectionDeletionModeDisabled *shared.SourceFaunaUpdateCollectionDeletionModeDisabled
		if r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeDisabled != nil {
			sourceFaunaUpdateCollectionDeletionModeDisabled = &shared.SourceFaunaUpdateCollectionDeletionModeDisabled{}
		}
		if sourceFaunaUpdateCollectionDeletionModeDisabled != nil {
			deletions = shared.SourceFaunaUpdateCollectionDeletionMode{
				SourceFaunaUpdateCollectionDeletionModeDisabled: sourceFaunaUpdateCollectionDeletionModeDisabled,
			}
		}
		var sourceFaunaUpdateCollectionDeletionModeEnabled *shared.SourceFaunaUpdateCollectionDeletionModeEnabled
		if r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled != nil {
			column := new(string)
			if !r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled.Column.IsUnknown() && !r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled.Column.IsNull() {
				*column = r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled.Column.ValueString()
			} else {
				column = nil
			}
			sourceFaunaUpdateCollectionDeletionModeEnabled = &shared.SourceFaunaUpdateCollectionDeletionModeEnabled{
				Column: column,
			}
		}
		if sourceFaunaUpdateCollectionDeletionModeEnabled != nil {
			deletions = shared.SourceFaunaUpdateCollectionDeletionMode{
				SourceFaunaUpdateCollectionDeletionModeEnabled: sourceFaunaUpdateCollectionDeletionModeEnabled,
			}
		}
		pageSize := new(int64)
		if !r.Configuration.Collection.PageSize.IsUnknown() && !r.Configuration.Collection.PageSize.IsNull() {
			*pageSize = r.Configuration.Collection.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		collection = &shared.SourceFaunaUpdateCollection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	scheme := new(string)
	if !r.Configuration.Scheme.IsUnknown() && !r.Configuration.Scheme.IsNull() {
		*scheme = r.Configuration.Scheme.ValueString()
	} else {
		scheme = nil
	}
	secret := r.Configuration.Secret.ValueString()
	configuration := shared.SourceFaunaUpdate{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) ToDeleteSDKType() *shared.SourceFaunaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceFaunaResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceFaunaResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
