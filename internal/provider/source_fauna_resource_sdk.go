// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceFaunaResourceModel) ToCreateSDKType() *shared.SourceFaunaCreateRequest {
	var collection *shared.SourceFaunaCollection
	if r.Configuration.Collection != nil {
		var deletions shared.SourceFaunaCollectionDeletionMode
		var sourceFaunaCollectionDeletionModeDisabled *shared.SourceFaunaCollectionDeletionModeDisabled
		if r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled != nil {
			deletionMode := shared.SourceFaunaCollectionDeletionModeDisabledDeletionMode(r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode.ValueString())
			sourceFaunaCollectionDeletionModeDisabled = &shared.SourceFaunaCollectionDeletionModeDisabled{
				DeletionMode: deletionMode,
			}
		}
		if sourceFaunaCollectionDeletionModeDisabled != nil {
			deletions = shared.SourceFaunaCollectionDeletionMode{
				SourceFaunaCollectionDeletionModeDisabled: sourceFaunaCollectionDeletionModeDisabled,
			}
		}
		var sourceFaunaCollectionDeletionModeEnabled *shared.SourceFaunaCollectionDeletionModeEnabled
		if r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled != nil {
			column := r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column.ValueString()
			deletionMode1 := shared.SourceFaunaCollectionDeletionModeEnabledDeletionMode(r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode.ValueString())
			sourceFaunaCollectionDeletionModeEnabled = &shared.SourceFaunaCollectionDeletionModeEnabled{
				Column:       column,
				DeletionMode: deletionMode1,
			}
		}
		if sourceFaunaCollectionDeletionModeEnabled != nil {
			deletions = shared.SourceFaunaCollectionDeletionMode{
				SourceFaunaCollectionDeletionModeEnabled: sourceFaunaCollectionDeletionModeEnabled,
			}
		}
		pageSize := r.Configuration.Collection.PageSize.ValueInt64()
		collection = &shared.SourceFaunaCollection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := r.Configuration.Domain.ValueString()
	port := r.Configuration.Port.ValueInt64()
	scheme := r.Configuration.Scheme.ValueString()
	secret := r.Configuration.Secret.ValueString()
	sourceType := shared.SourceFaunaFauna(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceFauna{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
		SourceType: sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) ToGetSDKType() *shared.SourceFaunaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceFaunaResourceModel) ToUpdateSDKType() *shared.SourceFaunaPutRequest {
	var collection *shared.SourceFaunaUpdateCollection
	if r.Configuration.Collection != nil {
		var deletions shared.SourceFaunaUpdateCollectionDeletionMode
		var sourceFaunaUpdateCollectionDeletionModeDisabled *shared.SourceFaunaUpdateCollectionDeletionModeDisabled
		if r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeDisabled != nil {
			deletionMode := shared.SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode(r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeDisabled.DeletionMode.ValueString())
			sourceFaunaUpdateCollectionDeletionModeDisabled = &shared.SourceFaunaUpdateCollectionDeletionModeDisabled{
				DeletionMode: deletionMode,
			}
		}
		if sourceFaunaUpdateCollectionDeletionModeDisabled != nil {
			deletions = shared.SourceFaunaUpdateCollectionDeletionMode{
				SourceFaunaUpdateCollectionDeletionModeDisabled: sourceFaunaUpdateCollectionDeletionModeDisabled,
			}
		}
		var sourceFaunaUpdateCollectionDeletionModeEnabled *shared.SourceFaunaUpdateCollectionDeletionModeEnabled
		if r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled != nil {
			column := r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled.Column.ValueString()
			deletionMode1 := shared.SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode(r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled.DeletionMode.ValueString())
			sourceFaunaUpdateCollectionDeletionModeEnabled = &shared.SourceFaunaUpdateCollectionDeletionModeEnabled{
				Column:       column,
				DeletionMode: deletionMode1,
			}
		}
		if sourceFaunaUpdateCollectionDeletionModeEnabled != nil {
			deletions = shared.SourceFaunaUpdateCollectionDeletionMode{
				SourceFaunaUpdateCollectionDeletionModeEnabled: sourceFaunaUpdateCollectionDeletionModeEnabled,
			}
		}
		pageSize := r.Configuration.Collection.PageSize.ValueInt64()
		collection = &shared.SourceFaunaUpdateCollection{
			Deletions: deletions,
			PageSize:  pageSize,
		}
	}
	domain := r.Configuration.Domain.ValueString()
	port := r.Configuration.Port.ValueInt64()
	scheme := r.Configuration.Scheme.ValueString()
	secret := r.Configuration.Secret.ValueString()
	configuration := shared.SourceFaunaUpdate{
		Collection: collection,
		Domain:     domain,
		Port:       port,
		Scheme:     scheme,
		Secret:     secret,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceFaunaPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceFaunaResourceModel) ToDeleteSDKType() *shared.SourceFaunaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceFaunaResourceModel) RefreshFromGetResponse(resp *shared.SourceFaunaGetResponse) {
	if r.Configuration.Collection == nil {
		r.Configuration.Collection = &SourceFaunaCollection{}
	}
	if resp.Configuration.Collection == nil {
		r.Configuration.Collection = nil
	} else {
		r.Configuration.Collection = &SourceFaunaCollection{}
		if resp.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled != nil {
			r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled = &SourceFaunaCollectionDeletionModeDisabled{}
			r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode = types.StringValue(string(resp.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode))
		}
		if resp.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled != nil {
			r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled = &SourceFaunaCollectionDeletionModeEnabled{}
			r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column = types.StringValue(resp.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column)
			r.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode = types.StringValue(string(resp.Configuration.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode))
		}
		if resp.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeDisabled != nil {
			r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeDisabled = &SourceFaunaCollectionDeletionModeDisabled{}
		}
		if resp.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled != nil {
			r.Configuration.Collection.Deletions.SourceFaunaUpdateCollectionDeletionModeEnabled = &SourceFaunaCollectionDeletionModeEnabled{}
		}
		r.Configuration.Collection.PageSize = types.Int64Value(resp.Configuration.Collection.PageSize)
	}
	r.Configuration.Domain = types.StringValue(resp.Configuration.Domain)
	r.Configuration.Port = types.Int64Value(resp.Configuration.Port)
	r.Configuration.Scheme = types.StringValue(resp.Configuration.Scheme)
	r.Configuration.Secret = types.StringValue(resp.Configuration.Secret)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceFaunaResourceModel) RefreshFromCreateResponse(resp *shared.SourceFaunaGetResponse) {
	r.RefreshFromGetResponse(resp)
}
