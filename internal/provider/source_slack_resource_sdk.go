// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSlackResourceModel) ToCreateSDKType() *shared.SourceSlackCreateRequest {
	var channelFilter []string = nil
	for _, channelFilterItem := range r.Configuration.ChannelFilter {
		channelFilter = append(channelFilter, channelFilterItem.ValueString())
	}
	var credentials *shared.SourceSlackAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceSlackAuthenticationMechanismSignInViaSlackOAuth *shared.SourceSlackAuthenticationMechanismSignInViaSlackOAuth
		if r.Configuration.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
			accessToken := r.Configuration.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.AccessToken.ValueString()
			clientID := r.Configuration.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientSecret.ValueString()
			sourceSlackAuthenticationMechanismSignInViaSlackOAuth = &shared.SourceSlackAuthenticationMechanismSignInViaSlackOAuth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
			credentials = &shared.SourceSlackAuthenticationMechanism{
				SourceSlackAuthenticationMechanismSignInViaSlackOAuth: sourceSlackAuthenticationMechanismSignInViaSlackOAuth,
			}
		}
		var sourceSlackAuthenticationMechanismAPIToken *shared.SourceSlackAuthenticationMechanismAPIToken
		if r.Configuration.Credentials.SourceSlackAuthenticationMechanismAPIToken != nil {
			apiToken := r.Configuration.Credentials.SourceSlackAuthenticationMechanismAPIToken.APIToken.ValueString()
			sourceSlackAuthenticationMechanismAPIToken = &shared.SourceSlackAuthenticationMechanismAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceSlackAuthenticationMechanismAPIToken != nil {
			credentials = &shared.SourceSlackAuthenticationMechanism{
				SourceSlackAuthenticationMechanismAPIToken: sourceSlackAuthenticationMechanismAPIToken,
			}
		}
	}
	joinChannels := new(bool)
	if !r.Configuration.JoinChannels.IsUnknown() && !r.Configuration.JoinChannels.IsNull() {
		*joinChannels = r.Configuration.JoinChannels.ValueBool()
	} else {
		joinChannels = nil
	}
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceSlack{
		ChannelFilter:  channelFilter,
		Credentials:    credentials,
		JoinChannels:   joinChannels,
		LookbackWindow: lookbackWindow,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSlackCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSlackResourceModel) ToGetSDKType() *shared.SourceSlackCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSlackResourceModel) ToUpdateSDKType() *shared.SourceSlackPutRequest {
	var channelFilter []string = nil
	for _, channelFilterItem := range r.Configuration.ChannelFilter {
		channelFilter = append(channelFilter, channelFilterItem.ValueString())
	}
	var credentials *shared.SourceSlackUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth *shared.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth
		if r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth != nil {
			accessToken := r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth.AccessToken.ValueString()
			clientID := r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth.ClientSecret.ValueString()
			sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth = &shared.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth != nil {
			credentials = &shared.SourceSlackUpdateAuthenticationMechanism{
				SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth: sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth,
			}
		}
		var sourceSlackUpdateAuthenticationMechanismAPIToken *shared.SourceSlackUpdateAuthenticationMechanismAPIToken
		if r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismAPIToken != nil {
			apiToken := r.Configuration.Credentials.SourceSlackUpdateAuthenticationMechanismAPIToken.APIToken.ValueString()
			sourceSlackUpdateAuthenticationMechanismAPIToken = &shared.SourceSlackUpdateAuthenticationMechanismAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceSlackUpdateAuthenticationMechanismAPIToken != nil {
			credentials = &shared.SourceSlackUpdateAuthenticationMechanism{
				SourceSlackUpdateAuthenticationMechanismAPIToken: sourceSlackUpdateAuthenticationMechanismAPIToken,
			}
		}
	}
	joinChannels := new(bool)
	if !r.Configuration.JoinChannels.IsUnknown() && !r.Configuration.JoinChannels.IsNull() {
		*joinChannels = r.Configuration.JoinChannels.ValueBool()
	} else {
		joinChannels = nil
	}
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceSlackUpdate{
		ChannelFilter:  channelFilter,
		Credentials:    credentials,
		JoinChannels:   joinChannels,
		LookbackWindow: lookbackWindow,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSlackPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSlackResourceModel) ToDeleteSDKType() *shared.SourceSlackCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSlackResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSlackResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
