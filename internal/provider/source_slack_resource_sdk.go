// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSlackResourceModel) ToSharedSourceSlackCreateRequest() *shared.SourceSlackCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	joinChannels := new(bool)
	if !r.Configuration.JoinChannels.IsUnknown() && !r.Configuration.JoinChannels.IsNull() {
		*joinChannels = r.Configuration.JoinChannels.ValueBool()
	} else {
		joinChannels = nil
	}
	includePrivateChannels := new(bool)
	if !r.Configuration.IncludePrivateChannels.IsUnknown() && !r.Configuration.IncludePrivateChannels.IsNull() {
		*includePrivateChannels = r.Configuration.IncludePrivateChannels.ValueBool()
	} else {
		includePrivateChannels = nil
	}
	var channelFilter []string = []string{}
	for _, channelFilterItem := range r.Configuration.ChannelFilter {
		channelFilter = append(channelFilter, channelFilterItem.ValueString())
	}
	var credentials *shared.SourceSlackAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var signInViaSlackOAuth *shared.SignInViaSlackOAuth
		if r.Configuration.Credentials.SignInViaSlackOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.SignInViaSlackOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.SignInViaSlackOAuth.ClientSecret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.SignInViaSlackOAuth.AccessToken.ValueString()

			signInViaSlackOAuth = &shared.SignInViaSlackOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if signInViaSlackOAuth != nil {
			credentials = &shared.SourceSlackAuthenticationMechanism{
				SignInViaSlackOAuth: signInViaSlackOAuth,
			}
		}
		var sourceSlackAPIToken *shared.SourceSlackAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			sourceSlackAPIToken = &shared.SourceSlackAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceSlackAPIToken != nil {
			credentials = &shared.SourceSlackAuthenticationMechanism{
				SourceSlackAPIToken: sourceSlackAPIToken,
			}
		}
	}
	configuration := shared.SourceSlack{
		StartDate:              startDate,
		LookbackWindow:         lookbackWindow,
		JoinChannels:           joinChannels,
		IncludePrivateChannels: includePrivateChannels,
		ChannelFilter:          channelFilter,
		Credentials:            credentials,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSlackCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceSlackResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSlackResourceModel) ToSharedSourceSlackPutRequest() *shared.SourceSlackPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	joinChannels := new(bool)
	if !r.Configuration.JoinChannels.IsUnknown() && !r.Configuration.JoinChannels.IsNull() {
		*joinChannels = r.Configuration.JoinChannels.ValueBool()
	} else {
		joinChannels = nil
	}
	includePrivateChannels := new(bool)
	if !r.Configuration.IncludePrivateChannels.IsUnknown() && !r.Configuration.IncludePrivateChannels.IsNull() {
		*includePrivateChannels = r.Configuration.IncludePrivateChannels.ValueBool()
	} else {
		includePrivateChannels = nil
	}
	var channelFilter []string = []string{}
	for _, channelFilterItem := range r.Configuration.ChannelFilter {
		channelFilter = append(channelFilter, channelFilterItem.ValueString())
	}
	var credentials *shared.SourceSlackUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceSlackUpdateSignInViaSlackOAuth *shared.SourceSlackUpdateSignInViaSlackOAuth
		if r.Configuration.Credentials.SignInViaSlackOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.SignInViaSlackOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.SignInViaSlackOAuth.ClientSecret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.SignInViaSlackOAuth.AccessToken.ValueString()

			sourceSlackUpdateSignInViaSlackOAuth = &shared.SourceSlackUpdateSignInViaSlackOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceSlackUpdateSignInViaSlackOAuth != nil {
			credentials = &shared.SourceSlackUpdateAuthenticationMechanism{
				SourceSlackUpdateSignInViaSlackOAuth: sourceSlackUpdateSignInViaSlackOAuth,
			}
		}
		var sourceSlackUpdateAPIToken *shared.SourceSlackUpdateAPIToken
		if r.Configuration.Credentials.APIToken != nil {
			var apiToken string
			apiToken = r.Configuration.Credentials.APIToken.APIToken.ValueString()

			sourceSlackUpdateAPIToken = &shared.SourceSlackUpdateAPIToken{
				APIToken: apiToken,
			}
		}
		if sourceSlackUpdateAPIToken != nil {
			credentials = &shared.SourceSlackUpdateAuthenticationMechanism{
				SourceSlackUpdateAPIToken: sourceSlackUpdateAPIToken,
			}
		}
	}
	configuration := shared.SourceSlackUpdate{
		StartDate:              startDate,
		LookbackWindow:         lookbackWindow,
		JoinChannels:           joinChannels,
		IncludePrivateChannels: includePrivateChannels,
		ChannelFilter:          channelFilter,
		Credentials:            credentials,
	}
	out := shared.SourceSlackPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
