// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationRedshiftResourceModel) ToSharedDestinationRedshiftCreateRequest(ctx context.Context) (*shared.DestinationRedshiftCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var username string
	username = r.Configuration.Username.ValueString()

	var password string
	password = r.Configuration.Password.ValueString()

	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var uploadingMethod *shared.UploadingMethod
	if r.Configuration.UploadingMethod != nil {
		var awsS3Staging *shared.AWSS3Staging
		if r.Configuration.UploadingMethod.AWSS3Staging != nil {
			var s3BucketName string
			s3BucketName = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketName.ValueString()

			s3BucketPath := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsNull() {
				*s3BucketPath = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.ValueString()
			} else {
				s3BucketPath = nil
			}
			s3BucketRegion := new(shared.DestinationRedshiftS3BucketRegion)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsNull() {
				*s3BucketRegion = shared.DestinationRedshiftS3BucketRegion(r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.ValueString())
			} else {
				s3BucketRegion = nil
			}
			var accessKeyID string
			accessKeyID = r.Configuration.UploadingMethod.AWSS3Staging.AccessKeyID.ValueString()

			var secretAccessKey string
			secretAccessKey = r.Configuration.UploadingMethod.AWSS3Staging.SecretAccessKey.ValueString()

			fileNamePattern := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern = r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern = nil
			}
			purgeStagingData := new(bool)
			if !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData = r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData = nil
			}
			awsS3Staging = &shared.AWSS3Staging{
				S3BucketName:     s3BucketName,
				S3BucketPath:     s3BucketPath,
				S3BucketRegion:   s3BucketRegion,
				AccessKeyID:      accessKeyID,
				SecretAccessKey:  secretAccessKey,
				FileNamePattern:  fileNamePattern,
				PurgeStagingData: purgeStagingData,
			}
		}
		if awsS3Staging != nil {
			uploadingMethod = &shared.UploadingMethod{
				AWSS3Staging: awsS3Staging,
			}
		}
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	dropCascade := new(bool)
	if !r.Configuration.DropCascade.IsUnknown() && !r.Configuration.DropCascade.IsNull() {
		*dropCascade = r.Configuration.DropCascade.ValueBool()
	} else {
		dropCascade = nil
	}
	var tunnelMethod *shared.DestinationRedshiftSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationRedshiftNoTunnel *shared.DestinationRedshiftNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationRedshiftNoTunnel = &shared.DestinationRedshiftNoTunnel{}
		}
		if destinationRedshiftNoTunnel != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftNoTunnel: destinationRedshiftNoTunnel,
			}
		}
		var destinationRedshiftSSHKeyAuthentication *shared.DestinationRedshiftSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationRedshiftSSHKeyAuthentication = &shared.DestinationRedshiftSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationRedshiftSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftSSHKeyAuthentication: destinationRedshiftSSHKeyAuthentication,
			}
		}
		var destinationRedshiftPasswordAuthentication *shared.DestinationRedshiftPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationRedshiftPasswordAuthentication = &shared.DestinationRedshiftPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationRedshiftPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftPasswordAuthentication: destinationRedshiftPasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationRedshift{
		Host:              host,
		Port:              port,
		Username:          username,
		Password:          password,
		Database:          database,
		Schema:            schema,
		JdbcURLParams:     jdbcURLParams,
		UploadingMethod:   uploadingMethod,
		RawDataSchema:     rawDataSchema,
		DisableTypeDedupe: disableTypeDedupe,
		DropCascade:       dropCascade,
		TunnelMethod:      tunnelMethod,
	}
	out := shared.DestinationRedshiftCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationRedshiftResourceModel) ToSharedDestinationRedshiftPutRequest(ctx context.Context) (*shared.DestinationRedshiftPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var username string
	username = r.Configuration.Username.ValueString()

	var password string
	password = r.Configuration.Password.ValueString()

	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var uploadingMethod *shared.DestinationRedshiftUpdateUploadingMethod
	if r.Configuration.UploadingMethod != nil {
		var destinationRedshiftUpdateAWSS3Staging *shared.DestinationRedshiftUpdateAWSS3Staging
		if r.Configuration.UploadingMethod.AWSS3Staging != nil {
			var s3BucketName string
			s3BucketName = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketName.ValueString()

			s3BucketPath := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsNull() {
				*s3BucketPath = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.ValueString()
			} else {
				s3BucketPath = nil
			}
			s3BucketRegion := new(shared.DestinationRedshiftUpdateS3BucketRegion)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsNull() {
				*s3BucketRegion = shared.DestinationRedshiftUpdateS3BucketRegion(r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.ValueString())
			} else {
				s3BucketRegion = nil
			}
			var accessKeyID string
			accessKeyID = r.Configuration.UploadingMethod.AWSS3Staging.AccessKeyID.ValueString()

			var secretAccessKey string
			secretAccessKey = r.Configuration.UploadingMethod.AWSS3Staging.SecretAccessKey.ValueString()

			fileNamePattern := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern = r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern = nil
			}
			purgeStagingData := new(bool)
			if !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData = r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData = nil
			}
			destinationRedshiftUpdateAWSS3Staging = &shared.DestinationRedshiftUpdateAWSS3Staging{
				S3BucketName:     s3BucketName,
				S3BucketPath:     s3BucketPath,
				S3BucketRegion:   s3BucketRegion,
				AccessKeyID:      accessKeyID,
				SecretAccessKey:  secretAccessKey,
				FileNamePattern:  fileNamePattern,
				PurgeStagingData: purgeStagingData,
			}
		}
		if destinationRedshiftUpdateAWSS3Staging != nil {
			uploadingMethod = &shared.DestinationRedshiftUpdateUploadingMethod{
				DestinationRedshiftUpdateAWSS3Staging: destinationRedshiftUpdateAWSS3Staging,
			}
		}
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	dropCascade := new(bool)
	if !r.Configuration.DropCascade.IsUnknown() && !r.Configuration.DropCascade.IsNull() {
		*dropCascade = r.Configuration.DropCascade.ValueBool()
	} else {
		dropCascade = nil
	}
	var tunnelMethod *shared.DestinationRedshiftUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationRedshiftUpdateNoTunnel *shared.DestinationRedshiftUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationRedshiftUpdateNoTunnel = &shared.DestinationRedshiftUpdateNoTunnel{}
		}
		if destinationRedshiftUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdateNoTunnel: destinationRedshiftUpdateNoTunnel,
			}
		}
		var destinationRedshiftUpdateSSHKeyAuthentication *shared.DestinationRedshiftUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationRedshiftUpdateSSHKeyAuthentication = &shared.DestinationRedshiftUpdateSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationRedshiftUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdateSSHKeyAuthentication: destinationRedshiftUpdateSSHKeyAuthentication,
			}
		}
		var destinationRedshiftUpdatePasswordAuthentication *shared.DestinationRedshiftUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationRedshiftUpdatePasswordAuthentication = &shared.DestinationRedshiftUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationRedshiftUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdatePasswordAuthentication: destinationRedshiftUpdatePasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationRedshiftUpdate{
		Host:              host,
		Port:              port,
		Username:          username,
		Password:          password,
		Database:          database,
		Schema:            schema,
		JdbcURLParams:     jdbcURLParams,
		UploadingMethod:   uploadingMethod,
		RawDataSchema:     rawDataSchema,
		DisableTypeDedupe: disableTypeDedupe,
		DropCascade:       dropCascade,
		TunnelMethod:      tunnelMethod,
	}
	out := shared.DestinationRedshiftPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationRedshiftResourceModel) ToOperationsPutDestinationRedshiftRequest(ctx context.Context) (*operations.PutDestinationRedshiftRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationRedshiftPutRequest, destinationRedshiftPutRequestDiags := r.ToSharedDestinationRedshiftPutRequest(ctx)
	diags.Append(destinationRedshiftPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationRedshiftRequest{
		DestinationID:                 destinationID,
		DestinationRedshiftPutRequest: destinationRedshiftPutRequest,
	}

	return &out, diags
}

func (r *DestinationRedshiftResourceModel) ToOperationsGetDestinationRedshiftRequest(ctx context.Context) (*operations.GetDestinationRedshiftRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationRedshiftRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationRedshiftResourceModel) ToOperationsDeleteDestinationRedshiftRequest(ctx context.Context) (*operations.DeleteDestinationRedshiftRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationRedshiftRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationRedshiftResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
