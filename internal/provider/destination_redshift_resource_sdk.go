// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationRedshiftResourceModel) ToSharedDestinationRedshiftCreateRequest() *shared.DestinationRedshiftCreateRequest {
	database := r.Configuration.Database.ValueString()
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	enableIncrementalFinalTableUpdates := new(bool)
	if !r.Configuration.EnableIncrementalFinalTableUpdates.IsUnknown() && !r.Configuration.EnableIncrementalFinalTableUpdates.IsNull() {
		*enableIncrementalFinalTableUpdates = r.Configuration.EnableIncrementalFinalTableUpdates.ValueBool()
	} else {
		enableIncrementalFinalTableUpdates = nil
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := r.Configuration.Password.ValueString()
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var tunnelMethod *shared.DestinationRedshiftSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationRedshiftNoTunnel *shared.DestinationRedshiftNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationRedshiftNoTunnel = &shared.DestinationRedshiftNoTunnel{}
		}
		if destinationRedshiftNoTunnel != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftNoTunnel: destinationRedshiftNoTunnel,
			}
		}
		var destinationRedshiftSSHKeyAuthentication *shared.DestinationRedshiftSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationRedshiftSSHKeyAuthentication = &shared.DestinationRedshiftSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationRedshiftSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftSSHKeyAuthentication: destinationRedshiftSSHKeyAuthentication,
			}
		}
		var destinationRedshiftPasswordAuthentication *shared.DestinationRedshiftPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationRedshiftPasswordAuthentication = &shared.DestinationRedshiftPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationRedshiftPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftPasswordAuthentication: destinationRedshiftPasswordAuthentication,
			}
		}
	}
	var uploadingMethod *shared.DestinationRedshiftUploadingMethod
	if r.Configuration.UploadingMethod != nil {
		var destinationRedshiftAWSS3Staging *shared.DestinationRedshiftAWSS3Staging
		if r.Configuration.UploadingMethod.AWSS3Staging != nil {
			accessKeyID := r.Configuration.UploadingMethod.AWSS3Staging.AccessKeyID.ValueString()
			var encryption *shared.DestinationRedshiftEncryption
			if r.Configuration.UploadingMethod.AWSS3Staging.Encryption != nil {
				var destinationRedshiftNoEncryption *shared.DestinationRedshiftNoEncryption
				if r.Configuration.UploadingMethod.AWSS3Staging.Encryption.NoEncryption != nil {
					destinationRedshiftNoEncryption = &shared.DestinationRedshiftNoEncryption{}
				}
				if destinationRedshiftNoEncryption != nil {
					encryption = &shared.DestinationRedshiftEncryption{
						DestinationRedshiftNoEncryption: destinationRedshiftNoEncryption,
					}
				}
				var destinationRedshiftAESCBCEnvelopeEncryption *shared.DestinationRedshiftAESCBCEnvelopeEncryption
				if r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption != nil {
					keyEncryptingKey := new(string)
					if !r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.IsNull() {
						*keyEncryptingKey = r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.ValueString()
					} else {
						keyEncryptingKey = nil
					}
					destinationRedshiftAESCBCEnvelopeEncryption = &shared.DestinationRedshiftAESCBCEnvelopeEncryption{
						KeyEncryptingKey: keyEncryptingKey,
					}
				}
				if destinationRedshiftAESCBCEnvelopeEncryption != nil {
					encryption = &shared.DestinationRedshiftEncryption{
						DestinationRedshiftAESCBCEnvelopeEncryption: destinationRedshiftAESCBCEnvelopeEncryption,
					}
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			fileNamePattern := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern = r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern = nil
			}
			purgeStagingData := new(bool)
			if !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData = r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData = nil
			}
			s3BucketName := r.Configuration.UploadingMethod.AWSS3Staging.S3BucketName.ValueString()
			s3BucketPath := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsNull() {
				*s3BucketPath = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.ValueString()
			} else {
				s3BucketPath = nil
			}
			s3BucketRegion := new(shared.DestinationRedshiftS3BucketRegion)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsNull() {
				*s3BucketRegion = shared.DestinationRedshiftS3BucketRegion(r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.ValueString())
			} else {
				s3BucketRegion = nil
			}
			secretAccessKey := r.Configuration.UploadingMethod.AWSS3Staging.SecretAccessKey.ValueString()
			destinationRedshiftAWSS3Staging = &shared.DestinationRedshiftAWSS3Staging{
				AccessKeyID:      accessKeyID,
				Encryption:       encryption,
				FileBufferCount:  fileBufferCount,
				FileNamePattern:  fileNamePattern,
				PurgeStagingData: purgeStagingData,
				S3BucketName:     s3BucketName,
				S3BucketPath:     s3BucketPath,
				S3BucketRegion:   s3BucketRegion,
				SecretAccessKey:  secretAccessKey,
			}
		}
		if destinationRedshiftAWSS3Staging != nil {
			uploadingMethod = &shared.DestinationRedshiftUploadingMethod{
				DestinationRedshiftAWSS3Staging: destinationRedshiftAWSS3Staging,
			}
		}
		var destinationRedshiftStandard *shared.DestinationRedshiftStandard
		if r.Configuration.UploadingMethod.Standard != nil {
			destinationRedshiftStandard = &shared.DestinationRedshiftStandard{}
		}
		if destinationRedshiftStandard != nil {
			uploadingMethod = &shared.DestinationRedshiftUploadingMethod{
				DestinationRedshiftStandard: destinationRedshiftStandard,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationRedshift{
		Database:                           database,
		DisableTypeDedupe:                  disableTypeDedupe,
		EnableIncrementalFinalTableUpdates: enableIncrementalFinalTableUpdates,
		Host:                               host,
		JdbcURLParams:                      jdbcURLParams,
		Password:                           password,
		Port:                               port,
		RawDataSchema:                      rawDataSchema,
		Schema:                             schema,
		TunnelMethod:                       tunnelMethod,
		UploadingMethod:                    uploadingMethod,
		Username:                           username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationRedshiftCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationRedshiftResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationRedshiftResourceModel) ToSharedDestinationRedshiftPutRequest() *shared.DestinationRedshiftPutRequest {
	database := r.Configuration.Database.ValueString()
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	enableIncrementalFinalTableUpdates := new(bool)
	if !r.Configuration.EnableIncrementalFinalTableUpdates.IsUnknown() && !r.Configuration.EnableIncrementalFinalTableUpdates.IsNull() {
		*enableIncrementalFinalTableUpdates = r.Configuration.EnableIncrementalFinalTableUpdates.ValueBool()
	} else {
		enableIncrementalFinalTableUpdates = nil
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := r.Configuration.Password.ValueString()
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var tunnelMethod *shared.DestinationRedshiftUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationRedshiftUpdateNoTunnel *shared.DestinationRedshiftUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationRedshiftUpdateNoTunnel = &shared.DestinationRedshiftUpdateNoTunnel{}
		}
		if destinationRedshiftUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdateNoTunnel: destinationRedshiftUpdateNoTunnel,
			}
		}
		var destinationRedshiftUpdateSSHKeyAuthentication *shared.DestinationRedshiftUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationRedshiftUpdateSSHKeyAuthentication = &shared.DestinationRedshiftUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationRedshiftUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdateSSHKeyAuthentication: destinationRedshiftUpdateSSHKeyAuthentication,
			}
		}
		var destinationRedshiftUpdatePasswordAuthentication *shared.DestinationRedshiftUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationRedshiftUpdatePasswordAuthentication = &shared.DestinationRedshiftUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationRedshiftUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationRedshiftUpdateSSHTunnelMethod{
				DestinationRedshiftUpdatePasswordAuthentication: destinationRedshiftUpdatePasswordAuthentication,
			}
		}
	}
	var uploadingMethod *shared.UploadingMethod
	if r.Configuration.UploadingMethod != nil {
		var awsS3Staging *shared.AWSS3Staging
		if r.Configuration.UploadingMethod.AWSS3Staging != nil {
			accessKeyID := r.Configuration.UploadingMethod.AWSS3Staging.AccessKeyID.ValueString()
			var encryption *shared.DestinationRedshiftUpdateEncryption
			if r.Configuration.UploadingMethod.AWSS3Staging.Encryption != nil {
				var noEncryption *shared.NoEncryption
				if r.Configuration.UploadingMethod.AWSS3Staging.Encryption.NoEncryption != nil {
					noEncryption = &shared.NoEncryption{}
				}
				if noEncryption != nil {
					encryption = &shared.DestinationRedshiftUpdateEncryption{
						NoEncryption: noEncryption,
					}
				}
				var aesCBCEnvelopeEncryption *shared.AESCBCEnvelopeEncryption
				if r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption != nil {
					keyEncryptingKey := new(string)
					if !r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.IsNull() {
						*keyEncryptingKey = r.Configuration.UploadingMethod.AWSS3Staging.Encryption.AESCBCEnvelopeEncryption.KeyEncryptingKey.ValueString()
					} else {
						keyEncryptingKey = nil
					}
					aesCBCEnvelopeEncryption = &shared.AESCBCEnvelopeEncryption{
						KeyEncryptingKey: keyEncryptingKey,
					}
				}
				if aesCBCEnvelopeEncryption != nil {
					encryption = &shared.DestinationRedshiftUpdateEncryption{
						AESCBCEnvelopeEncryption: aesCBCEnvelopeEncryption,
					}
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.UploadingMethod.AWSS3Staging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			fileNamePattern := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern = r.Configuration.UploadingMethod.AWSS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern = nil
			}
			purgeStagingData := new(bool)
			if !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData = r.Configuration.UploadingMethod.AWSS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData = nil
			}
			s3BucketName := r.Configuration.UploadingMethod.AWSS3Staging.S3BucketName.ValueString()
			s3BucketPath := new(string)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.IsNull() {
				*s3BucketPath = r.Configuration.UploadingMethod.AWSS3Staging.S3BucketPath.ValueString()
			} else {
				s3BucketPath = nil
			}
			s3BucketRegion := new(shared.DestinationRedshiftUpdateS3BucketRegion)
			if !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsUnknown() && !r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.IsNull() {
				*s3BucketRegion = shared.DestinationRedshiftUpdateS3BucketRegion(r.Configuration.UploadingMethod.AWSS3Staging.S3BucketRegion.ValueString())
			} else {
				s3BucketRegion = nil
			}
			secretAccessKey := r.Configuration.UploadingMethod.AWSS3Staging.SecretAccessKey.ValueString()
			awsS3Staging = &shared.AWSS3Staging{
				AccessKeyID:      accessKeyID,
				Encryption:       encryption,
				FileBufferCount:  fileBufferCount,
				FileNamePattern:  fileNamePattern,
				PurgeStagingData: purgeStagingData,
				S3BucketName:     s3BucketName,
				S3BucketPath:     s3BucketPath,
				S3BucketRegion:   s3BucketRegion,
				SecretAccessKey:  secretAccessKey,
			}
		}
		if awsS3Staging != nil {
			uploadingMethod = &shared.UploadingMethod{
				AWSS3Staging: awsS3Staging,
			}
		}
		var standard *shared.Standard
		if r.Configuration.UploadingMethod.Standard != nil {
			standard = &shared.Standard{}
		}
		if standard != nil {
			uploadingMethod = &shared.UploadingMethod{
				Standard: standard,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationRedshiftUpdate{
		Database:                           database,
		DisableTypeDedupe:                  disableTypeDedupe,
		EnableIncrementalFinalTableUpdates: enableIncrementalFinalTableUpdates,
		Host:                               host,
		JdbcURLParams:                      jdbcURLParams,
		Password:                           password,
		Port:                               port,
		RawDataSchema:                      rawDataSchema,
		Schema:                             schema,
		TunnelMethod:                       tunnelMethod,
		UploadingMethod:                    uploadingMethod,
		Username:                           username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationRedshiftPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
