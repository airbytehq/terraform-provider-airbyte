// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceGithubResourceModel) ToCreateSDKType() *shared.SourceGithubCreateRequest {
	branch := new(string)
	if !r.Configuration.Branch.IsUnknown() && !r.Configuration.Branch.IsNull() {
		*branch = r.Configuration.Branch.ValueString()
	} else {
		branch = nil
	}
	var credentials *shared.SourceGithubAuthentication
	if r.Configuration.Credentials != nil {
		var sourceGithubAuthenticationOAuth *shared.SourceGithubAuthenticationOAuth
		if r.Configuration.Credentials.SourceGithubAuthenticationOAuth != nil {
			accessToken := r.Configuration.Credentials.SourceGithubAuthenticationOAuth.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			optionTitle := new(shared.SourceGithubAuthenticationOAuthOptionTitle)
			if !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.IsUnknown() && !r.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.IsNull() {
				*optionTitle = shared.SourceGithubAuthenticationOAuthOptionTitle(r.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.ValueString())
			} else {
				optionTitle = nil
			}
			sourceGithubAuthenticationOAuth = &shared.SourceGithubAuthenticationOAuth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				OptionTitle:  optionTitle,
			}
		}
		if sourceGithubAuthenticationOAuth != nil {
			credentials = &shared.SourceGithubAuthentication{
				SourceGithubAuthenticationOAuth: sourceGithubAuthenticationOAuth,
			}
		}
		var sourceGithubAuthenticationPersonalAccessToken *shared.SourceGithubAuthenticationPersonalAccessToken
		if r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken != nil {
			optionTitle1 := new(shared.SourceGithubAuthenticationPersonalAccessTokenOptionTitle)
			if !r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.IsUnknown() && !r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.IsNull() {
				*optionTitle1 = shared.SourceGithubAuthenticationPersonalAccessTokenOptionTitle(r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.ValueString())
			} else {
				optionTitle1 = nil
			}
			personalAccessToken := r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken.ValueString()
			sourceGithubAuthenticationPersonalAccessToken = &shared.SourceGithubAuthenticationPersonalAccessToken{
				OptionTitle:         optionTitle1,
				PersonalAccessToken: personalAccessToken,
			}
		}
		if sourceGithubAuthenticationPersonalAccessToken != nil {
			credentials = &shared.SourceGithubAuthentication{
				SourceGithubAuthenticationPersonalAccessToken: sourceGithubAuthenticationPersonalAccessToken,
			}
		}
	}
	repository := r.Configuration.Repository.ValueString()
	requestsPerHour := new(int64)
	if !r.Configuration.RequestsPerHour.IsUnknown() && !r.Configuration.RequestsPerHour.IsNull() {
		*requestsPerHour = r.Configuration.RequestsPerHour.ValueInt64()
	} else {
		requestsPerHour = nil
	}
	sourceType := shared.SourceGithubGithub(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceGithub{
		Branch:          branch,
		Credentials:     credentials,
		Repository:      repository,
		RequestsPerHour: requestsPerHour,
		SourceType:      sourceType,
		StartDate:       startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGithubCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGithubResourceModel) ToGetSDKType() *shared.SourceGithubCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGithubResourceModel) ToUpdateSDKType() *shared.SourceGithubPutRequest {
	branch := new(string)
	if !r.Configuration.Branch.IsUnknown() && !r.Configuration.Branch.IsNull() {
		*branch = r.Configuration.Branch.ValueString()
	} else {
		branch = nil
	}
	var credentials *shared.SourceGithubUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceGithubUpdateAuthenticationOAuth *shared.SourceGithubUpdateAuthenticationOAuth
		if r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth != nil {
			accessToken := r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			optionTitle := new(shared.SourceGithubUpdateAuthenticationOAuthOptionTitle)
			if !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.OptionTitle.IsUnknown() && !r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.OptionTitle.IsNull() {
				*optionTitle = shared.SourceGithubUpdateAuthenticationOAuthOptionTitle(r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth.OptionTitle.ValueString())
			} else {
				optionTitle = nil
			}
			sourceGithubUpdateAuthenticationOAuth = &shared.SourceGithubUpdateAuthenticationOAuth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				OptionTitle:  optionTitle,
			}
		}
		if sourceGithubUpdateAuthenticationOAuth != nil {
			credentials = &shared.SourceGithubUpdateAuthentication{
				SourceGithubUpdateAuthenticationOAuth: sourceGithubUpdateAuthenticationOAuth,
			}
		}
		var sourceGithubUpdateAuthenticationPersonalAccessToken *shared.SourceGithubUpdateAuthenticationPersonalAccessToken
		if r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken != nil {
			optionTitle1 := new(shared.SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle)
			if !r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken.OptionTitle.IsUnknown() && !r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken.OptionTitle.IsNull() {
				*optionTitle1 = shared.SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle(r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken.OptionTitle.ValueString())
			} else {
				optionTitle1 = nil
			}
			personalAccessToken := r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken.PersonalAccessToken.ValueString()
			sourceGithubUpdateAuthenticationPersonalAccessToken = &shared.SourceGithubUpdateAuthenticationPersonalAccessToken{
				OptionTitle:         optionTitle1,
				PersonalAccessToken: personalAccessToken,
			}
		}
		if sourceGithubUpdateAuthenticationPersonalAccessToken != nil {
			credentials = &shared.SourceGithubUpdateAuthentication{
				SourceGithubUpdateAuthenticationPersonalAccessToken: sourceGithubUpdateAuthenticationPersonalAccessToken,
			}
		}
	}
	repository := r.Configuration.Repository.ValueString()
	requestsPerHour := new(int64)
	if !r.Configuration.RequestsPerHour.IsUnknown() && !r.Configuration.RequestsPerHour.IsNull() {
		*requestsPerHour = r.Configuration.RequestsPerHour.ValueInt64()
	} else {
		requestsPerHour = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceGithubUpdate{
		Branch:          branch,
		Credentials:     credentials,
		Repository:      repository,
		RequestsPerHour: requestsPerHour,
		StartDate:       startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGithubPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGithubResourceModel) ToDeleteSDKType() *shared.SourceGithubCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGithubResourceModel) RefreshFromGetResponse(resp *shared.SourceGithubGetResponse) {
	if resp.Configuration.Branch != nil {
		r.Configuration.Branch = types.StringValue(*resp.Configuration.Branch)
	} else {
		r.Configuration.Branch = types.StringNull()
	}
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceGithubAuthentication{}
		if resp.Configuration.Credentials.SourceGithubAuthenticationOAuth != nil {
			r.Configuration.Credentials.SourceGithubAuthenticationOAuth = &SourceGithubAuthenticationOAuth{}
			r.Configuration.Credentials.SourceGithubAuthenticationOAuth.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.AccessToken)
			if resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID != nil {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID = types.StringValue(*resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID)
			} else {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientID = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret != nil {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret = types.StringValue(*resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret)
			} else {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.ClientSecret = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle != nil {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle = types.StringValue(string(*resp.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle))
			} else {
				r.Configuration.Credentials.SourceGithubAuthenticationOAuth.OptionTitle = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken != nil {
			r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken = &SourceGithubAuthenticationPersonalAccessToken{}
			if resp.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle != nil {
				r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle = types.StringValue(string(*resp.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle))
			} else {
				r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle = types.StringNull()
			}
			r.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken = types.StringValue(resp.Configuration.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken)
		}
		if resp.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth != nil {
			r.Configuration.Credentials.SourceGithubUpdateAuthenticationOAuth = &SourceGithubAuthenticationOAuth{}
		}
		if resp.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken != nil {
			r.Configuration.Credentials.SourceGithubUpdateAuthenticationPersonalAccessToken = &SourceGithubAuthenticationPersonalAccessToken{}
		}
	}
	r.Configuration.Repository = types.StringValue(resp.Configuration.Repository)
	if resp.Configuration.RequestsPerHour != nil {
		r.Configuration.RequestsPerHour = types.Int64Value(*resp.Configuration.RequestsPerHour)
	} else {
		r.Configuration.RequestsPerHour = types.Int64Null()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGithubResourceModel) RefreshFromCreateResponse(resp *shared.SourceGithubGetResponse) {
	r.RefreshFromGetResponse(resp)
}
