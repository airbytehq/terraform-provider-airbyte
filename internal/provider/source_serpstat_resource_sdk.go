// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceSerpstatResourceModel) ToSharedSourceSerpstatCreateRequest() *shared.SourceSerpstatCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	var domains []interface{} = []interface{}{}
	for _, domainsItem := range r.Configuration.Domains {
		var domainsTmp interface{}
		_ = json.Unmarshal([]byte(domainsItem.ValueString()), &domainsTmp)
		domains = append(domains, domainsTmp)
	}
	filterBy := new(string)
	if !r.Configuration.FilterBy.IsUnknown() && !r.Configuration.FilterBy.IsNull() {
		*filterBy = r.Configuration.FilterBy.ValueString()
	} else {
		filterBy = nil
	}
	filterValue := new(string)
	if !r.Configuration.FilterValue.IsUnknown() && !r.Configuration.FilterValue.IsNull() {
		*filterValue = r.Configuration.FilterValue.ValueString()
	} else {
		filterValue = nil
	}
	sortBy := new(string)
	if !r.Configuration.SortBy.IsUnknown() && !r.Configuration.SortBy.IsNull() {
		*sortBy = r.Configuration.SortBy.ValueString()
	} else {
		sortBy = nil
	}
	sortValue := new(string)
	if !r.Configuration.SortValue.IsUnknown() && !r.Configuration.SortValue.IsNull() {
		*sortValue = r.Configuration.SortValue.ValueString()
	} else {
		sortValue = nil
	}
	pagesToFetch := new(int64)
	if !r.Configuration.PagesToFetch.IsUnknown() && !r.Configuration.PagesToFetch.IsNull() {
		*pagesToFetch = r.Configuration.PagesToFetch.ValueInt64()
	} else {
		pagesToFetch = nil
	}
	regionID := new(string)
	if !r.Configuration.RegionID.IsUnknown() && !r.Configuration.RegionID.IsNull() {
		*regionID = r.Configuration.RegionID.ValueString()
	} else {
		regionID = nil
	}
	configuration := shared.SourceSerpstat{
		APIKey:       apiKey,
		Domain:       domain,
		PageSize:     pageSize,
		Domains:      domains,
		FilterBy:     filterBy,
		FilterValue:  filterValue,
		SortBy:       sortBy,
		SortValue:    sortValue,
		PagesToFetch: pagesToFetch,
		RegionID:     regionID,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSerpstatCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceSerpstatResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSerpstatResourceModel) ToSharedSourceSerpstatPutRequest() *shared.SourceSerpstatPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	var domains []interface{} = []interface{}{}
	for _, domainsItem := range r.Configuration.Domains {
		var domainsTmp interface{}
		_ = json.Unmarshal([]byte(domainsItem.ValueString()), &domainsTmp)
		domains = append(domains, domainsTmp)
	}
	filterBy := new(string)
	if !r.Configuration.FilterBy.IsUnknown() && !r.Configuration.FilterBy.IsNull() {
		*filterBy = r.Configuration.FilterBy.ValueString()
	} else {
		filterBy = nil
	}
	filterValue := new(string)
	if !r.Configuration.FilterValue.IsUnknown() && !r.Configuration.FilterValue.IsNull() {
		*filterValue = r.Configuration.FilterValue.ValueString()
	} else {
		filterValue = nil
	}
	sortBy := new(string)
	if !r.Configuration.SortBy.IsUnknown() && !r.Configuration.SortBy.IsNull() {
		*sortBy = r.Configuration.SortBy.ValueString()
	} else {
		sortBy = nil
	}
	sortValue := new(string)
	if !r.Configuration.SortValue.IsUnknown() && !r.Configuration.SortValue.IsNull() {
		*sortValue = r.Configuration.SortValue.ValueString()
	} else {
		sortValue = nil
	}
	pagesToFetch := new(int64)
	if !r.Configuration.PagesToFetch.IsUnknown() && !r.Configuration.PagesToFetch.IsNull() {
		*pagesToFetch = r.Configuration.PagesToFetch.ValueInt64()
	} else {
		pagesToFetch = nil
	}
	regionID := new(string)
	if !r.Configuration.RegionID.IsUnknown() && !r.Configuration.RegionID.IsNull() {
		*regionID = r.Configuration.RegionID.ValueString()
	} else {
		regionID = nil
	}
	configuration := shared.SourceSerpstatUpdate{
		APIKey:       apiKey,
		Domain:       domain,
		PageSize:     pageSize,
		Domains:      domains,
		FilterBy:     filterBy,
		FilterValue:  filterValue,
		SortBy:       sortBy,
		SortValue:    sortValue,
		PagesToFetch: pagesToFetch,
		RegionID:     regionID,
	}
	out := shared.SourceSerpstatPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
