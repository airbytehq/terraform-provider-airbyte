// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceS3ResourceModel) ToCreateSDKType() *shared.SourceS3CreateRequest {
	dataset := r.Configuration.Dataset.ValueString()
	var format *shared.SourceS3FileFormat
	var sourceS3FileFormatCSV *shared.SourceS3FileFormatCSV
	if r.Configuration.Format.SourceS3FileFormatAvro != nil {
		filetype := new(shared.SourceS3FileFormatCSVFiletype)
		if !r.Configuration.Format.SourceS3FileFormatAvro.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatAvro.Filetype.IsNull() {
			*filetype = shared.SourceS3FileFormatCSVFiletype(r.Configuration.Format.SourceS3FileFormatAvro.Filetype.ValueString())
		} else {
			filetype = nil
		}
		sourceS3FileFormatCSV = &shared.SourceS3FileFormatCSV{
			Filetype: filetype,
		}
	}
	if sourceS3FileFormatCSV != nil {
		format = &shared.SourceS3FileFormat{
			SourceS3FileFormatCSV: sourceS3FileFormatCSV,
		}
	}
	var sourceS3FileFormatParquet *shared.SourceS3FileFormatParquet
	if r.Configuration.Format.SourceS3FileFormatCSV != nil {
		filetype1 := new(shared.SourceS3FileFormatParquetFiletype)
		if !r.Configuration.Format.SourceS3FileFormatCSV.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatCSV.Filetype.IsNull() {
			*filetype1 = shared.SourceS3FileFormatParquetFiletype(r.Configuration.Format.SourceS3FileFormatCSV.Filetype.ValueString())
		} else {
			filetype1 = nil
		}
		sourceS3FileFormatParquet = &shared.SourceS3FileFormatParquet{
			Filetype: filetype1,
		}
	}
	if sourceS3FileFormatParquet != nil {
		format = &shared.SourceS3FileFormat{
			SourceS3FileFormatParquet: sourceS3FileFormatParquet,
		}
	}
	var sourceS3FileFormatAvro *shared.SourceS3FileFormatAvro
	if r.Configuration.Format.SourceS3FileFormatJsonl != nil {
		filetype2 := new(shared.SourceS3FileFormatAvroFiletype)
		if !r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.IsNull() {
			*filetype2 = shared.SourceS3FileFormatAvroFiletype(r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.ValueString())
		} else {
			filetype2 = nil
		}
		sourceS3FileFormatAvro = &shared.SourceS3FileFormatAvro{
			Filetype: filetype2,
		}
	}
	if sourceS3FileFormatAvro != nil {
		format = &shared.SourceS3FileFormat{
			SourceS3FileFormatAvro: sourceS3FileFormatAvro,
		}
	}
	var sourceS3FileFormatJsonl *shared.SourceS3FileFormatJsonl
	if r.Configuration.Format.SourceS3FileFormatParquet != nil {
		filetype3 := new(shared.SourceS3FileFormatJsonlFiletype)
		if !r.Configuration.Format.SourceS3FileFormatParquet.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatParquet.Filetype.IsNull() {
			*filetype3 = shared.SourceS3FileFormatJsonlFiletype(r.Configuration.Format.SourceS3FileFormatParquet.Filetype.ValueString())
		} else {
			filetype3 = nil
		}
		sourceS3FileFormatJsonl = &shared.SourceS3FileFormatJsonl{
			Filetype: filetype3,
		}
	}
	if sourceS3FileFormatJsonl != nil {
		format = &shared.SourceS3FileFormat{
			SourceS3FileFormatJsonl: sourceS3FileFormatJsonl,
		}
	}
	pathPattern := r.Configuration.PathPattern.ValueString()
	awsAccessKeyID := new(string)
	if !r.Configuration.Provider.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.AwsAccessKeyID.IsNull() {
		*awsAccessKeyID = r.Configuration.Provider.AwsAccessKeyID.ValueString()
	} else {
		awsAccessKeyID = nil
	}
	awsSecretAccessKey := new(string)
	if !r.Configuration.Provider.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.AwsSecretAccessKey.IsNull() {
		*awsSecretAccessKey = r.Configuration.Provider.AwsSecretAccessKey.ValueString()
	} else {
		awsSecretAccessKey = nil
	}
	bucket := r.Configuration.Provider.Bucket.ValueString()
	endpoint := new(string)
	if !r.Configuration.Provider.Endpoint.IsUnknown() && !r.Configuration.Provider.Endpoint.IsNull() {
		*endpoint = r.Configuration.Provider.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	pathPrefix := new(string)
	if !r.Configuration.Provider.PathPrefix.IsUnknown() && !r.Configuration.Provider.PathPrefix.IsNull() {
		*pathPrefix = r.Configuration.Provider.PathPrefix.ValueString()
	} else {
		pathPrefix = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.Provider.StartDate.IsUnknown() && !r.Configuration.Provider.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Provider.StartDate.ValueString())
	} else {
		startDate = nil
	}
	provider := shared.SourceS3S3AmazonWebServices{
		AwsAccessKeyID:     awsAccessKeyID,
		AwsSecretAccessKey: awsSecretAccessKey,
		Bucket:             bucket,
		Endpoint:           endpoint,
		PathPrefix:         pathPrefix,
		StartDate:          startDate,
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	sourceType := shared.SourceS3S3(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceS3{
		Dataset:     dataset,
		Format:      format,
		PathPattern: pathPattern,
		Provider:    provider,
		Schema:      schema,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceS3CreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceS3ResourceModel) ToGetSDKType() *shared.SourceS3CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceS3ResourceModel) ToUpdateSDKType() *shared.SourceS3PutRequest {
	dataset := r.Configuration.Dataset.ValueString()
	var format *shared.SourceS3UpdateFileFormat
	var sourceS3UpdateFileFormatCSV *shared.SourceS3UpdateFileFormatCSV
	if r.Configuration.Format.SourceS3FileFormatAvro != nil {
		filetype := new(shared.SourceS3UpdateFileFormatCSVFiletype)
		if !r.Configuration.Format.SourceS3FileFormatAvro.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatAvro.Filetype.IsNull() {
			*filetype = shared.SourceS3UpdateFileFormatCSVFiletype(r.Configuration.Format.SourceS3FileFormatAvro.Filetype.ValueString())
		} else {
			filetype = nil
		}
		sourceS3UpdateFileFormatCSV = &shared.SourceS3UpdateFileFormatCSV{
			Filetype: filetype,
		}
	}
	if sourceS3UpdateFileFormatCSV != nil {
		format = &shared.SourceS3UpdateFileFormat{
			SourceS3UpdateFileFormatCSV: sourceS3UpdateFileFormatCSV,
		}
	}
	var sourceS3UpdateFileFormatParquet *shared.SourceS3UpdateFileFormatParquet
	if r.Configuration.Format.SourceS3FileFormatCSV != nil {
		filetype1 := new(shared.SourceS3UpdateFileFormatParquetFiletype)
		if !r.Configuration.Format.SourceS3FileFormatCSV.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatCSV.Filetype.IsNull() {
			*filetype1 = shared.SourceS3UpdateFileFormatParquetFiletype(r.Configuration.Format.SourceS3FileFormatCSV.Filetype.ValueString())
		} else {
			filetype1 = nil
		}
		sourceS3UpdateFileFormatParquet = &shared.SourceS3UpdateFileFormatParquet{
			Filetype: filetype1,
		}
	}
	if sourceS3UpdateFileFormatParquet != nil {
		format = &shared.SourceS3UpdateFileFormat{
			SourceS3UpdateFileFormatParquet: sourceS3UpdateFileFormatParquet,
		}
	}
	var sourceS3UpdateFileFormatAvro *shared.SourceS3UpdateFileFormatAvro
	if r.Configuration.Format.SourceS3FileFormatJsonl != nil {
		filetype2 := new(shared.SourceS3UpdateFileFormatAvroFiletype)
		if !r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.IsNull() {
			*filetype2 = shared.SourceS3UpdateFileFormatAvroFiletype(r.Configuration.Format.SourceS3FileFormatJsonl.Filetype.ValueString())
		} else {
			filetype2 = nil
		}
		sourceS3UpdateFileFormatAvro = &shared.SourceS3UpdateFileFormatAvro{
			Filetype: filetype2,
		}
	}
	if sourceS3UpdateFileFormatAvro != nil {
		format = &shared.SourceS3UpdateFileFormat{
			SourceS3UpdateFileFormatAvro: sourceS3UpdateFileFormatAvro,
		}
	}
	var sourceS3UpdateFileFormatJsonl *shared.SourceS3UpdateFileFormatJsonl
	if r.Configuration.Format.SourceS3FileFormatParquet != nil {
		filetype3 := new(shared.SourceS3UpdateFileFormatJsonlFiletype)
		if !r.Configuration.Format.SourceS3FileFormatParquet.Filetype.IsUnknown() && !r.Configuration.Format.SourceS3FileFormatParquet.Filetype.IsNull() {
			*filetype3 = shared.SourceS3UpdateFileFormatJsonlFiletype(r.Configuration.Format.SourceS3FileFormatParquet.Filetype.ValueString())
		} else {
			filetype3 = nil
		}
		sourceS3UpdateFileFormatJsonl = &shared.SourceS3UpdateFileFormatJsonl{
			Filetype: filetype3,
		}
	}
	if sourceS3UpdateFileFormatJsonl != nil {
		format = &shared.SourceS3UpdateFileFormat{
			SourceS3UpdateFileFormatJsonl: sourceS3UpdateFileFormatJsonl,
		}
	}
	pathPattern := r.Configuration.PathPattern.ValueString()
	awsAccessKeyID := new(string)
	if !r.Configuration.Provider.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.AwsAccessKeyID.IsNull() {
		*awsAccessKeyID = r.Configuration.Provider.AwsAccessKeyID.ValueString()
	} else {
		awsAccessKeyID = nil
	}
	awsSecretAccessKey := new(string)
	if !r.Configuration.Provider.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.AwsSecretAccessKey.IsNull() {
		*awsSecretAccessKey = r.Configuration.Provider.AwsSecretAccessKey.ValueString()
	} else {
		awsSecretAccessKey = nil
	}
	bucket := r.Configuration.Provider.Bucket.ValueString()
	endpoint := new(string)
	if !r.Configuration.Provider.Endpoint.IsUnknown() && !r.Configuration.Provider.Endpoint.IsNull() {
		*endpoint = r.Configuration.Provider.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	pathPrefix := new(string)
	if !r.Configuration.Provider.PathPrefix.IsUnknown() && !r.Configuration.Provider.PathPrefix.IsNull() {
		*pathPrefix = r.Configuration.Provider.PathPrefix.ValueString()
	} else {
		pathPrefix = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.Provider.StartDate.IsUnknown() && !r.Configuration.Provider.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Provider.StartDate.ValueString())
	} else {
		startDate = nil
	}
	provider := shared.SourceS3UpdateS3AmazonWebServices{
		AwsAccessKeyID:     awsAccessKeyID,
		AwsSecretAccessKey: awsSecretAccessKey,
		Bucket:             bucket,
		Endpoint:           endpoint,
		PathPrefix:         pathPrefix,
		StartDate:          startDate,
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	configuration := shared.SourceS3Update{
		Dataset:     dataset,
		Format:      format,
		PathPattern: pathPattern,
		Provider:    provider,
		Schema:      schema,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceS3PutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceS3ResourceModel) ToDeleteSDKType() *shared.SourceS3CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceS3ResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceS3ResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
