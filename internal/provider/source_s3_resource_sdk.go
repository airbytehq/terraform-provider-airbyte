// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceS3ResourceModel) ToSharedSourceS3CreateRequest() *shared.SourceS3CreateRequest {
	awsAccessKeyID := new(string)
	if !r.Configuration.AwsAccessKeyID.IsUnknown() && !r.Configuration.AwsAccessKeyID.IsNull() {
		*awsAccessKeyID = r.Configuration.AwsAccessKeyID.ValueString()
	} else {
		awsAccessKeyID = nil
	}
	awsSecretAccessKey := new(string)
	if !r.Configuration.AwsSecretAccessKey.IsUnknown() && !r.Configuration.AwsSecretAccessKey.IsNull() {
		*awsSecretAccessKey = r.Configuration.AwsSecretAccessKey.ValueString()
	} else {
		awsSecretAccessKey = nil
	}
	bucket := r.Configuration.Bucket.ValueString()
	dataset := new(string)
	if !r.Configuration.Dataset.IsUnknown() && !r.Configuration.Dataset.IsNull() {
		*dataset = r.Configuration.Dataset.ValueString()
	} else {
		dataset = nil
	}
	endpoint := new(string)
	if !r.Configuration.Endpoint.IsUnknown() && !r.Configuration.Endpoint.IsNull() {
		*endpoint = r.Configuration.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	var format *shared.SourceS3FileFormat
	if r.Configuration.Format != nil {
		var sourceS3CSV *shared.SourceS3CSV
		if r.Configuration.Format.Csv != nil {
			additionalReaderOptions := new(string)
			if !r.Configuration.Format.Csv.AdditionalReaderOptions.IsUnknown() && !r.Configuration.Format.Csv.AdditionalReaderOptions.IsNull() {
				*additionalReaderOptions = r.Configuration.Format.Csv.AdditionalReaderOptions.ValueString()
			} else {
				additionalReaderOptions = nil
			}
			advancedOptions := new(string)
			if !r.Configuration.Format.Csv.AdvancedOptions.IsUnknown() && !r.Configuration.Format.Csv.AdvancedOptions.IsNull() {
				*advancedOptions = r.Configuration.Format.Csv.AdvancedOptions.ValueString()
			} else {
				advancedOptions = nil
			}
			blockSize := new(int64)
			if !r.Configuration.Format.Csv.BlockSize.IsUnknown() && !r.Configuration.Format.Csv.BlockSize.IsNull() {
				*blockSize = r.Configuration.Format.Csv.BlockSize.ValueInt64()
			} else {
				blockSize = nil
			}
			delimiter := new(string)
			if !r.Configuration.Format.Csv.Delimiter.IsUnknown() && !r.Configuration.Format.Csv.Delimiter.IsNull() {
				*delimiter = r.Configuration.Format.Csv.Delimiter.ValueString()
			} else {
				delimiter = nil
			}
			doubleQuote := new(bool)
			if !r.Configuration.Format.Csv.DoubleQuote.IsUnknown() && !r.Configuration.Format.Csv.DoubleQuote.IsNull() {
				*doubleQuote = r.Configuration.Format.Csv.DoubleQuote.ValueBool()
			} else {
				doubleQuote = nil
			}
			encoding := new(string)
			if !r.Configuration.Format.Csv.Encoding.IsUnknown() && !r.Configuration.Format.Csv.Encoding.IsNull() {
				*encoding = r.Configuration.Format.Csv.Encoding.ValueString()
			} else {
				encoding = nil
			}
			escapeChar := new(string)
			if !r.Configuration.Format.Csv.EscapeChar.IsUnknown() && !r.Configuration.Format.Csv.EscapeChar.IsNull() {
				*escapeChar = r.Configuration.Format.Csv.EscapeChar.ValueString()
			} else {
				escapeChar = nil
			}
			inferDatatypes := new(bool)
			if !r.Configuration.Format.Csv.InferDatatypes.IsUnknown() && !r.Configuration.Format.Csv.InferDatatypes.IsNull() {
				*inferDatatypes = r.Configuration.Format.Csv.InferDatatypes.ValueBool()
			} else {
				inferDatatypes = nil
			}
			newlinesInValues := new(bool)
			if !r.Configuration.Format.Csv.NewlinesInValues.IsUnknown() && !r.Configuration.Format.Csv.NewlinesInValues.IsNull() {
				*newlinesInValues = r.Configuration.Format.Csv.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues = nil
			}
			quoteChar := new(string)
			if !r.Configuration.Format.Csv.QuoteChar.IsUnknown() && !r.Configuration.Format.Csv.QuoteChar.IsNull() {
				*quoteChar = r.Configuration.Format.Csv.QuoteChar.ValueString()
			} else {
				quoteChar = nil
			}
			sourceS3CSV = &shared.SourceS3CSV{
				AdditionalReaderOptions: additionalReaderOptions,
				AdvancedOptions:         advancedOptions,
				BlockSize:               blockSize,
				Delimiter:               delimiter,
				DoubleQuote:             doubleQuote,
				Encoding:                encoding,
				EscapeChar:              escapeChar,
				InferDatatypes:          inferDatatypes,
				NewlinesInValues:        newlinesInValues,
				QuoteChar:               quoteChar,
			}
		}
		if sourceS3CSV != nil {
			format = &shared.SourceS3FileFormat{
				SourceS3CSV: sourceS3CSV,
			}
		}
		var sourceS3Parquet *shared.SourceS3Parquet
		if r.Configuration.Format.Parquet != nil {
			batchSize := new(int64)
			if !r.Configuration.Format.Parquet.BatchSize.IsUnknown() && !r.Configuration.Format.Parquet.BatchSize.IsNull() {
				*batchSize = r.Configuration.Format.Parquet.BatchSize.ValueInt64()
			} else {
				batchSize = nil
			}
			bufferSize := new(int64)
			if !r.Configuration.Format.Parquet.BufferSize.IsUnknown() && !r.Configuration.Format.Parquet.BufferSize.IsNull() {
				*bufferSize = r.Configuration.Format.Parquet.BufferSize.ValueInt64()
			} else {
				bufferSize = nil
			}
			var columns []string = []string{}
			for _, columnsItem := range r.Configuration.Format.Parquet.Columns {
				columns = append(columns, columnsItem.ValueString())
			}
			sourceS3Parquet = &shared.SourceS3Parquet{
				BatchSize:  batchSize,
				BufferSize: bufferSize,
				Columns:    columns,
			}
		}
		if sourceS3Parquet != nil {
			format = &shared.SourceS3FileFormat{
				SourceS3Parquet: sourceS3Parquet,
			}
		}
		var sourceS3Avro *shared.SourceS3Avro
		if r.Configuration.Format.Avro != nil {
			sourceS3Avro = &shared.SourceS3Avro{}
		}
		if sourceS3Avro != nil {
			format = &shared.SourceS3FileFormat{
				SourceS3Avro: sourceS3Avro,
			}
		}
		var sourceS3Jsonl *shared.SourceS3Jsonl
		if r.Configuration.Format.Jsonl != nil {
			blockSize1 := new(int64)
			if !r.Configuration.Format.Jsonl.BlockSize.IsUnknown() && !r.Configuration.Format.Jsonl.BlockSize.IsNull() {
				*blockSize1 = r.Configuration.Format.Jsonl.BlockSize.ValueInt64()
			} else {
				blockSize1 = nil
			}
			newlinesInValues1 := new(bool)
			if !r.Configuration.Format.Jsonl.NewlinesInValues.IsUnknown() && !r.Configuration.Format.Jsonl.NewlinesInValues.IsNull() {
				*newlinesInValues1 = r.Configuration.Format.Jsonl.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues1 = nil
			}
			unexpectedFieldBehavior := new(shared.SourceS3UnexpectedFieldBehavior)
			if !r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.IsUnknown() && !r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.IsNull() {
				*unexpectedFieldBehavior = shared.SourceS3UnexpectedFieldBehavior(r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.ValueString())
			} else {
				unexpectedFieldBehavior = nil
			}
			sourceS3Jsonl = &shared.SourceS3Jsonl{
				BlockSize:               blockSize1,
				NewlinesInValues:        newlinesInValues1,
				UnexpectedFieldBehavior: unexpectedFieldBehavior,
			}
		}
		if sourceS3Jsonl != nil {
			format = &shared.SourceS3FileFormat{
				SourceS3Jsonl: sourceS3Jsonl,
			}
		}
	}
	pathPattern := new(string)
	if !r.Configuration.PathPattern.IsUnknown() && !r.Configuration.PathPattern.IsNull() {
		*pathPattern = r.Configuration.PathPattern.ValueString()
	} else {
		pathPattern = nil
	}
	var provider *shared.SourceS3S3AmazonWebServices
	if r.Configuration.Provider != nil {
		awsAccessKeyId1 := new(string)
		if !r.Configuration.Provider.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.AwsAccessKeyID.IsNull() {
			*awsAccessKeyId1 = r.Configuration.Provider.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyId1 = nil
		}
		awsSecretAccessKey1 := new(string)
		if !r.Configuration.Provider.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey1 = r.Configuration.Provider.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey1 = nil
		}
		bucket1 := new(string)
		if !r.Configuration.Provider.Bucket.IsUnknown() && !r.Configuration.Provider.Bucket.IsNull() {
			*bucket1 = r.Configuration.Provider.Bucket.ValueString()
		} else {
			bucket1 = nil
		}
		endpoint1 := new(string)
		if !r.Configuration.Provider.Endpoint.IsUnknown() && !r.Configuration.Provider.Endpoint.IsNull() {
			*endpoint1 = r.Configuration.Provider.Endpoint.ValueString()
		} else {
			endpoint1 = nil
		}
		pathPrefix := new(string)
		if !r.Configuration.Provider.PathPrefix.IsUnknown() && !r.Configuration.Provider.PathPrefix.IsNull() {
			*pathPrefix = r.Configuration.Provider.PathPrefix.ValueString()
		} else {
			pathPrefix = nil
		}
		regionName := new(string)
		if !r.Configuration.Provider.RegionName.IsUnknown() && !r.Configuration.Provider.RegionName.IsNull() {
			*regionName = r.Configuration.Provider.RegionName.ValueString()
		} else {
			regionName = nil
		}
		roleArn := new(string)
		if !r.Configuration.Provider.RoleArn.IsUnknown() && !r.Configuration.Provider.RoleArn.IsNull() {
			*roleArn = r.Configuration.Provider.RoleArn.ValueString()
		} else {
			roleArn = nil
		}
		startDate := new(time.Time)
		if !r.Configuration.Provider.StartDate.IsUnknown() && !r.Configuration.Provider.StartDate.IsNull() {
			*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Provider.StartDate.ValueString())
		} else {
			startDate = nil
		}
		provider = &shared.SourceS3S3AmazonWebServices{
			AwsAccessKeyID:     awsAccessKeyId1,
			AwsSecretAccessKey: awsSecretAccessKey1,
			Bucket:             bucket1,
			Endpoint:           endpoint1,
			PathPrefix:         pathPrefix,
			RegionName:         regionName,
			RoleArn:            roleArn,
			StartDate:          startDate,
		}
	}
	regionName1 := new(string)
	if !r.Configuration.RegionName.IsUnknown() && !r.Configuration.RegionName.IsNull() {
		*regionName1 = r.Configuration.RegionName.ValueString()
	} else {
		regionName1 = nil
	}
	roleArn1 := new(string)
	if !r.Configuration.RoleArn.IsUnknown() && !r.Configuration.RoleArn.IsNull() {
		*roleArn1 = r.Configuration.RoleArn.ValueString()
	} else {
		roleArn1 = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	startDate1 := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate1, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate1 = nil
	}
	var streams []shared.SourceS3FileBasedStreamConfig = []shared.SourceS3FileBasedStreamConfig{}
	for _, streamsItem := range r.Configuration.Streams {
		daysToSyncIfHistoryIsFull := new(int64)
		if !streamsItem.DaysToSyncIfHistoryIsFull.IsUnknown() && !streamsItem.DaysToSyncIfHistoryIsFull.IsNull() {
			*daysToSyncIfHistoryIsFull = streamsItem.DaysToSyncIfHistoryIsFull.ValueInt64()
		} else {
			daysToSyncIfHistoryIsFull = nil
		}
		var format1 shared.SourceS3Format
		var sourceS3AvroFormat *shared.SourceS3AvroFormat
		if streamsItem.Format.AvroFormat != nil {
			doubleAsString := new(bool)
			if !streamsItem.Format.AvroFormat.DoubleAsString.IsUnknown() && !streamsItem.Format.AvroFormat.DoubleAsString.IsNull() {
				*doubleAsString = streamsItem.Format.AvroFormat.DoubleAsString.ValueBool()
			} else {
				doubleAsString = nil
			}
			sourceS3AvroFormat = &shared.SourceS3AvroFormat{
				DoubleAsString: doubleAsString,
			}
		}
		if sourceS3AvroFormat != nil {
			format1 = shared.SourceS3Format{
				SourceS3AvroFormat: sourceS3AvroFormat,
			}
		}
		var sourceS3CSVFormat *shared.SourceS3CSVFormat
		if streamsItem.Format.CSVFormat != nil {
			delimiter1 := new(string)
			if !streamsItem.Format.CSVFormat.Delimiter.IsUnknown() && !streamsItem.Format.CSVFormat.Delimiter.IsNull() {
				*delimiter1 = streamsItem.Format.CSVFormat.Delimiter.ValueString()
			} else {
				delimiter1 = nil
			}
			doubleQuote1 := new(bool)
			if !streamsItem.Format.CSVFormat.DoubleQuote.IsUnknown() && !streamsItem.Format.CSVFormat.DoubleQuote.IsNull() {
				*doubleQuote1 = streamsItem.Format.CSVFormat.DoubleQuote.ValueBool()
			} else {
				doubleQuote1 = nil
			}
			encoding1 := new(string)
			if !streamsItem.Format.CSVFormat.Encoding.IsUnknown() && !streamsItem.Format.CSVFormat.Encoding.IsNull() {
				*encoding1 = streamsItem.Format.CSVFormat.Encoding.ValueString()
			} else {
				encoding1 = nil
			}
			escapeChar1 := new(string)
			if !streamsItem.Format.CSVFormat.EscapeChar.IsUnknown() && !streamsItem.Format.CSVFormat.EscapeChar.IsNull() {
				*escapeChar1 = streamsItem.Format.CSVFormat.EscapeChar.ValueString()
			} else {
				escapeChar1 = nil
			}
			var falseValues []string = []string{}
			for _, falseValuesItem := range streamsItem.Format.CSVFormat.FalseValues {
				falseValues = append(falseValues, falseValuesItem.ValueString())
			}
			var headerDefinition *shared.SourceS3CSVHeaderDefinition
			if streamsItem.Format.CSVFormat.HeaderDefinition != nil {
				var sourceS3FromCSV *shared.SourceS3FromCSV
				if streamsItem.Format.CSVFormat.HeaderDefinition.FromCSV != nil {
					sourceS3FromCSV = &shared.SourceS3FromCSV{}
				}
				if sourceS3FromCSV != nil {
					headerDefinition = &shared.SourceS3CSVHeaderDefinition{
						SourceS3FromCSV: sourceS3FromCSV,
					}
				}
				var sourceS3Autogenerated *shared.SourceS3Autogenerated
				if streamsItem.Format.CSVFormat.HeaderDefinition.Autogenerated != nil {
					sourceS3Autogenerated = &shared.SourceS3Autogenerated{}
				}
				if sourceS3Autogenerated != nil {
					headerDefinition = &shared.SourceS3CSVHeaderDefinition{
						SourceS3Autogenerated: sourceS3Autogenerated,
					}
				}
				var sourceS3UserProvided *shared.SourceS3UserProvided
				if streamsItem.Format.CSVFormat.HeaderDefinition.UserProvided != nil {
					var columnNames []string = []string{}
					for _, columnNamesItem := range streamsItem.Format.CSVFormat.HeaderDefinition.UserProvided.ColumnNames {
						columnNames = append(columnNames, columnNamesItem.ValueString())
					}
					sourceS3UserProvided = &shared.SourceS3UserProvided{
						ColumnNames: columnNames,
					}
				}
				if sourceS3UserProvided != nil {
					headerDefinition = &shared.SourceS3CSVHeaderDefinition{
						SourceS3UserProvided: sourceS3UserProvided,
					}
				}
			}
			ignoreErrorsOnFieldsMismatch := new(bool)
			if !streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.IsUnknown() && !streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.IsNull() {
				*ignoreErrorsOnFieldsMismatch = streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.ValueBool()
			} else {
				ignoreErrorsOnFieldsMismatch = nil
			}
			inferenceType := new(shared.SourceS3InferenceType)
			if !streamsItem.Format.CSVFormat.InferenceType.IsUnknown() && !streamsItem.Format.CSVFormat.InferenceType.IsNull() {
				*inferenceType = shared.SourceS3InferenceType(streamsItem.Format.CSVFormat.InferenceType.ValueString())
			} else {
				inferenceType = nil
			}
			var nullValues []string = []string{}
			for _, nullValuesItem := range streamsItem.Format.CSVFormat.NullValues {
				nullValues = append(nullValues, nullValuesItem.ValueString())
			}
			quoteChar1 := new(string)
			if !streamsItem.Format.CSVFormat.QuoteChar.IsUnknown() && !streamsItem.Format.CSVFormat.QuoteChar.IsNull() {
				*quoteChar1 = streamsItem.Format.CSVFormat.QuoteChar.ValueString()
			} else {
				quoteChar1 = nil
			}
			skipRowsAfterHeader := new(int64)
			if !streamsItem.Format.CSVFormat.SkipRowsAfterHeader.IsUnknown() && !streamsItem.Format.CSVFormat.SkipRowsAfterHeader.IsNull() {
				*skipRowsAfterHeader = streamsItem.Format.CSVFormat.SkipRowsAfterHeader.ValueInt64()
			} else {
				skipRowsAfterHeader = nil
			}
			skipRowsBeforeHeader := new(int64)
			if !streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.IsUnknown() && !streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.IsNull() {
				*skipRowsBeforeHeader = streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.ValueInt64()
			} else {
				skipRowsBeforeHeader = nil
			}
			stringsCanBeNull := new(bool)
			if !streamsItem.Format.CSVFormat.StringsCanBeNull.IsUnknown() && !streamsItem.Format.CSVFormat.StringsCanBeNull.IsNull() {
				*stringsCanBeNull = streamsItem.Format.CSVFormat.StringsCanBeNull.ValueBool()
			} else {
				stringsCanBeNull = nil
			}
			var trueValues []string = []string{}
			for _, trueValuesItem := range streamsItem.Format.CSVFormat.TrueValues {
				trueValues = append(trueValues, trueValuesItem.ValueString())
			}
			sourceS3CSVFormat = &shared.SourceS3CSVFormat{
				Delimiter:                    delimiter1,
				DoubleQuote:                  doubleQuote1,
				Encoding:                     encoding1,
				EscapeChar:                   escapeChar1,
				FalseValues:                  falseValues,
				HeaderDefinition:             headerDefinition,
				IgnoreErrorsOnFieldsMismatch: ignoreErrorsOnFieldsMismatch,
				InferenceType:                inferenceType,
				NullValues:                   nullValues,
				QuoteChar:                    quoteChar1,
				SkipRowsAfterHeader:          skipRowsAfterHeader,
				SkipRowsBeforeHeader:         skipRowsBeforeHeader,
				StringsCanBeNull:             stringsCanBeNull,
				TrueValues:                   trueValues,
			}
		}
		if sourceS3CSVFormat != nil {
			format1 = shared.SourceS3Format{
				SourceS3CSVFormat: sourceS3CSVFormat,
			}
		}
		var sourceS3JsonlFormat *shared.SourceS3JsonlFormat
		if streamsItem.Format.JsonlFormat != nil {
			sourceS3JsonlFormat = &shared.SourceS3JsonlFormat{}
		}
		if sourceS3JsonlFormat != nil {
			format1 = shared.SourceS3Format{
				SourceS3JsonlFormat: sourceS3JsonlFormat,
			}
		}
		var sourceS3ParquetFormat *shared.SourceS3ParquetFormat
		if streamsItem.Format.ParquetFormat != nil {
			decimalAsFloat := new(bool)
			if !streamsItem.Format.ParquetFormat.DecimalAsFloat.IsUnknown() && !streamsItem.Format.ParquetFormat.DecimalAsFloat.IsNull() {
				*decimalAsFloat = streamsItem.Format.ParquetFormat.DecimalAsFloat.ValueBool()
			} else {
				decimalAsFloat = nil
			}
			sourceS3ParquetFormat = &shared.SourceS3ParquetFormat{
				DecimalAsFloat: decimalAsFloat,
			}
		}
		if sourceS3ParquetFormat != nil {
			format1 = shared.SourceS3Format{
				SourceS3ParquetFormat: sourceS3ParquetFormat,
			}
		}
		var sourceS3UnstructuredDocumentFormat *shared.SourceS3UnstructuredDocumentFormat
		if streamsItem.Format.UnstructuredDocumentFormat != nil {
			var processing *shared.SourceS3Processing
			if streamsItem.Format.UnstructuredDocumentFormat.Processing != nil {
				var sourceS3Local *shared.SourceS3Local
				if streamsItem.Format.UnstructuredDocumentFormat.Processing.Local != nil {
					sourceS3Local = &shared.SourceS3Local{}
				}
				if sourceS3Local != nil {
					processing = &shared.SourceS3Processing{
						SourceS3Local: sourceS3Local,
					}
				}
			}
			skipUnprocessableFiles := new(bool)
			if !streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.IsUnknown() && !streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.IsNull() {
				*skipUnprocessableFiles = streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.ValueBool()
			} else {
				skipUnprocessableFiles = nil
			}
			strategy := new(shared.SourceS3ParsingStrategy)
			if !streamsItem.Format.UnstructuredDocumentFormat.Strategy.IsUnknown() && !streamsItem.Format.UnstructuredDocumentFormat.Strategy.IsNull() {
				*strategy = shared.SourceS3ParsingStrategy(streamsItem.Format.UnstructuredDocumentFormat.Strategy.ValueString())
			} else {
				strategy = nil
			}
			sourceS3UnstructuredDocumentFormat = &shared.SourceS3UnstructuredDocumentFormat{
				Processing:             processing,
				SkipUnprocessableFiles: skipUnprocessableFiles,
				Strategy:               strategy,
			}
		}
		if sourceS3UnstructuredDocumentFormat != nil {
			format1 = shared.SourceS3Format{
				SourceS3UnstructuredDocumentFormat: sourceS3UnstructuredDocumentFormat,
			}
		}
		var globs []string = []string{}
		for _, globsItem := range streamsItem.Globs {
			globs = append(globs, globsItem.ValueString())
		}
		inputSchema := new(string)
		if !streamsItem.InputSchema.IsUnknown() && !streamsItem.InputSchema.IsNull() {
			*inputSchema = streamsItem.InputSchema.ValueString()
		} else {
			inputSchema = nil
		}
		legacyPrefix := new(string)
		if !streamsItem.LegacyPrefix.IsUnknown() && !streamsItem.LegacyPrefix.IsNull() {
			*legacyPrefix = streamsItem.LegacyPrefix.ValueString()
		} else {
			legacyPrefix = nil
		}
		name := streamsItem.Name.ValueString()
		primaryKey := new(string)
		if !streamsItem.PrimaryKey.IsUnknown() && !streamsItem.PrimaryKey.IsNull() {
			*primaryKey = streamsItem.PrimaryKey.ValueString()
		} else {
			primaryKey = nil
		}
		schemaless := new(bool)
		if !streamsItem.Schemaless.IsUnknown() && !streamsItem.Schemaless.IsNull() {
			*schemaless = streamsItem.Schemaless.ValueBool()
		} else {
			schemaless = nil
		}
		validationPolicy := new(shared.SourceS3ValidationPolicy)
		if !streamsItem.ValidationPolicy.IsUnknown() && !streamsItem.ValidationPolicy.IsNull() {
			*validationPolicy = shared.SourceS3ValidationPolicy(streamsItem.ValidationPolicy.ValueString())
		} else {
			validationPolicy = nil
		}
		streams = append(streams, shared.SourceS3FileBasedStreamConfig{
			DaysToSyncIfHistoryIsFull: daysToSyncIfHistoryIsFull,
			Format:                    format1,
			Globs:                     globs,
			InputSchema:               inputSchema,
			LegacyPrefix:              legacyPrefix,
			Name:                      name,
			PrimaryKey:                primaryKey,
			Schemaless:                schemaless,
			ValidationPolicy:          validationPolicy,
		})
	}
	configuration := shared.SourceS3{
		AwsAccessKeyID:     awsAccessKeyID,
		AwsSecretAccessKey: awsSecretAccessKey,
		Bucket:             bucket,
		Dataset:            dataset,
		Endpoint:           endpoint,
		Format:             format,
		PathPattern:        pathPattern,
		Provider:           provider,
		RegionName:         regionName1,
		RoleArn:            roleArn1,
		Schema:             schema,
		StartDate:          startDate1,
		Streams:            streams,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name1 := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceS3CreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name1,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceS3ResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceS3ResourceModel) ToSharedSourceS3PutRequest() *shared.SourceS3PutRequest {
	awsAccessKeyID := new(string)
	if !r.Configuration.AwsAccessKeyID.IsUnknown() && !r.Configuration.AwsAccessKeyID.IsNull() {
		*awsAccessKeyID = r.Configuration.AwsAccessKeyID.ValueString()
	} else {
		awsAccessKeyID = nil
	}
	awsSecretAccessKey := new(string)
	if !r.Configuration.AwsSecretAccessKey.IsUnknown() && !r.Configuration.AwsSecretAccessKey.IsNull() {
		*awsSecretAccessKey = r.Configuration.AwsSecretAccessKey.ValueString()
	} else {
		awsSecretAccessKey = nil
	}
	bucket := r.Configuration.Bucket.ValueString()
	dataset := new(string)
	if !r.Configuration.Dataset.IsUnknown() && !r.Configuration.Dataset.IsNull() {
		*dataset = r.Configuration.Dataset.ValueString()
	} else {
		dataset = nil
	}
	endpoint := new(string)
	if !r.Configuration.Endpoint.IsUnknown() && !r.Configuration.Endpoint.IsNull() {
		*endpoint = r.Configuration.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	var format *shared.SourceS3UpdateFileFormat
	if r.Configuration.Format != nil {
		var csv *shared.Csv
		if r.Configuration.Format.Csv != nil {
			additionalReaderOptions := new(string)
			if !r.Configuration.Format.Csv.AdditionalReaderOptions.IsUnknown() && !r.Configuration.Format.Csv.AdditionalReaderOptions.IsNull() {
				*additionalReaderOptions = r.Configuration.Format.Csv.AdditionalReaderOptions.ValueString()
			} else {
				additionalReaderOptions = nil
			}
			advancedOptions := new(string)
			if !r.Configuration.Format.Csv.AdvancedOptions.IsUnknown() && !r.Configuration.Format.Csv.AdvancedOptions.IsNull() {
				*advancedOptions = r.Configuration.Format.Csv.AdvancedOptions.ValueString()
			} else {
				advancedOptions = nil
			}
			blockSize := new(int64)
			if !r.Configuration.Format.Csv.BlockSize.IsUnknown() && !r.Configuration.Format.Csv.BlockSize.IsNull() {
				*blockSize = r.Configuration.Format.Csv.BlockSize.ValueInt64()
			} else {
				blockSize = nil
			}
			delimiter := new(string)
			if !r.Configuration.Format.Csv.Delimiter.IsUnknown() && !r.Configuration.Format.Csv.Delimiter.IsNull() {
				*delimiter = r.Configuration.Format.Csv.Delimiter.ValueString()
			} else {
				delimiter = nil
			}
			doubleQuote := new(bool)
			if !r.Configuration.Format.Csv.DoubleQuote.IsUnknown() && !r.Configuration.Format.Csv.DoubleQuote.IsNull() {
				*doubleQuote = r.Configuration.Format.Csv.DoubleQuote.ValueBool()
			} else {
				doubleQuote = nil
			}
			encoding := new(string)
			if !r.Configuration.Format.Csv.Encoding.IsUnknown() && !r.Configuration.Format.Csv.Encoding.IsNull() {
				*encoding = r.Configuration.Format.Csv.Encoding.ValueString()
			} else {
				encoding = nil
			}
			escapeChar := new(string)
			if !r.Configuration.Format.Csv.EscapeChar.IsUnknown() && !r.Configuration.Format.Csv.EscapeChar.IsNull() {
				*escapeChar = r.Configuration.Format.Csv.EscapeChar.ValueString()
			} else {
				escapeChar = nil
			}
			inferDatatypes := new(bool)
			if !r.Configuration.Format.Csv.InferDatatypes.IsUnknown() && !r.Configuration.Format.Csv.InferDatatypes.IsNull() {
				*inferDatatypes = r.Configuration.Format.Csv.InferDatatypes.ValueBool()
			} else {
				inferDatatypes = nil
			}
			newlinesInValues := new(bool)
			if !r.Configuration.Format.Csv.NewlinesInValues.IsUnknown() && !r.Configuration.Format.Csv.NewlinesInValues.IsNull() {
				*newlinesInValues = r.Configuration.Format.Csv.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues = nil
			}
			quoteChar := new(string)
			if !r.Configuration.Format.Csv.QuoteChar.IsUnknown() && !r.Configuration.Format.Csv.QuoteChar.IsNull() {
				*quoteChar = r.Configuration.Format.Csv.QuoteChar.ValueString()
			} else {
				quoteChar = nil
			}
			csv = &shared.Csv{
				AdditionalReaderOptions: additionalReaderOptions,
				AdvancedOptions:         advancedOptions,
				BlockSize:               blockSize,
				Delimiter:               delimiter,
				DoubleQuote:             doubleQuote,
				Encoding:                encoding,
				EscapeChar:              escapeChar,
				InferDatatypes:          inferDatatypes,
				NewlinesInValues:        newlinesInValues,
				QuoteChar:               quoteChar,
			}
		}
		if csv != nil {
			format = &shared.SourceS3UpdateFileFormat{
				Csv: csv,
			}
		}
		var parquet *shared.Parquet
		if r.Configuration.Format.Parquet != nil {
			batchSize := new(int64)
			if !r.Configuration.Format.Parquet.BatchSize.IsUnknown() && !r.Configuration.Format.Parquet.BatchSize.IsNull() {
				*batchSize = r.Configuration.Format.Parquet.BatchSize.ValueInt64()
			} else {
				batchSize = nil
			}
			bufferSize := new(int64)
			if !r.Configuration.Format.Parquet.BufferSize.IsUnknown() && !r.Configuration.Format.Parquet.BufferSize.IsNull() {
				*bufferSize = r.Configuration.Format.Parquet.BufferSize.ValueInt64()
			} else {
				bufferSize = nil
			}
			var columns []string = []string{}
			for _, columnsItem := range r.Configuration.Format.Parquet.Columns {
				columns = append(columns, columnsItem.ValueString())
			}
			parquet = &shared.Parquet{
				BatchSize:  batchSize,
				BufferSize: bufferSize,
				Columns:    columns,
			}
		}
		if parquet != nil {
			format = &shared.SourceS3UpdateFileFormat{
				Parquet: parquet,
			}
		}
		var avro *shared.Avro
		if r.Configuration.Format.Avro != nil {
			avro = &shared.Avro{}
		}
		if avro != nil {
			format = &shared.SourceS3UpdateFileFormat{
				Avro: avro,
			}
		}
		var jsonl *shared.Jsonl
		if r.Configuration.Format.Jsonl != nil {
			blockSize1 := new(int64)
			if !r.Configuration.Format.Jsonl.BlockSize.IsUnknown() && !r.Configuration.Format.Jsonl.BlockSize.IsNull() {
				*blockSize1 = r.Configuration.Format.Jsonl.BlockSize.ValueInt64()
			} else {
				blockSize1 = nil
			}
			newlinesInValues1 := new(bool)
			if !r.Configuration.Format.Jsonl.NewlinesInValues.IsUnknown() && !r.Configuration.Format.Jsonl.NewlinesInValues.IsNull() {
				*newlinesInValues1 = r.Configuration.Format.Jsonl.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues1 = nil
			}
			unexpectedFieldBehavior := new(shared.UnexpectedFieldBehavior)
			if !r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.IsUnknown() && !r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.IsNull() {
				*unexpectedFieldBehavior = shared.UnexpectedFieldBehavior(r.Configuration.Format.Jsonl.UnexpectedFieldBehavior.ValueString())
			} else {
				unexpectedFieldBehavior = nil
			}
			jsonl = &shared.Jsonl{
				BlockSize:               blockSize1,
				NewlinesInValues:        newlinesInValues1,
				UnexpectedFieldBehavior: unexpectedFieldBehavior,
			}
		}
		if jsonl != nil {
			format = &shared.SourceS3UpdateFileFormat{
				Jsonl: jsonl,
			}
		}
	}
	pathPattern := new(string)
	if !r.Configuration.PathPattern.IsUnknown() && !r.Configuration.PathPattern.IsNull() {
		*pathPattern = r.Configuration.PathPattern.ValueString()
	} else {
		pathPattern = nil
	}
	var provider *shared.S3AmazonWebServices
	if r.Configuration.Provider != nil {
		awsAccessKeyId1 := new(string)
		if !r.Configuration.Provider.AwsAccessKeyID.IsUnknown() && !r.Configuration.Provider.AwsAccessKeyID.IsNull() {
			*awsAccessKeyId1 = r.Configuration.Provider.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyId1 = nil
		}
		awsSecretAccessKey1 := new(string)
		if !r.Configuration.Provider.AwsSecretAccessKey.IsUnknown() && !r.Configuration.Provider.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey1 = r.Configuration.Provider.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey1 = nil
		}
		bucket1 := new(string)
		if !r.Configuration.Provider.Bucket.IsUnknown() && !r.Configuration.Provider.Bucket.IsNull() {
			*bucket1 = r.Configuration.Provider.Bucket.ValueString()
		} else {
			bucket1 = nil
		}
		endpoint1 := new(string)
		if !r.Configuration.Provider.Endpoint.IsUnknown() && !r.Configuration.Provider.Endpoint.IsNull() {
			*endpoint1 = r.Configuration.Provider.Endpoint.ValueString()
		} else {
			endpoint1 = nil
		}
		pathPrefix := new(string)
		if !r.Configuration.Provider.PathPrefix.IsUnknown() && !r.Configuration.Provider.PathPrefix.IsNull() {
			*pathPrefix = r.Configuration.Provider.PathPrefix.ValueString()
		} else {
			pathPrefix = nil
		}
		regionName := new(string)
		if !r.Configuration.Provider.RegionName.IsUnknown() && !r.Configuration.Provider.RegionName.IsNull() {
			*regionName = r.Configuration.Provider.RegionName.ValueString()
		} else {
			regionName = nil
		}
		roleArn := new(string)
		if !r.Configuration.Provider.RoleArn.IsUnknown() && !r.Configuration.Provider.RoleArn.IsNull() {
			*roleArn = r.Configuration.Provider.RoleArn.ValueString()
		} else {
			roleArn = nil
		}
		startDate := new(time.Time)
		if !r.Configuration.Provider.StartDate.IsUnknown() && !r.Configuration.Provider.StartDate.IsNull() {
			*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Provider.StartDate.ValueString())
		} else {
			startDate = nil
		}
		provider = &shared.S3AmazonWebServices{
			AwsAccessKeyID:     awsAccessKeyId1,
			AwsSecretAccessKey: awsSecretAccessKey1,
			Bucket:             bucket1,
			Endpoint:           endpoint1,
			PathPrefix:         pathPrefix,
			RegionName:         regionName,
			RoleArn:            roleArn,
			StartDate:          startDate,
		}
	}
	regionName1 := new(string)
	if !r.Configuration.RegionName.IsUnknown() && !r.Configuration.RegionName.IsNull() {
		*regionName1 = r.Configuration.RegionName.ValueString()
	} else {
		regionName1 = nil
	}
	roleArn1 := new(string)
	if !r.Configuration.RoleArn.IsUnknown() && !r.Configuration.RoleArn.IsNull() {
		*roleArn1 = r.Configuration.RoleArn.ValueString()
	} else {
		roleArn1 = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	startDate1 := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate1, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate1 = nil
	}
	var streams []shared.SourceS3UpdateFileBasedStreamConfig = []shared.SourceS3UpdateFileBasedStreamConfig{}
	for _, streamsItem := range r.Configuration.Streams {
		daysToSyncIfHistoryIsFull := new(int64)
		if !streamsItem.DaysToSyncIfHistoryIsFull.IsUnknown() && !streamsItem.DaysToSyncIfHistoryIsFull.IsNull() {
			*daysToSyncIfHistoryIsFull = streamsItem.DaysToSyncIfHistoryIsFull.ValueInt64()
		} else {
			daysToSyncIfHistoryIsFull = nil
		}
		var format1 shared.SourceS3UpdateFormat
		var sourceS3UpdateAvroFormat *shared.SourceS3UpdateAvroFormat
		if streamsItem.Format.AvroFormat != nil {
			doubleAsString := new(bool)
			if !streamsItem.Format.AvroFormat.DoubleAsString.IsUnknown() && !streamsItem.Format.AvroFormat.DoubleAsString.IsNull() {
				*doubleAsString = streamsItem.Format.AvroFormat.DoubleAsString.ValueBool()
			} else {
				doubleAsString = nil
			}
			sourceS3UpdateAvroFormat = &shared.SourceS3UpdateAvroFormat{
				DoubleAsString: doubleAsString,
			}
		}
		if sourceS3UpdateAvroFormat != nil {
			format1 = shared.SourceS3UpdateFormat{
				SourceS3UpdateAvroFormat: sourceS3UpdateAvroFormat,
			}
		}
		var sourceS3UpdateCSVFormat *shared.SourceS3UpdateCSVFormat
		if streamsItem.Format.CSVFormat != nil {
			delimiter1 := new(string)
			if !streamsItem.Format.CSVFormat.Delimiter.IsUnknown() && !streamsItem.Format.CSVFormat.Delimiter.IsNull() {
				*delimiter1 = streamsItem.Format.CSVFormat.Delimiter.ValueString()
			} else {
				delimiter1 = nil
			}
			doubleQuote1 := new(bool)
			if !streamsItem.Format.CSVFormat.DoubleQuote.IsUnknown() && !streamsItem.Format.CSVFormat.DoubleQuote.IsNull() {
				*doubleQuote1 = streamsItem.Format.CSVFormat.DoubleQuote.ValueBool()
			} else {
				doubleQuote1 = nil
			}
			encoding1 := new(string)
			if !streamsItem.Format.CSVFormat.Encoding.IsUnknown() && !streamsItem.Format.CSVFormat.Encoding.IsNull() {
				*encoding1 = streamsItem.Format.CSVFormat.Encoding.ValueString()
			} else {
				encoding1 = nil
			}
			escapeChar1 := new(string)
			if !streamsItem.Format.CSVFormat.EscapeChar.IsUnknown() && !streamsItem.Format.CSVFormat.EscapeChar.IsNull() {
				*escapeChar1 = streamsItem.Format.CSVFormat.EscapeChar.ValueString()
			} else {
				escapeChar1 = nil
			}
			var falseValues []string = []string{}
			for _, falseValuesItem := range streamsItem.Format.CSVFormat.FalseValues {
				falseValues = append(falseValues, falseValuesItem.ValueString())
			}
			var headerDefinition *shared.SourceS3UpdateCSVHeaderDefinition
			if streamsItem.Format.CSVFormat.HeaderDefinition != nil {
				var sourceS3UpdateFromCSV *shared.SourceS3UpdateFromCSV
				if streamsItem.Format.CSVFormat.HeaderDefinition.FromCSV != nil {
					sourceS3UpdateFromCSV = &shared.SourceS3UpdateFromCSV{}
				}
				if sourceS3UpdateFromCSV != nil {
					headerDefinition = &shared.SourceS3UpdateCSVHeaderDefinition{
						SourceS3UpdateFromCSV: sourceS3UpdateFromCSV,
					}
				}
				var sourceS3UpdateAutogenerated *shared.SourceS3UpdateAutogenerated
				if streamsItem.Format.CSVFormat.HeaderDefinition.Autogenerated != nil {
					sourceS3UpdateAutogenerated = &shared.SourceS3UpdateAutogenerated{}
				}
				if sourceS3UpdateAutogenerated != nil {
					headerDefinition = &shared.SourceS3UpdateCSVHeaderDefinition{
						SourceS3UpdateAutogenerated: sourceS3UpdateAutogenerated,
					}
				}
				var sourceS3UpdateUserProvided *shared.SourceS3UpdateUserProvided
				if streamsItem.Format.CSVFormat.HeaderDefinition.UserProvided != nil {
					var columnNames []string = []string{}
					for _, columnNamesItem := range streamsItem.Format.CSVFormat.HeaderDefinition.UserProvided.ColumnNames {
						columnNames = append(columnNames, columnNamesItem.ValueString())
					}
					sourceS3UpdateUserProvided = &shared.SourceS3UpdateUserProvided{
						ColumnNames: columnNames,
					}
				}
				if sourceS3UpdateUserProvided != nil {
					headerDefinition = &shared.SourceS3UpdateCSVHeaderDefinition{
						SourceS3UpdateUserProvided: sourceS3UpdateUserProvided,
					}
				}
			}
			ignoreErrorsOnFieldsMismatch := new(bool)
			if !streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.IsUnknown() && !streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.IsNull() {
				*ignoreErrorsOnFieldsMismatch = streamsItem.Format.CSVFormat.IgnoreErrorsOnFieldsMismatch.ValueBool()
			} else {
				ignoreErrorsOnFieldsMismatch = nil
			}
			inferenceType := new(shared.SourceS3UpdateInferenceType)
			if !streamsItem.Format.CSVFormat.InferenceType.IsUnknown() && !streamsItem.Format.CSVFormat.InferenceType.IsNull() {
				*inferenceType = shared.SourceS3UpdateInferenceType(streamsItem.Format.CSVFormat.InferenceType.ValueString())
			} else {
				inferenceType = nil
			}
			var nullValues []string = []string{}
			for _, nullValuesItem := range streamsItem.Format.CSVFormat.NullValues {
				nullValues = append(nullValues, nullValuesItem.ValueString())
			}
			quoteChar1 := new(string)
			if !streamsItem.Format.CSVFormat.QuoteChar.IsUnknown() && !streamsItem.Format.CSVFormat.QuoteChar.IsNull() {
				*quoteChar1 = streamsItem.Format.CSVFormat.QuoteChar.ValueString()
			} else {
				quoteChar1 = nil
			}
			skipRowsAfterHeader := new(int64)
			if !streamsItem.Format.CSVFormat.SkipRowsAfterHeader.IsUnknown() && !streamsItem.Format.CSVFormat.SkipRowsAfterHeader.IsNull() {
				*skipRowsAfterHeader = streamsItem.Format.CSVFormat.SkipRowsAfterHeader.ValueInt64()
			} else {
				skipRowsAfterHeader = nil
			}
			skipRowsBeforeHeader := new(int64)
			if !streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.IsUnknown() && !streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.IsNull() {
				*skipRowsBeforeHeader = streamsItem.Format.CSVFormat.SkipRowsBeforeHeader.ValueInt64()
			} else {
				skipRowsBeforeHeader = nil
			}
			stringsCanBeNull := new(bool)
			if !streamsItem.Format.CSVFormat.StringsCanBeNull.IsUnknown() && !streamsItem.Format.CSVFormat.StringsCanBeNull.IsNull() {
				*stringsCanBeNull = streamsItem.Format.CSVFormat.StringsCanBeNull.ValueBool()
			} else {
				stringsCanBeNull = nil
			}
			var trueValues []string = []string{}
			for _, trueValuesItem := range streamsItem.Format.CSVFormat.TrueValues {
				trueValues = append(trueValues, trueValuesItem.ValueString())
			}
			sourceS3UpdateCSVFormat = &shared.SourceS3UpdateCSVFormat{
				Delimiter:                    delimiter1,
				DoubleQuote:                  doubleQuote1,
				Encoding:                     encoding1,
				EscapeChar:                   escapeChar1,
				FalseValues:                  falseValues,
				HeaderDefinition:             headerDefinition,
				IgnoreErrorsOnFieldsMismatch: ignoreErrorsOnFieldsMismatch,
				InferenceType:                inferenceType,
				NullValues:                   nullValues,
				QuoteChar:                    quoteChar1,
				SkipRowsAfterHeader:          skipRowsAfterHeader,
				SkipRowsBeforeHeader:         skipRowsBeforeHeader,
				StringsCanBeNull:             stringsCanBeNull,
				TrueValues:                   trueValues,
			}
		}
		if sourceS3UpdateCSVFormat != nil {
			format1 = shared.SourceS3UpdateFormat{
				SourceS3UpdateCSVFormat: sourceS3UpdateCSVFormat,
			}
		}
		var sourceS3UpdateJsonlFormat *shared.SourceS3UpdateJsonlFormat
		if streamsItem.Format.JsonlFormat != nil {
			sourceS3UpdateJsonlFormat = &shared.SourceS3UpdateJsonlFormat{}
		}
		if sourceS3UpdateJsonlFormat != nil {
			format1 = shared.SourceS3UpdateFormat{
				SourceS3UpdateJsonlFormat: sourceS3UpdateJsonlFormat,
			}
		}
		var sourceS3UpdateParquetFormat *shared.SourceS3UpdateParquetFormat
		if streamsItem.Format.ParquetFormat != nil {
			decimalAsFloat := new(bool)
			if !streamsItem.Format.ParquetFormat.DecimalAsFloat.IsUnknown() && !streamsItem.Format.ParquetFormat.DecimalAsFloat.IsNull() {
				*decimalAsFloat = streamsItem.Format.ParquetFormat.DecimalAsFloat.ValueBool()
			} else {
				decimalAsFloat = nil
			}
			sourceS3UpdateParquetFormat = &shared.SourceS3UpdateParquetFormat{
				DecimalAsFloat: decimalAsFloat,
			}
		}
		if sourceS3UpdateParquetFormat != nil {
			format1 = shared.SourceS3UpdateFormat{
				SourceS3UpdateParquetFormat: sourceS3UpdateParquetFormat,
			}
		}
		var sourceS3UpdateUnstructuredDocumentFormat *shared.SourceS3UpdateUnstructuredDocumentFormat
		if streamsItem.Format.UnstructuredDocumentFormat != nil {
			var processing *shared.SourceS3UpdateProcessing
			if streamsItem.Format.UnstructuredDocumentFormat.Processing != nil {
				var sourceS3UpdateLocal *shared.SourceS3UpdateLocal
				if streamsItem.Format.UnstructuredDocumentFormat.Processing.Local != nil {
					sourceS3UpdateLocal = &shared.SourceS3UpdateLocal{}
				}
				if sourceS3UpdateLocal != nil {
					processing = &shared.SourceS3UpdateProcessing{
						SourceS3UpdateLocal: sourceS3UpdateLocal,
					}
				}
			}
			skipUnprocessableFiles := new(bool)
			if !streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.IsUnknown() && !streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.IsNull() {
				*skipUnprocessableFiles = streamsItem.Format.UnstructuredDocumentFormat.SkipUnprocessableFiles.ValueBool()
			} else {
				skipUnprocessableFiles = nil
			}
			strategy := new(shared.SourceS3UpdateParsingStrategy)
			if !streamsItem.Format.UnstructuredDocumentFormat.Strategy.IsUnknown() && !streamsItem.Format.UnstructuredDocumentFormat.Strategy.IsNull() {
				*strategy = shared.SourceS3UpdateParsingStrategy(streamsItem.Format.UnstructuredDocumentFormat.Strategy.ValueString())
			} else {
				strategy = nil
			}
			sourceS3UpdateUnstructuredDocumentFormat = &shared.SourceS3UpdateUnstructuredDocumentFormat{
				Processing:             processing,
				SkipUnprocessableFiles: skipUnprocessableFiles,
				Strategy:               strategy,
			}
		}
		if sourceS3UpdateUnstructuredDocumentFormat != nil {
			format1 = shared.SourceS3UpdateFormat{
				SourceS3UpdateUnstructuredDocumentFormat: sourceS3UpdateUnstructuredDocumentFormat,
			}
		}
		var globs []string = []string{}
		for _, globsItem := range streamsItem.Globs {
			globs = append(globs, globsItem.ValueString())
		}
		inputSchema := new(string)
		if !streamsItem.InputSchema.IsUnknown() && !streamsItem.InputSchema.IsNull() {
			*inputSchema = streamsItem.InputSchema.ValueString()
		} else {
			inputSchema = nil
		}
		legacyPrefix := new(string)
		if !streamsItem.LegacyPrefix.IsUnknown() && !streamsItem.LegacyPrefix.IsNull() {
			*legacyPrefix = streamsItem.LegacyPrefix.ValueString()
		} else {
			legacyPrefix = nil
		}
		name := streamsItem.Name.ValueString()
		primaryKey := new(string)
		if !streamsItem.PrimaryKey.IsUnknown() && !streamsItem.PrimaryKey.IsNull() {
			*primaryKey = streamsItem.PrimaryKey.ValueString()
		} else {
			primaryKey = nil
		}
		schemaless := new(bool)
		if !streamsItem.Schemaless.IsUnknown() && !streamsItem.Schemaless.IsNull() {
			*schemaless = streamsItem.Schemaless.ValueBool()
		} else {
			schemaless = nil
		}
		validationPolicy := new(shared.SourceS3UpdateValidationPolicy)
		if !streamsItem.ValidationPolicy.IsUnknown() && !streamsItem.ValidationPolicy.IsNull() {
			*validationPolicy = shared.SourceS3UpdateValidationPolicy(streamsItem.ValidationPolicy.ValueString())
		} else {
			validationPolicy = nil
		}
		streams = append(streams, shared.SourceS3UpdateFileBasedStreamConfig{
			DaysToSyncIfHistoryIsFull: daysToSyncIfHistoryIsFull,
			Format:                    format1,
			Globs:                     globs,
			InputSchema:               inputSchema,
			LegacyPrefix:              legacyPrefix,
			Name:                      name,
			PrimaryKey:                primaryKey,
			Schemaless:                schemaless,
			ValidationPolicy:          validationPolicy,
		})
	}
	configuration := shared.SourceS3Update{
		AwsAccessKeyID:     awsAccessKeyID,
		AwsSecretAccessKey: awsSecretAccessKey,
		Bucket:             bucket,
		Dataset:            dataset,
		Endpoint:           endpoint,
		Format:             format,
		PathPattern:        pathPattern,
		Provider:           provider,
		RegionName:         regionName1,
		RoleArn:            roleArn1,
		Schema:             schema,
		StartDate:          startDate1,
		Streams:            streams,
	}
	name1 := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceS3PutRequest{
		Configuration: configuration,
		Name:          name1,
		WorkspaceID:   workspaceID,
	}
	return &out
}
