// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceJotformResourceModel) ToSharedSourceJotformCreateRequest() *shared.SourceJotformCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var apiEndpoint shared.APIEndpoint
	var basic *shared.Basic
	if r.Configuration.APIEndpoint.Basic != nil {
		urlPrefix := new(shared.BaseURLPrefix)
		if !r.Configuration.APIEndpoint.Basic.URLPrefix.IsUnknown() && !r.Configuration.APIEndpoint.Basic.URLPrefix.IsNull() {
			*urlPrefix = shared.BaseURLPrefix(r.Configuration.APIEndpoint.Basic.URLPrefix.ValueString())
		} else {
			urlPrefix = nil
		}
		basic = &shared.Basic{
			URLPrefix: urlPrefix,
		}
	}
	if basic != nil {
		apiEndpoint = shared.APIEndpoint{
			Basic: basic,
		}
	}
	var enterprise *shared.Enterprise
	if r.Configuration.APIEndpoint.Enterprise != nil {
		var enterpriseURL string
		enterpriseURL = r.Configuration.APIEndpoint.Enterprise.EnterpriseURL.ValueString()

		enterprise = &shared.Enterprise{
			EnterpriseURL: enterpriseURL,
		}
	}
	if enterprise != nil {
		apiEndpoint = shared.APIEndpoint{
			Enterprise: enterprise,
		}
	}
	configuration := shared.SourceJotform{
		APIKey:      apiKey,
		EndDate:     endDate,
		StartDate:   startDate,
		APIEndpoint: apiEndpoint,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceJotformCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceJotformResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceJotformResourceModel) ToSharedSourceJotformPutRequest() *shared.SourceJotformPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var apiEndpoint shared.SourceJotformUpdateAPIEndpoint
	var sourceJotformUpdateBasic *shared.SourceJotformUpdateBasic
	if r.Configuration.APIEndpoint.Basic != nil {
		urlPrefix := new(shared.SourceJotformUpdateBaseURLPrefix)
		if !r.Configuration.APIEndpoint.Basic.URLPrefix.IsUnknown() && !r.Configuration.APIEndpoint.Basic.URLPrefix.IsNull() {
			*urlPrefix = shared.SourceJotformUpdateBaseURLPrefix(r.Configuration.APIEndpoint.Basic.URLPrefix.ValueString())
		} else {
			urlPrefix = nil
		}
		sourceJotformUpdateBasic = &shared.SourceJotformUpdateBasic{
			URLPrefix: urlPrefix,
		}
	}
	if sourceJotformUpdateBasic != nil {
		apiEndpoint = shared.SourceJotformUpdateAPIEndpoint{
			SourceJotformUpdateBasic: sourceJotformUpdateBasic,
		}
	}
	var sourceJotformUpdateEnterprise *shared.SourceJotformUpdateEnterprise
	if r.Configuration.APIEndpoint.Enterprise != nil {
		var enterpriseURL string
		enterpriseURL = r.Configuration.APIEndpoint.Enterprise.EnterpriseURL.ValueString()

		sourceJotformUpdateEnterprise = &shared.SourceJotformUpdateEnterprise{
			EnterpriseURL: enterpriseURL,
		}
	}
	if sourceJotformUpdateEnterprise != nil {
		apiEndpoint = shared.SourceJotformUpdateAPIEndpoint{
			SourceJotformUpdateEnterprise: sourceJotformUpdateEnterprise,
		}
	}
	configuration := shared.SourceJotformUpdate{
		APIKey:      apiKey,
		EndDate:     endDate,
		StartDate:   startDate,
		APIEndpoint: apiEndpoint,
	}
	out := shared.SourceJotformPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
