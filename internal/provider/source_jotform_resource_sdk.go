// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceJotformResourceModel) ToSharedSourceJotformCreateRequest(ctx context.Context) (*shared.SourceJotformCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var apiEndpoint shared.APIEndpoint
	var basic *shared.Basic
	if r.Configuration.APIEndpoint.Basic != nil {
		urlPrefix := new(shared.BaseURLPrefix)
		if !r.Configuration.APIEndpoint.Basic.URLPrefix.IsUnknown() && !r.Configuration.APIEndpoint.Basic.URLPrefix.IsNull() {
			*urlPrefix = shared.BaseURLPrefix(r.Configuration.APIEndpoint.Basic.URLPrefix.ValueString())
		} else {
			urlPrefix = nil
		}
		basic = &shared.Basic{
			URLPrefix: urlPrefix,
		}
	}
	if basic != nil {
		apiEndpoint = shared.APIEndpoint{
			Basic: basic,
		}
	}
	var enterprise *shared.Enterprise
	if r.Configuration.APIEndpoint.Enterprise != nil {
		var enterpriseURL string
		enterpriseURL = r.Configuration.APIEndpoint.Enterprise.EnterpriseURL.ValueString()

		enterprise = &shared.Enterprise{
			EnterpriseURL: enterpriseURL,
		}
	}
	if enterprise != nil {
		apiEndpoint = shared.APIEndpoint{
			Enterprise: enterprise,
		}
	}
	configuration := shared.SourceJotform{
		APIKey:      apiKey,
		EndDate:     endDate,
		StartDate:   startDate,
		APIEndpoint: apiEndpoint,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceJotformCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceJotformResourceModel) ToSharedSourceJotformPutRequest(ctx context.Context) (*shared.SourceJotformPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var apiEndpoint shared.SourceJotformUpdateAPIEndpoint
	var sourceJotformUpdateBasic *shared.SourceJotformUpdateBasic
	if r.Configuration.APIEndpoint.Basic != nil {
		urlPrefix := new(shared.SourceJotformUpdateBaseURLPrefix)
		if !r.Configuration.APIEndpoint.Basic.URLPrefix.IsUnknown() && !r.Configuration.APIEndpoint.Basic.URLPrefix.IsNull() {
			*urlPrefix = shared.SourceJotformUpdateBaseURLPrefix(r.Configuration.APIEndpoint.Basic.URLPrefix.ValueString())
		} else {
			urlPrefix = nil
		}
		sourceJotformUpdateBasic = &shared.SourceJotformUpdateBasic{
			URLPrefix: urlPrefix,
		}
	}
	if sourceJotformUpdateBasic != nil {
		apiEndpoint = shared.SourceJotformUpdateAPIEndpoint{
			SourceJotformUpdateBasic: sourceJotformUpdateBasic,
		}
	}
	var sourceJotformUpdateEnterprise *shared.SourceJotformUpdateEnterprise
	if r.Configuration.APIEndpoint.Enterprise != nil {
		var enterpriseURL string
		enterpriseURL = r.Configuration.APIEndpoint.Enterprise.EnterpriseURL.ValueString()

		sourceJotformUpdateEnterprise = &shared.SourceJotformUpdateEnterprise{
			EnterpriseURL: enterpriseURL,
		}
	}
	if sourceJotformUpdateEnterprise != nil {
		apiEndpoint = shared.SourceJotformUpdateAPIEndpoint{
			SourceJotformUpdateEnterprise: sourceJotformUpdateEnterprise,
		}
	}
	configuration := shared.SourceJotformUpdate{
		APIKey:      apiKey,
		EndDate:     endDate,
		StartDate:   startDate,
		APIEndpoint: apiEndpoint,
	}
	out := shared.SourceJotformPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceJotformResourceModel) ToOperationsPutSourceJotformRequest(ctx context.Context) (*operations.PutSourceJotformRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceJotformPutRequest, sourceJotformPutRequestDiags := r.ToSharedSourceJotformPutRequest(ctx)
	diags.Append(sourceJotformPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceJotformRequest{
		SourceID:                sourceID,
		SourceJotformPutRequest: sourceJotformPutRequest,
	}

	return &out, diags
}

func (r *SourceJotformResourceModel) ToOperationsGetSourceJotformRequest(ctx context.Context) (*operations.GetSourceJotformRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceJotformRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceJotformResourceModel) ToOperationsDeleteSourceJotformRequest(ctx context.Context) (*operations.DeleteSourceJotformRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceJotformRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceJotformResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
