// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationDynamodbResourceModel) ToSharedDestinationDynamodbCreateRequest() *shared.DestinationDynamodbCreateRequest {
	var accessKeyID string
	accessKeyID = r.Configuration.AccessKeyID.ValueString()

	dynamodbEndpoint := new(string)
	if !r.Configuration.DynamodbEndpoint.IsUnknown() && !r.Configuration.DynamodbEndpoint.IsNull() {
		*dynamodbEndpoint = r.Configuration.DynamodbEndpoint.ValueString()
	} else {
		dynamodbEndpoint = nil
	}
	dynamodbRegion := new(shared.DestinationDynamodbDynamoDBRegion)
	if !r.Configuration.DynamodbRegion.IsUnknown() && !r.Configuration.DynamodbRegion.IsNull() {
		*dynamodbRegion = shared.DestinationDynamodbDynamoDBRegion(r.Configuration.DynamodbRegion.ValueString())
	} else {
		dynamodbRegion = nil
	}
	var dynamodbTableNamePrefix string
	dynamodbTableNamePrefix = r.Configuration.DynamodbTableNamePrefix.ValueString()

	var secretAccessKey string
	secretAccessKey = r.Configuration.SecretAccessKey.ValueString()

	configuration := shared.DestinationDynamodb{
		AccessKeyID:             accessKeyID,
		DynamodbEndpoint:        dynamodbEndpoint,
		DynamodbRegion:          dynamodbRegion,
		DynamodbTableNamePrefix: dynamodbTableNamePrefix,
		SecretAccessKey:         secretAccessKey,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationDynamodbCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationDynamodbResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationDynamodbResourceModel) ToSharedDestinationDynamodbPutRequest() *shared.DestinationDynamodbPutRequest {
	var accessKeyID string
	accessKeyID = r.Configuration.AccessKeyID.ValueString()

	dynamodbEndpoint := new(string)
	if !r.Configuration.DynamodbEndpoint.IsUnknown() && !r.Configuration.DynamodbEndpoint.IsNull() {
		*dynamodbEndpoint = r.Configuration.DynamodbEndpoint.ValueString()
	} else {
		dynamodbEndpoint = nil
	}
	dynamodbRegion := new(shared.DynamoDBRegion)
	if !r.Configuration.DynamodbRegion.IsUnknown() && !r.Configuration.DynamodbRegion.IsNull() {
		*dynamodbRegion = shared.DynamoDBRegion(r.Configuration.DynamodbRegion.ValueString())
	} else {
		dynamodbRegion = nil
	}
	var dynamodbTableNamePrefix string
	dynamodbTableNamePrefix = r.Configuration.DynamodbTableNamePrefix.ValueString()

	var secretAccessKey string
	secretAccessKey = r.Configuration.SecretAccessKey.ValueString()

	configuration := shared.DestinationDynamodbUpdate{
		AccessKeyID:             accessKeyID,
		DynamodbEndpoint:        dynamodbEndpoint,
		DynamodbRegion:          dynamodbRegion,
		DynamodbTableNamePrefix: dynamodbTableNamePrefix,
		SecretAccessKey:         secretAccessKey,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationDynamodbPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
