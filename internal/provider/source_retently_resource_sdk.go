// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceRetentlyResourceModel) ToSharedSourceRetentlyCreateRequest() *shared.SourceRetentlyCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceRetentlyAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var authenticateViaRetentlyOAuth *shared.AuthenticateViaRetentlyOAuth
		if r.Configuration.Credentials.AuthenticateViaRetentlyOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.RefreshToken.ValueString()

			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			authenticateViaRetentlyOAuth = &shared.AuthenticateViaRetentlyOAuth{
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
				AdditionalProperties: additionalProperties,
			}
		}
		if authenticateViaRetentlyOAuth != nil {
			credentials = &shared.SourceRetentlyAuthenticationMechanism{
				AuthenticateViaRetentlyOAuth: authenticateViaRetentlyOAuth,
			}
		}
		var authenticateWithAPIToken *shared.AuthenticateWithAPIToken
		if r.Configuration.Credentials.AuthenticateWithAPIToken != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.AuthenticateWithAPIToken.APIKey.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			authenticateWithAPIToken = &shared.AuthenticateWithAPIToken{
				APIKey:               apiKey,
				AdditionalProperties: additionalProperties1,
			}
		}
		if authenticateWithAPIToken != nil {
			credentials = &shared.SourceRetentlyAuthenticationMechanism{
				AuthenticateWithAPIToken: authenticateWithAPIToken,
			}
		}
	}
	configuration := shared.SourceRetently{
		Credentials: credentials,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceRetentlyCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceRetentlyResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceRetentlyResourceModel) ToSharedSourceRetentlyPutRequest() *shared.SourceRetentlyPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceRetentlyUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceRetentlyUpdateAuthenticateViaRetentlyOAuth *shared.SourceRetentlyUpdateAuthenticateViaRetentlyOAuth
		if r.Configuration.Credentials.AuthenticateViaRetentlyOAuth != nil {
			var clientID string
			clientID = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.RefreshToken.ValueString()

			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceRetentlyUpdateAuthenticateViaRetentlyOAuth = &shared.SourceRetentlyUpdateAuthenticateViaRetentlyOAuth{
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
				AdditionalProperties: additionalProperties,
			}
		}
		if sourceRetentlyUpdateAuthenticateViaRetentlyOAuth != nil {
			credentials = &shared.SourceRetentlyUpdateAuthenticationMechanism{
				SourceRetentlyUpdateAuthenticateViaRetentlyOAuth: sourceRetentlyUpdateAuthenticateViaRetentlyOAuth,
			}
		}
		var sourceRetentlyUpdateAuthenticateWithAPIToken *shared.SourceRetentlyUpdateAuthenticateWithAPIToken
		if r.Configuration.Credentials.AuthenticateWithAPIToken != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.AuthenticateWithAPIToken.APIKey.ValueString()

			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceRetentlyUpdateAuthenticateWithAPIToken = &shared.SourceRetentlyUpdateAuthenticateWithAPIToken{
				APIKey:               apiKey,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceRetentlyUpdateAuthenticateWithAPIToken != nil {
			credentials = &shared.SourceRetentlyUpdateAuthenticationMechanism{
				SourceRetentlyUpdateAuthenticateWithAPIToken: sourceRetentlyUpdateAuthenticateWithAPIToken,
			}
		}
	}
	configuration := shared.SourceRetentlyUpdate{
		Credentials: credentials,
	}
	out := shared.SourceRetentlyPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
