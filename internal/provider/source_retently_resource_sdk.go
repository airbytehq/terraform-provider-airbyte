// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceRetentlyResourceModel) ToSharedSourceRetentlyCreateRequest() *shared.SourceRetentlyCreateRequest {
	var credentials *shared.SourceRetentlyAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceRetentlyAuthenticateViaRetentlyOAuth *shared.SourceRetentlyAuthenticateViaRetentlyOAuth
		if r.Configuration.Credentials.AuthenticateViaRetentlyOAuth != nil {
			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			clientID := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.RefreshToken.ValueString()
			sourceRetentlyAuthenticateViaRetentlyOAuth = &shared.SourceRetentlyAuthenticateViaRetentlyOAuth{
				AdditionalProperties: additionalProperties,
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
			}
		}
		if sourceRetentlyAuthenticateViaRetentlyOAuth != nil {
			credentials = &shared.SourceRetentlyAuthenticationMechanism{
				SourceRetentlyAuthenticateViaRetentlyOAuth: sourceRetentlyAuthenticateViaRetentlyOAuth,
			}
		}
		var sourceRetentlyAuthenticateWithAPIToken *shared.SourceRetentlyAuthenticateWithAPIToken
		if r.Configuration.Credentials.AuthenticateWithAPIToken != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			apiKey := r.Configuration.Credentials.AuthenticateWithAPIToken.APIKey.ValueString()
			sourceRetentlyAuthenticateWithAPIToken = &shared.SourceRetentlyAuthenticateWithAPIToken{
				AdditionalProperties: additionalProperties1,
				APIKey:               apiKey,
			}
		}
		if sourceRetentlyAuthenticateWithAPIToken != nil {
			credentials = &shared.SourceRetentlyAuthenticationMechanism{
				SourceRetentlyAuthenticateWithAPIToken: sourceRetentlyAuthenticateWithAPIToken,
			}
		}
	}
	configuration := shared.SourceRetently{
		Credentials: credentials,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceRetentlyCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceRetentlyResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceRetentlyResourceModel) ToSharedSourceRetentlyPutRequest() *shared.SourceRetentlyPutRequest {
	var credentials *shared.SourceRetentlyUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var authenticateViaRetentlyOAuth *shared.AuthenticateViaRetentlyOAuth
		if r.Configuration.Credentials.AuthenticateViaRetentlyOAuth != nil {
			var additionalProperties interface{}
			if !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.AdditionalProperties.ValueString()), &additionalProperties)
			}
			clientID := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.AuthenticateViaRetentlyOAuth.RefreshToken.ValueString()
			authenticateViaRetentlyOAuth = &shared.AuthenticateViaRetentlyOAuth{
				AdditionalProperties: additionalProperties,
				ClientID:             clientID,
				ClientSecret:         clientSecret,
				RefreshToken:         refreshToken,
			}
		}
		if authenticateViaRetentlyOAuth != nil {
			credentials = &shared.SourceRetentlyUpdateAuthenticationMechanism{
				AuthenticateViaRetentlyOAuth: authenticateViaRetentlyOAuth,
			}
		}
		var authenticateWithAPIToken *shared.AuthenticateWithAPIToken
		if r.Configuration.Credentials.AuthenticateWithAPIToken != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.Credentials.AuthenticateWithAPIToken.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			apiKey := r.Configuration.Credentials.AuthenticateWithAPIToken.APIKey.ValueString()
			authenticateWithAPIToken = &shared.AuthenticateWithAPIToken{
				AdditionalProperties: additionalProperties1,
				APIKey:               apiKey,
			}
		}
		if authenticateWithAPIToken != nil {
			credentials = &shared.SourceRetentlyUpdateAuthenticationMechanism{
				AuthenticateWithAPIToken: authenticateWithAPIToken,
			}
		}
	}
	configuration := shared.SourceRetentlyUpdate{
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceRetentlyPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
