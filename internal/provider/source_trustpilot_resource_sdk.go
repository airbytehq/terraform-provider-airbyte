// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceTrustpilotResourceModel) ToSharedSourceTrustpilotCreateRequest() *shared.SourceTrustpilotCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceTrustpilotAuthorizationMethod
	var sourceTrustpilotOAuth20 *shared.SourceTrustpilotOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTrustpilotOAuth20 = &shared.SourceTrustpilotOAuth20{
			ClientID:        clientID,
			AccessToken:     accessToken,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTrustpilotOAuth20 != nil {
		credentials = shared.SourceTrustpilotAuthorizationMethod{
			SourceTrustpilotOAuth20: sourceTrustpilotOAuth20,
		}
	}
	var sourceTrustpilotAPIKey *shared.SourceTrustpilotAPIKey
	if r.Configuration.Credentials.APIKey != nil {
		var clientId1 string
		clientId1 = r.Configuration.Credentials.APIKey.ClientID.ValueString()

		sourceTrustpilotAPIKey = &shared.SourceTrustpilotAPIKey{
			ClientID: clientId1,
		}
	}
	if sourceTrustpilotAPIKey != nil {
		credentials = shared.SourceTrustpilotAuthorizationMethod{
			SourceTrustpilotAPIKey: sourceTrustpilotAPIKey,
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	var businessUnits []string = []string{}
	for _, businessUnitsItem := range r.Configuration.BusinessUnits {
		businessUnits = append(businessUnits, businessUnitsItem.ValueString())
	}
	configuration := shared.SourceTrustpilot{
		Credentials:   credentials,
		StartDate:     startDate,
		BusinessUnits: businessUnits,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceTrustpilotCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceTrustpilotResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceTrustpilotResourceModel) ToSharedSourceTrustpilotPutRequest() *shared.SourceTrustpilotPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceTrustpilotUpdateAuthorizationMethod
	var sourceTrustpilotUpdateOAuth20 *shared.SourceTrustpilotUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceTrustpilotUpdateOAuth20 = &shared.SourceTrustpilotUpdateOAuth20{
			ClientID:        clientID,
			AccessToken:     accessToken,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceTrustpilotUpdateOAuth20 != nil {
		credentials = shared.SourceTrustpilotUpdateAuthorizationMethod{
			SourceTrustpilotUpdateOAuth20: sourceTrustpilotUpdateOAuth20,
		}
	}
	var sourceTrustpilotUpdateAPIKey *shared.SourceTrustpilotUpdateAPIKey
	if r.Configuration.Credentials.APIKey != nil {
		var clientId1 string
		clientId1 = r.Configuration.Credentials.APIKey.ClientID.ValueString()

		sourceTrustpilotUpdateAPIKey = &shared.SourceTrustpilotUpdateAPIKey{
			ClientID: clientId1,
		}
	}
	if sourceTrustpilotUpdateAPIKey != nil {
		credentials = shared.SourceTrustpilotUpdateAuthorizationMethod{
			SourceTrustpilotUpdateAPIKey: sourceTrustpilotUpdateAPIKey,
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	var businessUnits []string = []string{}
	for _, businessUnitsItem := range r.Configuration.BusinessUnits {
		businessUnits = append(businessUnits, businessUnitsItem.ValueString())
	}
	configuration := shared.SourceTrustpilotUpdate{
		Credentials:   credentials,
		StartDate:     startDate,
		BusinessUnits: businessUnits,
	}
	out := shared.SourceTrustpilotPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
