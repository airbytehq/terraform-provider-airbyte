// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceShopifyResourceModel) ToSharedSourceShopifyCreateRequest(ctx context.Context) (*shared.SourceShopifyCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var shop string
	shop = r.Configuration.Shop.ValueString()

	var credentials *shared.ShopifyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceShopifyOAuth20 *shared.SourceShopifyOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			accessToken := new(string)
			if !r.Configuration.Credentials.OAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.OAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			sourceShopifyOAuth20 = &shared.SourceShopifyOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceShopifyOAuth20 != nil {
			credentials = &shared.ShopifyAuthorizationMethod{
				SourceShopifyOAuth20: sourceShopifyOAuth20,
			}
		}
		var apiPassword *shared.APIPassword
		if r.Configuration.Credentials.APIPassword != nil {
			var apiPassword1 string
			apiPassword1 = r.Configuration.Credentials.APIPassword.APIPassword.ValueString()

			apiPassword = &shared.APIPassword{
				APIPassword: apiPassword1,
			}
		}
		if apiPassword != nil {
			credentials = &shared.ShopifyAuthorizationMethod{
				APIPassword: apiPassword,
			}
		}
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	bulkWindowInDays := new(int64)
	if !r.Configuration.BulkWindowInDays.IsUnknown() && !r.Configuration.BulkWindowInDays.IsNull() {
		*bulkWindowInDays = r.Configuration.BulkWindowInDays.ValueInt64()
	} else {
		bulkWindowInDays = nil
	}
	fetchTransactionsUserID := new(bool)
	if !r.Configuration.FetchTransactionsUserID.IsUnknown() && !r.Configuration.FetchTransactionsUserID.IsNull() {
		*fetchTransactionsUserID = r.Configuration.FetchTransactionsUserID.ValueBool()
	} else {
		fetchTransactionsUserID = nil
	}
	jobProductVariantsIncludePresPrices := new(bool)
	if !r.Configuration.JobProductVariantsIncludePresPrices.IsUnknown() && !r.Configuration.JobProductVariantsIncludePresPrices.IsNull() {
		*jobProductVariantsIncludePresPrices = r.Configuration.JobProductVariantsIncludePresPrices.ValueBool()
	} else {
		jobProductVariantsIncludePresPrices = nil
	}
	jobTerminationThreshold := new(int64)
	if !r.Configuration.JobTerminationThreshold.IsUnknown() && !r.Configuration.JobTerminationThreshold.IsNull() {
		*jobTerminationThreshold = r.Configuration.JobTerminationThreshold.ValueInt64()
	} else {
		jobTerminationThreshold = nil
	}
	jobCheckpointInterval := new(int64)
	if !r.Configuration.JobCheckpointInterval.IsUnknown() && !r.Configuration.JobCheckpointInterval.IsNull() {
		*jobCheckpointInterval = r.Configuration.JobCheckpointInterval.ValueInt64()
	} else {
		jobCheckpointInterval = nil
	}
	configuration := shared.SourceShopify{
		Shop:                                shop,
		Credentials:                         credentials,
		StartDate:                           startDate,
		BulkWindowInDays:                    bulkWindowInDays,
		FetchTransactionsUserID:             fetchTransactionsUserID,
		JobProductVariantsIncludePresPrices: jobProductVariantsIncludePresPrices,
		JobTerminationThreshold:             jobTerminationThreshold,
		JobCheckpointInterval:               jobCheckpointInterval,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceShopifyCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceShopifyResourceModel) ToSharedSourceShopifyPutRequest(ctx context.Context) (*shared.SourceShopifyPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var shop string
	shop = r.Configuration.Shop.ValueString()

	var credentials *shared.SourceShopifyUpdateShopifyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceShopifyUpdateOAuth20 *shared.SourceShopifyUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			accessToken := new(string)
			if !r.Configuration.Credentials.OAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.OAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			sourceShopifyUpdateOAuth20 = &shared.SourceShopifyUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceShopifyUpdateOAuth20 != nil {
			credentials = &shared.SourceShopifyUpdateShopifyAuthorizationMethod{
				SourceShopifyUpdateOAuth20: sourceShopifyUpdateOAuth20,
			}
		}
		var sourceShopifyUpdateAPIPassword *shared.SourceShopifyUpdateAPIPassword
		if r.Configuration.Credentials.APIPassword != nil {
			var apiPassword string
			apiPassword = r.Configuration.Credentials.APIPassword.APIPassword.ValueString()

			sourceShopifyUpdateAPIPassword = &shared.SourceShopifyUpdateAPIPassword{
				APIPassword: apiPassword,
			}
		}
		if sourceShopifyUpdateAPIPassword != nil {
			credentials = &shared.SourceShopifyUpdateShopifyAuthorizationMethod{
				SourceShopifyUpdateAPIPassword: sourceShopifyUpdateAPIPassword,
			}
		}
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	bulkWindowInDays := new(int64)
	if !r.Configuration.BulkWindowInDays.IsUnknown() && !r.Configuration.BulkWindowInDays.IsNull() {
		*bulkWindowInDays = r.Configuration.BulkWindowInDays.ValueInt64()
	} else {
		bulkWindowInDays = nil
	}
	fetchTransactionsUserID := new(bool)
	if !r.Configuration.FetchTransactionsUserID.IsUnknown() && !r.Configuration.FetchTransactionsUserID.IsNull() {
		*fetchTransactionsUserID = r.Configuration.FetchTransactionsUserID.ValueBool()
	} else {
		fetchTransactionsUserID = nil
	}
	jobProductVariantsIncludePresPrices := new(bool)
	if !r.Configuration.JobProductVariantsIncludePresPrices.IsUnknown() && !r.Configuration.JobProductVariantsIncludePresPrices.IsNull() {
		*jobProductVariantsIncludePresPrices = r.Configuration.JobProductVariantsIncludePresPrices.ValueBool()
	} else {
		jobProductVariantsIncludePresPrices = nil
	}
	jobTerminationThreshold := new(int64)
	if !r.Configuration.JobTerminationThreshold.IsUnknown() && !r.Configuration.JobTerminationThreshold.IsNull() {
		*jobTerminationThreshold = r.Configuration.JobTerminationThreshold.ValueInt64()
	} else {
		jobTerminationThreshold = nil
	}
	jobCheckpointInterval := new(int64)
	if !r.Configuration.JobCheckpointInterval.IsUnknown() && !r.Configuration.JobCheckpointInterval.IsNull() {
		*jobCheckpointInterval = r.Configuration.JobCheckpointInterval.ValueInt64()
	} else {
		jobCheckpointInterval = nil
	}
	configuration := shared.SourceShopifyUpdate{
		Shop:                                shop,
		Credentials:                         credentials,
		StartDate:                           startDate,
		BulkWindowInDays:                    bulkWindowInDays,
		FetchTransactionsUserID:             fetchTransactionsUserID,
		JobProductVariantsIncludePresPrices: jobProductVariantsIncludePresPrices,
		JobTerminationThreshold:             jobTerminationThreshold,
		JobCheckpointInterval:               jobCheckpointInterval,
	}
	out := shared.SourceShopifyPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceShopifyResourceModel) ToOperationsPutSourceShopifyRequest(ctx context.Context) (*operations.PutSourceShopifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceShopifyPutRequest, sourceShopifyPutRequestDiags := r.ToSharedSourceShopifyPutRequest(ctx)
	diags.Append(sourceShopifyPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceShopifyRequest{
		SourceID:                sourceID,
		SourceShopifyPutRequest: sourceShopifyPutRequest,
	}

	return &out, diags
}

func (r *SourceShopifyResourceModel) ToOperationsGetSourceShopifyRequest(ctx context.Context) (*operations.GetSourceShopifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceShopifyRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceShopifyResourceModel) ToOperationsDeleteSourceShopifyRequest(ctx context.Context) (*operations.DeleteSourceShopifyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceShopifyRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceShopifyResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
