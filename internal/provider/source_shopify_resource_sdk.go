// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceShopifyResourceModel) ToCreateSDKType() *shared.SourceShopifyCreateRequest {
	var credentials *shared.SourceShopifyShopifyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceShopifyShopifyAuthorizationMethodOAuth20 *shared.SourceShopifyShopifyAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			authMethod := shared.SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethod(r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientID := new(string)
			if !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceShopifyShopifyAuthorizationMethodOAuth20 = &shared.SourceShopifyShopifyAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceShopifyShopifyAuthorizationMethod{
				SourceShopifyShopifyAuthorizationMethodOAuth20: sourceShopifyShopifyAuthorizationMethodOAuth20,
			}
		}
		var sourceShopifyShopifyAuthorizationMethodAPIPassword *shared.SourceShopifyShopifyAuthorizationMethodAPIPassword
		if r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
			apiPassword := r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword.ValueString()
			authMethod1 := shared.SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethod(r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod.ValueString())
			sourceShopifyShopifyAuthorizationMethodAPIPassword = &shared.SourceShopifyShopifyAuthorizationMethodAPIPassword{
				APIPassword: apiPassword,
				AuthMethod:  authMethod1,
			}
		}
		if sourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
			credentials = &shared.SourceShopifyShopifyAuthorizationMethod{
				SourceShopifyShopifyAuthorizationMethodAPIPassword: sourceShopifyShopifyAuthorizationMethodAPIPassword,
			}
		}
	}
	shop := r.Configuration.Shop.ValueString()
	sourceType := shared.SourceShopifyShopify(r.Configuration.SourceType.ValueString())
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceShopify{
		Credentials: credentials,
		Shop:        shop,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceShopifyCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceShopifyResourceModel) ToGetSDKType() *shared.SourceShopifyCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceShopifyResourceModel) ToUpdateSDKType() *shared.SourceShopifyPutRequest {
	var credentials *shared.SourceShopifyUpdateShopifyAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceShopifyUpdateShopifyAuthorizationMethodOAuth20 *shared.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20
		if r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			authMethod := shared.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod(r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientID := new(string)
			if !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceShopifyUpdateShopifyAuthorizationMethodOAuth20 = &shared.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceShopifyUpdateShopifyAuthorizationMethodOAuth20 != nil {
			credentials = &shared.SourceShopifyUpdateShopifyAuthorizationMethod{
				SourceShopifyUpdateShopifyAuthorizationMethodOAuth20: sourceShopifyUpdateShopifyAuthorizationMethodOAuth20,
			}
		}
		var sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword *shared.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword
		if r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword != nil {
			apiPassword := r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword.APIPassword.ValueString()
			authMethod1 := shared.SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod(r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword.AuthMethod.ValueString())
			sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword = &shared.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword{
				APIPassword: apiPassword,
				AuthMethod:  authMethod1,
			}
		}
		if sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword != nil {
			credentials = &shared.SourceShopifyUpdateShopifyAuthorizationMethod{
				SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword: sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword,
			}
		}
	}
	shop := r.Configuration.Shop.ValueString()
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceShopifyUpdate{
		Credentials: credentials,
		Shop:        shop,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceShopifyPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceShopifyResourceModel) ToDeleteSDKType() *shared.SourceShopifyCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceShopifyResourceModel) RefreshFromGetResponse(resp *shared.SourceShopifyGetResponse) {
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceShopifyShopifyAuthorizationMethod{}
		if resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
			r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword = &SourceShopifyShopifyAuthorizationMethodAPIPassword{}
			r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword = types.StringValue(resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword)
			r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod = types.StringValue(string(resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod))
		}
		if resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 = &SourceShopifyShopifyAuthorizationMethodOAuth20{}
			if resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken != nil {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken = types.StringValue(*resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken)
			} else {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken = types.StringNull()
			}
			r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod = types.StringValue(string(resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod))
			if resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID != nil {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID)
			} else {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret != nil {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret)
			} else {
				r.Configuration.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword != nil {
			r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword = &SourceShopifyShopifyAuthorizationMethodAPIPassword{}
		}
		if resp.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 = &SourceShopifyShopifyAuthorizationMethodOAuth20{}
		}
	}
	r.Configuration.Shop = types.StringValue(resp.Configuration.Shop)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceShopifyResourceModel) RefreshFromCreateResponse(resp *shared.SourceShopifyGetResponse) {
	r.RefreshFromGetResponse(resp)
}
