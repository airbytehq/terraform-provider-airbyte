// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourcePipedriveResourceModel) ToCreateSDKType() *shared.SourcePipedriveCreateRequest {
	var authorization *shared.SourcePipedriveAPIKeyAuthentication
	if r.Configuration.Authorization != nil {
		apiToken := r.Configuration.Authorization.APIToken.ValueString()
		authType := shared.SourcePipedriveAPIKeyAuthenticationAuthType(r.Configuration.Authorization.AuthType.ValueString())
		authorization = &shared.SourcePipedriveAPIKeyAuthentication{
			APIToken: apiToken,
			AuthType: authType,
		}
	}
	replicationStartDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	sourceType := shared.SourcePipedrivePipedrive(r.Configuration.SourceType.ValueString())
	configuration := shared.SourcePipedrive{
		Authorization:        authorization,
		ReplicationStartDate: replicationStartDate,
		SourceType:           sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePipedriveCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePipedriveResourceModel) ToGetSDKType() *shared.SourcePipedriveCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePipedriveResourceModel) ToUpdateSDKType() *shared.SourcePipedrivePutRequest {
	var authorization *shared.SourcePipedriveUpdateAPIKeyAuthentication
	if r.Configuration.Authorization != nil {
		apiToken := r.Configuration.Authorization.APIToken.ValueString()
		authType := shared.SourcePipedriveUpdateAPIKeyAuthenticationAuthType(r.Configuration.Authorization.AuthType.ValueString())
		authorization = &shared.SourcePipedriveUpdateAPIKeyAuthentication{
			APIToken: apiToken,
			AuthType: authType,
		}
	}
	replicationStartDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	configuration := shared.SourcePipedriveUpdate{
		Authorization:        authorization,
		ReplicationStartDate: replicationStartDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePipedrivePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePipedriveResourceModel) ToDeleteSDKType() *shared.SourcePipedriveCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePipedriveResourceModel) RefreshFromGetResponse(resp *shared.SourcePipedriveGetResponse) {
	if r.Configuration.Authorization == nil {
		r.Configuration.Authorization = &SourcePipedriveAPIKeyAuthentication{}
	}
	if resp.Configuration.Authorization == nil {
		r.Configuration.Authorization = nil
	} else {
		r.Configuration.Authorization = &SourcePipedriveAPIKeyAuthentication{}
		r.Configuration.Authorization.APIToken = types.StringValue(resp.Configuration.Authorization.APIToken)
		r.Configuration.Authorization.AuthType = types.StringValue(string(resp.Configuration.Authorization.AuthType))
	}
	r.Configuration.ReplicationStartDate = types.StringValue(resp.Configuration.ReplicationStartDate.Format(time.RFC3339))
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourcePipedriveResourceModel) RefreshFromCreateResponse(resp *shared.SourcePipedriveGetResponse) {
	r.RefreshFromGetResponse(resp)
}
