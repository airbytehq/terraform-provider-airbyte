// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceAirtableResourceModel) ToCreateSDKType() *shared.SourceAirtableCreateRequest {
	var credentials *shared.SourceAirtableAuthentication
	if r.Configuration.Credentials != nil {
		var sourceAirtableAuthenticationOAuth20 *shared.SourceAirtableAuthenticationOAuth20
		if r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.RefreshToken.ValueString()
			tokenExpiryDate := new(time.Time)
			if !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsNull() {
				*tokenExpiryDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.ValueString())
			} else {
				tokenExpiryDate = nil
			}
			sourceAirtableAuthenticationOAuth20 = &shared.SourceAirtableAuthenticationOAuth20{
				AccessToken:     accessToken,
				ClientID:        clientID,
				ClientSecret:    clientSecret,
				RefreshToken:    refreshToken,
				TokenExpiryDate: tokenExpiryDate,
			}
		}
		if sourceAirtableAuthenticationOAuth20 != nil {
			credentials = &shared.SourceAirtableAuthentication{
				SourceAirtableAuthenticationOAuth20: sourceAirtableAuthenticationOAuth20,
			}
		}
		var sourceAirtableAuthenticationPersonalAccessToken *shared.SourceAirtableAuthenticationPersonalAccessToken
		if r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken != nil {
			apiKey := r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken.APIKey.ValueString()
			sourceAirtableAuthenticationPersonalAccessToken = &shared.SourceAirtableAuthenticationPersonalAccessToken{
				APIKey: apiKey,
			}
		}
		if sourceAirtableAuthenticationPersonalAccessToken != nil {
			credentials = &shared.SourceAirtableAuthentication{
				SourceAirtableAuthenticationPersonalAccessToken: sourceAirtableAuthenticationPersonalAccessToken,
			}
		}
	}
	configuration := shared.SourceAirtable{
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAirtableCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAirtableResourceModel) ToGetSDKType() *shared.SourceAirtableCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAirtableResourceModel) ToUpdateSDKType() *shared.SourceAirtablePutRequest {
	var credentials *shared.SourceAirtableUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceAirtableUpdateAuthenticationOAuth20 *shared.SourceAirtableUpdateAuthenticationOAuth20
		if r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.RefreshToken.ValueString()
			tokenExpiryDate := new(time.Time)
			if !r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.TokenExpiryDate.IsUnknown() && !r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.TokenExpiryDate.IsNull() {
				*tokenExpiryDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceAirtableUpdateAuthenticationOAuth20.TokenExpiryDate.ValueString())
			} else {
				tokenExpiryDate = nil
			}
			sourceAirtableUpdateAuthenticationOAuth20 = &shared.SourceAirtableUpdateAuthenticationOAuth20{
				AccessToken:     accessToken,
				ClientID:        clientID,
				ClientSecret:    clientSecret,
				RefreshToken:    refreshToken,
				TokenExpiryDate: tokenExpiryDate,
			}
		}
		if sourceAirtableUpdateAuthenticationOAuth20 != nil {
			credentials = &shared.SourceAirtableUpdateAuthentication{
				SourceAirtableUpdateAuthenticationOAuth20: sourceAirtableUpdateAuthenticationOAuth20,
			}
		}
		var sourceAirtableUpdateAuthenticationPersonalAccessToken *shared.SourceAirtableUpdateAuthenticationPersonalAccessToken
		if r.Configuration.Credentials.SourceAirtableUpdateAuthenticationPersonalAccessToken != nil {
			apiKey := r.Configuration.Credentials.SourceAirtableUpdateAuthenticationPersonalAccessToken.APIKey.ValueString()
			sourceAirtableUpdateAuthenticationPersonalAccessToken = &shared.SourceAirtableUpdateAuthenticationPersonalAccessToken{
				APIKey: apiKey,
			}
		}
		if sourceAirtableUpdateAuthenticationPersonalAccessToken != nil {
			credentials = &shared.SourceAirtableUpdateAuthentication{
				SourceAirtableUpdateAuthenticationPersonalAccessToken: sourceAirtableUpdateAuthenticationPersonalAccessToken,
			}
		}
	}
	configuration := shared.SourceAirtableUpdate{
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAirtablePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAirtableResourceModel) ToDeleteSDKType() *shared.SourceAirtableCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAirtableResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAirtableResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
