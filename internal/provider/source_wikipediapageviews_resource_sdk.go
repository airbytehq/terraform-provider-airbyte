// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceWikipediaPageviewsResourceModel) ToCreateSDKType() *shared.SourceWikipediaPageviewsCreateRequest {
	access := r.Configuration.Access.ValueString()
	agent := r.Configuration.Agent.ValueString()
	article := r.Configuration.Article.ValueString()
	country := r.Configuration.Country.ValueString()
	end := r.Configuration.End.ValueString()
	project := r.Configuration.Project.ValueString()
	sourceType := shared.SourceWikipediaPageviewsWikipediaPageviews(r.Configuration.SourceType.ValueString())
	start := r.Configuration.Start.ValueString()
	configuration := shared.SourceWikipediaPageviews{
		Access:     access,
		Agent:      agent,
		Article:    article,
		Country:    country,
		End:        end,
		Project:    project,
		SourceType: sourceType,
		Start:      start,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceWikipediaPageviewsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceWikipediaPageviewsResourceModel) ToGetSDKType() *shared.SourceWikipediaPageviewsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceWikipediaPageviewsResourceModel) ToUpdateSDKType() *shared.SourceWikipediaPageviewsPutRequest {
	access := r.Configuration.Access.ValueString()
	agent := r.Configuration.Agent.ValueString()
	article := r.Configuration.Article.ValueString()
	country := r.Configuration.Country.ValueString()
	end := r.Configuration.End.ValueString()
	project := r.Configuration.Project.ValueString()
	start := r.Configuration.Start.ValueString()
	configuration := shared.SourceWikipediaPageviewsUpdate{
		Access:  access,
		Agent:   agent,
		Article: article,
		Country: country,
		End:     end,
		Project: project,
		Start:   start,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceWikipediaPageviewsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceWikipediaPageviewsResourceModel) ToDeleteSDKType() *shared.SourceWikipediaPageviewsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceWikipediaPageviewsResourceModel) RefreshFromGetResponse(resp *shared.SourceWikipediaPageviewsGetResponse) {
	r.Configuration.Access = types.StringValue(resp.Configuration.Access)
	r.Configuration.Agent = types.StringValue(resp.Configuration.Agent)
	r.Configuration.Article = types.StringValue(resp.Configuration.Article)
	r.Configuration.Country = types.StringValue(resp.Configuration.Country)
	r.Configuration.End = types.StringValue(resp.Configuration.End)
	r.Configuration.Project = types.StringValue(resp.Configuration.Project)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.Start = types.StringValue(resp.Configuration.Start)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceWikipediaPageviewsResourceModel) RefreshFromCreateResponse(resp *shared.SourceWikipediaPageviewsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
