// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationMilvusResourceModel) ToCreateSDKType() *shared.DestinationMilvusCreateRequest {
	destinationType := shared.DestinationMilvusMilvus(r.Configuration.DestinationType.ValueString())
	var embedding shared.DestinationMilvusEmbedding
	var destinationMilvusEmbeddingOpenAI *shared.DestinationMilvusEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationMilvusEmbeddingOpenAI != nil {
		mode := new(shared.DestinationMilvusEmbeddingOpenAIMode)
		if !r.Configuration.Embedding.DestinationMilvusEmbeddingOpenAI.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusEmbeddingOpenAI.Mode.IsNull() {
			*mode = shared.DestinationMilvusEmbeddingOpenAIMode(r.Configuration.Embedding.DestinationMilvusEmbeddingOpenAI.Mode.ValueString())
		} else {
			mode = nil
		}
		openaiKey := r.Configuration.Embedding.DestinationMilvusEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationMilvusEmbeddingOpenAI = &shared.DestinationMilvusEmbeddingOpenAI{
			Mode:      mode,
			OpenaiKey: openaiKey,
		}
	}
	if destinationMilvusEmbeddingOpenAI != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusEmbeddingOpenAI: destinationMilvusEmbeddingOpenAI,
		}
	}
	var destinationMilvusEmbeddingCohere *shared.DestinationMilvusEmbeddingCohere
	if r.Configuration.Embedding.DestinationMilvusEmbeddingCohere != nil {
		cohereKey := r.Configuration.Embedding.DestinationMilvusEmbeddingCohere.CohereKey.ValueString()
		mode1 := new(shared.DestinationMilvusEmbeddingCohereMode)
		if !r.Configuration.Embedding.DestinationMilvusEmbeddingCohere.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusEmbeddingCohere.Mode.IsNull() {
			*mode1 = shared.DestinationMilvusEmbeddingCohereMode(r.Configuration.Embedding.DestinationMilvusEmbeddingCohere.Mode.ValueString())
		} else {
			mode1 = nil
		}
		destinationMilvusEmbeddingCohere = &shared.DestinationMilvusEmbeddingCohere{
			CohereKey: cohereKey,
			Mode:      mode1,
		}
	}
	if destinationMilvusEmbeddingCohere != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusEmbeddingCohere: destinationMilvusEmbeddingCohere,
		}
	}
	var destinationMilvusEmbeddingFake *shared.DestinationMilvusEmbeddingFake
	if r.Configuration.Embedding.DestinationMilvusEmbeddingFake != nil {
		mode2 := new(shared.DestinationMilvusEmbeddingFakeMode)
		if !r.Configuration.Embedding.DestinationMilvusEmbeddingFake.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusEmbeddingFake.Mode.IsNull() {
			*mode2 = shared.DestinationMilvusEmbeddingFakeMode(r.Configuration.Embedding.DestinationMilvusEmbeddingFake.Mode.ValueString())
		} else {
			mode2 = nil
		}
		destinationMilvusEmbeddingFake = &shared.DestinationMilvusEmbeddingFake{
			Mode: mode2,
		}
	}
	if destinationMilvusEmbeddingFake != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusEmbeddingFake: destinationMilvusEmbeddingFake,
		}
	}
	var destinationMilvusEmbeddingFromField *shared.DestinationMilvusEmbeddingFromField
	if r.Configuration.Embedding.DestinationMilvusEmbeddingFromField != nil {
		dimensions := r.Configuration.Embedding.DestinationMilvusEmbeddingFromField.Dimensions.ValueInt64()
		fieldName := r.Configuration.Embedding.DestinationMilvusEmbeddingFromField.FieldName.ValueString()
		mode3 := new(shared.DestinationMilvusEmbeddingFromFieldMode)
		if !r.Configuration.Embedding.DestinationMilvusEmbeddingFromField.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusEmbeddingFromField.Mode.IsNull() {
			*mode3 = shared.DestinationMilvusEmbeddingFromFieldMode(r.Configuration.Embedding.DestinationMilvusEmbeddingFromField.Mode.ValueString())
		} else {
			mode3 = nil
		}
		destinationMilvusEmbeddingFromField = &shared.DestinationMilvusEmbeddingFromField{
			Dimensions: dimensions,
			FieldName:  fieldName,
			Mode:       mode3,
		}
	}
	if destinationMilvusEmbeddingFromField != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusEmbeddingFromField: destinationMilvusEmbeddingFromField,
		}
	}
	var auth shared.DestinationMilvusIndexingAuthentication
	var destinationMilvusIndexingAuthenticationAPIToken *shared.DestinationMilvusIndexingAuthenticationAPIToken
	if r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationAPIToken != nil {
		mode4 := new(shared.DestinationMilvusIndexingAuthenticationAPITokenMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationAPIToken.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationAPIToken.Mode.IsNull() {
			*mode4 = shared.DestinationMilvusIndexingAuthenticationAPITokenMode(r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationAPIToken.Mode.ValueString())
		} else {
			mode4 = nil
		}
		token := r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationAPIToken.Token.ValueString()
		destinationMilvusIndexingAuthenticationAPIToken = &shared.DestinationMilvusIndexingAuthenticationAPIToken{
			Mode:  mode4,
			Token: token,
		}
	}
	if destinationMilvusIndexingAuthenticationAPIToken != nil {
		auth = shared.DestinationMilvusIndexingAuthentication{
			DestinationMilvusIndexingAuthenticationAPIToken: destinationMilvusIndexingAuthenticationAPIToken,
		}
	}
	var destinationMilvusIndexingAuthenticationUsernamePassword *shared.DestinationMilvusIndexingAuthenticationUsernamePassword
	if r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword != nil {
		mode5 := new(shared.DestinationMilvusIndexingAuthenticationUsernamePasswordMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword.Mode.IsNull() {
			*mode5 = shared.DestinationMilvusIndexingAuthenticationUsernamePasswordMode(r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword.Mode.ValueString())
		} else {
			mode5 = nil
		}
		password := r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword.Password.ValueString()
		username := r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationUsernamePassword.Username.ValueString()
		destinationMilvusIndexingAuthenticationUsernamePassword = &shared.DestinationMilvusIndexingAuthenticationUsernamePassword{
			Mode:     mode5,
			Password: password,
			Username: username,
		}
	}
	if destinationMilvusIndexingAuthenticationUsernamePassword != nil {
		auth = shared.DestinationMilvusIndexingAuthentication{
			DestinationMilvusIndexingAuthenticationUsernamePassword: destinationMilvusIndexingAuthenticationUsernamePassword,
		}
	}
	var destinationMilvusIndexingAuthenticationNoAuth *shared.DestinationMilvusIndexingAuthenticationNoAuth
	if r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationNoAuth != nil {
		mode6 := new(shared.DestinationMilvusIndexingAuthenticationNoAuthMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationNoAuth.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationNoAuth.Mode.IsNull() {
			*mode6 = shared.DestinationMilvusIndexingAuthenticationNoAuthMode(r.Configuration.Indexing.Auth.DestinationMilvusIndexingAuthenticationNoAuth.Mode.ValueString())
		} else {
			mode6 = nil
		}
		destinationMilvusIndexingAuthenticationNoAuth = &shared.DestinationMilvusIndexingAuthenticationNoAuth{
			Mode: mode6,
		}
	}
	if destinationMilvusIndexingAuthenticationNoAuth != nil {
		auth = shared.DestinationMilvusIndexingAuthentication{
			DestinationMilvusIndexingAuthenticationNoAuth: destinationMilvusIndexingAuthenticationNoAuth,
		}
	}
	collection := r.Configuration.Indexing.Collection.ValueString()
	db := new(string)
	if !r.Configuration.Indexing.Db.IsUnknown() && !r.Configuration.Indexing.Db.IsNull() {
		*db = r.Configuration.Indexing.Db.ValueString()
	} else {
		db = nil
	}
	host := r.Configuration.Indexing.Host.ValueString()
	textField := new(string)
	if !r.Configuration.Indexing.TextField.IsUnknown() && !r.Configuration.Indexing.TextField.IsNull() {
		*textField = r.Configuration.Indexing.TextField.ValueString()
	} else {
		textField = nil
	}
	vectorField := new(string)
	if !r.Configuration.Indexing.VectorField.IsUnknown() && !r.Configuration.Indexing.VectorField.IsNull() {
		*vectorField = r.Configuration.Indexing.VectorField.ValueString()
	} else {
		vectorField = nil
	}
	indexing := shared.DestinationMilvusIndexing{
		Auth:        auth,
		Collection:  collection,
		Db:          db,
		Host:        host,
		TextField:   textField,
		VectorField: vectorField,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationMilvusProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationMilvus{
		DestinationType: destinationType,
		Embedding:       embedding,
		Indexing:        indexing,
		Processing:      processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationMilvusCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationMilvusResourceModel) ToGetSDKType() *shared.DestinationMilvusCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationMilvusResourceModel) ToUpdateSDKType() *shared.DestinationMilvusPutRequest {
	var embedding shared.DestinationMilvusUpdateEmbedding
	var destinationMilvusUpdateEmbeddingOpenAI *shared.DestinationMilvusUpdateEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingOpenAI != nil {
		mode := new(shared.DestinationMilvusUpdateEmbeddingOpenAIMode)
		if !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingOpenAI.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingOpenAI.Mode.IsNull() {
			*mode = shared.DestinationMilvusUpdateEmbeddingOpenAIMode(r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingOpenAI.Mode.ValueString())
		} else {
			mode = nil
		}
		openaiKey := r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationMilvusUpdateEmbeddingOpenAI = &shared.DestinationMilvusUpdateEmbeddingOpenAI{
			Mode:      mode,
			OpenaiKey: openaiKey,
		}
	}
	if destinationMilvusUpdateEmbeddingOpenAI != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateEmbeddingOpenAI: destinationMilvusUpdateEmbeddingOpenAI,
		}
	}
	var destinationMilvusUpdateEmbeddingCohere *shared.DestinationMilvusUpdateEmbeddingCohere
	if r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingCohere != nil {
		cohereKey := r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingCohere.CohereKey.ValueString()
		mode1 := new(shared.DestinationMilvusUpdateEmbeddingCohereMode)
		if !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingCohere.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingCohere.Mode.IsNull() {
			*mode1 = shared.DestinationMilvusUpdateEmbeddingCohereMode(r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingCohere.Mode.ValueString())
		} else {
			mode1 = nil
		}
		destinationMilvusUpdateEmbeddingCohere = &shared.DestinationMilvusUpdateEmbeddingCohere{
			CohereKey: cohereKey,
			Mode:      mode1,
		}
	}
	if destinationMilvusUpdateEmbeddingCohere != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateEmbeddingCohere: destinationMilvusUpdateEmbeddingCohere,
		}
	}
	var destinationMilvusUpdateEmbeddingFake *shared.DestinationMilvusUpdateEmbeddingFake
	if r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFake != nil {
		mode2 := new(shared.DestinationMilvusUpdateEmbeddingFakeMode)
		if !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFake.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFake.Mode.IsNull() {
			*mode2 = shared.DestinationMilvusUpdateEmbeddingFakeMode(r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFake.Mode.ValueString())
		} else {
			mode2 = nil
		}
		destinationMilvusUpdateEmbeddingFake = &shared.DestinationMilvusUpdateEmbeddingFake{
			Mode: mode2,
		}
	}
	if destinationMilvusUpdateEmbeddingFake != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateEmbeddingFake: destinationMilvusUpdateEmbeddingFake,
		}
	}
	var destinationMilvusUpdateEmbeddingFromField *shared.DestinationMilvusUpdateEmbeddingFromField
	if r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField != nil {
		dimensions := r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField.Dimensions.ValueInt64()
		fieldName := r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField.FieldName.ValueString()
		mode3 := new(shared.DestinationMilvusUpdateEmbeddingFromFieldMode)
		if !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField.Mode.IsUnknown() && !r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField.Mode.IsNull() {
			*mode3 = shared.DestinationMilvusUpdateEmbeddingFromFieldMode(r.Configuration.Embedding.DestinationMilvusUpdateEmbeddingFromField.Mode.ValueString())
		} else {
			mode3 = nil
		}
		destinationMilvusUpdateEmbeddingFromField = &shared.DestinationMilvusUpdateEmbeddingFromField{
			Dimensions: dimensions,
			FieldName:  fieldName,
			Mode:       mode3,
		}
	}
	if destinationMilvusUpdateEmbeddingFromField != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateEmbeddingFromField: destinationMilvusUpdateEmbeddingFromField,
		}
	}
	var auth shared.DestinationMilvusUpdateIndexingAuthentication
	var destinationMilvusUpdateIndexingAuthenticationAPIToken *shared.DestinationMilvusUpdateIndexingAuthenticationAPIToken
	if r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationAPIToken != nil {
		mode4 := new(shared.DestinationMilvusUpdateIndexingAuthenticationAPITokenMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationAPIToken.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationAPIToken.Mode.IsNull() {
			*mode4 = shared.DestinationMilvusUpdateIndexingAuthenticationAPITokenMode(r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationAPIToken.Mode.ValueString())
		} else {
			mode4 = nil
		}
		token := r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationAPIToken.Token.ValueString()
		destinationMilvusUpdateIndexingAuthenticationAPIToken = &shared.DestinationMilvusUpdateIndexingAuthenticationAPIToken{
			Mode:  mode4,
			Token: token,
		}
	}
	if destinationMilvusUpdateIndexingAuthenticationAPIToken != nil {
		auth = shared.DestinationMilvusUpdateIndexingAuthentication{
			DestinationMilvusUpdateIndexingAuthenticationAPIToken: destinationMilvusUpdateIndexingAuthenticationAPIToken,
		}
	}
	var destinationMilvusUpdateIndexingAuthenticationUsernamePassword *shared.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword
	if r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword != nil {
		mode5 := new(shared.DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword.Mode.IsNull() {
			*mode5 = shared.DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode(r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword.Mode.ValueString())
		} else {
			mode5 = nil
		}
		password := r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword.Password.ValueString()
		username := r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword.Username.ValueString()
		destinationMilvusUpdateIndexingAuthenticationUsernamePassword = &shared.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword{
			Mode:     mode5,
			Password: password,
			Username: username,
		}
	}
	if destinationMilvusUpdateIndexingAuthenticationUsernamePassword != nil {
		auth = shared.DestinationMilvusUpdateIndexingAuthentication{
			DestinationMilvusUpdateIndexingAuthenticationUsernamePassword: destinationMilvusUpdateIndexingAuthenticationUsernamePassword,
		}
	}
	var destinationMilvusUpdateIndexingAuthenticationNoAuth *shared.DestinationMilvusUpdateIndexingAuthenticationNoAuth
	if r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationNoAuth != nil {
		mode6 := new(shared.DestinationMilvusUpdateIndexingAuthenticationNoAuthMode)
		if !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationNoAuth.Mode.IsUnknown() && !r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationNoAuth.Mode.IsNull() {
			*mode6 = shared.DestinationMilvusUpdateIndexingAuthenticationNoAuthMode(r.Configuration.Indexing.Auth.DestinationMilvusUpdateIndexingAuthenticationNoAuth.Mode.ValueString())
		} else {
			mode6 = nil
		}
		destinationMilvusUpdateIndexingAuthenticationNoAuth = &shared.DestinationMilvusUpdateIndexingAuthenticationNoAuth{
			Mode: mode6,
		}
	}
	if destinationMilvusUpdateIndexingAuthenticationNoAuth != nil {
		auth = shared.DestinationMilvusUpdateIndexingAuthentication{
			DestinationMilvusUpdateIndexingAuthenticationNoAuth: destinationMilvusUpdateIndexingAuthenticationNoAuth,
		}
	}
	collection := r.Configuration.Indexing.Collection.ValueString()
	db := new(string)
	if !r.Configuration.Indexing.Db.IsUnknown() && !r.Configuration.Indexing.Db.IsNull() {
		*db = r.Configuration.Indexing.Db.ValueString()
	} else {
		db = nil
	}
	host := r.Configuration.Indexing.Host.ValueString()
	textField := new(string)
	if !r.Configuration.Indexing.TextField.IsUnknown() && !r.Configuration.Indexing.TextField.IsNull() {
		*textField = r.Configuration.Indexing.TextField.ValueString()
	} else {
		textField = nil
	}
	vectorField := new(string)
	if !r.Configuration.Indexing.VectorField.IsUnknown() && !r.Configuration.Indexing.VectorField.IsNull() {
		*vectorField = r.Configuration.Indexing.VectorField.ValueString()
	} else {
		vectorField = nil
	}
	indexing := shared.DestinationMilvusUpdateIndexing{
		Auth:        auth,
		Collection:  collection,
		Db:          db,
		Host:        host,
		TextField:   textField,
		VectorField: vectorField,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationMilvusUpdateProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationMilvusUpdate{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationMilvusPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationMilvusResourceModel) ToDeleteSDKType() *shared.DestinationMilvusCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationMilvusResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationMilvusResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
