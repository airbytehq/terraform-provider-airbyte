// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationMilvusResourceModel) ToCreateSDKType() *shared.DestinationMilvusCreateRequest {
	var embedding shared.DestinationMilvusEmbedding
	var destinationMilvusOpenAI *shared.DestinationMilvusOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationMilvusOpenAI = &shared.DestinationMilvusOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationMilvusOpenAI != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusOpenAI: destinationMilvusOpenAI,
		}
	}
	var destinationMilvusCohere *shared.DestinationMilvusCohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		destinationMilvusCohere = &shared.DestinationMilvusCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationMilvusCohere != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusCohere: destinationMilvusCohere,
		}
	}
	var destinationMilvusFake *shared.DestinationMilvusFake
	if r.Configuration.Embedding.Fake != nil {
		destinationMilvusFake = &shared.DestinationMilvusFake{}
	}
	if destinationMilvusFake != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusFake: destinationMilvusFake,
		}
	}
	var destinationMilvusFromField *shared.DestinationMilvusFromField
	if r.Configuration.Embedding.FromField != nil {
		dimensions := r.Configuration.Embedding.FromField.Dimensions.ValueInt64()
		fieldName := r.Configuration.Embedding.FromField.FieldName.ValueString()
		destinationMilvusFromField = &shared.DestinationMilvusFromField{
			Dimensions: dimensions,
			FieldName:  fieldName,
		}
	}
	if destinationMilvusFromField != nil {
		embedding = shared.DestinationMilvusEmbedding{
			DestinationMilvusFromField: destinationMilvusFromField,
		}
	}
	var auth shared.DestinationMilvusAuthentication
	var destinationMilvusAPIToken *shared.DestinationMilvusAPIToken
	if r.Configuration.Indexing.Auth.APIToken != nil {
		token := r.Configuration.Indexing.Auth.APIToken.Token.ValueString()
		destinationMilvusAPIToken = &shared.DestinationMilvusAPIToken{
			Token: token,
		}
	}
	if destinationMilvusAPIToken != nil {
		auth = shared.DestinationMilvusAuthentication{
			DestinationMilvusAPIToken: destinationMilvusAPIToken,
		}
	}
	var destinationMilvusUsernamePassword *shared.DestinationMilvusUsernamePassword
	if r.Configuration.Indexing.Auth.UsernamePassword != nil {
		password := r.Configuration.Indexing.Auth.UsernamePassword.Password.ValueString()
		username := r.Configuration.Indexing.Auth.UsernamePassword.Username.ValueString()
		destinationMilvusUsernamePassword = &shared.DestinationMilvusUsernamePassword{
			Password: password,
			Username: username,
		}
	}
	if destinationMilvusUsernamePassword != nil {
		auth = shared.DestinationMilvusAuthentication{
			DestinationMilvusUsernamePassword: destinationMilvusUsernamePassword,
		}
	}
	var destinationMilvusNoAuth *shared.DestinationMilvusNoAuth
	if r.Configuration.Indexing.Auth.NoAuth != nil {
		destinationMilvusNoAuth = &shared.DestinationMilvusNoAuth{}
	}
	if destinationMilvusNoAuth != nil {
		auth = shared.DestinationMilvusAuthentication{
			DestinationMilvusNoAuth: destinationMilvusNoAuth,
		}
	}
	collection := r.Configuration.Indexing.Collection.ValueString()
	db := new(string)
	if !r.Configuration.Indexing.Db.IsUnknown() && !r.Configuration.Indexing.Db.IsNull() {
		*db = r.Configuration.Indexing.Db.ValueString()
	} else {
		db = nil
	}
	host := r.Configuration.Indexing.Host.ValueString()
	textField := new(string)
	if !r.Configuration.Indexing.TextField.IsUnknown() && !r.Configuration.Indexing.TextField.IsNull() {
		*textField = r.Configuration.Indexing.TextField.ValueString()
	} else {
		textField = nil
	}
	vectorField := new(string)
	if !r.Configuration.Indexing.VectorField.IsUnknown() && !r.Configuration.Indexing.VectorField.IsNull() {
		*vectorField = r.Configuration.Indexing.VectorField.ValueString()
	} else {
		vectorField = nil
	}
	indexing := shared.DestinationMilvusIndexing{
		Auth:        auth,
		Collection:  collection,
		Db:          db,
		Host:        host,
		TextField:   textField,
		VectorField: vectorField,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationMilvusProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationMilvus{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationMilvusCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationMilvusResourceModel) ToGetSDKType() *shared.DestinationMilvusCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationMilvusResourceModel) ToUpdateSDKType() *shared.DestinationMilvusPutRequest {
	var embedding shared.DestinationMilvusUpdateEmbedding
	var destinationMilvusUpdateOpenAI *shared.DestinationMilvusUpdateOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationMilvusUpdateOpenAI = &shared.DestinationMilvusUpdateOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationMilvusUpdateOpenAI != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateOpenAI: destinationMilvusUpdateOpenAI,
		}
	}
	var cohere *shared.Cohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		cohere = &shared.Cohere{
			CohereKey: cohereKey,
		}
	}
	if cohere != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			Cohere: cohere,
		}
	}
	var destinationMilvusUpdateFake *shared.DestinationMilvusUpdateFake
	if r.Configuration.Embedding.Fake != nil {
		destinationMilvusUpdateFake = &shared.DestinationMilvusUpdateFake{}
	}
	if destinationMilvusUpdateFake != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			DestinationMilvusUpdateFake: destinationMilvusUpdateFake,
		}
	}
	var fromField *shared.FromField
	if r.Configuration.Embedding.FromField != nil {
		dimensions := r.Configuration.Embedding.FromField.Dimensions.ValueInt64()
		fieldName := r.Configuration.Embedding.FromField.FieldName.ValueString()
		fromField = &shared.FromField{
			Dimensions: dimensions,
			FieldName:  fieldName,
		}
	}
	if fromField != nil {
		embedding = shared.DestinationMilvusUpdateEmbedding{
			FromField: fromField,
		}
	}
	var auth shared.DestinationMilvusUpdateAuthentication
	var destinationMilvusUpdateAPIToken *shared.DestinationMilvusUpdateAPIToken
	if r.Configuration.Indexing.Auth.APIToken != nil {
		token := r.Configuration.Indexing.Auth.APIToken.Token.ValueString()
		destinationMilvusUpdateAPIToken = &shared.DestinationMilvusUpdateAPIToken{
			Token: token,
		}
	}
	if destinationMilvusUpdateAPIToken != nil {
		auth = shared.DestinationMilvusUpdateAuthentication{
			DestinationMilvusUpdateAPIToken: destinationMilvusUpdateAPIToken,
		}
	}
	var destinationMilvusUpdateUsernamePassword *shared.DestinationMilvusUpdateUsernamePassword
	if r.Configuration.Indexing.Auth.UsernamePassword != nil {
		password := r.Configuration.Indexing.Auth.UsernamePassword.Password.ValueString()
		username := r.Configuration.Indexing.Auth.UsernamePassword.Username.ValueString()
		destinationMilvusUpdateUsernamePassword = &shared.DestinationMilvusUpdateUsernamePassword{
			Password: password,
			Username: username,
		}
	}
	if destinationMilvusUpdateUsernamePassword != nil {
		auth = shared.DestinationMilvusUpdateAuthentication{
			DestinationMilvusUpdateUsernamePassword: destinationMilvusUpdateUsernamePassword,
		}
	}
	var noAuth *shared.NoAuth
	if r.Configuration.Indexing.Auth.NoAuth != nil {
		noAuth = &shared.NoAuth{}
	}
	if noAuth != nil {
		auth = shared.DestinationMilvusUpdateAuthentication{
			NoAuth: noAuth,
		}
	}
	collection := r.Configuration.Indexing.Collection.ValueString()
	db := new(string)
	if !r.Configuration.Indexing.Db.IsUnknown() && !r.Configuration.Indexing.Db.IsNull() {
		*db = r.Configuration.Indexing.Db.ValueString()
	} else {
		db = nil
	}
	host := r.Configuration.Indexing.Host.ValueString()
	textField := new(string)
	if !r.Configuration.Indexing.TextField.IsUnknown() && !r.Configuration.Indexing.TextField.IsNull() {
		*textField = r.Configuration.Indexing.TextField.ValueString()
	} else {
		textField = nil
	}
	vectorField := new(string)
	if !r.Configuration.Indexing.VectorField.IsUnknown() && !r.Configuration.Indexing.VectorField.IsNull() {
		*vectorField = r.Configuration.Indexing.VectorField.ValueString()
	} else {
		vectorField = nil
	}
	indexing := shared.DestinationMilvusUpdateIndexing{
		Auth:        auth,
		Collection:  collection,
		Db:          db,
		Host:        host,
		TextField:   textField,
		VectorField: vectorField,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationMilvusUpdateProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationMilvusUpdate{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationMilvusPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationMilvusResourceModel) ToDeleteSDKType() *shared.DestinationMilvusCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationMilvusResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationMilvusResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
