// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceLinkedinAdsResourceModel) ToSharedSourceLinkedinAdsCreateRequest() *shared.SourceLinkedinAdsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accountIds []int64 = []int64{}
	for _, accountIdsItem := range r.Configuration.AccountIds {
		accountIds = append(accountIds, accountIdsItem.ValueInt64())
	}
	var adAnalyticsReports []shared.AdAnalyticsReportConfiguration = []shared.AdAnalyticsReportConfiguration{}
	for _, adAnalyticsReportsItem := range r.Configuration.AdAnalyticsReports {
		var name1 string
		name1 = adAnalyticsReportsItem.Name.ValueString()

		pivotBy := shared.PivotCategory(adAnalyticsReportsItem.PivotBy.ValueString())
		timeGranularity := shared.TimeGranularity(adAnalyticsReportsItem.TimeGranularity.ValueString())
		adAnalyticsReports = append(adAnalyticsReports, shared.AdAnalyticsReportConfiguration{
			Name:            name1,
			PivotBy:         pivotBy,
			TimeGranularity: timeGranularity,
		})
	}
	var credentials *shared.SourceLinkedinAdsAuthentication
	if r.Configuration.Credentials != nil {
		var sourceLinkedinAdsOAuth20 *shared.SourceLinkedinAdsOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

			sourceLinkedinAdsOAuth20 = &shared.SourceLinkedinAdsOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceLinkedinAdsOAuth20 != nil {
			credentials = &shared.SourceLinkedinAdsAuthentication{
				SourceLinkedinAdsOAuth20: sourceLinkedinAdsOAuth20,
			}
		}
		var sourceLinkedinAdsAccessToken *shared.SourceLinkedinAdsAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.AccessToken.AccessToken.ValueString()

			sourceLinkedinAdsAccessToken = &shared.SourceLinkedinAdsAccessToken{
				AccessToken: accessToken,
			}
		}
		if sourceLinkedinAdsAccessToken != nil {
			credentials = &shared.SourceLinkedinAdsAuthentication{
				SourceLinkedinAdsAccessToken: sourceLinkedinAdsAccessToken,
			}
		}
	}
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceLinkedinAds{
		AccountIds:         accountIds,
		AdAnalyticsReports: adAnalyticsReports,
		Credentials:        credentials,
		LookbackWindow:     lookbackWindow,
		StartDate:          startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceLinkedinAdsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceLinkedinAdsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceLinkedinAdsResourceModel) ToSharedSourceLinkedinAdsPutRequest() *shared.SourceLinkedinAdsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var accountIds []int64 = []int64{}
	for _, accountIdsItem := range r.Configuration.AccountIds {
		accountIds = append(accountIds, accountIdsItem.ValueInt64())
	}
	var adAnalyticsReports []shared.SourceLinkedinAdsUpdateAdAnalyticsReportConfiguration = []shared.SourceLinkedinAdsUpdateAdAnalyticsReportConfiguration{}
	for _, adAnalyticsReportsItem := range r.Configuration.AdAnalyticsReports {
		var name1 string
		name1 = adAnalyticsReportsItem.Name.ValueString()

		pivotBy := shared.SourceLinkedinAdsUpdatePivotCategory(adAnalyticsReportsItem.PivotBy.ValueString())
		timeGranularity := shared.SourceLinkedinAdsUpdateTimeGranularity(adAnalyticsReportsItem.TimeGranularity.ValueString())
		adAnalyticsReports = append(adAnalyticsReports, shared.SourceLinkedinAdsUpdateAdAnalyticsReportConfiguration{
			Name:            name1,
			PivotBy:         pivotBy,
			TimeGranularity: timeGranularity,
		})
	}
	var credentials *shared.SourceLinkedinAdsUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceLinkedinAdsUpdateOAuth20 *shared.SourceLinkedinAdsUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var clientID string
			clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

			var clientSecret string
			clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

			var refreshToken string
			refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

			sourceLinkedinAdsUpdateOAuth20 = &shared.SourceLinkedinAdsUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceLinkedinAdsUpdateOAuth20 != nil {
			credentials = &shared.SourceLinkedinAdsUpdateAuthentication{
				SourceLinkedinAdsUpdateOAuth20: sourceLinkedinAdsUpdateOAuth20,
			}
		}
		var sourceLinkedinAdsUpdateAccessToken *shared.SourceLinkedinAdsUpdateAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.AccessToken.AccessToken.ValueString()

			sourceLinkedinAdsUpdateAccessToken = &shared.SourceLinkedinAdsUpdateAccessToken{
				AccessToken: accessToken,
			}
		}
		if sourceLinkedinAdsUpdateAccessToken != nil {
			credentials = &shared.SourceLinkedinAdsUpdateAuthentication{
				SourceLinkedinAdsUpdateAccessToken: sourceLinkedinAdsUpdateAccessToken,
			}
		}
	}
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceLinkedinAdsUpdate{
		AccountIds:         accountIds,
		AdAnalyticsReports: adAnalyticsReports,
		Credentials:        credentials,
		LookbackWindow:     lookbackWindow,
		StartDate:          startDate,
	}
	out := shared.SourceLinkedinAdsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
