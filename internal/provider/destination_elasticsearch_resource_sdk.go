// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationElasticsearchResourceModel) ToSharedDestinationElasticsearchCreateRequest() *shared.DestinationElasticsearchCreateRequest {
	var authenticationMethod *shared.DestinationElasticsearchAuthenticationMethod
	if r.Configuration.AuthenticationMethod != nil {
		var destinationElasticsearchNone *shared.DestinationElasticsearchNone
		if r.Configuration.AuthenticationMethod.None != nil {
			destinationElasticsearchNone = &shared.DestinationElasticsearchNone{}
		}
		if destinationElasticsearchNone != nil {
			authenticationMethod = &shared.DestinationElasticsearchAuthenticationMethod{
				DestinationElasticsearchNone: destinationElasticsearchNone,
			}
		}
		var destinationElasticsearchAPIKeySecret *shared.DestinationElasticsearchAPIKeySecret
		if r.Configuration.AuthenticationMethod.APIKeySecret != nil {
			apiKeyID := r.Configuration.AuthenticationMethod.APIKeySecret.APIKeyID.ValueString()
			apiKeySecret := r.Configuration.AuthenticationMethod.APIKeySecret.APIKeySecret.ValueString()
			destinationElasticsearchAPIKeySecret = &shared.DestinationElasticsearchAPIKeySecret{
				APIKeyID:     apiKeyID,
				APIKeySecret: apiKeySecret,
			}
		}
		if destinationElasticsearchAPIKeySecret != nil {
			authenticationMethod = &shared.DestinationElasticsearchAuthenticationMethod{
				DestinationElasticsearchAPIKeySecret: destinationElasticsearchAPIKeySecret,
			}
		}
		var destinationElasticsearchUsernamePassword *shared.DestinationElasticsearchUsernamePassword
		if r.Configuration.AuthenticationMethod.UsernamePassword != nil {
			password := r.Configuration.AuthenticationMethod.UsernamePassword.Password.ValueString()
			username := r.Configuration.AuthenticationMethod.UsernamePassword.Username.ValueString()
			destinationElasticsearchUsernamePassword = &shared.DestinationElasticsearchUsernamePassword{
				Password: password,
				Username: username,
			}
		}
		if destinationElasticsearchUsernamePassword != nil {
			authenticationMethod = &shared.DestinationElasticsearchAuthenticationMethod{
				DestinationElasticsearchUsernamePassword: destinationElasticsearchUsernamePassword,
			}
		}
	}
	caCertificate := new(string)
	if !r.Configuration.CaCertificate.IsUnknown() && !r.Configuration.CaCertificate.IsNull() {
		*caCertificate = r.Configuration.CaCertificate.ValueString()
	} else {
		caCertificate = nil
	}
	endpoint := r.Configuration.Endpoint.ValueString()
	var tunnelMethod *shared.DestinationElasticsearchSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationElasticsearchNoTunnel *shared.DestinationElasticsearchNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationElasticsearchNoTunnel = &shared.DestinationElasticsearchNoTunnel{}
		}
		if destinationElasticsearchNoTunnel != nil {
			tunnelMethod = &shared.DestinationElasticsearchSSHTunnelMethod{
				DestinationElasticsearchNoTunnel: destinationElasticsearchNoTunnel,
			}
		}
		var destinationElasticsearchSSHKeyAuthentication *shared.DestinationElasticsearchSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationElasticsearchSSHKeyAuthentication = &shared.DestinationElasticsearchSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationElasticsearchSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationElasticsearchSSHTunnelMethod{
				DestinationElasticsearchSSHKeyAuthentication: destinationElasticsearchSSHKeyAuthentication,
			}
		}
		var destinationElasticsearchPasswordAuthentication *shared.DestinationElasticsearchPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationElasticsearchPasswordAuthentication = &shared.DestinationElasticsearchPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationElasticsearchPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationElasticsearchSSHTunnelMethod{
				DestinationElasticsearchPasswordAuthentication: destinationElasticsearchPasswordAuthentication,
			}
		}
	}
	upsert := new(bool)
	if !r.Configuration.Upsert.IsUnknown() && !r.Configuration.Upsert.IsNull() {
		*upsert = r.Configuration.Upsert.ValueBool()
	} else {
		upsert = nil
	}
	configuration := shared.DestinationElasticsearch{
		AuthenticationMethod: authenticationMethod,
		CaCertificate:        caCertificate,
		Endpoint:             endpoint,
		TunnelMethod:         tunnelMethod,
		Upsert:               upsert,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationElasticsearchCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationElasticsearchResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationElasticsearchResourceModel) ToSharedDestinationElasticsearchPutRequest() *shared.DestinationElasticsearchPutRequest {
	var authenticationMethod *shared.AuthenticationMethod
	if r.Configuration.AuthenticationMethod != nil {
		var none *shared.None
		if r.Configuration.AuthenticationMethod.None != nil {
			none = &shared.None{}
		}
		if none != nil {
			authenticationMethod = &shared.AuthenticationMethod{
				None: none,
			}
		}
		var apiKeySecret *shared.APIKeySecret
		if r.Configuration.AuthenticationMethod.APIKeySecret != nil {
			apiKeyID := r.Configuration.AuthenticationMethod.APIKeySecret.APIKeyID.ValueString()
			apiKeySecret1 := r.Configuration.AuthenticationMethod.APIKeySecret.APIKeySecret.ValueString()
			apiKeySecret = &shared.APIKeySecret{
				APIKeyID:     apiKeyID,
				APIKeySecret: apiKeySecret1,
			}
		}
		if apiKeySecret != nil {
			authenticationMethod = &shared.AuthenticationMethod{
				APIKeySecret: apiKeySecret,
			}
		}
		var usernamePassword *shared.UsernamePassword
		if r.Configuration.AuthenticationMethod.UsernamePassword != nil {
			password := r.Configuration.AuthenticationMethod.UsernamePassword.Password.ValueString()
			username := r.Configuration.AuthenticationMethod.UsernamePassword.Username.ValueString()
			usernamePassword = &shared.UsernamePassword{
				Password: password,
				Username: username,
			}
		}
		if usernamePassword != nil {
			authenticationMethod = &shared.AuthenticationMethod{
				UsernamePassword: usernamePassword,
			}
		}
	}
	caCertificate := new(string)
	if !r.Configuration.CaCertificate.IsUnknown() && !r.Configuration.CaCertificate.IsNull() {
		*caCertificate = r.Configuration.CaCertificate.ValueString()
	} else {
		caCertificate = nil
	}
	endpoint := r.Configuration.Endpoint.ValueString()
	var tunnelMethod *shared.DestinationElasticsearchUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationElasticsearchUpdateNoTunnel *shared.DestinationElasticsearchUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationElasticsearchUpdateNoTunnel = &shared.DestinationElasticsearchUpdateNoTunnel{}
		}
		if destinationElasticsearchUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationElasticsearchUpdateSSHTunnelMethod{
				DestinationElasticsearchUpdateNoTunnel: destinationElasticsearchUpdateNoTunnel,
			}
		}
		var destinationElasticsearchUpdateSSHKeyAuthentication *shared.DestinationElasticsearchUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			destinationElasticsearchUpdateSSHKeyAuthentication = &shared.DestinationElasticsearchUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if destinationElasticsearchUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationElasticsearchUpdateSSHTunnelMethod{
				DestinationElasticsearchUpdateSSHKeyAuthentication: destinationElasticsearchUpdateSSHKeyAuthentication,
			}
		}
		var destinationElasticsearchUpdatePasswordAuthentication *shared.DestinationElasticsearchUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			destinationElasticsearchUpdatePasswordAuthentication = &shared.DestinationElasticsearchUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationElasticsearchUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationElasticsearchUpdateSSHTunnelMethod{
				DestinationElasticsearchUpdatePasswordAuthentication: destinationElasticsearchUpdatePasswordAuthentication,
			}
		}
	}
	upsert := new(bool)
	if !r.Configuration.Upsert.IsUnknown() && !r.Configuration.Upsert.IsNull() {
		*upsert = r.Configuration.Upsert.ValueBool()
	} else {
		upsert = nil
	}
	configuration := shared.DestinationElasticsearchUpdate{
		AuthenticationMethod: authenticationMethod,
		CaCertificate:        caCertificate,
		Endpoint:             endpoint,
		TunnelMethod:         tunnelMethod,
		Upsert:               upsert,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationElasticsearchPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
