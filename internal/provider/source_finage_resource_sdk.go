// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceFinageResourceModel) ToSharedSourceFinageCreateRequest() *shared.SourceFinageCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbols []interface{} = []interface{}{}
	for _, symbolsItem := range r.Configuration.Symbols {
		var symbolsTmp interface{}
		_ = json.Unmarshal([]byte(symbolsItem.ValueString()), &symbolsTmp)
		symbols = append(symbols, symbolsTmp)
	}
	techIndicatorType := new(shared.TechnicalIndicatorType)
	if !r.Configuration.TechIndicatorType.IsUnknown() && !r.Configuration.TechIndicatorType.IsNull() {
		*techIndicatorType = shared.TechnicalIndicatorType(r.Configuration.TechIndicatorType.ValueString())
	} else {
		techIndicatorType = nil
	}
	time := new(shared.TimeInterval)
	if !r.Configuration.Time.IsUnknown() && !r.Configuration.Time.IsNull() {
		*time = shared.TimeInterval(r.Configuration.Time.ValueString())
	} else {
		time = nil
	}
	period := new(string)
	if !r.Configuration.Period.IsUnknown() && !r.Configuration.Period.IsNull() {
		*period = r.Configuration.Period.ValueString()
	} else {
		period = nil
	}
	timeAggregates := new(shared.TimeAggregates)
	if !r.Configuration.TimeAggregates.IsUnknown() && !r.Configuration.TimeAggregates.IsNull() {
		*timeAggregates = shared.TimeAggregates(r.Configuration.TimeAggregates.ValueString())
	} else {
		timeAggregates = nil
	}
	timePeriod := new(shared.TimePeriod)
	if !r.Configuration.TimePeriod.IsUnknown() && !r.Configuration.TimePeriod.IsNull() {
		*timePeriod = shared.TimePeriod(r.Configuration.TimePeriod.ValueString())
	} else {
		timePeriod = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceFinage{
		APIKey:            apiKey,
		Symbols:           symbols,
		TechIndicatorType: techIndicatorType,
		Time:              time,
		Period:            period,
		TimeAggregates:    timeAggregates,
		TimePeriod:        timePeriod,
		StartDate:         startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceFinageCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceFinageResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFinageResourceModel) ToSharedSourceFinagePutRequest() *shared.SourceFinagePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbols []interface{} = []interface{}{}
	for _, symbolsItem := range r.Configuration.Symbols {
		var symbolsTmp interface{}
		_ = json.Unmarshal([]byte(symbolsItem.ValueString()), &symbolsTmp)
		symbols = append(symbols, symbolsTmp)
	}
	techIndicatorType := new(shared.SourceFinageUpdateTechnicalIndicatorType)
	if !r.Configuration.TechIndicatorType.IsUnknown() && !r.Configuration.TechIndicatorType.IsNull() {
		*techIndicatorType = shared.SourceFinageUpdateTechnicalIndicatorType(r.Configuration.TechIndicatorType.ValueString())
	} else {
		techIndicatorType = nil
	}
	time := new(shared.SourceFinageUpdateTimeInterval)
	if !r.Configuration.Time.IsUnknown() && !r.Configuration.Time.IsNull() {
		*time = shared.SourceFinageUpdateTimeInterval(r.Configuration.Time.ValueString())
	} else {
		time = nil
	}
	period := new(string)
	if !r.Configuration.Period.IsUnknown() && !r.Configuration.Period.IsNull() {
		*period = r.Configuration.Period.ValueString()
	} else {
		period = nil
	}
	timeAggregates := new(shared.SourceFinageUpdateTimeAggregates)
	if !r.Configuration.TimeAggregates.IsUnknown() && !r.Configuration.TimeAggregates.IsNull() {
		*timeAggregates = shared.SourceFinageUpdateTimeAggregates(r.Configuration.TimeAggregates.ValueString())
	} else {
		timeAggregates = nil
	}
	timePeriod := new(shared.SourceFinageUpdateTimePeriod)
	if !r.Configuration.TimePeriod.IsUnknown() && !r.Configuration.TimePeriod.IsNull() {
		*timePeriod = shared.SourceFinageUpdateTimePeriod(r.Configuration.TimePeriod.ValueString())
	} else {
		timePeriod = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceFinageUpdate{
		APIKey:            apiKey,
		Symbols:           symbols,
		TechIndicatorType: techIndicatorType,
		Time:              time,
		Period:            period,
		TimeAggregates:    timeAggregates,
		TimePeriod:        timePeriod,
		StartDate:         startDate,
	}
	out := shared.SourceFinagePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
