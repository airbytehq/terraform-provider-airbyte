// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk"
	"airbyte/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"airbyte/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SourceFileSecureDataSource{}
var _ datasource.DataSourceWithConfigure = &SourceFileSecureDataSource{}

func NewSourceFileSecureDataSource() datasource.DataSource {
	return &SourceFileSecureDataSource{}
}

// SourceFileSecureDataSource is the data source implementation.
type SourceFileSecureDataSource struct {
	client *sdk.SDK
}

// SourceFileSecureDataSourceModel describes the data model.
type SourceFileSecureDataSourceModel struct {
	Configuration SourceFileSecure `tfsdk:"configuration"`
	Name          types.String     `tfsdk:"name"`
	SecretID      types.String     `tfsdk:"secret_id"`
	SourceID      types.String     `tfsdk:"source_id"`
	WorkspaceID   types.String     `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *SourceFileSecureDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_file_secure"
}

// Schema defines the schema for the data source.
func (r *SourceFileSecureDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceFileSecure DataSource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"dataset_name": schema.StringAttribute{
						Computed:    true,
						Description: `The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).`,
					},
					"format": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"csv",
								"json",
								"jsonl",
								"excel",
								"excel_binary",
								"feather",
								"parquet",
								"yaml",
							),
						},
						MarkdownDescription: `must be one of ["csv", "json", "jsonl", "excel", "excel_binary", "feather", "parquet", "yaml"]` + "\n" +
							`The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).`,
					},
					"provider": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"source_file_secure_storage_provider_az_blob_azure_blob_storage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"sas_token": schema.StringAttribute{
										Computed:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.`,
									},
									"shared_key": schema.StringAttribute{
										Computed:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"AzBlob",
											),
										},
										Description: `must be one of ["AzBlob"]`,
									},
									"storage_account": schema.StringAttribute{
										Computed:    true,
										Description: `The globally unique name of the storage account that the desired blob sits within. See <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank">here</a> for more details.`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_gcs_google_cloud_storage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"service_account_json": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on Google Cloud, this connector would need a service account json credentials with the proper permissions as described <a href="https://cloud.google.com/iam/docs/service-accounts" target="_blank">here</a>. Please generate the credentials.json file and copy/paste its content to this field (expecting JSON formats). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"GCS",
											),
										},
										Description: `must be one of ["GCS"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_https_public_web": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HTTPS",
											),
										},
										Description: `must be one of ["HTTPS"]`,
									},
									"user_agent": schema.BoolAttribute{
										Computed:    true,
										Description: `Add User-Agent to request`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_s3_amazon_web_services": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"aws_access_key_id": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"aws_secret_access_key": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"S3",
											),
										},
										Description: `must be one of ["S3"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_scp_secure_copy_protocol": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SCP",
											),
										},
										Description: `must be one of ["SCP"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_sftp_secure_file_transfer_protocol": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SFTP",
											),
										},
										Description: `must be one of ["SFTP"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_ssh_secure_shell": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SSH",
											),
										},
										Description: `must be one of ["SSH"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_az_blob_azure_blob_storage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"sas_token": schema.StringAttribute{
										Computed:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.`,
									},
									"shared_key": schema.StringAttribute{
										Computed:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"AzBlob",
											),
										},
										Description: `must be one of ["AzBlob"]`,
									},
									"storage_account": schema.StringAttribute{
										Computed:    true,
										Description: `The globally unique name of the storage account that the desired blob sits within. See <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank">here</a> for more details.`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_gcs_google_cloud_storage": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"service_account_json": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on Google Cloud, this connector would need a service account json credentials with the proper permissions as described <a href="https://cloud.google.com/iam/docs/service-accounts" target="_blank">here</a>. Please generate the credentials.json file and copy/paste its content to this field (expecting JSON formats). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"GCS",
											),
										},
										Description: `must be one of ["GCS"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_https_public_web": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HTTPS",
											),
										},
										Description: `must be one of ["HTTPS"]`,
									},
									"user_agent": schema.BoolAttribute{
										Computed:    true,
										Description: `Add User-Agent to request`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_s3_amazon_web_services": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"aws_access_key_id": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"aws_secret_access_key": schema.StringAttribute{
										Computed:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"S3",
											),
										},
										Description: `must be one of ["S3"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_scp_secure_copy_protocol": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SCP",
											),
										},
										Description: `must be one of ["SCP"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SFTP",
											),
										},
										Description: `must be one of ["SFTP"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_ssh_secure_shell": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Computed: true,
									},
									"password": schema.StringAttribute{
										Computed: true,
									},
									"port": schema.StringAttribute{
										Computed: true,
									},
									"storage": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SSH",
											),
										},
										Description: `must be one of ["SSH"]`,
									},
									"user": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
						Description: `The storage Provider or Location of the file(s) which should be replicated.`,
					},
					"reader_options": schema.StringAttribute{
						Computed:    true,
						Description: `This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.`,
					},
					"source_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"file-secure",
							),
						},
						Description: `must be one of ["file-secure"]`,
					},
					"url": schema.StringAttribute{
						Computed:    true,
						Description: `The URL path to access the file which should be replicated.`,
					},
				},
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"secret_id": schema.StringAttribute{
				Optional:    true,
				Description: `Optional secretID obtained through the public API OAuth redirect flow.`,
			},
			"source_id": schema.StringAttribute{
				Required: true,
			},
			"workspace_id": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SourceFileSecureDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceFileSecureDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SourceFileSecureDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.GetSourceFileSecureRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.GetSourceFileSecure(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
