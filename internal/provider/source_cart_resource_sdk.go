// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceCartResourceModel) ToSharedSourceCartCreateRequest(ctx context.Context) (*shared.SourceCartCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.AuthorizationMethod
	if r.Configuration.Credentials != nil {
		var centralAPIRouter *shared.CentralAPIRouter
		if r.Configuration.Credentials.CentralAPIRouter != nil {
			var userName string
			userName = r.Configuration.Credentials.CentralAPIRouter.UserName.ValueString()

			var userSecret string
			userSecret = r.Configuration.Credentials.CentralAPIRouter.UserSecret.ValueString()

			var siteID string
			siteID = r.Configuration.Credentials.CentralAPIRouter.SiteID.ValueString()

			centralAPIRouter = &shared.CentralAPIRouter{
				UserName:   userName,
				UserSecret: userSecret,
				SiteID:     siteID,
			}
		}
		if centralAPIRouter != nil {
			credentials = &shared.AuthorizationMethod{
				CentralAPIRouter: centralAPIRouter,
			}
		}
		var singleStoreAccessToken *shared.SingleStoreAccessToken
		if r.Configuration.Credentials.SingleStoreAccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.SingleStoreAccessToken.AccessToken.ValueString()

			var storeName string
			storeName = r.Configuration.Credentials.SingleStoreAccessToken.StoreName.ValueString()

			singleStoreAccessToken = &shared.SingleStoreAccessToken{
				AccessToken: accessToken,
				StoreName:   storeName,
			}
		}
		if singleStoreAccessToken != nil {
			credentials = &shared.AuthorizationMethod{
				SingleStoreAccessToken: singleStoreAccessToken,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceCart{
		Credentials: credentials,
		StartDate:   startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceCartCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceCartResourceModel) ToSharedSourceCartPutRequest(ctx context.Context) (*shared.SourceCartPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceCartUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceCartUpdateCentralAPIRouter *shared.SourceCartUpdateCentralAPIRouter
		if r.Configuration.Credentials.CentralAPIRouter != nil {
			var userName string
			userName = r.Configuration.Credentials.CentralAPIRouter.UserName.ValueString()

			var userSecret string
			userSecret = r.Configuration.Credentials.CentralAPIRouter.UserSecret.ValueString()

			var siteID string
			siteID = r.Configuration.Credentials.CentralAPIRouter.SiteID.ValueString()

			sourceCartUpdateCentralAPIRouter = &shared.SourceCartUpdateCentralAPIRouter{
				UserName:   userName,
				UserSecret: userSecret,
				SiteID:     siteID,
			}
		}
		if sourceCartUpdateCentralAPIRouter != nil {
			credentials = &shared.SourceCartUpdateAuthorizationMethod{
				SourceCartUpdateCentralAPIRouter: sourceCartUpdateCentralAPIRouter,
			}
		}
		var sourceCartUpdateSingleStoreAccessToken *shared.SourceCartUpdateSingleStoreAccessToken
		if r.Configuration.Credentials.SingleStoreAccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.SingleStoreAccessToken.AccessToken.ValueString()

			var storeName string
			storeName = r.Configuration.Credentials.SingleStoreAccessToken.StoreName.ValueString()

			sourceCartUpdateSingleStoreAccessToken = &shared.SourceCartUpdateSingleStoreAccessToken{
				AccessToken: accessToken,
				StoreName:   storeName,
			}
		}
		if sourceCartUpdateSingleStoreAccessToken != nil {
			credentials = &shared.SourceCartUpdateAuthorizationMethod{
				SourceCartUpdateSingleStoreAccessToken: sourceCartUpdateSingleStoreAccessToken,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceCartUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	out := shared.SourceCartPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceCartResourceModel) ToOperationsPutSourceCartRequest(ctx context.Context) (*operations.PutSourceCartRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceCartPutRequest, sourceCartPutRequestDiags := r.ToSharedSourceCartPutRequest(ctx)
	diags.Append(sourceCartPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceCartRequest{
		SourceID:             sourceID,
		SourceCartPutRequest: sourceCartPutRequest,
	}

	return &out, diags
}

func (r *SourceCartResourceModel) ToOperationsGetSourceCartRequest(ctx context.Context) (*operations.GetSourceCartRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceCartRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceCartResourceModel) ToOperationsDeleteSourceCartRequest(ctx context.Context) (*operations.DeleteSourceCartRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceCartRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceCartResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
