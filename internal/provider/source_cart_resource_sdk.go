// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceCartResourceModel) ToSharedSourceCartCreateRequest() *shared.SourceCartCreateRequest {
	var credentials *shared.SourceCartAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var sourceCartCentralAPIRouter *shared.SourceCartCentralAPIRouter
		if r.Configuration.Credentials.CentralAPIRouter != nil {
			var siteID string
			siteID = r.Configuration.Credentials.CentralAPIRouter.SiteID.ValueString()

			var userName string
			userName = r.Configuration.Credentials.CentralAPIRouter.UserName.ValueString()

			var userSecret string
			userSecret = r.Configuration.Credentials.CentralAPIRouter.UserSecret.ValueString()

			sourceCartCentralAPIRouter = &shared.SourceCartCentralAPIRouter{
				SiteID:     siteID,
				UserName:   userName,
				UserSecret: userSecret,
			}
		}
		if sourceCartCentralAPIRouter != nil {
			credentials = &shared.SourceCartAuthorizationMethod{
				SourceCartCentralAPIRouter: sourceCartCentralAPIRouter,
			}
		}
		var sourceCartSingleStoreAccessToken *shared.SourceCartSingleStoreAccessToken
		if r.Configuration.Credentials.SingleStoreAccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.SingleStoreAccessToken.AccessToken.ValueString()

			var storeName string
			storeName = r.Configuration.Credentials.SingleStoreAccessToken.StoreName.ValueString()

			sourceCartSingleStoreAccessToken = &shared.SourceCartSingleStoreAccessToken{
				AccessToken: accessToken,
				StoreName:   storeName,
			}
		}
		if sourceCartSingleStoreAccessToken != nil {
			credentials = &shared.SourceCartAuthorizationMethod{
				SourceCartSingleStoreAccessToken: sourceCartSingleStoreAccessToken,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceCart{
		Credentials: credentials,
		StartDate:   startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceCartCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceCartResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceCartResourceModel) ToSharedSourceCartPutRequest() *shared.SourceCartPutRequest {
	var credentials *shared.SourceCartUpdateAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var centralAPIRouter *shared.CentralAPIRouter
		if r.Configuration.Credentials.CentralAPIRouter != nil {
			var siteID string
			siteID = r.Configuration.Credentials.CentralAPIRouter.SiteID.ValueString()

			var userName string
			userName = r.Configuration.Credentials.CentralAPIRouter.UserName.ValueString()

			var userSecret string
			userSecret = r.Configuration.Credentials.CentralAPIRouter.UserSecret.ValueString()

			centralAPIRouter = &shared.CentralAPIRouter{
				SiteID:     siteID,
				UserName:   userName,
				UserSecret: userSecret,
			}
		}
		if centralAPIRouter != nil {
			credentials = &shared.SourceCartUpdateAuthorizationMethod{
				CentralAPIRouter: centralAPIRouter,
			}
		}
		var singleStoreAccessToken *shared.SingleStoreAccessToken
		if r.Configuration.Credentials.SingleStoreAccessToken != nil {
			var accessToken string
			accessToken = r.Configuration.Credentials.SingleStoreAccessToken.AccessToken.ValueString()

			var storeName string
			storeName = r.Configuration.Credentials.SingleStoreAccessToken.StoreName.ValueString()

			singleStoreAccessToken = &shared.SingleStoreAccessToken{
				AccessToken: accessToken,
				StoreName:   storeName,
			}
		}
		if singleStoreAccessToken != nil {
			credentials = &shared.SourceCartUpdateAuthorizationMethod{
				SingleStoreAccessToken: singleStoreAccessToken,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	configuration := shared.SourceCartUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceCartPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
