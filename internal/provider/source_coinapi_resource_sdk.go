// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceCoinAPIResourceModel) ToSharedSourceCoinAPICreateRequest() *shared.SourceCoinAPICreateRequest {
	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	environment := new(shared.SourceCoinAPIEnvironment)
	if !r.Configuration.Environment.IsUnknown() && !r.Configuration.Environment.IsNull() {
		*environment = shared.SourceCoinAPIEnvironment(r.Configuration.Environment.ValueString())
	} else {
		environment = nil
	}
	limit := new(int64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit = r.Configuration.Limit.ValueInt64()
	} else {
		limit = nil
	}
	var period string
	period = r.Configuration.Period.ValueString()

	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	var symbolID string
	symbolID = r.Configuration.SymbolID.ValueString()

	configuration := shared.SourceCoinAPI{
		APIKey:      apiKey,
		EndDate:     endDate,
		Environment: environment,
		Limit:       limit,
		Period:      period,
		StartDate:   startDate,
		SymbolID:    symbolID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceCoinAPICreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceCoinAPIResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceCoinAPIResourceModel) ToSharedSourceCoinAPIPutRequest() *shared.SourceCoinAPIPutRequest {
	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	environment := new(shared.Environment)
	if !r.Configuration.Environment.IsUnknown() && !r.Configuration.Environment.IsNull() {
		*environment = shared.Environment(r.Configuration.Environment.ValueString())
	} else {
		environment = nil
	}
	limit := new(int64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit = r.Configuration.Limit.ValueInt64()
	} else {
		limit = nil
	}
	var period string
	period = r.Configuration.Period.ValueString()

	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	var symbolID string
	symbolID = r.Configuration.SymbolID.ValueString()

	configuration := shared.SourceCoinAPIUpdate{
		APIKey:      apiKey,
		EndDate:     endDate,
		Environment: environment,
		Limit:       limit,
		Period:      period,
		StartDate:   startDate,
		SymbolID:    symbolID,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.SourceCoinAPIPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
