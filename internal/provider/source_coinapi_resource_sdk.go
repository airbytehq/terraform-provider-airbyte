// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceCoinAPIResourceModel) ToCreateSDKType() *shared.SourceCoinAPICreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	environment := shared.SourceCoinAPIEnvironment(r.Configuration.Environment.ValueString())
	limit := new(int64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit = r.Configuration.Limit.ValueInt64()
	} else {
		limit = nil
	}
	period := r.Configuration.Period.ValueString()
	sourceType := shared.SourceCoinAPICoinAPI(r.Configuration.SourceType.ValueString())
	startDate := r.Configuration.StartDate.ValueString()
	symbolID := r.Configuration.SymbolID.ValueString()
	configuration := shared.SourceCoinAPI{
		APIKey:      apiKey,
		EndDate:     endDate,
		Environment: environment,
		Limit:       limit,
		Period:      period,
		SourceType:  sourceType,
		StartDate:   startDate,
		SymbolID:    symbolID,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceCoinAPICreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceCoinAPIResourceModel) ToGetSDKType() *shared.SourceCoinAPICreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceCoinAPIResourceModel) ToUpdateSDKType() *shared.SourceCoinAPIPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	environment := shared.SourceCoinAPIUpdateEnvironment(r.Configuration.Environment.ValueString())
	limit := new(int64)
	if !r.Configuration.Limit.IsUnknown() && !r.Configuration.Limit.IsNull() {
		*limit = r.Configuration.Limit.ValueInt64()
	} else {
		limit = nil
	}
	period := r.Configuration.Period.ValueString()
	startDate := r.Configuration.StartDate.ValueString()
	symbolID := r.Configuration.SymbolID.ValueString()
	configuration := shared.SourceCoinAPIUpdate{
		APIKey:      apiKey,
		EndDate:     endDate,
		Environment: environment,
		Limit:       limit,
		Period:      period,
		StartDate:   startDate,
		SymbolID:    symbolID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceCoinAPIPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceCoinAPIResourceModel) ToDeleteSDKType() *shared.SourceCoinAPICreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceCoinAPIResourceModel) RefreshFromGetResponse(resp *shared.SourceCoinAPIGetResponse) {
	r.Configuration.APIKey = types.StringValue(resp.Configuration.APIKey)
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(*resp.Configuration.EndDate)
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	r.Configuration.Environment = types.StringValue(string(resp.Configuration.Environment))
	if resp.Configuration.Limit != nil {
		r.Configuration.Limit = types.Int64Value(*resp.Configuration.Limit)
	} else {
		r.Configuration.Limit = types.Int64Null()
	}
	r.Configuration.Period = types.StringValue(resp.Configuration.Period)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate)
	r.Configuration.SymbolID = types.StringValue(resp.Configuration.SymbolID)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceCoinAPIResourceModel) RefreshFromCreateResponse(resp *shared.SourceCoinAPIGetResponse) {
	r.RefreshFromGetResponse(resp)
}
