// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationMssqlResourceModel) ToSharedDestinationMssqlCreateRequest() *shared.DestinationMssqlCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var username string
	username = r.Configuration.Username.ValueString()

	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var sslMethod *shared.DestinationMssqlSSLMethod
	if r.Configuration.SslMethod != nil {
		var destinationMssqlUnencrypted *shared.DestinationMssqlUnencrypted
		if r.Configuration.SslMethod.Unencrypted != nil {
			destinationMssqlUnencrypted = &shared.DestinationMssqlUnencrypted{}
		}
		if destinationMssqlUnencrypted != nil {
			sslMethod = &shared.DestinationMssqlSSLMethod{
				DestinationMssqlUnencrypted: destinationMssqlUnencrypted,
			}
		}
		var destinationMssqlEncryptedTrustServerCertificate *shared.DestinationMssqlEncryptedTrustServerCertificate
		if r.Configuration.SslMethod.EncryptedTrustServerCertificate != nil {
			destinationMssqlEncryptedTrustServerCertificate = &shared.DestinationMssqlEncryptedTrustServerCertificate{}
		}
		if destinationMssqlEncryptedTrustServerCertificate != nil {
			sslMethod = &shared.DestinationMssqlSSLMethod{
				DestinationMssqlEncryptedTrustServerCertificate: destinationMssqlEncryptedTrustServerCertificate,
			}
		}
		var destinationMssqlEncryptedVerifyCertificate *shared.DestinationMssqlEncryptedVerifyCertificate
		if r.Configuration.SslMethod.EncryptedVerifyCertificate != nil {
			hostNameInCertificate := new(string)
			if !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
				*hostNameInCertificate = r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.ValueString()
			} else {
				hostNameInCertificate = nil
			}
			destinationMssqlEncryptedVerifyCertificate = &shared.DestinationMssqlEncryptedVerifyCertificate{
				HostNameInCertificate: hostNameInCertificate,
			}
		}
		if destinationMssqlEncryptedVerifyCertificate != nil {
			sslMethod = &shared.DestinationMssqlSSLMethod{
				DestinationMssqlEncryptedVerifyCertificate: destinationMssqlEncryptedVerifyCertificate,
			}
		}
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	var tunnelMethod *shared.DestinationMssqlSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationMssqlNoTunnel *shared.DestinationMssqlNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationMssqlNoTunnel = &shared.DestinationMssqlNoTunnel{}
		}
		if destinationMssqlNoTunnel != nil {
			tunnelMethod = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlNoTunnel: destinationMssqlNoTunnel,
			}
		}
		var destinationMssqlSSHKeyAuthentication *shared.DestinationMssqlSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationMssqlSSHKeyAuthentication = &shared.DestinationMssqlSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationMssqlSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlSSHKeyAuthentication: destinationMssqlSSHKeyAuthentication,
			}
		}
		var destinationMssqlPasswordAuthentication *shared.DestinationMssqlPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationMssqlPasswordAuthentication = &shared.DestinationMssqlPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationMssqlPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlPasswordAuthentication: destinationMssqlPasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationMssql{
		Host:          host,
		Port:          port,
		Database:      database,
		Schema:        schema,
		Username:      username,
		Password:      password,
		JdbcURLParams: jdbcURLParams,
		SslMethod:     sslMethod,
		RawDataSchema: rawDataSchema,
		TunnelMethod:  tunnelMethod,
	}
	out := shared.DestinationMssqlCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationMssqlResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationMssqlResourceModel) ToSharedDestinationMssqlPutRequest() *shared.DestinationMssqlPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var database string
	database = r.Configuration.Database.ValueString()

	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	var username string
	username = r.Configuration.Username.ValueString()

	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	var sslMethod *shared.DestinationMssqlUpdateSSLMethod
	if r.Configuration.SslMethod != nil {
		var destinationMssqlUpdateUnencrypted *shared.DestinationMssqlUpdateUnencrypted
		if r.Configuration.SslMethod.Unencrypted != nil {
			destinationMssqlUpdateUnencrypted = &shared.DestinationMssqlUpdateUnencrypted{}
		}
		if destinationMssqlUpdateUnencrypted != nil {
			sslMethod = &shared.DestinationMssqlUpdateSSLMethod{
				DestinationMssqlUpdateUnencrypted: destinationMssqlUpdateUnencrypted,
			}
		}
		var destinationMssqlUpdateEncryptedTrustServerCertificate *shared.DestinationMssqlUpdateEncryptedTrustServerCertificate
		if r.Configuration.SslMethod.EncryptedTrustServerCertificate != nil {
			destinationMssqlUpdateEncryptedTrustServerCertificate = &shared.DestinationMssqlUpdateEncryptedTrustServerCertificate{}
		}
		if destinationMssqlUpdateEncryptedTrustServerCertificate != nil {
			sslMethod = &shared.DestinationMssqlUpdateSSLMethod{
				DestinationMssqlUpdateEncryptedTrustServerCertificate: destinationMssqlUpdateEncryptedTrustServerCertificate,
			}
		}
		var destinationMssqlUpdateEncryptedVerifyCertificate *shared.DestinationMssqlUpdateEncryptedVerifyCertificate
		if r.Configuration.SslMethod.EncryptedVerifyCertificate != nil {
			hostNameInCertificate := new(string)
			if !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
				*hostNameInCertificate = r.Configuration.SslMethod.EncryptedVerifyCertificate.HostNameInCertificate.ValueString()
			} else {
				hostNameInCertificate = nil
			}
			destinationMssqlUpdateEncryptedVerifyCertificate = &shared.DestinationMssqlUpdateEncryptedVerifyCertificate{
				HostNameInCertificate: hostNameInCertificate,
			}
		}
		if destinationMssqlUpdateEncryptedVerifyCertificate != nil {
			sslMethod = &shared.DestinationMssqlUpdateSSLMethod{
				DestinationMssqlUpdateEncryptedVerifyCertificate: destinationMssqlUpdateEncryptedVerifyCertificate,
			}
		}
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	var tunnelMethod *shared.DestinationMssqlUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationMssqlUpdateNoTunnel *shared.DestinationMssqlUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationMssqlUpdateNoTunnel = &shared.DestinationMssqlUpdateNoTunnel{}
		}
		if destinationMssqlUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationMssqlUpdateSSHTunnelMethod{
				DestinationMssqlUpdateNoTunnel: destinationMssqlUpdateNoTunnel,
			}
		}
		var destinationMssqlUpdateSSHKeyAuthentication *shared.DestinationMssqlUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationMssqlUpdateSSHKeyAuthentication = &shared.DestinationMssqlUpdateSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationMssqlUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationMssqlUpdateSSHTunnelMethod{
				DestinationMssqlUpdateSSHKeyAuthentication: destinationMssqlUpdateSSHKeyAuthentication,
			}
		}
		var destinationMssqlUpdatePasswordAuthentication *shared.DestinationMssqlUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationMssqlUpdatePasswordAuthentication = &shared.DestinationMssqlUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationMssqlUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationMssqlUpdateSSHTunnelMethod{
				DestinationMssqlUpdatePasswordAuthentication: destinationMssqlUpdatePasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationMssqlUpdate{
		Host:          host,
		Port:          port,
		Database:      database,
		Schema:        schema,
		Username:      username,
		Password:      password,
		JdbcURLParams: jdbcURLParams,
		SslMethod:     sslMethod,
		RawDataSchema: rawDataSchema,
		TunnelMethod:  tunnelMethod,
	}
	out := shared.DestinationMssqlPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
