// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceYoutubeAnalyticsResourceModel) ToCreateSDKType() *shared.SourceYoutubeAnalyticsCreateRequest {
	clientID := r.Configuration.Credentials.ClientID.ValueString()
	clientSecret := r.Configuration.Credentials.ClientSecret.ValueString()
	refreshToken := r.Configuration.Credentials.RefreshToken.ValueString()
	var additionalProperties interface{}
	if !r.Configuration.Credentials.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.Configuration.Credentials.AdditionalProperties.ValueString()), &additionalProperties)
	}
	credentials := shared.SourceYoutubeAnalyticsAuthenticateViaOAuth20{
		ClientID:             clientID,
		ClientSecret:         clientSecret,
		RefreshToken:         refreshToken,
		AdditionalProperties: additionalProperties,
	}
	sourceType := shared.SourceYoutubeAnalyticsYoutubeAnalytics(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceYoutubeAnalytics{
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceYoutubeAnalyticsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceYoutubeAnalyticsResourceModel) ToGetSDKType() *shared.SourceYoutubeAnalyticsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceYoutubeAnalyticsResourceModel) ToUpdateSDKType() *shared.SourceYoutubeAnalyticsPutRequest {
	clientID := r.Configuration.Credentials.ClientID.ValueString()
	clientSecret := r.Configuration.Credentials.ClientSecret.ValueString()
	refreshToken := r.Configuration.Credentials.RefreshToken.ValueString()
	var additionalProperties interface{}
	if !r.Configuration.Credentials.AdditionalProperties.IsUnknown() && !r.Configuration.Credentials.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.Configuration.Credentials.AdditionalProperties.ValueString()), &additionalProperties)
	}
	credentials := shared.SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20{
		ClientID:             clientID,
		ClientSecret:         clientSecret,
		RefreshToken:         refreshToken,
		AdditionalProperties: additionalProperties,
	}
	configuration := shared.SourceYoutubeAnalyticsUpdate{
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceYoutubeAnalyticsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceYoutubeAnalyticsResourceModel) ToDeleteSDKType() *shared.SourceYoutubeAnalyticsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceYoutubeAnalyticsResourceModel) RefreshFromGetResponse(resp *shared.SourceYoutubeAnalyticsGetResponse) {
	r.Configuration.Credentials.ClientID = types.StringValue(resp.Configuration.Credentials.ClientID)
	r.Configuration.Credentials.ClientSecret = types.StringValue(resp.Configuration.Credentials.ClientSecret)
	r.Configuration.Credentials.RefreshToken = types.StringValue(resp.Configuration.Credentials.RefreshToken)
	if r.Configuration.Credentials.AdditionalProperties.IsUnknown() {
		if resp.Configuration.Credentials.AdditionalProperties == nil {
			r.Configuration.Credentials.AdditionalProperties = types.StringNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(resp.Configuration.Credentials.AdditionalProperties)
			r.Configuration.Credentials.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
		}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceYoutubeAnalyticsResourceModel) RefreshFromCreateResponse(resp *shared.SourceYoutubeAnalyticsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
