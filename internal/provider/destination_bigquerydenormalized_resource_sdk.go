// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationBigqueryDenormalizedResourceModel) ToCreateSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := new(shared.DestinationBigqueryDenormalizedDatasetLocation)
	if !r.Configuration.DatasetLocation.IsUnknown() && !r.Configuration.DatasetLocation.IsNull() {
		*datasetLocation = shared.DestinationBigqueryDenormalizedDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	} else {
		datasetLocation = nil
	}
	destinationType := shared.DestinationBigqueryDenormalizedBigqueryDenormalized(r.Configuration.DestinationType.ValueString())
	var loadingMethod *shared.DestinationBigqueryDenormalizedLoadingMethod
	var destinationBigqueryDenormalizedLoadingMethodStandardInserts *shared.DestinationBigqueryDenormalizedLoadingMethodStandardInserts
	if r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
		method := shared.DestinationBigqueryDenormalizedLoadingMethodStandardInsertsMethod(r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Method.ValueString())
		destinationBigqueryDenormalizedLoadingMethodStandardInserts = &shared.DestinationBigqueryDenormalizedLoadingMethodStandardInserts{
			Method: method,
		}
	}
	if destinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
		loadingMethod = &shared.DestinationBigqueryDenormalizedLoadingMethod{
			DestinationBigqueryDenormalizedLoadingMethodStandardInserts: destinationBigqueryDenormalizedLoadingMethodStandardInserts,
		}
	}
	var destinationBigqueryDenormalizedLoadingMethodGCSStaging *shared.DestinationBigqueryDenormalizedLoadingMethodGCSStaging
	if r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
		method1 := shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingMethod(r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts.Method.ValueString())
		destinationBigqueryDenormalizedLoadingMethodGCSStaging = &shared.DestinationBigqueryDenormalizedLoadingMethodGCSStaging{
			Method: method1,
		}
	}
	if destinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
		loadingMethod = &shared.DestinationBigqueryDenormalizedLoadingMethod{
			DestinationBigqueryDenormalizedLoadingMethodGCSStaging: destinationBigqueryDenormalizedLoadingMethodGCSStaging,
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	configuration := shared.DestinationBigqueryDenormalized{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		DestinationType:            destinationType,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryDenormalizedCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToGetSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToUpdateSDKType() *shared.DestinationBigqueryDenormalizedPutRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := new(shared.DestinationBigqueryDenormalizedUpdateDatasetLocation)
	if !r.Configuration.DatasetLocation.IsUnknown() && !r.Configuration.DatasetLocation.IsNull() {
		*datasetLocation = shared.DestinationBigqueryDenormalizedUpdateDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	} else {
		datasetLocation = nil
	}
	var loadingMethod *shared.DestinationBigqueryDenormalizedUpdateLoadingMethod
	var destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts *shared.DestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts
	if r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
		method := shared.DestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsMethod(r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Method.ValueString())
		destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts = &shared.DestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts{
			Method: method,
		}
	}
	if destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts != nil {
		loadingMethod = &shared.DestinationBigqueryDenormalizedUpdateLoadingMethod{
			DestinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts: destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts,
		}
	}
	var destinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging *shared.DestinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging
	if r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
		method1 := shared.DestinationBigqueryDenormalizedUpdateLoadingMethodGCSStagingMethod(r.Configuration.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts.Method.ValueString())
		destinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging = &shared.DestinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging{
			Method: method1,
		}
	}
	if destinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging != nil {
		loadingMethod = &shared.DestinationBigqueryDenormalizedUpdateLoadingMethod{
			DestinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging: destinationBigqueryDenormalizedUpdateLoadingMethodGCSStaging,
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	configuration := shared.DestinationBigqueryDenormalizedUpdate{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryDenormalizedPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToDeleteSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryDenormalizedResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationBigqueryDenormalizedResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
