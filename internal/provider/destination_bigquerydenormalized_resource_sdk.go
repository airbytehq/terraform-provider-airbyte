// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationBigqueryDenormalizedResourceModel) ToCreateSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := new(shared.DestinationBigqueryDenormalizedDatasetLocation)
	if !r.Configuration.DatasetLocation.IsUnknown() && !r.Configuration.DatasetLocation.IsNull() {
		*datasetLocation = shared.DestinationBigqueryDenormalizedDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	} else {
		datasetLocation = nil
	}
	var loadingMethod *shared.DestinationBigqueryDenormalizedLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var destinationBigqueryDenormalizedStandardInserts *shared.DestinationBigqueryDenormalizedStandardInserts
		if r.Configuration.LoadingMethod.StandardInserts != nil {
			destinationBigqueryDenormalizedStandardInserts = &shared.DestinationBigqueryDenormalizedStandardInserts{}
		}
		if destinationBigqueryDenormalizedStandardInserts != nil {
			loadingMethod = &shared.DestinationBigqueryDenormalizedLoadingMethod{
				StandardInserts: destinationBigqueryDenormalizedStandardInserts,
			}
		}
		var destinationBigqueryDenormalizedGCSStaging *shared.DestinationBigqueryDenormalizedGCSStaging
		if r.Configuration.LoadingMethod.GCSStaging != nil {
			var credential shared.DestinationBigqueryDenormalizedCredential
			var destinationBigqueryDenormalizedHMACKey *shared.DestinationBigqueryDenormalizedHMACKey
			if r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeySecret.ValueString()
				destinationBigqueryDenormalizedHMACKey = &shared.DestinationBigqueryDenormalizedHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryDenormalizedHMACKey != nil {
				credential = shared.DestinationBigqueryDenormalizedCredential{
					HMACKey: destinationBigqueryDenormalizedHMACKey,
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			gcsBucketName := r.Configuration.LoadingMethod.GCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.GCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.DestinationBigqueryDenormalizedGCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.DestinationBigqueryDenormalizedGCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			destinationBigqueryDenormalizedGCSStaging = &shared.DestinationBigqueryDenormalizedGCSStaging{
				Credential:           credential,
				FileBufferCount:      fileBufferCount,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if destinationBigqueryDenormalizedGCSStaging != nil {
			loadingMethod = &shared.DestinationBigqueryDenormalizedLoadingMethod{
				GCSStaging: destinationBigqueryDenormalizedGCSStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	configuration := shared.DestinationBigqueryDenormalized{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryDenormalizedCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToGetSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToUpdateSDKType() *shared.DestinationBigqueryDenormalizedPutRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := new(shared.DatasetLocation)
	if !r.Configuration.DatasetLocation.IsUnknown() && !r.Configuration.DatasetLocation.IsNull() {
		*datasetLocation = shared.DatasetLocation(r.Configuration.DatasetLocation.ValueString())
	} else {
		datasetLocation = nil
	}
	var loadingMethod *shared.LoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var standardInserts *shared.StandardInserts
		if r.Configuration.LoadingMethod.StandardInserts != nil {
			standardInserts = &shared.StandardInserts{}
		}
		if standardInserts != nil {
			loadingMethod = &shared.LoadingMethod{
				StandardInserts: standardInserts,
			}
		}
		var gcsStaging *shared.GCSStaging
		if r.Configuration.LoadingMethod.GCSStaging != nil {
			var credential shared.Credential
			var destinationBigqueryDenormalizedUpdateHMACKey *shared.DestinationBigqueryDenormalizedUpdateHMACKey
			if r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeySecret.ValueString()
				destinationBigqueryDenormalizedUpdateHMACKey = &shared.DestinationBigqueryDenormalizedUpdateHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryDenormalizedUpdateHMACKey != nil {
				credential = shared.Credential{
					HMACKey: destinationBigqueryDenormalizedUpdateHMACKey,
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.LoadingMethod.GCSStaging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			gcsBucketName := r.Configuration.LoadingMethod.GCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.GCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.GCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.GCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			gcsStaging = &shared.GCSStaging{
				Credential:           credential,
				FileBufferCount:      fileBufferCount,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if gcsStaging != nil {
			loadingMethod = &shared.LoadingMethod{
				GCSStaging: gcsStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	configuration := shared.DestinationBigqueryDenormalizedUpdate{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryDenormalizedPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryDenormalizedResourceModel) ToDeleteSDKType() *shared.DestinationBigqueryDenormalizedCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryDenormalizedResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationBigqueryDenormalizedResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
