// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourcePocketResourceModel) ToSharedSourcePocketCreateRequest(ctx context.Context) (*shared.SourcePocketCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var consumerKey string
	consumerKey = r.Configuration.ConsumerKey.ValueString()

	var accessToken string
	accessToken = r.Configuration.AccessToken.ValueString()

	state := new(shared.State)
	if !r.Configuration.State.IsUnknown() && !r.Configuration.State.IsNull() {
		*state = shared.State(r.Configuration.State.ValueString())
	} else {
		state = nil
	}
	favorite := new(bool)
	if !r.Configuration.Favorite.IsUnknown() && !r.Configuration.Favorite.IsNull() {
		*favorite = r.Configuration.Favorite.ValueBool()
	} else {
		favorite = nil
	}
	tag := new(string)
	if !r.Configuration.Tag.IsUnknown() && !r.Configuration.Tag.IsNull() {
		*tag = r.Configuration.Tag.ValueString()
	} else {
		tag = nil
	}
	contentType := new(shared.ContentType)
	if !r.Configuration.ContentType.IsUnknown() && !r.Configuration.ContentType.IsNull() {
		*contentType = shared.ContentType(r.Configuration.ContentType.ValueString())
	} else {
		contentType = nil
	}
	sort := new(shared.SourcePocketSortBy)
	if !r.Configuration.Sort.IsUnknown() && !r.Configuration.Sort.IsNull() {
		*sort = shared.SourcePocketSortBy(r.Configuration.Sort.ValueString())
	} else {
		sort = nil
	}
	detailType := new(shared.DetailType)
	if !r.Configuration.DetailType.IsUnknown() && !r.Configuration.DetailType.IsNull() {
		*detailType = shared.DetailType(r.Configuration.DetailType.ValueString())
	} else {
		detailType = nil
	}
	search := new(string)
	if !r.Configuration.Search.IsUnknown() && !r.Configuration.Search.IsNull() {
		*search = r.Configuration.Search.ValueString()
	} else {
		search = nil
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	since := new(string)
	if !r.Configuration.Since.IsUnknown() && !r.Configuration.Since.IsNull() {
		*since = r.Configuration.Since.ValueString()
	} else {
		since = nil
	}
	configuration := shared.SourcePocket{
		ConsumerKey: consumerKey,
		AccessToken: accessToken,
		State:       state,
		Favorite:    favorite,
		Tag:         tag,
		ContentType: contentType,
		Sort:        sort,
		DetailType:  detailType,
		Search:      search,
		Domain:      domain,
		Since:       since,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourcePocketCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourcePocketResourceModel) ToSharedSourcePocketPutRequest(ctx context.Context) (*shared.SourcePocketPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var consumerKey string
	consumerKey = r.Configuration.ConsumerKey.ValueString()

	var accessToken string
	accessToken = r.Configuration.AccessToken.ValueString()

	state := new(shared.SourcePocketUpdateState)
	if !r.Configuration.State.IsUnknown() && !r.Configuration.State.IsNull() {
		*state = shared.SourcePocketUpdateState(r.Configuration.State.ValueString())
	} else {
		state = nil
	}
	favorite := new(bool)
	if !r.Configuration.Favorite.IsUnknown() && !r.Configuration.Favorite.IsNull() {
		*favorite = r.Configuration.Favorite.ValueBool()
	} else {
		favorite = nil
	}
	tag := new(string)
	if !r.Configuration.Tag.IsUnknown() && !r.Configuration.Tag.IsNull() {
		*tag = r.Configuration.Tag.ValueString()
	} else {
		tag = nil
	}
	contentType := new(shared.SourcePocketUpdateContentType)
	if !r.Configuration.ContentType.IsUnknown() && !r.Configuration.ContentType.IsNull() {
		*contentType = shared.SourcePocketUpdateContentType(r.Configuration.ContentType.ValueString())
	} else {
		contentType = nil
	}
	sort := new(shared.SourcePocketUpdateSortBy)
	if !r.Configuration.Sort.IsUnknown() && !r.Configuration.Sort.IsNull() {
		*sort = shared.SourcePocketUpdateSortBy(r.Configuration.Sort.ValueString())
	} else {
		sort = nil
	}
	detailType := new(shared.SourcePocketUpdateDetailType)
	if !r.Configuration.DetailType.IsUnknown() && !r.Configuration.DetailType.IsNull() {
		*detailType = shared.SourcePocketUpdateDetailType(r.Configuration.DetailType.ValueString())
	} else {
		detailType = nil
	}
	search := new(string)
	if !r.Configuration.Search.IsUnknown() && !r.Configuration.Search.IsNull() {
		*search = r.Configuration.Search.ValueString()
	} else {
		search = nil
	}
	domain := new(string)
	if !r.Configuration.Domain.IsUnknown() && !r.Configuration.Domain.IsNull() {
		*domain = r.Configuration.Domain.ValueString()
	} else {
		domain = nil
	}
	since := new(string)
	if !r.Configuration.Since.IsUnknown() && !r.Configuration.Since.IsNull() {
		*since = r.Configuration.Since.ValueString()
	} else {
		since = nil
	}
	configuration := shared.SourcePocketUpdate{
		ConsumerKey: consumerKey,
		AccessToken: accessToken,
		State:       state,
		Favorite:    favorite,
		Tag:         tag,
		ContentType: contentType,
		Sort:        sort,
		DetailType:  detailType,
		Search:      search,
		Domain:      domain,
		Since:       since,
	}
	out := shared.SourcePocketPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourcePocketResourceModel) ToOperationsPutSourcePocketRequest(ctx context.Context) (*operations.PutSourcePocketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourcePocketPutRequest, sourcePocketPutRequestDiags := r.ToSharedSourcePocketPutRequest(ctx)
	diags.Append(sourcePocketPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourcePocketRequest{
		SourceID:               sourceID,
		SourcePocketPutRequest: sourcePocketPutRequest,
	}

	return &out, diags
}

func (r *SourcePocketResourceModel) ToOperationsGetSourcePocketRequest(ctx context.Context) (*operations.GetSourcePocketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourcePocketRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourcePocketResourceModel) ToOperationsDeleteSourcePocketRequest(ctx context.Context) (*operations.DeleteSourcePocketRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourcePocketRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourcePocketResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
