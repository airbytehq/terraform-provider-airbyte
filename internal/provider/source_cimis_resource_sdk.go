// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceCimisResourceModel) ToSharedSourceCimisCreateRequest() *shared.SourceCimisCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	var dailyDataItems []interface{} = []interface{}{}
	for _, dailyDataItemsItem := range r.Configuration.DailyDataItems {
		var dailyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(dailyDataItemsItem.ValueString()), &dailyDataItemsTmp)
		dailyDataItems = append(dailyDataItems, dailyDataItemsTmp)
	}
	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	var hourlyDataItems []interface{} = []interface{}{}
	for _, hourlyDataItemsItem := range r.Configuration.HourlyDataItems {
		var hourlyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(hourlyDataItemsItem.ValueString()), &hourlyDataItemsTmp)
		hourlyDataItems = append(hourlyDataItems, hourlyDataItemsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var targets []interface{} = []interface{}{}
	for _, targetsItem := range r.Configuration.Targets {
		var targetsTmp interface{}
		_ = json.Unmarshal([]byte(targetsItem.ValueString()), &targetsTmp)
		targets = append(targets, targetsTmp)
	}
	targetsType := shared.SourceCimisTargetsType(r.Configuration.TargetsType.ValueString())
	unitOfMeasure := new(shared.SourceCimisUnitOfMeasure)
	if !r.Configuration.UnitOfMeasure.IsUnknown() && !r.Configuration.UnitOfMeasure.IsNull() {
		*unitOfMeasure = shared.SourceCimisUnitOfMeasure(r.Configuration.UnitOfMeasure.ValueString())
	} else {
		unitOfMeasure = nil
	}
	configuration := shared.SourceCimis{
		APIKey:          apiKey,
		DailyDataItems:  dailyDataItems,
		EndDate:         endDate,
		HourlyDataItems: hourlyDataItems,
		StartDate:       startDate,
		Targets:         targets,
		TargetsType:     targetsType,
		UnitOfMeasure:   unitOfMeasure,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceCimisCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceCimisResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceCimisResourceModel) ToSharedSourceCimisPutRequest() *shared.SourceCimisPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	var dailyDataItems []interface{} = []interface{}{}
	for _, dailyDataItemsItem := range r.Configuration.DailyDataItems {
		var dailyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(dailyDataItemsItem.ValueString()), &dailyDataItemsTmp)
		dailyDataItems = append(dailyDataItems, dailyDataItemsTmp)
	}
	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	var hourlyDataItems []interface{} = []interface{}{}
	for _, hourlyDataItemsItem := range r.Configuration.HourlyDataItems {
		var hourlyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(hourlyDataItemsItem.ValueString()), &hourlyDataItemsTmp)
		hourlyDataItems = append(hourlyDataItems, hourlyDataItemsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var targets []interface{} = []interface{}{}
	for _, targetsItem := range r.Configuration.Targets {
		var targetsTmp interface{}
		_ = json.Unmarshal([]byte(targetsItem.ValueString()), &targetsTmp)
		targets = append(targets, targetsTmp)
	}
	targetsType := shared.TargetsType(r.Configuration.TargetsType.ValueString())
	unitOfMeasure := new(shared.UnitOfMeasure)
	if !r.Configuration.UnitOfMeasure.IsUnknown() && !r.Configuration.UnitOfMeasure.IsNull() {
		*unitOfMeasure = shared.UnitOfMeasure(r.Configuration.UnitOfMeasure.ValueString())
	} else {
		unitOfMeasure = nil
	}
	configuration := shared.SourceCimisUpdate{
		APIKey:          apiKey,
		DailyDataItems:  dailyDataItems,
		EndDate:         endDate,
		HourlyDataItems: hourlyDataItems,
		StartDate:       startDate,
		Targets:         targets,
		TargetsType:     targetsType,
		UnitOfMeasure:   unitOfMeasure,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceCimisPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
