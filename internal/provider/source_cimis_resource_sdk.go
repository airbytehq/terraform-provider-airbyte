// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceCimisResourceModel) ToSharedSourceCimisCreateRequest(ctx context.Context) (*shared.SourceCimisCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	targetsType := shared.TargetsType(r.Configuration.TargetsType.ValueString())
	var targets []interface{} = []interface{}{}
	for _, targetsItem := range r.Configuration.Targets {
		var targetsTmp interface{}
		_ = json.Unmarshal([]byte(targetsItem.ValueString()), &targetsTmp)
		targets = append(targets, targetsTmp)
	}
	var dailyDataItems []interface{} = []interface{}{}
	for _, dailyDataItemsItem := range r.Configuration.DailyDataItems {
		var dailyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(dailyDataItemsItem.ValueString()), &dailyDataItemsTmp)
		dailyDataItems = append(dailyDataItems, dailyDataItemsTmp)
	}
	var hourlyDataItems []interface{} = []interface{}{}
	for _, hourlyDataItemsItem := range r.Configuration.HourlyDataItems {
		var hourlyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(hourlyDataItemsItem.ValueString()), &hourlyDataItemsTmp)
		hourlyDataItems = append(hourlyDataItems, hourlyDataItemsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	unitOfMeasure := new(shared.UnitOfMeasure)
	if !r.Configuration.UnitOfMeasure.IsUnknown() && !r.Configuration.UnitOfMeasure.IsNull() {
		*unitOfMeasure = shared.UnitOfMeasure(r.Configuration.UnitOfMeasure.ValueString())
	} else {
		unitOfMeasure = nil
	}
	configuration := shared.SourceCimis{
		APIKey:          apiKey,
		TargetsType:     targetsType,
		Targets:         targets,
		DailyDataItems:  dailyDataItems,
		HourlyDataItems: hourlyDataItems,
		StartDate:       startDate,
		EndDate:         endDate,
		UnitOfMeasure:   unitOfMeasure,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceCimisCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceCimisResourceModel) ToSharedSourceCimisPutRequest(ctx context.Context) (*shared.SourceCimisPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	targetsType := shared.SourceCimisUpdateTargetsType(r.Configuration.TargetsType.ValueString())
	var targets []interface{} = []interface{}{}
	for _, targetsItem := range r.Configuration.Targets {
		var targetsTmp interface{}
		_ = json.Unmarshal([]byte(targetsItem.ValueString()), &targetsTmp)
		targets = append(targets, targetsTmp)
	}
	var dailyDataItems []interface{} = []interface{}{}
	for _, dailyDataItemsItem := range r.Configuration.DailyDataItems {
		var dailyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(dailyDataItemsItem.ValueString()), &dailyDataItemsTmp)
		dailyDataItems = append(dailyDataItems, dailyDataItemsTmp)
	}
	var hourlyDataItems []interface{} = []interface{}{}
	for _, hourlyDataItemsItem := range r.Configuration.HourlyDataItems {
		var hourlyDataItemsTmp interface{}
		_ = json.Unmarshal([]byte(hourlyDataItemsItem.ValueString()), &hourlyDataItemsTmp)
		hourlyDataItems = append(hourlyDataItems, hourlyDataItemsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	endDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	unitOfMeasure := new(shared.SourceCimisUpdateUnitOfMeasure)
	if !r.Configuration.UnitOfMeasure.IsUnknown() && !r.Configuration.UnitOfMeasure.IsNull() {
		*unitOfMeasure = shared.SourceCimisUpdateUnitOfMeasure(r.Configuration.UnitOfMeasure.ValueString())
	} else {
		unitOfMeasure = nil
	}
	configuration := shared.SourceCimisUpdate{
		APIKey:          apiKey,
		TargetsType:     targetsType,
		Targets:         targets,
		DailyDataItems:  dailyDataItems,
		HourlyDataItems: hourlyDataItems,
		StartDate:       startDate,
		EndDate:         endDate,
		UnitOfMeasure:   unitOfMeasure,
	}
	out := shared.SourceCimisPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceCimisResourceModel) ToOperationsPutSourceCimisRequest(ctx context.Context) (*operations.PutSourceCimisRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceCimisPutRequest, sourceCimisPutRequestDiags := r.ToSharedSourceCimisPutRequest(ctx)
	diags.Append(sourceCimisPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceCimisRequest{
		SourceID:              sourceID,
		SourceCimisPutRequest: sourceCimisPutRequest,
	}

	return &out, diags
}

func (r *SourceCimisResourceModel) ToOperationsGetSourceCimisRequest(ctx context.Context) (*operations.GetSourceCimisRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceCimisRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceCimisResourceModel) ToOperationsDeleteSourceCimisRequest(ctx context.Context) (*operations.DeleteSourceCimisRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceCimisRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceCimisResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
