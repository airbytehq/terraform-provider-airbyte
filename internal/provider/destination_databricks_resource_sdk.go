// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationDatabricksResourceModel) ToSharedDestinationDatabricksCreateRequest() *shared.DestinationDatabricksCreateRequest {
	acceptTerms := new(bool)
	if !r.Configuration.AcceptTerms.IsUnknown() && !r.Configuration.AcceptTerms.IsNull() {
		*acceptTerms = r.Configuration.AcceptTerms.ValueBool()
	} else {
		acceptTerms = nil
	}
	var authentication shared.DestinationDatabricksAuthentication
	var destinationDatabricksOAuth2Recommended *shared.DestinationDatabricksOAuth2Recommended
	if r.Configuration.Authentication.OAuth2Recommended != nil {
		clientID := r.Configuration.Authentication.OAuth2Recommended.ClientID.ValueString()
		secret := r.Configuration.Authentication.OAuth2Recommended.Secret.ValueString()
		destinationDatabricksOAuth2Recommended = &shared.DestinationDatabricksOAuth2Recommended{
			ClientID: clientID,
			Secret:   secret,
		}
	}
	if destinationDatabricksOAuth2Recommended != nil {
		authentication = shared.DestinationDatabricksAuthentication{
			DestinationDatabricksOAuth2Recommended: destinationDatabricksOAuth2Recommended,
		}
	}
	var destinationDatabricksPersonalAccessToken *shared.DestinationDatabricksPersonalAccessToken
	if r.Configuration.Authentication.PersonalAccessToken != nil {
		personalAccessToken := r.Configuration.Authentication.PersonalAccessToken.PersonalAccessToken.ValueString()
		destinationDatabricksPersonalAccessToken = &shared.DestinationDatabricksPersonalAccessToken{
			PersonalAccessToken: personalAccessToken,
		}
	}
	if destinationDatabricksPersonalAccessToken != nil {
		authentication = shared.DestinationDatabricksAuthentication{
			DestinationDatabricksPersonalAccessToken: destinationDatabricksPersonalAccessToken,
		}
	}
	database := r.Configuration.Database.ValueString()
	hostname := r.Configuration.Hostname.ValueString()
	httpPath := r.Configuration.HTTPPath.ValueString()
	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	purgeStagingData := new(bool)
	if !r.Configuration.PurgeStagingData.IsUnknown() && !r.Configuration.PurgeStagingData.IsNull() {
		*purgeStagingData = r.Configuration.PurgeStagingData.ValueBool()
	} else {
		purgeStagingData = nil
	}
	rawSchemaOverride := new(string)
	if !r.Configuration.RawSchemaOverride.IsUnknown() && !r.Configuration.RawSchemaOverride.IsNull() {
		*rawSchemaOverride = r.Configuration.RawSchemaOverride.ValueString()
	} else {
		rawSchemaOverride = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	configuration := shared.DestinationDatabricks{
		AcceptTerms:       acceptTerms,
		Authentication:    authentication,
		Database:          database,
		Hostname:          hostname,
		HTTPPath:          httpPath,
		Port:              port,
		PurgeStagingData:  purgeStagingData,
		RawSchemaOverride: rawSchemaOverride,
		Schema:            schema,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationDatabricksCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationDatabricksResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationDatabricksResourceModel) ToSharedDestinationDatabricksPutRequest() *shared.DestinationDatabricksPutRequest {
	acceptTerms := new(bool)
	if !r.Configuration.AcceptTerms.IsUnknown() && !r.Configuration.AcceptTerms.IsNull() {
		*acceptTerms = r.Configuration.AcceptTerms.ValueBool()
	} else {
		acceptTerms = nil
	}
	var authentication shared.Authentication
	var oAuth2Recommended *shared.OAuth2Recommended
	if r.Configuration.Authentication.OAuth2Recommended != nil {
		clientID := r.Configuration.Authentication.OAuth2Recommended.ClientID.ValueString()
		secret := r.Configuration.Authentication.OAuth2Recommended.Secret.ValueString()
		oAuth2Recommended = &shared.OAuth2Recommended{
			ClientID: clientID,
			Secret:   secret,
		}
	}
	if oAuth2Recommended != nil {
		authentication = shared.Authentication{
			OAuth2Recommended: oAuth2Recommended,
		}
	}
	var personalAccessToken *shared.PersonalAccessToken
	if r.Configuration.Authentication.PersonalAccessToken != nil {
		personalAccessToken1 := r.Configuration.Authentication.PersonalAccessToken.PersonalAccessToken.ValueString()
		personalAccessToken = &shared.PersonalAccessToken{
			PersonalAccessToken: personalAccessToken1,
		}
	}
	if personalAccessToken != nil {
		authentication = shared.Authentication{
			PersonalAccessToken: personalAccessToken,
		}
	}
	database := r.Configuration.Database.ValueString()
	hostname := r.Configuration.Hostname.ValueString()
	httpPath := r.Configuration.HTTPPath.ValueString()
	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	purgeStagingData := new(bool)
	if !r.Configuration.PurgeStagingData.IsUnknown() && !r.Configuration.PurgeStagingData.IsNull() {
		*purgeStagingData = r.Configuration.PurgeStagingData.ValueBool()
	} else {
		purgeStagingData = nil
	}
	rawSchemaOverride := new(string)
	if !r.Configuration.RawSchemaOverride.IsUnknown() && !r.Configuration.RawSchemaOverride.IsNull() {
		*rawSchemaOverride = r.Configuration.RawSchemaOverride.ValueString()
	} else {
		rawSchemaOverride = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	configuration := shared.DestinationDatabricksUpdate{
		AcceptTerms:       acceptTerms,
		Authentication:    authentication,
		Database:          database,
		Hostname:          hostname,
		HTTPPath:          httpPath,
		Port:              port,
		PurgeStagingData:  purgeStagingData,
		RawSchemaOverride: rawSchemaOverride,
		Schema:            schema,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationDatabricksPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
