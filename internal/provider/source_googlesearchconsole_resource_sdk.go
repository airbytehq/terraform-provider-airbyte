// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGoogleSearchConsoleResourceModel) ToCreateSDKType() *shared.SourceGoogleSearchConsoleCreateRequest {
	var authorization shared.SourceGoogleSearchConsoleAuthenticationType
	var sourceGoogleSearchConsoleOAuth *shared.SourceGoogleSearchConsoleOAuth
	if r.Configuration.Authorization.OAuth != nil {
		accessToken := new(string)
		if !r.Configuration.Authorization.OAuth.AccessToken.IsUnknown() && !r.Configuration.Authorization.OAuth.AccessToken.IsNull() {
			*accessToken = r.Configuration.Authorization.OAuth.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		clientID := r.Configuration.Authorization.OAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Authorization.OAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Authorization.OAuth.RefreshToken.ValueString()
		sourceGoogleSearchConsoleOAuth = &shared.SourceGoogleSearchConsoleOAuth{
			AccessToken:  accessToken,
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if sourceGoogleSearchConsoleOAuth != nil {
		authorization = shared.SourceGoogleSearchConsoleAuthenticationType{
			SourceGoogleSearchConsoleOAuth: sourceGoogleSearchConsoleOAuth,
		}
	}
	var sourceGoogleSearchConsoleServiceAccountKeyAuthentication *shared.SourceGoogleSearchConsoleServiceAccountKeyAuthentication
	if r.Configuration.Authorization.ServiceAccountKeyAuthentication != nil {
		email := r.Configuration.Authorization.ServiceAccountKeyAuthentication.Email.ValueString()
		serviceAccountInfo := r.Configuration.Authorization.ServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()
		sourceGoogleSearchConsoleServiceAccountKeyAuthentication = &shared.SourceGoogleSearchConsoleServiceAccountKeyAuthentication{
			Email:              email,
			ServiceAccountInfo: serviceAccountInfo,
		}
	}
	if sourceGoogleSearchConsoleServiceAccountKeyAuthentication != nil {
		authorization = shared.SourceGoogleSearchConsoleAuthenticationType{
			SourceGoogleSearchConsoleServiceAccountKeyAuthentication: sourceGoogleSearchConsoleServiceAccountKeyAuthentication,
		}
	}
	customReports := new(string)
	if !r.Configuration.CustomReports.IsUnknown() && !r.Configuration.CustomReports.IsNull() {
		*customReports = r.Configuration.CustomReports.ValueString()
	} else {
		customReports = nil
	}
	var customReportsArray []shared.SourceGoogleSearchConsoleCustomReportConfig = nil
	for _, customReportsArrayItem := range r.Configuration.CustomReportsArray {
		var dimensions []shared.SourceGoogleSearchConsoleValidEnums = nil
		for _, dimensionsItem := range customReportsArrayItem.Dimensions {
			dimensions = append(dimensions, shared.SourceGoogleSearchConsoleValidEnums(dimensionsItem.ValueString()))
		}
		name := customReportsArrayItem.Name.ValueString()
		customReportsArray = append(customReportsArray, shared.SourceGoogleSearchConsoleCustomReportConfig{
			Dimensions: dimensions,
			Name:       name,
		})
	}
	dataState := new(shared.SourceGoogleSearchConsoleDataFreshness)
	if !r.Configuration.DataState.IsUnknown() && !r.Configuration.DataState.IsNull() {
		*dataState = shared.SourceGoogleSearchConsoleDataFreshness(r.Configuration.DataState.ValueString())
	} else {
		dataState = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	var siteUrls []string = nil
	for _, siteUrlsItem := range r.Configuration.SiteUrls {
		siteUrls = append(siteUrls, siteUrlsItem.ValueString())
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGoogleSearchConsole{
		Authorization:      authorization,
		CustomReports:      customReports,
		CustomReportsArray: customReportsArray,
		DataState:          dataState,
		EndDate:            endDate,
		SiteUrls:           siteUrls,
		StartDate:          startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name1 := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleSearchConsoleCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name1,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleSearchConsoleResourceModel) ToGetSDKType() *shared.SourceGoogleSearchConsoleCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleSearchConsoleResourceModel) ToUpdateSDKType() *shared.SourceGoogleSearchConsolePutRequest {
	var authorization shared.AuthenticationType
	var sourceGoogleSearchConsoleUpdateOAuth *shared.SourceGoogleSearchConsoleUpdateOAuth
	if r.Configuration.Authorization.OAuth != nil {
		accessToken := new(string)
		if !r.Configuration.Authorization.OAuth.AccessToken.IsUnknown() && !r.Configuration.Authorization.OAuth.AccessToken.IsNull() {
			*accessToken = r.Configuration.Authorization.OAuth.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		clientID := r.Configuration.Authorization.OAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Authorization.OAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Authorization.OAuth.RefreshToken.ValueString()
		sourceGoogleSearchConsoleUpdateOAuth = &shared.SourceGoogleSearchConsoleUpdateOAuth{
			AccessToken:  accessToken,
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if sourceGoogleSearchConsoleUpdateOAuth != nil {
		authorization = shared.AuthenticationType{
			SourceGoogleSearchConsoleUpdateOAuth: sourceGoogleSearchConsoleUpdateOAuth,
		}
	}
	var sourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication *shared.SourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication
	if r.Configuration.Authorization.ServiceAccountKeyAuthentication != nil {
		email := r.Configuration.Authorization.ServiceAccountKeyAuthentication.Email.ValueString()
		serviceAccountInfo := r.Configuration.Authorization.ServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()
		sourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication = &shared.SourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication{
			Email:              email,
			ServiceAccountInfo: serviceAccountInfo,
		}
	}
	if sourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication != nil {
		authorization = shared.AuthenticationType{
			SourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication: sourceGoogleSearchConsoleUpdateServiceAccountKeyAuthentication,
		}
	}
	customReports := new(string)
	if !r.Configuration.CustomReports.IsUnknown() && !r.Configuration.CustomReports.IsNull() {
		*customReports = r.Configuration.CustomReports.ValueString()
	} else {
		customReports = nil
	}
	var customReportsArray []shared.SourceGoogleSearchConsoleUpdateCustomReportConfig = nil
	for _, customReportsArrayItem := range r.Configuration.CustomReportsArray {
		var dimensions []shared.SourceGoogleSearchConsoleUpdateValidEnums = nil
		for _, dimensionsItem := range customReportsArrayItem.Dimensions {
			dimensions = append(dimensions, shared.SourceGoogleSearchConsoleUpdateValidEnums(dimensionsItem.ValueString()))
		}
		name := customReportsArrayItem.Name.ValueString()
		customReportsArray = append(customReportsArray, shared.SourceGoogleSearchConsoleUpdateCustomReportConfig{
			Dimensions: dimensions,
			Name:       name,
		})
	}
	dataState := new(shared.DataFreshness)
	if !r.Configuration.DataState.IsUnknown() && !r.Configuration.DataState.IsNull() {
		*dataState = shared.DataFreshness(r.Configuration.DataState.ValueString())
	} else {
		dataState = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	var siteUrls []string = nil
	for _, siteUrlsItem := range r.Configuration.SiteUrls {
		siteUrls = append(siteUrls, siteUrlsItem.ValueString())
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGoogleSearchConsoleUpdate{
		Authorization:      authorization,
		CustomReports:      customReports,
		CustomReportsArray: customReportsArray,
		DataState:          dataState,
		EndDate:            endDate,
		SiteUrls:           siteUrls,
		StartDate:          startDate,
	}
	name1 := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleSearchConsolePutRequest{
		Configuration: configuration,
		Name:          name1,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleSearchConsoleResourceModel) ToDeleteSDKType() *shared.SourceGoogleSearchConsoleCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleSearchConsoleResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGoogleSearchConsoleResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
