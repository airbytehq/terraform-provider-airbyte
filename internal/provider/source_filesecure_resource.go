// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk"
	"context"
	"fmt"

	speakeasy_stringplanmodifier "airbyte/internal/planmodifiers/stringplanmodifier"
	"airbyte/internal/sdk/pkg/models/operations"
	"airbyte/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SourceFileSecureResource{}
var _ resource.ResourceWithImportState = &SourceFileSecureResource{}

func NewSourceFileSecureResource() resource.Resource {
	return &SourceFileSecureResource{}
}

// SourceFileSecureResource defines the resource implementation.
type SourceFileSecureResource struct {
	client *sdk.SDK
}

// SourceFileSecureResourceModel describes the resource data model.
type SourceFileSecureResourceModel struct {
	Configuration SourceFileSecure `tfsdk:"configuration"`
	Name          types.String     `tfsdk:"name"`
	SecretID      types.String     `tfsdk:"secret_id"`
	SourceID      types.String     `tfsdk:"source_id"`
	SourceType    types.String     `tfsdk:"source_type"`
	WorkspaceID   types.String     `tfsdk:"workspace_id"`
}

func (r *SourceFileSecureResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_file_secure"
}

func (r *SourceFileSecureResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceFileSecure Resource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"dataset_name": schema.StringAttribute{
						Required:    true,
						Description: `The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).`,
					},
					"format": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"csv",
								"json",
								"jsonl",
								"excel",
								"excel_binary",
								"feather",
								"parquet",
								"yaml",
							),
						},
						MarkdownDescription: `must be one of ["csv", "json", "jsonl", "excel", "excel_binary", "feather", "parquet", "yaml"]` + "\n" +
							`The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs).`,
					},
					"provider": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"source_file_secure_storage_provider_az_blob_azure_blob_storage": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"sas_token": schema.StringAttribute{
										Optional:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.`,
									},
									"shared_key": schema.StringAttribute{
										Optional:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"AzBlob",
											),
										},
										Description: `must be one of ["AzBlob"]`,
									},
									"storage_account": schema.StringAttribute{
										Required:    true,
										Description: `The globally unique name of the storage account that the desired blob sits within. See <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank">here</a> for more details.`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_gcs_google_cloud_storage": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"service_account_json": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on Google Cloud, this connector would need a service account json credentials with the proper permissions as described <a href="https://cloud.google.com/iam/docs/service-accounts" target="_blank">here</a>. Please generate the credentials.json file and copy/paste its content to this field (expecting JSON formats). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"GCS",
											),
										},
										Description: `must be one of ["GCS"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_https_public_web": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HTTPS",
											),
										},
										Description: `must be one of ["HTTPS"]`,
									},
									"user_agent": schema.BoolAttribute{
										Optional:    true,
										Description: `Add User-Agent to request`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_s3_amazon_web_services": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"aws_access_key_id": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"aws_secret_access_key": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"S3",
											),
										},
										Description: `must be one of ["S3"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_scp_secure_copy_protocol": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SCP",
											),
										},
										Description: `must be one of ["SCP"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_sftp_secure_file_transfer_protocol": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SFTP",
											),
										},
										Description: `must be one of ["SFTP"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_storage_provider_ssh_secure_shell": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SSH",
											),
										},
										Description: `must be one of ["SSH"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_az_blob_azure_blob_storage": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"sas_token": schema.StringAttribute{
										Optional:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.`,
									},
									"shared_key": schema.StringAttribute{
										Optional:    true,
										Description: `To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"AzBlob",
											),
										},
										Description: `must be one of ["AzBlob"]`,
									},
									"storage_account": schema.StringAttribute{
										Required:    true,
										Description: `The globally unique name of the storage account that the desired blob sits within. See <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank">here</a> for more details.`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_gcs_google_cloud_storage": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"service_account_json": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on Google Cloud, this connector would need a service account json credentials with the proper permissions as described <a href="https://cloud.google.com/iam/docs/service-accounts" target="_blank">here</a>. Please generate the credentials.json file and copy/paste its content to this field (expecting JSON formats). If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"GCS",
											),
										},
										Description: `must be one of ["GCS"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_https_public_web": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"HTTPS",
											),
										},
										Description: `must be one of ["HTTPS"]`,
									},
									"user_agent": schema.BoolAttribute{
										Optional:    true,
										Description: `Add User-Agent to request`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_s3_amazon_web_services": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"aws_access_key_id": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"aws_secret_access_key": schema.StringAttribute{
										Optional:    true,
										Description: `In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.`,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"S3",
											),
										},
										Description: `must be one of ["S3"]`,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_scp_secure_copy_protocol": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SCP",
											),
										},
										Description: `must be one of ["SCP"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SFTP",
											),
										},
										Description: `must be one of ["SFTP"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
							"source_file_secure_update_storage_provider_ssh_secure_shell": schema.SingleNestedAttribute{
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"host": schema.StringAttribute{
										Required: true,
									},
									"password": schema.StringAttribute{
										Optional: true,
									},
									"port": schema.StringAttribute{
										Optional: true,
									},
									"storage": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SSH",
											),
										},
										Description: `must be one of ["SSH"]`,
									},
									"user": schema.StringAttribute{
										Required: true,
									},
								},
								Description: `The storage Provider or Location of the file(s) which should be replicated.`,
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
						Description: `The storage Provider or Location of the file(s) which should be replicated.`,
					},
					"reader_options": schema.StringAttribute{
						Optional:    true,
						Description: `This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.`,
					},
					"source_type": schema.StringAttribute{
						Required: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"file-secure",
							),
						},
						Description: `must be one of ["file-secure"]`,
					},
					"url": schema.StringAttribute{
						Required:    true,
						Description: `The URL path to access the file which should be replicated.`,
					},
				},
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
				Required: true,
			},
			"secret_id": schema.StringAttribute{
				Optional:    true,
				Description: `Optional secretID obtained through the public API OAuth redirect flow.`,
			},
			"source_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
			},
			"source_type": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
			},
			"workspace_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(),
				},
				Required: true,
			},
		},
	}
}

func (r *SourceFileSecureResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceFileSecureResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SourceFileSecureResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToCreateSDKType()
	res, err := r.client.Sources.CreateSourceFileSecure(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceFileSecureResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SourceFileSecureResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.GetSourceFileSecureRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.GetSourceFileSecure(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceFileSecureResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SourceFileSecureResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	sourceFileSecurePutRequest := data.ToUpdateSDKType()
	sourceID := data.SourceID.ValueString()
	request := operations.PutSourceFileSecureRequest{
		SourceFileSecurePutRequest: sourceFileSecurePutRequest,
		SourceID:                   sourceID,
	}
	res, err := r.client.Sources.PutSourceFileSecure(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	sourceId1 := data.SourceID.ValueString()
	getRequest := operations.GetSourceFileSecureRequest{
		SourceID: sourceId1,
	}
	getResponse, err := r.client.Sources.GetSourceFileSecure(ctx, getRequest)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if getResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", getResponse))
		return
	}
	if getResponse.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", getResponse.StatusCode), debugResponse(getResponse.RawResponse))
		return
	}
	if getResponse.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(getResponse.RawResponse))
		return
	}
	data.RefreshFromGetResponse(getResponse.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceFileSecureResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SourceFileSecureResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.DeleteSourceFileSecureRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.DeleteSourceFileSecure(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SourceFileSecureResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("source_id"), req, resp)
}
