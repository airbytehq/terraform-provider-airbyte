// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceAmazonSellerPartnerResourceModel) ToSharedSourceAmazonSellerPartnerCreateRequest(ctx context.Context) (*shared.SourceAmazonSellerPartnerCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	awsEnvironment := new(shared.AWSEnvironment)
	if !r.Configuration.AwsEnvironment.IsUnknown() && !r.Configuration.AwsEnvironment.IsNull() {
		*awsEnvironment = shared.AWSEnvironment(r.Configuration.AwsEnvironment.ValueString())
	} else {
		awsEnvironment = nil
	}
	region := new(shared.AWSRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.AWSRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	accountType := new(shared.AWSSellerPartnerAccountType)
	if !r.Configuration.AccountType.IsUnknown() && !r.Configuration.AccountType.IsNull() {
		*accountType = shared.AWSSellerPartnerAccountType(r.Configuration.AccountType.ValueString())
	} else {
		accountType = nil
	}
	appID := new(string)
	if !r.Configuration.AppID.IsUnknown() && !r.Configuration.AppID.IsNull() {
		*appID = r.Configuration.AppID.ValueString()
	} else {
		appID = nil
	}
	var lwaAppID string
	lwaAppID = r.Configuration.LwaAppID.ValueString()

	var lwaClientSecret string
	lwaClientSecret = r.Configuration.LwaClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	replicationStartDate := new(time.Time)
	if !r.Configuration.ReplicationStartDate.IsUnknown() && !r.Configuration.ReplicationStartDate.IsNull() {
		*replicationStartDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	} else {
		replicationStartDate = nil
	}
	replicationEndDate := new(time.Time)
	if !r.Configuration.ReplicationEndDate.IsUnknown() && !r.Configuration.ReplicationEndDate.IsNull() {
		*replicationEndDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.ReplicationEndDate.ValueString())
	} else {
		replicationEndDate = nil
	}
	periodInDays := new(int64)
	if !r.Configuration.PeriodInDays.IsUnknown() && !r.Configuration.PeriodInDays.IsNull() {
		*periodInDays = r.Configuration.PeriodInDays.ValueInt64()
	} else {
		periodInDays = nil
	}
	var reportOptionsList []shared.ReportOptions = []shared.ReportOptions{}
	for _, reportOptionsListItem := range r.Configuration.ReportOptionsList {
		reportName := shared.ReportName(reportOptionsListItem.ReportName.ValueString())
		var streamName string
		streamName = reportOptionsListItem.StreamName.ValueString()

		var optionsList []shared.OptionsList = []shared.OptionsList{}
		for _, optionsListItem := range reportOptionsListItem.OptionsList {
			var optionName string
			optionName = optionsListItem.OptionName.ValueString()

			var optionValue string
			optionValue = optionsListItem.OptionValue.ValueString()

			optionsList = append(optionsList, shared.OptionsList{
				OptionName:  optionName,
				OptionValue: optionValue,
			})
		}
		reportOptionsList = append(reportOptionsList, shared.ReportOptions{
			ReportName:  reportName,
			StreamName:  streamName,
			OptionsList: optionsList,
		})
	}
	waitToAvoidFatalErrors := new(bool)
	if !r.Configuration.WaitToAvoidFatalErrors.IsUnknown() && !r.Configuration.WaitToAvoidFatalErrors.IsNull() {
		*waitToAvoidFatalErrors = r.Configuration.WaitToAvoidFatalErrors.ValueBool()
	} else {
		waitToAvoidFatalErrors = nil
	}
	financialEventsStep := new(shared.FinancialEventsStepSizeInDays)
	if !r.Configuration.FinancialEventsStep.IsUnknown() && !r.Configuration.FinancialEventsStep.IsNull() {
		*financialEventsStep = shared.FinancialEventsStepSizeInDays(r.Configuration.FinancialEventsStep.ValueString())
	} else {
		financialEventsStep = nil
	}
	configuration := shared.SourceAmazonSellerPartner{
		AwsEnvironment:         awsEnvironment,
		Region:                 region,
		AccountType:            accountType,
		AppID:                  appID,
		LwaAppID:               lwaAppID,
		LwaClientSecret:        lwaClientSecret,
		RefreshToken:           refreshToken,
		ReplicationStartDate:   replicationStartDate,
		ReplicationEndDate:     replicationEndDate,
		PeriodInDays:           periodInDays,
		ReportOptionsList:      reportOptionsList,
		WaitToAvoidFatalErrors: waitToAvoidFatalErrors,
		FinancialEventsStep:    financialEventsStep,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceAmazonSellerPartnerCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceAmazonSellerPartnerResourceModel) ToSharedSourceAmazonSellerPartnerPutRequest(ctx context.Context) (*shared.SourceAmazonSellerPartnerPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	awsEnvironment := new(shared.SourceAmazonSellerPartnerUpdateAWSEnvironment)
	if !r.Configuration.AwsEnvironment.IsUnknown() && !r.Configuration.AwsEnvironment.IsNull() {
		*awsEnvironment = shared.SourceAmazonSellerPartnerUpdateAWSEnvironment(r.Configuration.AwsEnvironment.ValueString())
	} else {
		awsEnvironment = nil
	}
	region := new(shared.SourceAmazonSellerPartnerUpdateAWSRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceAmazonSellerPartnerUpdateAWSRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	accountType := new(shared.SourceAmazonSellerPartnerUpdateAWSSellerPartnerAccountType)
	if !r.Configuration.AccountType.IsUnknown() && !r.Configuration.AccountType.IsNull() {
		*accountType = shared.SourceAmazonSellerPartnerUpdateAWSSellerPartnerAccountType(r.Configuration.AccountType.ValueString())
	} else {
		accountType = nil
	}
	appID := new(string)
	if !r.Configuration.AppID.IsUnknown() && !r.Configuration.AppID.IsNull() {
		*appID = r.Configuration.AppID.ValueString()
	} else {
		appID = nil
	}
	var lwaAppID string
	lwaAppID = r.Configuration.LwaAppID.ValueString()

	var lwaClientSecret string
	lwaClientSecret = r.Configuration.LwaClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	replicationStartDate := new(time.Time)
	if !r.Configuration.ReplicationStartDate.IsUnknown() && !r.Configuration.ReplicationStartDate.IsNull() {
		*replicationStartDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	} else {
		replicationStartDate = nil
	}
	replicationEndDate := new(time.Time)
	if !r.Configuration.ReplicationEndDate.IsUnknown() && !r.Configuration.ReplicationEndDate.IsNull() {
		*replicationEndDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.ReplicationEndDate.ValueString())
	} else {
		replicationEndDate = nil
	}
	periodInDays := new(int64)
	if !r.Configuration.PeriodInDays.IsUnknown() && !r.Configuration.PeriodInDays.IsNull() {
		*periodInDays = r.Configuration.PeriodInDays.ValueInt64()
	} else {
		periodInDays = nil
	}
	var reportOptionsList []shared.SourceAmazonSellerPartnerUpdateReportOptions = []shared.SourceAmazonSellerPartnerUpdateReportOptions{}
	for _, reportOptionsListItem := range r.Configuration.ReportOptionsList {
		reportName := shared.SourceAmazonSellerPartnerUpdateReportName(reportOptionsListItem.ReportName.ValueString())
		var streamName string
		streamName = reportOptionsListItem.StreamName.ValueString()

		var optionsList []shared.SourceAmazonSellerPartnerUpdateOptionsList = []shared.SourceAmazonSellerPartnerUpdateOptionsList{}
		for _, optionsListItem := range reportOptionsListItem.OptionsList {
			var optionName string
			optionName = optionsListItem.OptionName.ValueString()

			var optionValue string
			optionValue = optionsListItem.OptionValue.ValueString()

			optionsList = append(optionsList, shared.SourceAmazonSellerPartnerUpdateOptionsList{
				OptionName:  optionName,
				OptionValue: optionValue,
			})
		}
		reportOptionsList = append(reportOptionsList, shared.SourceAmazonSellerPartnerUpdateReportOptions{
			ReportName:  reportName,
			StreamName:  streamName,
			OptionsList: optionsList,
		})
	}
	waitToAvoidFatalErrors := new(bool)
	if !r.Configuration.WaitToAvoidFatalErrors.IsUnknown() && !r.Configuration.WaitToAvoidFatalErrors.IsNull() {
		*waitToAvoidFatalErrors = r.Configuration.WaitToAvoidFatalErrors.ValueBool()
	} else {
		waitToAvoidFatalErrors = nil
	}
	financialEventsStep := new(shared.SourceAmazonSellerPartnerUpdateFinancialEventsStepSizeInDays)
	if !r.Configuration.FinancialEventsStep.IsUnknown() && !r.Configuration.FinancialEventsStep.IsNull() {
		*financialEventsStep = shared.SourceAmazonSellerPartnerUpdateFinancialEventsStepSizeInDays(r.Configuration.FinancialEventsStep.ValueString())
	} else {
		financialEventsStep = nil
	}
	configuration := shared.SourceAmazonSellerPartnerUpdate{
		AwsEnvironment:         awsEnvironment,
		Region:                 region,
		AccountType:            accountType,
		AppID:                  appID,
		LwaAppID:               lwaAppID,
		LwaClientSecret:        lwaClientSecret,
		RefreshToken:           refreshToken,
		ReplicationStartDate:   replicationStartDate,
		ReplicationEndDate:     replicationEndDate,
		PeriodInDays:           periodInDays,
		ReportOptionsList:      reportOptionsList,
		WaitToAvoidFatalErrors: waitToAvoidFatalErrors,
		FinancialEventsStep:    financialEventsStep,
	}
	out := shared.SourceAmazonSellerPartnerPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceAmazonSellerPartnerResourceModel) ToOperationsPutSourceAmazonSellerPartnerRequest(ctx context.Context) (*operations.PutSourceAmazonSellerPartnerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceAmazonSellerPartnerPutRequest, sourceAmazonSellerPartnerPutRequestDiags := r.ToSharedSourceAmazonSellerPartnerPutRequest(ctx)
	diags.Append(sourceAmazonSellerPartnerPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceAmazonSellerPartnerRequest{
		SourceID:                            sourceID,
		SourceAmazonSellerPartnerPutRequest: sourceAmazonSellerPartnerPutRequest,
	}

	return &out, diags
}

func (r *SourceAmazonSellerPartnerResourceModel) ToOperationsGetSourceAmazonSellerPartnerRequest(ctx context.Context) (*operations.GetSourceAmazonSellerPartnerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceAmazonSellerPartnerRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceAmazonSellerPartnerResourceModel) ToOperationsDeleteSourceAmazonSellerPartnerRequest(ctx context.Context) (*operations.DeleteSourceAmazonSellerPartnerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceAmazonSellerPartnerRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceAmazonSellerPartnerResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
