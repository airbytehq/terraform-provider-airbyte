// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceNewsAPIResourceModel) ToSharedSourceNewsAPICreateRequest() *shared.SourceNewsAPICreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	searchQuery := new(string)
	if !r.Configuration.SearchQuery.IsUnknown() && !r.Configuration.SearchQuery.IsNull() {
		*searchQuery = r.Configuration.SearchQuery.ValueString()
	} else {
		searchQuery = nil
	}
	var searchIn []shared.SearchIn = []shared.SearchIn{}
	for _, searchInItem := range r.Configuration.SearchIn {
		searchIn = append(searchIn, shared.SearchIn(searchInItem.ValueString()))
	}
	var sources []string = []string{}
	for _, sourcesItem := range r.Configuration.Sources {
		sources = append(sources, sourcesItem.ValueString())
	}
	var domains []string = []string{}
	for _, domainsItem := range r.Configuration.Domains {
		domains = append(domains, domainsItem.ValueString())
	}
	var excludeDomains []string = []string{}
	for _, excludeDomainsItem := range r.Configuration.ExcludeDomains {
		excludeDomains = append(excludeDomains, excludeDomainsItem.ValueString())
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	language := new(shared.Language)
	if !r.Configuration.Language.IsUnknown() && !r.Configuration.Language.IsNull() {
		*language = shared.Language(r.Configuration.Language.ValueString())
	} else {
		language = nil
	}
	country := new(shared.Country)
	if !r.Configuration.Country.IsUnknown() && !r.Configuration.Country.IsNull() {
		*country = shared.Country(r.Configuration.Country.ValueString())
	} else {
		country = nil
	}
	category := new(shared.Category)
	if !r.Configuration.Category.IsUnknown() && !r.Configuration.Category.IsNull() {
		*category = shared.Category(r.Configuration.Category.ValueString())
	} else {
		category = nil
	}
	sortBy := new(shared.SortBy)
	if !r.Configuration.SortBy.IsUnknown() && !r.Configuration.SortBy.IsNull() {
		*sortBy = shared.SortBy(r.Configuration.SortBy.ValueString())
	} else {
		sortBy = nil
	}
	configuration := shared.SourceNewsAPI{
		APIKey:         apiKey,
		SearchQuery:    searchQuery,
		SearchIn:       searchIn,
		Sources:        sources,
		Domains:        domains,
		ExcludeDomains: excludeDomains,
		StartDate:      startDate,
		EndDate:        endDate,
		Language:       language,
		Country:        country,
		Category:       category,
		SortBy:         sortBy,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceNewsAPICreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceNewsAPIResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNewsAPIResourceModel) ToSharedSourceNewsAPIPutRequest() *shared.SourceNewsAPIPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	searchQuery := new(string)
	if !r.Configuration.SearchQuery.IsUnknown() && !r.Configuration.SearchQuery.IsNull() {
		*searchQuery = r.Configuration.SearchQuery.ValueString()
	} else {
		searchQuery = nil
	}
	var searchIn []shared.SourceNewsAPIUpdateSearchIn = []shared.SourceNewsAPIUpdateSearchIn{}
	for _, searchInItem := range r.Configuration.SearchIn {
		searchIn = append(searchIn, shared.SourceNewsAPIUpdateSearchIn(searchInItem.ValueString()))
	}
	var sources []string = []string{}
	for _, sourcesItem := range r.Configuration.Sources {
		sources = append(sources, sourcesItem.ValueString())
	}
	var domains []string = []string{}
	for _, domainsItem := range r.Configuration.Domains {
		domains = append(domains, domainsItem.ValueString())
	}
	var excludeDomains []string = []string{}
	for _, excludeDomainsItem := range r.Configuration.ExcludeDomains {
		excludeDomains = append(excludeDomains, excludeDomainsItem.ValueString())
	}
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	language := new(shared.SourceNewsAPIUpdateLanguage)
	if !r.Configuration.Language.IsUnknown() && !r.Configuration.Language.IsNull() {
		*language = shared.SourceNewsAPIUpdateLanguage(r.Configuration.Language.ValueString())
	} else {
		language = nil
	}
	country := new(shared.SourceNewsAPIUpdateCountry)
	if !r.Configuration.Country.IsUnknown() && !r.Configuration.Country.IsNull() {
		*country = shared.SourceNewsAPIUpdateCountry(r.Configuration.Country.ValueString())
	} else {
		country = nil
	}
	category := new(shared.SourceNewsAPIUpdateCategory)
	if !r.Configuration.Category.IsUnknown() && !r.Configuration.Category.IsNull() {
		*category = shared.SourceNewsAPIUpdateCategory(r.Configuration.Category.ValueString())
	} else {
		category = nil
	}
	sortBy := new(shared.SourceNewsAPIUpdateSortBy)
	if !r.Configuration.SortBy.IsUnknown() && !r.Configuration.SortBy.IsNull() {
		*sortBy = shared.SourceNewsAPIUpdateSortBy(r.Configuration.SortBy.ValueString())
	} else {
		sortBy = nil
	}
	configuration := shared.SourceNewsAPIUpdate{
		APIKey:         apiKey,
		SearchQuery:    searchQuery,
		SearchIn:       searchIn,
		Sources:        sources,
		Domains:        domains,
		ExcludeDomains: excludeDomains,
		StartDate:      startDate,
		EndDate:        endDate,
		Language:       language,
		Country:        country,
		Category:       category,
		SortBy:         sortBy,
	}
	out := shared.SourceNewsAPIPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
