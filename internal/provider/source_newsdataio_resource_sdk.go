// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceNewsdataIoResourceModel) ToSharedSourceNewsdataIoCreateRequest() *shared.SourceNewsdataIoCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	searchQuery := new(string)
	if !r.Configuration.SearchQuery.IsUnknown() && !r.Configuration.SearchQuery.IsNull() {
		*searchQuery = r.Configuration.SearchQuery.ValueString()
	} else {
		searchQuery = nil
	}
	var countries []interface{} = []interface{}{}
	for _, countriesItem := range r.Configuration.Countries {
		var countriesTmp interface{}
		_ = json.Unmarshal([]byte(countriesItem.ValueString()), &countriesTmp)
		countries = append(countries, countriesTmp)
	}
	var categories []interface{} = []interface{}{}
	for _, categoriesItem := range r.Configuration.Categories {
		var categoriesTmp interface{}
		_ = json.Unmarshal([]byte(categoriesItem.ValueString()), &categoriesTmp)
		categories = append(categories, categoriesTmp)
	}
	var languages []interface{} = []interface{}{}
	for _, languagesItem := range r.Configuration.Languages {
		var languagesTmp interface{}
		_ = json.Unmarshal([]byte(languagesItem.ValueString()), &languagesTmp)
		languages = append(languages, languagesTmp)
	}
	var domains []interface{} = []interface{}{}
	for _, domainsItem := range r.Configuration.Domains {
		var domainsTmp interface{}
		_ = json.Unmarshal([]byte(domainsItem.ValueString()), &domainsTmp)
		domains = append(domains, domainsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	configuration := shared.SourceNewsdataIo{
		APIKey:      apiKey,
		SearchQuery: searchQuery,
		Countries:   countries,
		Categories:  categories,
		Languages:   languages,
		Domains:     domains,
		StartDate:   startDate,
		EndDate:     endDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceNewsdataIoCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceNewsdataIoResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNewsdataIoResourceModel) ToSharedSourceNewsdataIoPutRequest() *shared.SourceNewsdataIoPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	searchQuery := new(string)
	if !r.Configuration.SearchQuery.IsUnknown() && !r.Configuration.SearchQuery.IsNull() {
		*searchQuery = r.Configuration.SearchQuery.ValueString()
	} else {
		searchQuery = nil
	}
	var countries []interface{} = []interface{}{}
	for _, countriesItem := range r.Configuration.Countries {
		var countriesTmp interface{}
		_ = json.Unmarshal([]byte(countriesItem.ValueString()), &countriesTmp)
		countries = append(countries, countriesTmp)
	}
	var categories []interface{} = []interface{}{}
	for _, categoriesItem := range r.Configuration.Categories {
		var categoriesTmp interface{}
		_ = json.Unmarshal([]byte(categoriesItem.ValueString()), &categoriesTmp)
		categories = append(categories, categoriesTmp)
	}
	var languages []interface{} = []interface{}{}
	for _, languagesItem := range r.Configuration.Languages {
		var languagesTmp interface{}
		_ = json.Unmarshal([]byte(languagesItem.ValueString()), &languagesTmp)
		languages = append(languages, languagesTmp)
	}
	var domains []interface{} = []interface{}{}
	for _, domainsItem := range r.Configuration.Domains {
		var domainsTmp interface{}
		_ = json.Unmarshal([]byte(domainsItem.ValueString()), &domainsTmp)
		domains = append(domains, domainsTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	configuration := shared.SourceNewsdataIoUpdate{
		APIKey:      apiKey,
		SearchQuery: searchQuery,
		Countries:   countries,
		Categories:  categories,
		Languages:   languages,
		Domains:     domains,
		StartDate:   startDate,
		EndDate:     endDate,
	}
	out := shared.SourceNewsdataIoPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
