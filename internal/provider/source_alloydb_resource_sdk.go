// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAlloydbResourceModel) ToCreateSDKType() *shared.SourceAlloydbCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourceAlloydbReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourceAlloydbReplicationMethodStandardXmin *shared.SourceAlloydbReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin != nil {
			method := shared.SourceAlloydbReplicationMethodStandardXminMethod(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin.Method.ValueString())
			sourceAlloydbReplicationMethodStandardXmin = &shared.SourceAlloydbReplicationMethodStandardXmin{
				Method: method,
			}
		}
		if sourceAlloydbReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodStandardXmin: sourceAlloydbReplicationMethodStandardXmin,
			}
		}
		var sourceAlloydbReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			method1 := shared.SourceAlloydbReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceAlloydbReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Method:                method1,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
				AdditionalProperties:  additionalProperties,
			}
		}
		if sourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodLogicalReplicationCDC: sourceAlloydbReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourceAlloydbReplicationMethodStandard *shared.SourceAlloydbReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
			method2 := shared.SourceAlloydbReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method.ValueString())
			sourceAlloydbReplicationMethodStandard = &shared.SourceAlloydbReplicationMethodStandard{
				Method: method2,
			}
		}
		if sourceAlloydbReplicationMethodStandard != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodStandard: sourceAlloydbReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	sourceType := shared.SourceAlloydbAlloydb(r.Configuration.SourceType.ValueString())
	var sslMode *shared.SourceAlloydbSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbSSLModesDisable *shared.SourceAlloydbSSLModesDisable
		if r.Configuration.SslMode.SourceAlloydbSSLModesDisable != nil {
			mode := shared.SourceAlloydbSSLModesDisableMode(r.Configuration.SslMode.SourceAlloydbSSLModesDisable.Mode.ValueString())
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbSSLModesDisable = &shared.SourceAlloydbSSLModesDisable{
				Mode:                 mode,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbSSLModesDisable != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesDisable: sourceAlloydbSSLModesDisable,
			}
		}
		var sourceAlloydbSSLModesAllow *shared.SourceAlloydbSSLModesAllow
		if r.Configuration.SslMode.SourceAlloydbSSLModesAllow != nil {
			mode1 := shared.SourceAlloydbSSLModesAllowMode(r.Configuration.SslMode.SourceAlloydbSSLModesAllow.Mode.ValueString())
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbSSLModesAllow = &shared.SourceAlloydbSSLModesAllow{
				Mode:                 mode1,
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbSSLModesAllow != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesAllow: sourceAlloydbSSLModesAllow,
			}
		}
		var sourceAlloydbSSLModesPrefer *shared.SourceAlloydbSSLModesPrefer
		if r.Configuration.SslMode.SourceAlloydbSSLModesPrefer != nil {
			mode2 := shared.SourceAlloydbSSLModesPreferMode(r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.Mode.ValueString())
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbSSLModesPrefer = &shared.SourceAlloydbSSLModesPrefer{
				Mode:                 mode2,
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbSSLModesPrefer != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesPrefer: sourceAlloydbSSLModesPrefer,
			}
		}
		var sourceAlloydbSSLModesRequire *shared.SourceAlloydbSSLModesRequire
		if r.Configuration.SslMode.SourceAlloydbSSLModesRequire != nil {
			mode3 := shared.SourceAlloydbSSLModesRequireMode(r.Configuration.SslMode.SourceAlloydbSSLModesRequire.Mode.ValueString())
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbSSLModesRequire = &shared.SourceAlloydbSSLModesRequire{
				Mode:                 mode3,
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbSSLModesRequire != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesRequire: sourceAlloydbSSLModesRequire,
			}
		}
		var sourceAlloydbSSLModesVerifyCa *shared.SourceAlloydbSSLModesVerifyCa
		if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.SourceAlloydbSSLModesVerifyCaMode(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.Mode.ValueString())
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			sourceAlloydbSSLModesVerifyCa = &shared.SourceAlloydbSSLModesVerifyCa{
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
				Mode:                 mode4,
				AdditionalProperties: additionalProperties5,
			}
		}
		if sourceAlloydbSSLModesVerifyCa != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyCa: sourceAlloydbSSLModesVerifyCa,
			}
		}
		var sourceAlloydbSSLModesVerifyFull *shared.SourceAlloydbSSLModesVerifyFull
		if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.SourceAlloydbSSLModesVerifyFullMode(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.Mode.ValueString())
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			sourceAlloydbSSLModesVerifyFull = &shared.SourceAlloydbSSLModesVerifyFull{
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
				Mode:                 mode5,
				AdditionalProperties: additionalProperties6,
			}
		}
		if sourceAlloydbSSLModesVerifyFull != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyFull: sourceAlloydbSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbSSHTunnelMethodNoTunnel *shared.SourceAlloydbSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceAlloydbSSHTunnelMethodNoTunnel = &shared.SourceAlloydbSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourceAlloydbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodNoTunnel: sourceAlloydbSSHTunnelMethodNoTunnel,
			}
		}
		var sourceAlloydbSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceAlloydbSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodPasswordAuthentication: sourceAlloydbSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydb{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SourceType:        sourceType,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToGetSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) ToUpdateSDKType() *shared.SourceAlloydbPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourceAlloydbUpdateReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourceAlloydbUpdateReplicationMethodStandardXmin *shared.SourceAlloydbUpdateReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandardXmin != nil {
			method := shared.SourceAlloydbUpdateReplicationMethodStandardXminMethod(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandardXmin.Method.ValueString())
			sourceAlloydbUpdateReplicationMethodStandardXmin = &shared.SourceAlloydbUpdateReplicationMethodStandardXmin{
				Method: method,
			}
		}
		if sourceAlloydbUpdateReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodStandardXmin: sourceAlloydbUpdateReplicationMethodStandardXmin,
			}
		}
		var sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			method1 := shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin := new(shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Method:                method1,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
				AdditionalProperties:  additionalProperties,
			}
		}
		if sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC: sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourceAlloydbUpdateReplicationMethodStandard *shared.SourceAlloydbUpdateReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandard != nil {
			method2 := shared.SourceAlloydbUpdateReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandard.Method.ValueString())
			sourceAlloydbUpdateReplicationMethodStandard = &shared.SourceAlloydbUpdateReplicationMethodStandard{
				Method: method2,
			}
		}
		if sourceAlloydbUpdateReplicationMethodStandard != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodStandard: sourceAlloydbUpdateReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourceAlloydbUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbUpdateSSLModesDisable *shared.SourceAlloydbUpdateSSLModesDisable
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable != nil {
			mode := shared.SourceAlloydbUpdateSSLModesDisableMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.Mode.ValueString())
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbUpdateSSLModesDisable = &shared.SourceAlloydbUpdateSSLModesDisable{
				Mode:                 mode,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbUpdateSSLModesDisable != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesDisable: sourceAlloydbUpdateSSLModesDisable,
			}
		}
		var sourceAlloydbUpdateSSLModesAllow *shared.SourceAlloydbUpdateSSLModesAllow
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow != nil {
			mode1 := shared.SourceAlloydbUpdateSSLModesAllowMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.Mode.ValueString())
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbUpdateSSLModesAllow = &shared.SourceAlloydbUpdateSSLModesAllow{
				Mode:                 mode1,
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbUpdateSSLModesAllow != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesAllow: sourceAlloydbUpdateSSLModesAllow,
			}
		}
		var sourceAlloydbUpdateSSLModesPrefer *shared.SourceAlloydbUpdateSSLModesPrefer
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer != nil {
			mode2 := shared.SourceAlloydbUpdateSSLModesPreferMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.Mode.ValueString())
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbUpdateSSLModesPrefer = &shared.SourceAlloydbUpdateSSLModesPrefer{
				Mode:                 mode2,
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbUpdateSSLModesPrefer != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesPrefer: sourceAlloydbUpdateSSLModesPrefer,
			}
		}
		var sourceAlloydbUpdateSSLModesRequire *shared.SourceAlloydbUpdateSSLModesRequire
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire != nil {
			mode3 := shared.SourceAlloydbUpdateSSLModesRequireMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.Mode.ValueString())
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbUpdateSSLModesRequire = &shared.SourceAlloydbUpdateSSLModesRequire{
				Mode:                 mode3,
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbUpdateSSLModesRequire != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesRequire: sourceAlloydbUpdateSSLModesRequire,
			}
		}
		var sourceAlloydbUpdateSSLModesVerifyCa *shared.SourceAlloydbUpdateSSLModesVerifyCa
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.SourceAlloydbUpdateSSLModesVerifyCaMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.Mode.ValueString())
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			sourceAlloydbUpdateSSLModesVerifyCa = &shared.SourceAlloydbUpdateSSLModesVerifyCa{
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
				Mode:                 mode4,
				AdditionalProperties: additionalProperties5,
			}
		}
		if sourceAlloydbUpdateSSLModesVerifyCa != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesVerifyCa: sourceAlloydbUpdateSSLModesVerifyCa,
			}
		}
		var sourceAlloydbUpdateSSLModesVerifyFull *shared.SourceAlloydbUpdateSSLModesVerifyFull
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.SourceAlloydbUpdateSSLModesVerifyFullMode(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.Mode.ValueString())
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			sourceAlloydbUpdateSSLModesVerifyFull = &shared.SourceAlloydbUpdateSSLModesVerifyFull{
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
				Mode:                 mode5,
				AdditionalProperties: additionalProperties6,
			}
		}
		if sourceAlloydbUpdateSSLModesVerifyFull != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesVerifyFull: sourceAlloydbUpdateSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbUpdateSSHTunnelMethodNoTunnel *shared.SourceAlloydbUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceAlloydbUpdateSSHTunnelMethodNoTunnel = &shared.SourceAlloydbUpdateSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodNoTunnel: sourceAlloydbUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication: sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydbUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToDeleteSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) RefreshFromGetResponse(resp *shared.SourceAlloydbGetResponse) {
	r.Configuration.Database = types.StringValue(resp.Configuration.Database)
	r.Configuration.Host = types.StringValue(resp.Configuration.Host)
	if resp.Configuration.JdbcURLParams != nil {
		r.Configuration.JdbcURLParams = types.StringValue(*resp.Configuration.JdbcURLParams)
	} else {
		r.Configuration.JdbcURLParams = types.StringNull()
	}
	if resp.Configuration.Password != nil {
		r.Configuration.Password = types.StringValue(*resp.Configuration.Password)
	} else {
		r.Configuration.Password = types.StringNull()
	}
	r.Configuration.Port = types.Int64Value(resp.Configuration.Port)
	if resp.Configuration.ReplicationMethod == nil {
		r.Configuration.ReplicationMethod = nil
	} else {
		r.Configuration.ReplicationMethod = &SourceAlloydbReplicationMethod{}
		if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC = &SourceAlloydbReplicationMethodLogicalReplicationCDC{}
			if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds != nil {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Value(*resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds)
			} else {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Null()
			}
			if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour != nil {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringValue(string(*resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour))
			} else {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringNull()
			}
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method = types.StringValue(string(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method))
			if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin != nil {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin = types.StringValue(string(*resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin))
			} else {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin = types.StringNull()
			}
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication = types.StringValue(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication)
			if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize != nil {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize = types.Int64Value(*resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize)
			} else {
				r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize = types.Int64Null()
			}
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot = types.StringValue(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot)
			if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() {
				if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties == nil {
					r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties)
					r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
				}
			}
		}
		if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard = &SourceAlloydbReplicationMethodStandard{}
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method = types.StringValue(string(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method))
		}
		if resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin = &SourceAlloydbReplicationMethodStandardXmin{}
			r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin.Method = types.StringValue(string(resp.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin.Method))
		}
		if resp.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC = &SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC{}
		}
		if resp.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandard != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandard = &SourceAlloydbReplicationMethodStandard{}
		}
		if resp.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandardXmin != nil {
			r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandardXmin = &SourceAlloydbReplicationMethodStandardXmin{}
		}
	}
	r.Configuration.Schemas = nil
	for _, v := range resp.Configuration.Schemas {
		r.Configuration.Schemas = append(r.Configuration.Schemas, types.StringValue(v))
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.SslMode == nil {
		r.Configuration.SslMode = nil
	} else {
		r.Configuration.SslMode = &SourceAlloydbSSLModes{}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesAllow != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesAllow = &SourceAlloydbSSLModesAllow{}
			r.Configuration.SslMode.SourceAlloydbSSLModesAllow.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesAllow.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesDisable != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesDisable = &SourceAlloydbSSLModesDisable{}
			r.Configuration.SslMode.SourceAlloydbSSLModesDisable.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesDisable.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult2, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesPrefer != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesPrefer = &SourceAlloydbSSLModesPrefer{}
			r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesPrefer.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult3, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties = types.StringValue(string(additionalPropertiesResult3))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesRequire != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesRequire = &SourceAlloydbSSLModesRequire{}
			r.Configuration.SslMode.SourceAlloydbSSLModesRequire.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesRequire.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult4, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties = types.StringValue(string(additionalPropertiesResult4))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa = &SourceAlloydbSSLModesVerifyCa{}
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate = types.StringValue(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate)
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate = types.StringNull()
			}
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey = types.StringNull()
			}
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword = types.StringNull()
			}
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult5, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties = types.StringValue(string(additionalPropertiesResult5))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull = &SourceAlloydbSSLModesVerifyFull{}
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate)
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate = types.StringNull()
			}
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey = types.StringNull()
			}
			if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword != nil {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword)
			} else {
				r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
			}
			r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.Mode))
			if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.IsUnknown() {
				if resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties == nil {
					r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult6, _ := json.Marshal(resp.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties)
					r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties = types.StringValue(string(additionalPropertiesResult6))
				}
			}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow = &SourceAlloydbUpdateSSLModesAllow{}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable = &SourceAlloydbUpdateSSLModesDisable{}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer = &SourceAlloydbUpdateSSLModesPrefer{}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire = &SourceAlloydbUpdateSSLModesRequire{}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa = &SourceAlloydbUpdateSSLModesVerifyCa{}
		}
		if resp.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull != nil {
			r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull = &SourceAlloydbUpdateSSLModesVerifyFull{}
		}
	}
	if resp.Configuration.TunnelMethod == nil {
		r.Configuration.TunnelMethod = nil
	} else {
		r.Configuration.TunnelMethod = &SourceAlloydbSSHTunnelMethod{}
		if resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod))
		}
		if resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
		}
		if resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
			r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
		}
		if resp.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
			r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
		}
		if resp.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
			r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
		}
		if resp.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
		}
	}
	r.Configuration.Username = types.StringValue(resp.Configuration.Username)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAlloydbResourceModel) RefreshFromCreateResponse(resp *shared.SourceAlloydbGetResponse) {
	r.RefreshFromGetResponse(resp)
}
