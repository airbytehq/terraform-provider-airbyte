// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAlloydbResourceModel) ToCreateSDKType() *shared.SourceAlloydbCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.SourceAlloydbReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourceAlloydbStandardXmin *shared.SourceAlloydbStandardXmin
		if r.Configuration.ReplicationMethod.StandardXmin != nil {
			sourceAlloydbStandardXmin = &shared.SourceAlloydbStandardXmin{}
		}
		if sourceAlloydbStandardXmin != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbStandardXmin: sourceAlloydbStandardXmin,
			}
		}
		var sourceAlloydbLogicalReplicationCDC *shared.SourceAlloydbLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.LogicalReplicationCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbLSNCommitBehaviour(r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.SourceAlloydbPlugin)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbPlugin(r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.LogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.LogicalReplicationCDC.ReplicationSlot.ValueString()
			sourceAlloydbLogicalReplicationCDC = &shared.SourceAlloydbLogicalReplicationCDC{
				AdditionalProperties:  additionalProperties,
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
			}
		}
		if sourceAlloydbLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbLogicalReplicationCDC: sourceAlloydbLogicalReplicationCDC,
			}
		}
		var sourceAlloydbStandard *shared.SourceAlloydbStandard
		if r.Configuration.ReplicationMethod.Standard != nil {
			sourceAlloydbStandard = &shared.SourceAlloydbStandard{}
		}
		if sourceAlloydbStandard != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbStandard: sourceAlloydbStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourceAlloydbSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbDisable *shared.SourceAlloydbDisable
		if r.Configuration.SslMode.Disable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.Disable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Disable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Disable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbDisable = &shared.SourceAlloydbDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbDisable != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbDisable: sourceAlloydbDisable,
			}
		}
		var sourceAlloydbAllow *shared.SourceAlloydbAllow
		if r.Configuration.SslMode.Allow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.Allow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Allow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Allow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbAllow = &shared.SourceAlloydbAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbAllow != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbAllow: sourceAlloydbAllow,
			}
		}
		var sourceAlloydbPrefer *shared.SourceAlloydbPrefer
		if r.Configuration.SslMode.Prefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.Prefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Prefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Prefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbPrefer = &shared.SourceAlloydbPrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbPrefer != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbPrefer: sourceAlloydbPrefer,
			}
		}
		var sourceAlloydbRequire *shared.SourceAlloydbRequire
		if r.Configuration.SslMode.Require != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.Require.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Require.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Require.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbRequire = &shared.SourceAlloydbRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbRequire != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbRequire: sourceAlloydbRequire,
			}
		}
		var sourceAlloydbVerifyCa *shared.SourceAlloydbVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.VerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.VerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceAlloydbVerifyCa = &shared.SourceAlloydbVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourceAlloydbVerifyCa != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbVerifyCa: sourceAlloydbVerifyCa,
			}
		}
		var sourceAlloydbVerifyFull *shared.SourceAlloydbVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceAlloydbVerifyFull = &shared.SourceAlloydbVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourceAlloydbVerifyFull != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbVerifyFull: sourceAlloydbVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbNoTunnel *shared.SourceAlloydbNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourceAlloydbNoTunnel = &shared.SourceAlloydbNoTunnel{}
		}
		if sourceAlloydbNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbNoTunnel: sourceAlloydbNoTunnel,
			}
		}
		var sourceAlloydbSSHKeyAuthentication *shared.SourceAlloydbSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbSSHKeyAuthentication = &shared.SourceAlloydbSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceAlloydbSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHKeyAuthentication: sourceAlloydbSSHKeyAuthentication,
			}
		}
		var sourceAlloydbPasswordAuthentication *shared.SourceAlloydbPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbPasswordAuthentication = &shared.SourceAlloydbPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbPasswordAuthentication: sourceAlloydbPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydb{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToGetSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) ToUpdateSDKType() *shared.SourceAlloydbPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.ReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var standardXmin *shared.StandardXmin
		if r.Configuration.ReplicationMethod.StandardXmin != nil {
			standardXmin = &shared.StandardXmin{}
		}
		if standardXmin != nil {
			replicationMethod = &shared.ReplicationMethod{
				StandardXmin: standardXmin,
			}
		}
		var logicalReplicationCDC *shared.LogicalReplicationCDC
		if r.Configuration.ReplicationMethod.LogicalReplicationCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.LogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.LogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.LSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.LSNCommitBehaviour(r.Configuration.ReplicationMethod.LogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.Plugin)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.Plugin(r.Configuration.ReplicationMethod.LogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.LogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.LogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.LogicalReplicationCDC.ReplicationSlot.ValueString()
			logicalReplicationCDC = &shared.LogicalReplicationCDC{
				AdditionalProperties:  additionalProperties,
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
			}
		}
		if logicalReplicationCDC != nil {
			replicationMethod = &shared.ReplicationMethod{
				LogicalReplicationCDC: logicalReplicationCDC,
			}
		}
		var sourceAlloydbUpdateStandard *shared.SourceAlloydbUpdateStandard
		if r.Configuration.ReplicationMethod.Standard != nil {
			sourceAlloydbUpdateStandard = &shared.SourceAlloydbUpdateStandard{}
		}
		if sourceAlloydbUpdateStandard != nil {
			replicationMethod = &shared.ReplicationMethod{
				SourceAlloydbUpdateStandard: sourceAlloydbUpdateStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourceAlloydbUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbUpdateDisable *shared.SourceAlloydbUpdateDisable
		if r.Configuration.SslMode.Disable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.Disable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Disable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Disable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbUpdateDisable = &shared.SourceAlloydbUpdateDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbUpdateDisable != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateDisable: sourceAlloydbUpdateDisable,
			}
		}
		var sourceAlloydbUpdateAllow *shared.SourceAlloydbUpdateAllow
		if r.Configuration.SslMode.Allow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.Allow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Allow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Allow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbUpdateAllow = &shared.SourceAlloydbUpdateAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbUpdateAllow != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateAllow: sourceAlloydbUpdateAllow,
			}
		}
		var sourceAlloydbUpdatePrefer *shared.SourceAlloydbUpdatePrefer
		if r.Configuration.SslMode.Prefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.Prefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Prefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Prefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbUpdatePrefer = &shared.SourceAlloydbUpdatePrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbUpdatePrefer != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdatePrefer: sourceAlloydbUpdatePrefer,
			}
		}
		var sourceAlloydbUpdateRequire *shared.SourceAlloydbUpdateRequire
		if r.Configuration.SslMode.Require != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.Require.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Require.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Require.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbUpdateRequire = &shared.SourceAlloydbUpdateRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbUpdateRequire != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateRequire: sourceAlloydbUpdateRequire,
			}
		}
		var sourceAlloydbUpdateVerifyCa *shared.SourceAlloydbUpdateVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.VerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.VerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceAlloydbUpdateVerifyCa = &shared.SourceAlloydbUpdateVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourceAlloydbUpdateVerifyCa != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateVerifyCa: sourceAlloydbUpdateVerifyCa,
			}
		}
		var sourceAlloydbUpdateVerifyFull *shared.SourceAlloydbUpdateVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceAlloydbUpdateVerifyFull = &shared.SourceAlloydbUpdateVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourceAlloydbUpdateVerifyFull != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateVerifyFull: sourceAlloydbUpdateVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbUpdateNoTunnel *shared.SourceAlloydbUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourceAlloydbUpdateNoTunnel = &shared.SourceAlloydbUpdateNoTunnel{}
		}
		if sourceAlloydbUpdateNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateNoTunnel: sourceAlloydbUpdateNoTunnel,
			}
		}
		var sourceAlloydbUpdateSSHKeyAuthentication *shared.SourceAlloydbUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbUpdateSSHKeyAuthentication = &shared.SourceAlloydbUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceAlloydbUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHKeyAuthentication: sourceAlloydbUpdateSSHKeyAuthentication,
			}
		}
		var sourceAlloydbUpdatePasswordAuthentication *shared.SourceAlloydbUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbUpdatePasswordAuthentication = &shared.SourceAlloydbUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdatePasswordAuthentication: sourceAlloydbUpdatePasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydbUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToDeleteSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAlloydbResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
