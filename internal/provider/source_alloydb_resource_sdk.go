// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAlloydbResourceModel) ToCreateSDKType() *shared.SourceAlloydbCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.SourceAlloydbReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourceAlloydbReplicationMethodStandardXmin *shared.SourceAlloydbReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandardXmin != nil {
			sourceAlloydbReplicationMethodStandardXmin = &shared.SourceAlloydbReplicationMethodStandardXmin{}
		}
		if sourceAlloydbReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodStandardXmin: sourceAlloydbReplicationMethodStandardXmin,
			}
		}
		var sourceAlloydbReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			sourceAlloydbReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbReplicationMethodLogicalReplicationCDC{
				AdditionalProperties:  additionalProperties,
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
			}
		}
		if sourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodLogicalReplicationCDC: sourceAlloydbReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourceAlloydbReplicationMethodStandard *shared.SourceAlloydbReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
			sourceAlloydbReplicationMethodStandard = &shared.SourceAlloydbReplicationMethodStandard{}
		}
		if sourceAlloydbReplicationMethodStandard != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodStandard: sourceAlloydbReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourceAlloydbSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbSSLModesDisable *shared.SourceAlloydbSSLModesDisable
		if r.Configuration.SslMode.SourceAlloydbSSLModesDisable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbSSLModesDisable = &shared.SourceAlloydbSSLModesDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbSSLModesDisable != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesDisable: sourceAlloydbSSLModesDisable,
			}
		}
		var sourceAlloydbSSLModesAllow *shared.SourceAlloydbSSLModesAllow
		if r.Configuration.SslMode.SourceAlloydbSSLModesAllow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbSSLModesAllow = &shared.SourceAlloydbSSLModesAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbSSLModesAllow != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesAllow: sourceAlloydbSSLModesAllow,
			}
		}
		var sourceAlloydbSSLModesPrefer *shared.SourceAlloydbSSLModesPrefer
		if r.Configuration.SslMode.SourceAlloydbSSLModesPrefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbSSLModesPrefer = &shared.SourceAlloydbSSLModesPrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbSSLModesPrefer != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesPrefer: sourceAlloydbSSLModesPrefer,
			}
		}
		var sourceAlloydbSSLModesRequire *shared.SourceAlloydbSSLModesRequire
		if r.Configuration.SslMode.SourceAlloydbSSLModesRequire != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbSSLModesRequire = &shared.SourceAlloydbSSLModesRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbSSLModesRequire != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesRequire: sourceAlloydbSSLModesRequire,
			}
		}
		var sourceAlloydbSSLModesVerifyCa *shared.SourceAlloydbSSLModesVerifyCa
		if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceAlloydbSSLModesVerifyCa = &shared.SourceAlloydbSSLModesVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourceAlloydbSSLModesVerifyCa != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyCa: sourceAlloydbSSLModesVerifyCa,
			}
		}
		var sourceAlloydbSSLModesVerifyFull *shared.SourceAlloydbSSLModesVerifyFull
		if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceAlloydbSSLModesVerifyFull = &shared.SourceAlloydbSSLModesVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourceAlloydbSSLModesVerifyFull != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyFull: sourceAlloydbSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbSSHTunnelMethodNoTunnel *shared.SourceAlloydbSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
			sourceAlloydbSSHTunnelMethodNoTunnel = &shared.SourceAlloydbSSHTunnelMethodNoTunnel{}
		}
		if sourceAlloydbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodNoTunnel: sourceAlloydbSSHTunnelMethodNoTunnel,
			}
		}
		var sourceAlloydbSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceAlloydbSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodPasswordAuthentication: sourceAlloydbSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydb{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToGetSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) ToUpdateSDKType() *shared.SourceAlloydbPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.SourceAlloydbUpdateReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourceAlloydbUpdateReplicationMethodStandardXmin *shared.SourceAlloydbUpdateReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandardXmin != nil {
			sourceAlloydbUpdateReplicationMethodStandardXmin = &shared.SourceAlloydbUpdateReplicationMethodStandardXmin{}
		}
		if sourceAlloydbUpdateReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodStandardXmin: sourceAlloydbUpdateReplicationMethodStandardXmin,
			}
		}
		var sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC{
				AdditionalProperties:  additionalProperties,
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
			}
		}
		if sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC: sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourceAlloydbUpdateReplicationMethodStandard *shared.SourceAlloydbUpdateReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourceAlloydbUpdateReplicationMethodStandard != nil {
			sourceAlloydbUpdateReplicationMethodStandard = &shared.SourceAlloydbUpdateReplicationMethodStandard{}
		}
		if sourceAlloydbUpdateReplicationMethodStandard != nil {
			replicationMethod = &shared.SourceAlloydbUpdateReplicationMethod{
				SourceAlloydbUpdateReplicationMethodStandard: sourceAlloydbUpdateReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourceAlloydbUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourceAlloydbUpdateSSLModesDisable *shared.SourceAlloydbUpdateSSLModesDisable
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourceAlloydbUpdateSSLModesDisable = &shared.SourceAlloydbUpdateSSLModesDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourceAlloydbUpdateSSLModesDisable != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesDisable: sourceAlloydbUpdateSSLModesDisable,
			}
		}
		var sourceAlloydbUpdateSSLModesAllow *shared.SourceAlloydbUpdateSSLModesAllow
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourceAlloydbUpdateSSLModesAllow = &shared.SourceAlloydbUpdateSSLModesAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourceAlloydbUpdateSSLModesAllow != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesAllow: sourceAlloydbUpdateSSLModesAllow,
			}
		}
		var sourceAlloydbUpdateSSLModesPrefer *shared.SourceAlloydbUpdateSSLModesPrefer
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourceAlloydbUpdateSSLModesPrefer = &shared.SourceAlloydbUpdateSSLModesPrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourceAlloydbUpdateSSLModesPrefer != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesPrefer: sourceAlloydbUpdateSSLModesPrefer,
			}
		}
		var sourceAlloydbUpdateSSLModesRequire *shared.SourceAlloydbUpdateSSLModesRequire
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourceAlloydbUpdateSSLModesRequire = &shared.SourceAlloydbUpdateSSLModesRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourceAlloydbUpdateSSLModesRequire != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesRequire: sourceAlloydbUpdateSSLModesRequire,
			}
		}
		var sourceAlloydbUpdateSSLModesVerifyCa *shared.SourceAlloydbUpdateSSLModesVerifyCa
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceAlloydbUpdateSSLModesVerifyCa = &shared.SourceAlloydbUpdateSSLModesVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourceAlloydbUpdateSSLModesVerifyCa != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesVerifyCa: sourceAlloydbUpdateSSLModesVerifyCa,
			}
		}
		var sourceAlloydbUpdateSSLModesVerifyFull *shared.SourceAlloydbUpdateSSLModesVerifyFull
		if r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceAlloydbUpdateSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceAlloydbUpdateSSLModesVerifyFull = &shared.SourceAlloydbUpdateSSLModesVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourceAlloydbUpdateSSLModesVerifyFull != nil {
			sslMode = &shared.SourceAlloydbUpdateSSLModes{
				SourceAlloydbUpdateSSLModesVerifyFull: sourceAlloydbUpdateSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourceAlloydbUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceAlloydbUpdateSSHTunnelMethodNoTunnel *shared.SourceAlloydbUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
			sourceAlloydbUpdateSSHTunnelMethodNoTunnel = &shared.SourceAlloydbUpdateSSHTunnelMethodNoTunnel{}
		}
		if sourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodNoTunnel: sourceAlloydbUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbUpdateSSHTunnelMethod{
				SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication: sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydbUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToDeleteSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceAlloydbResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceAlloydbResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
