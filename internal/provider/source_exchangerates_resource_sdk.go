// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceExchangeRatesResourceModel) ToSharedSourceExchangeRatesCreateRequest() *shared.SourceExchangeRatesCreateRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	base := new(string)
	if !r.Configuration.Base.IsUnknown() && !r.Configuration.Base.IsNull() {
		*base = r.Configuration.Base.ValueString()
	} else {
		base = nil
	}
	ignoreWeekends := new(bool)
	if !r.Configuration.IgnoreWeekends.IsUnknown() && !r.Configuration.IgnoreWeekends.IsNull() {
		*ignoreWeekends = r.Configuration.IgnoreWeekends.ValueBool()
	} else {
		ignoreWeekends = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceExchangeRates{
		AccessKey:      accessKey,
		Base:           base,
		IgnoreWeekends: ignoreWeekends,
		StartDate:      startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceExchangeRatesCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceExchangeRatesResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceExchangeRatesResourceModel) ToSharedSourceExchangeRatesPutRequest() *shared.SourceExchangeRatesPutRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	base := new(string)
	if !r.Configuration.Base.IsUnknown() && !r.Configuration.Base.IsNull() {
		*base = r.Configuration.Base.ValueString()
	} else {
		base = nil
	}
	ignoreWeekends := new(bool)
	if !r.Configuration.IgnoreWeekends.IsUnknown() && !r.Configuration.IgnoreWeekends.IsNull() {
		*ignoreWeekends = r.Configuration.IgnoreWeekends.ValueBool()
	} else {
		ignoreWeekends = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceExchangeRatesUpdate{
		AccessKey:      accessKey,
		Base:           base,
		IgnoreWeekends: ignoreWeekends,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceExchangeRatesPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
