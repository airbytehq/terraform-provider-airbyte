// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceExchangeRatesResourceModel) ToCreateSDKType() *shared.SourceExchangeRatesCreateRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	base := new(string)
	if !r.Configuration.Base.IsUnknown() && !r.Configuration.Base.IsNull() {
		*base = r.Configuration.Base.ValueString()
	} else {
		base = nil
	}
	ignoreWeekends := new(bool)
	if !r.Configuration.IgnoreWeekends.IsUnknown() && !r.Configuration.IgnoreWeekends.IsNull() {
		*ignoreWeekends = r.Configuration.IgnoreWeekends.ValueBool()
	} else {
		ignoreWeekends = nil
	}
	sourceType := shared.SourceExchangeRatesExchangeRates(r.Configuration.SourceType.ValueString())
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceExchangeRates{
		AccessKey:      accessKey,
		Base:           base,
		IgnoreWeekends: ignoreWeekends,
		SourceType:     sourceType,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceExchangeRatesCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceExchangeRatesResourceModel) ToGetSDKType() *shared.SourceExchangeRatesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceExchangeRatesResourceModel) ToUpdateSDKType() *shared.SourceExchangeRatesPutRequest {
	accessKey := r.Configuration.AccessKey.ValueString()
	base := new(string)
	if !r.Configuration.Base.IsUnknown() && !r.Configuration.Base.IsNull() {
		*base = r.Configuration.Base.ValueString()
	} else {
		base = nil
	}
	ignoreWeekends := new(bool)
	if !r.Configuration.IgnoreWeekends.IsUnknown() && !r.Configuration.IgnoreWeekends.IsNull() {
		*ignoreWeekends = r.Configuration.IgnoreWeekends.ValueBool()
	} else {
		ignoreWeekends = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceExchangeRatesUpdate{
		AccessKey:      accessKey,
		Base:           base,
		IgnoreWeekends: ignoreWeekends,
		StartDate:      startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceExchangeRatesPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceExchangeRatesResourceModel) ToDeleteSDKType() *shared.SourceExchangeRatesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceExchangeRatesResourceModel) RefreshFromGetResponse(resp *shared.SourceExchangeRatesGetResponse) {
	r.Configuration.AccessKey = types.StringValue(resp.Configuration.AccessKey)
	if resp.Configuration.Base != nil {
		r.Configuration.Base = types.StringValue(*resp.Configuration.Base)
	} else {
		r.Configuration.Base = types.StringNull()
	}
	if resp.Configuration.IgnoreWeekends != nil {
		r.Configuration.IgnoreWeekends = types.BoolValue(*resp.Configuration.IgnoreWeekends)
	} else {
		r.Configuration.IgnoreWeekends = types.BoolNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceExchangeRatesResourceModel) RefreshFromCreateResponse(resp *shared.SourceExchangeRatesGetResponse) {
	r.RefreshFromGetResponse(resp)
}
