// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceBingAdsResourceModel) ToCreateSDKType() *shared.SourceBingAdsCreateRequest {
	authMethod := new(shared.SourceBingAdsAuthMethod)
	if !r.Configuration.AuthMethod.IsUnknown() && !r.Configuration.AuthMethod.IsNull() {
		*authMethod = shared.SourceBingAdsAuthMethod(r.Configuration.AuthMethod.ValueString())
	} else {
		authMethod = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := new(string)
	if !r.Configuration.ClientSecret.IsUnknown() && !r.Configuration.ClientSecret.IsNull() {
		*clientSecret = r.Configuration.ClientSecret.ValueString()
	} else {
		clientSecret = nil
	}
	developerToken := r.Configuration.DeveloperToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	reportsStartDate := customTypes.MustDateFromString(r.Configuration.ReportsStartDate.ValueString())
	sourceType := shared.SourceBingAdsBingAds(r.Configuration.SourceType.ValueString())
	tenantID := new(string)
	if !r.Configuration.TenantID.IsUnknown() && !r.Configuration.TenantID.IsNull() {
		*tenantID = r.Configuration.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	configuration := shared.SourceBingAds{
		AuthMethod:       authMethod,
		ClientID:         clientID,
		ClientSecret:     clientSecret,
		DeveloperToken:   developerToken,
		LookbackWindow:   lookbackWindow,
		RefreshToken:     refreshToken,
		ReportsStartDate: reportsStartDate,
		SourceType:       sourceType,
		TenantID:         tenantID,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceBingAdsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceBingAdsResourceModel) ToGetSDKType() *shared.SourceBingAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceBingAdsResourceModel) ToUpdateSDKType() *shared.SourceBingAdsPutRequest {
	authMethod := new(shared.SourceBingAdsUpdateAuthMethod)
	if !r.Configuration.AuthMethod.IsUnknown() && !r.Configuration.AuthMethod.IsNull() {
		*authMethod = shared.SourceBingAdsUpdateAuthMethod(r.Configuration.AuthMethod.ValueString())
	} else {
		authMethod = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := new(string)
	if !r.Configuration.ClientSecret.IsUnknown() && !r.Configuration.ClientSecret.IsNull() {
		*clientSecret = r.Configuration.ClientSecret.ValueString()
	} else {
		clientSecret = nil
	}
	developerToken := r.Configuration.DeveloperToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	reportsStartDate := customTypes.MustDateFromString(r.Configuration.ReportsStartDate.ValueString())
	tenantID := new(string)
	if !r.Configuration.TenantID.IsUnknown() && !r.Configuration.TenantID.IsNull() {
		*tenantID = r.Configuration.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	configuration := shared.SourceBingAdsUpdate{
		AuthMethod:       authMethod,
		ClientID:         clientID,
		ClientSecret:     clientSecret,
		DeveloperToken:   developerToken,
		LookbackWindow:   lookbackWindow,
		RefreshToken:     refreshToken,
		ReportsStartDate: reportsStartDate,
		TenantID:         tenantID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceBingAdsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceBingAdsResourceModel) ToDeleteSDKType() *shared.SourceBingAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceBingAdsResourceModel) RefreshFromGetResponse(resp *shared.SourceBingAdsGetResponse) {
	if resp.Configuration.AuthMethod != nil {
		r.Configuration.AuthMethod = types.StringValue(string(*resp.Configuration.AuthMethod))
	} else {
		r.Configuration.AuthMethod = types.StringNull()
	}
	r.Configuration.ClientID = types.StringValue(resp.Configuration.ClientID)
	if resp.Configuration.ClientSecret != nil {
		r.Configuration.ClientSecret = types.StringValue(*resp.Configuration.ClientSecret)
	} else {
		r.Configuration.ClientSecret = types.StringNull()
	}
	r.Configuration.DeveloperToken = types.StringValue(resp.Configuration.DeveloperToken)
	if resp.Configuration.LookbackWindow != nil {
		r.Configuration.LookbackWindow = types.Int64Value(*resp.Configuration.LookbackWindow)
	} else {
		r.Configuration.LookbackWindow = types.Int64Null()
	}
	r.Configuration.RefreshToken = types.StringValue(resp.Configuration.RefreshToken)
	r.Configuration.ReportsStartDate = types.StringValue(resp.Configuration.ReportsStartDate.String())
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.TenantID != nil {
		r.Configuration.TenantID = types.StringValue(*resp.Configuration.TenantID)
	} else {
		r.Configuration.TenantID = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceBingAdsResourceModel) RefreshFromCreateResponse(resp *shared.SourceBingAdsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
