// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceBingAdsResourceModel) ToCreateSDKType() *shared.SourceBingAdsCreateRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := new(string)
	if !r.Configuration.ClientSecret.IsUnknown() && !r.Configuration.ClientSecret.IsNull() {
		*clientSecret = r.Configuration.ClientSecret.ValueString()
	} else {
		clientSecret = nil
	}
	var customReports []shared.SourceBingAdsCustomReportConfig = nil
	for _, customReportsItem := range r.Configuration.CustomReports {
		name := customReportsItem.Name.ValueString()
		reportAggregation := new(string)
		if !customReportsItem.ReportAggregation.IsUnknown() && !customReportsItem.ReportAggregation.IsNull() {
			*reportAggregation = customReportsItem.ReportAggregation.ValueString()
		} else {
			reportAggregation = nil
		}
		var reportColumns []string = nil
		for _, reportColumnsItem := range customReportsItem.ReportColumns {
			reportColumns = append(reportColumns, reportColumnsItem.ValueString())
		}
		reportingObject := shared.SourceBingAdsReportingDataObject(customReportsItem.ReportingObject.ValueString())
		customReports = append(customReports, shared.SourceBingAdsCustomReportConfig{
			Name:              name,
			ReportAggregation: reportAggregation,
			ReportColumns:     reportColumns,
			ReportingObject:   reportingObject,
		})
	}
	developerToken := r.Configuration.DeveloperToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	reportsStartDate := new(customTypes.Date)
	if !r.Configuration.ReportsStartDate.IsUnknown() && !r.Configuration.ReportsStartDate.IsNull() {
		reportsStartDate = customTypes.MustNewDateFromString(r.Configuration.ReportsStartDate.ValueString())
	} else {
		reportsStartDate = nil
	}
	tenantID := new(string)
	if !r.Configuration.TenantID.IsUnknown() && !r.Configuration.TenantID.IsNull() {
		*tenantID = r.Configuration.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	configuration := shared.SourceBingAds{
		ClientID:         clientID,
		ClientSecret:     clientSecret,
		CustomReports:    customReports,
		DeveloperToken:   developerToken,
		LookbackWindow:   lookbackWindow,
		RefreshToken:     refreshToken,
		ReportsStartDate: reportsStartDate,
		TenantID:         tenantID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name1 := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceBingAdsCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name1,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceBingAdsResourceModel) ToGetSDKType() *shared.SourceBingAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceBingAdsResourceModel) ToUpdateSDKType() *shared.SourceBingAdsPutRequest {
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := new(string)
	if !r.Configuration.ClientSecret.IsUnknown() && !r.Configuration.ClientSecret.IsNull() {
		*clientSecret = r.Configuration.ClientSecret.ValueString()
	} else {
		clientSecret = nil
	}
	var customReports []shared.CustomReportConfig = nil
	for _, customReportsItem := range r.Configuration.CustomReports {
		name := customReportsItem.Name.ValueString()
		reportAggregation := new(string)
		if !customReportsItem.ReportAggregation.IsUnknown() && !customReportsItem.ReportAggregation.IsNull() {
			*reportAggregation = customReportsItem.ReportAggregation.ValueString()
		} else {
			reportAggregation = nil
		}
		var reportColumns []string = nil
		for _, reportColumnsItem := range customReportsItem.ReportColumns {
			reportColumns = append(reportColumns, reportColumnsItem.ValueString())
		}
		reportingObject := shared.ReportingDataObject(customReportsItem.ReportingObject.ValueString())
		customReports = append(customReports, shared.CustomReportConfig{
			Name:              name,
			ReportAggregation: reportAggregation,
			ReportColumns:     reportColumns,
			ReportingObject:   reportingObject,
		})
	}
	developerToken := r.Configuration.DeveloperToken.ValueString()
	lookbackWindow := new(int64)
	if !r.Configuration.LookbackWindow.IsUnknown() && !r.Configuration.LookbackWindow.IsNull() {
		*lookbackWindow = r.Configuration.LookbackWindow.ValueInt64()
	} else {
		lookbackWindow = nil
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	reportsStartDate := new(customTypes.Date)
	if !r.Configuration.ReportsStartDate.IsUnknown() && !r.Configuration.ReportsStartDate.IsNull() {
		reportsStartDate = customTypes.MustNewDateFromString(r.Configuration.ReportsStartDate.ValueString())
	} else {
		reportsStartDate = nil
	}
	tenantID := new(string)
	if !r.Configuration.TenantID.IsUnknown() && !r.Configuration.TenantID.IsNull() {
		*tenantID = r.Configuration.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	configuration := shared.SourceBingAdsUpdate{
		ClientID:         clientID,
		ClientSecret:     clientSecret,
		CustomReports:    customReports,
		DeveloperToken:   developerToken,
		LookbackWindow:   lookbackWindow,
		RefreshToken:     refreshToken,
		ReportsStartDate: reportsStartDate,
		TenantID:         tenantID,
	}
	name1 := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceBingAdsPutRequest{
		Configuration: configuration,
		Name:          name1,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceBingAdsResourceModel) ToDeleteSDKType() *shared.SourceBingAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceBingAdsResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceBingAdsResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
