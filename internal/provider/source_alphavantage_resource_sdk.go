// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAlphaVantageResourceModel) ToSharedSourceAlphaVantageCreateRequest() *shared.SourceAlphaVantageCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbol string
	symbol = r.Configuration.Symbol.ValueString()

	interval := new(shared.Interval)
	if !r.Configuration.Interval.IsUnknown() && !r.Configuration.Interval.IsNull() {
		*interval = shared.Interval(r.Configuration.Interval.ValueString())
	} else {
		interval = nil
	}
	adjusted := new(bool)
	if !r.Configuration.Adjusted.IsUnknown() && !r.Configuration.Adjusted.IsNull() {
		*adjusted = r.Configuration.Adjusted.ValueBool()
	} else {
		adjusted = nil
	}
	outputsize := new(shared.OutputSize)
	if !r.Configuration.Outputsize.IsUnknown() && !r.Configuration.Outputsize.IsNull() {
		*outputsize = shared.OutputSize(r.Configuration.Outputsize.ValueString())
	} else {
		outputsize = nil
	}
	configuration := shared.SourceAlphaVantage{
		APIKey:     apiKey,
		Symbol:     symbol,
		Interval:   interval,
		Adjusted:   adjusted,
		Outputsize: outputsize,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceAlphaVantageCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceAlphaVantageResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceAlphaVantageResourceModel) ToSharedSourceAlphaVantagePutRequest() *shared.SourceAlphaVantagePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var symbol string
	symbol = r.Configuration.Symbol.ValueString()

	interval := new(shared.SourceAlphaVantageUpdateInterval)
	if !r.Configuration.Interval.IsUnknown() && !r.Configuration.Interval.IsNull() {
		*interval = shared.SourceAlphaVantageUpdateInterval(r.Configuration.Interval.ValueString())
	} else {
		interval = nil
	}
	adjusted := new(bool)
	if !r.Configuration.Adjusted.IsUnknown() && !r.Configuration.Adjusted.IsNull() {
		*adjusted = r.Configuration.Adjusted.ValueBool()
	} else {
		adjusted = nil
	}
	outputsize := new(shared.SourceAlphaVantageUpdateOutputSize)
	if !r.Configuration.Outputsize.IsUnknown() && !r.Configuration.Outputsize.IsNull() {
		*outputsize = shared.SourceAlphaVantageUpdateOutputSize(r.Configuration.Outputsize.ValueString())
	} else {
		outputsize = nil
	}
	configuration := shared.SourceAlphaVantageUpdate{
		APIKey:     apiKey,
		Symbol:     symbol,
		Interval:   interval,
		Adjusted:   adjusted,
		Outputsize: outputsize,
	}
	out := shared.SourceAlphaVantagePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
