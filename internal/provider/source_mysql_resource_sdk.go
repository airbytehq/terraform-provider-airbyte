// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceMysqlResourceModel) ToCreateSDKType() *shared.SourceMysqlCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod shared.SourceMysqlUpdateMethod
	var sourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC *shared.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC
	if r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC != nil {
		initialWaitingSeconds := new(int64)
		if !r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.IsNull() {
			*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.ValueInt64()
		} else {
			initialWaitingSeconds = nil
		}
		serverTimeZone := new(string)
		if !r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.IsUnknown() && !r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.IsNull() {
			*serverTimeZone = r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.ValueString()
		} else {
			serverTimeZone = nil
		}
		sourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC = &shared.SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC{
			InitialWaitingSeconds: initialWaitingSeconds,
			ServerTimeZone:        serverTimeZone,
		}
	}
	if sourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC != nil {
		replicationMethod = shared.SourceMysqlUpdateMethod{
			SourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC: sourceMysqlUpdateMethodReadChangesUsingBinaryLogCDC,
		}
	}
	var sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor *shared.SourceMysqlUpdateMethodScanChangesWithUserDefinedCursor
	if r.Configuration.ReplicationMethod.SourceMysqlUpdateMethodScanChangesWithUserDefinedCursor != nil {
		sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor = &shared.SourceMysqlUpdateMethodScanChangesWithUserDefinedCursor{}
	}
	if sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor != nil {
		replicationMethod = shared.SourceMysqlUpdateMethod{
			SourceMysqlUpdateMethodScanChangesWithUserDefinedCursor: sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor,
		}
	}
	var sslMode *shared.SourceMysqlSSLModes
	if r.Configuration.SslMode != nil {
		var sourceMysqlSSLModesPreferred *shared.SourceMysqlSSLModesPreferred
		if r.Configuration.SslMode.SourceMysqlSSLModesPreferred != nil {
			sourceMysqlSSLModesPreferred = &shared.SourceMysqlSSLModesPreferred{}
		}
		if sourceMysqlSSLModesPreferred != nil {
			sslMode = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesPreferred: sourceMysqlSSLModesPreferred,
			}
		}
		var sourceMysqlSSLModesRequired *shared.SourceMysqlSSLModesRequired
		if r.Configuration.SslMode.SourceMysqlSSLModesRequired != nil {
			sourceMysqlSSLModesRequired = &shared.SourceMysqlSSLModesRequired{}
		}
		if sourceMysqlSSLModesRequired != nil {
			sslMode = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesRequired: sourceMysqlSSLModesRequired,
			}
		}
		var sourceMysqlSSLModesVerifyCA *shared.SourceMysqlSSLModesVerifyCA
		if r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA != nil {
			caCertificate := r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceMysqlSSLModesVerifyCA = &shared.SourceMysqlSSLModesVerifyCA{
				CaCertificate:     caCertificate,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword,
			}
		}
		if sourceMysqlSSLModesVerifyCA != nil {
			sslMode = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesVerifyCA: sourceMysqlSSLModesVerifyCA,
			}
		}
		var sourceMysqlSSLModesVerifyIdentity *shared.SourceMysqlSSLModesVerifyIdentity
		if r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity != nil {
			caCertificate1 := r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceMysqlSSLModesVerifyIdentity = &shared.SourceMysqlSSLModesVerifyIdentity{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate1,
				ClientKey:         clientKey1,
				ClientKeyPassword: clientKeyPassword1,
			}
		}
		if sourceMysqlSSLModesVerifyIdentity != nil {
			sslMode = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesVerifyIdentity: sourceMysqlSSLModesVerifyIdentity,
			}
		}
	}
	var tunnelMethod *shared.SourceMysqlSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceMysqlSSHTunnelMethodNoTunnel *shared.SourceMysqlSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel != nil {
			sourceMysqlSSHTunnelMethodNoTunnel = &shared.SourceMysqlSSHTunnelMethodNoTunnel{}
		}
		if sourceMysqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodNoTunnel: sourceMysqlSSHTunnelMethodNoTunnel,
			}
		}
		var sourceMysqlSSHTunnelMethodSSHKeyAuthentication *shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceMysqlSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodSSHKeyAuthentication: sourceMysqlSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceMysqlSSHTunnelMethodPasswordAuthentication *shared.SourceMysqlSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceMysqlSSHTunnelMethodPasswordAuthentication = &shared.SourceMysqlSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodPasswordAuthentication: sourceMysqlSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceMysql{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMysqlCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMysqlResourceModel) ToGetSDKType() *shared.SourceMysqlCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMysqlResourceModel) ToUpdateSDKType() *shared.SourceMysqlPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod shared.SourceMysqlUpdateUpdateMethod
	var sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC *shared.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC
	if r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC != nil {
		initialWaitingSeconds := new(int64)
		if !r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.IsNull() {
			*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.InitialWaitingSeconds.ValueInt64()
		} else {
			initialWaitingSeconds = nil
		}
		serverTimeZone := new(string)
		if !r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.IsUnknown() && !r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.IsNull() {
			*serverTimeZone = r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC.ServerTimeZone.ValueString()
		} else {
			serverTimeZone = nil
		}
		sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC = &shared.SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC{
			InitialWaitingSeconds: initialWaitingSeconds,
			ServerTimeZone:        serverTimeZone,
		}
	}
	if sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC != nil {
		replicationMethod = shared.SourceMysqlUpdateUpdateMethod{
			SourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC: sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC,
		}
	}
	var sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor *shared.SourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor
	if r.Configuration.ReplicationMethod.SourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor != nil {
		sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor = &shared.SourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor{}
	}
	if sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor != nil {
		replicationMethod = shared.SourceMysqlUpdateUpdateMethod{
			SourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor: sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor,
		}
	}
	var sslMode *shared.SourceMysqlUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourceMysqlUpdateSSLModesPreferred *shared.SourceMysqlUpdateSSLModesPreferred
		if r.Configuration.SslMode.SourceMysqlUpdateSSLModesPreferred != nil {
			sourceMysqlUpdateSSLModesPreferred = &shared.SourceMysqlUpdateSSLModesPreferred{}
		}
		if sourceMysqlUpdateSSLModesPreferred != nil {
			sslMode = &shared.SourceMysqlUpdateSSLModes{
				SourceMysqlUpdateSSLModesPreferred: sourceMysqlUpdateSSLModesPreferred,
			}
		}
		var sourceMysqlUpdateSSLModesRequired *shared.SourceMysqlUpdateSSLModesRequired
		if r.Configuration.SslMode.SourceMysqlUpdateSSLModesRequired != nil {
			sourceMysqlUpdateSSLModesRequired = &shared.SourceMysqlUpdateSSLModesRequired{}
		}
		if sourceMysqlUpdateSSLModesRequired != nil {
			sslMode = &shared.SourceMysqlUpdateSSLModes{
				SourceMysqlUpdateSSLModesRequired: sourceMysqlUpdateSSLModesRequired,
			}
		}
		var sourceMysqlUpdateSSLModesVerifyCA *shared.SourceMysqlUpdateSSLModesVerifyCA
		if r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA != nil {
			caCertificate := r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyCA.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourceMysqlUpdateSSLModesVerifyCA = &shared.SourceMysqlUpdateSSLModesVerifyCA{
				CaCertificate:     caCertificate,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword,
			}
		}
		if sourceMysqlUpdateSSLModesVerifyCA != nil {
			sslMode = &shared.SourceMysqlUpdateSSLModes{
				SourceMysqlUpdateSSLModesVerifyCA: sourceMysqlUpdateSSLModesVerifyCA,
			}
		}
		var sourceMysqlUpdateSSLModesVerifyIdentity *shared.SourceMysqlUpdateSSLModesVerifyIdentity
		if r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity != nil {
			caCertificate1 := r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourceMysqlUpdateSSLModesVerifyIdentity.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourceMysqlUpdateSSLModesVerifyIdentity = &shared.SourceMysqlUpdateSSLModesVerifyIdentity{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate1,
				ClientKey:         clientKey1,
				ClientKeyPassword: clientKeyPassword1,
			}
		}
		if sourceMysqlUpdateSSLModesVerifyIdentity != nil {
			sslMode = &shared.SourceMysqlUpdateSSLModes{
				SourceMysqlUpdateSSLModesVerifyIdentity: sourceMysqlUpdateSSLModesVerifyIdentity,
			}
		}
	}
	var tunnelMethod *shared.SourceMysqlUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceMysqlUpdateSSHTunnelMethodNoTunnel *shared.SourceMysqlUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodNoTunnel != nil {
			sourceMysqlUpdateSSHTunnelMethodNoTunnel = &shared.SourceMysqlUpdateSSHTunnelMethodNoTunnel{}
		}
		if sourceMysqlUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
				SourceMysqlUpdateSSHTunnelMethodNoTunnel: sourceMysqlUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
				SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication: sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
				SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication: sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceMysqlUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMysqlPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMysqlResourceModel) ToDeleteSDKType() *shared.SourceMysqlCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMysqlResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMysqlResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
