// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceMysqlResourceModel) ToCreateSDKType() *shared.SourceMysqlCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod shared.SourceMysqlReplicationMethod
	var sourceMysqlReplicationMethodStandard *shared.SourceMysqlReplicationMethodStandard
	if r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC != nil {
		method := shared.SourceMysqlReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.Method.ValueString())
		sourceMysqlReplicationMethodStandard = &shared.SourceMysqlReplicationMethodStandard{
			Method: method,
		}
	}
	if sourceMysqlReplicationMethodStandard != nil {
		replicationMethod = shared.SourceMysqlReplicationMethod{
			SourceMysqlReplicationMethodStandard: sourceMysqlReplicationMethodStandard,
		}
	}
	var sourceMysqlReplicationMethodLogicalReplicationCDC *shared.SourceMysqlReplicationMethodLogicalReplicationCDC
	if r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodStandard != nil {
		method1 := shared.SourceMysqlReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodStandard.Method.ValueString())
		sourceMysqlReplicationMethodLogicalReplicationCDC = &shared.SourceMysqlReplicationMethodLogicalReplicationCDC{
			Method: method1,
		}
	}
	if sourceMysqlReplicationMethodLogicalReplicationCDC != nil {
		replicationMethod = shared.SourceMysqlReplicationMethod{
			SourceMysqlReplicationMethodLogicalReplicationCDC: sourceMysqlReplicationMethodLogicalReplicationCDC,
		}
	}
	sourceType := shared.SourceMysqlMysql(r.Configuration.SourceType.ValueString())
	var sslMode *shared.SourceMysqlSSLModes
	var sourceMysqlSSLModesPreferred *shared.SourceMysqlSSLModesPreferred
	if r.Configuration.SslMode.SourceMysqlSSLModesPreferred != nil {
		mode := shared.SourceMysqlSSLModesPreferredMode(r.Configuration.SslMode.SourceMysqlSSLModesPreferred.Mode.ValueString())
		sourceMysqlSSLModesPreferred = &shared.SourceMysqlSSLModesPreferred{
			Mode: mode,
		}
	}
	if sourceMysqlSSLModesPreferred != nil {
		sslMode = &shared.SourceMysqlSSLModes{
			SourceMysqlSSLModesPreferred: sourceMysqlSSLModesPreferred,
		}
	}
	var sourceMysqlSSLModesRequired *shared.SourceMysqlSSLModesRequired
	if r.Configuration.SslMode.SourceMysqlSSLModesRequired != nil {
		mode1 := shared.SourceMysqlSSLModesRequiredMode(r.Configuration.SslMode.SourceMysqlSSLModesRequired.Mode.ValueString())
		sourceMysqlSSLModesRequired = &shared.SourceMysqlSSLModesRequired{
			Mode: mode1,
		}
	}
	if sourceMysqlSSLModesRequired != nil {
		sslMode = &shared.SourceMysqlSSLModes{
			SourceMysqlSSLModesRequired: sourceMysqlSSLModesRequired,
		}
	}
	var sourceMysqlSSLModesVerifyCA *shared.SourceMysqlSSLModesVerifyCA
	if r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA != nil {
		caCertificate := r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate.ValueString()
		clientCertificate := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsNull() {
			*clientCertificate = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.ValueString()
		} else {
			clientCertificate = nil
		}
		clientKey := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsNull() {
			*clientKey = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.ValueString()
		} else {
			clientKey = nil
		}
		clientKeyPassword := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsNull() {
			*clientKeyPassword = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword = nil
		}
		mode2 := shared.SourceMysqlSSLModesVerifyCAMode(r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.Mode.ValueString())
		sourceMysqlSSLModesVerifyCA = &shared.SourceMysqlSSLModesVerifyCA{
			CaCertificate:     caCertificate,
			ClientCertificate: clientCertificate,
			ClientKey:         clientKey,
			ClientKeyPassword: clientKeyPassword,
			Mode:              mode2,
		}
	}
	if sourceMysqlSSLModesVerifyCA != nil {
		sslMode = &shared.SourceMysqlSSLModes{
			SourceMysqlSSLModesVerifyCA: sourceMysqlSSLModesVerifyCA,
		}
	}
	var sourceMysqlSSLModesVerifyIdentity *shared.SourceMysqlSSLModesVerifyIdentity
	if r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity != nil {
		caCertificate1 := r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate.ValueString()
		clientCertificate1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsNull() {
			*clientCertificate1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.ValueString()
		} else {
			clientCertificate1 = nil
		}
		clientKey1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsNull() {
			*clientKey1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.ValueString()
		} else {
			clientKey1 = nil
		}
		clientKeyPassword1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsNull() {
			*clientKeyPassword1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword1 = nil
		}
		mode3 := shared.SourceMysqlSSLModesVerifyIdentityMode(r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.Mode.ValueString())
		sourceMysqlSSLModesVerifyIdentity = &shared.SourceMysqlSSLModesVerifyIdentity{
			CaCertificate:     caCertificate1,
			ClientCertificate: clientCertificate1,
			ClientKey:         clientKey1,
			ClientKeyPassword: clientKeyPassword1,
			Mode:              mode3,
		}
	}
	if sourceMysqlSSLModesVerifyIdentity != nil {
		sslMode = &shared.SourceMysqlSSLModes{
			SourceMysqlSSLModesVerifyIdentity: sourceMysqlSSLModesVerifyIdentity,
		}
	}
	var tunnelMethod *shared.SourceMysqlSSHTunnelMethod
	var sourceMysqlSSHTunnelMethodNoTunnel *shared.SourceMysqlSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourceMysqlSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourceMysqlSSHTunnelMethodNoTunnel = &shared.SourceMysqlSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourceMysqlSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
			SourceMysqlSSHTunnelMethodNoTunnel: sourceMysqlSSHTunnelMethodNoTunnel,
		}
	}
	var sourceMysqlSSHTunnelMethodSSHKeyAuthentication *shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourceMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		sourceMysqlSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication{
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
			SourceMysqlSSHTunnelMethodSSHKeyAuthentication: sourceMysqlSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourceMysqlSSHTunnelMethodPasswordAuthentication *shared.SourceMysqlSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourceMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourceMysqlSSHTunnelMethodPasswordAuthentication = &shared.SourceMysqlSSHTunnelMethodPasswordAuthentication{
			TunnelHost:   tunnelHost1,
			TunnelMethod: tunnelMethod3,
			TunnelPort:   tunnelPort1,
			TunnelUser:   tunnelUser1,
		}
	}
	if sourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourceMysqlSSHTunnelMethod{
			SourceMysqlSSHTunnelMethodPasswordAuthentication: sourceMysqlSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceMysql{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		SourceType:        sourceType,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMysqlCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMysqlResourceModel) ToGetSDKType() *shared.SourceMysqlCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMysqlResourceModel) ToUpdateSDKType() *shared.SourceMysqlPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod shared.SourceMysqlUpdateReplicationMethod
	var sourceMysqlUpdateReplicationMethodStandard *shared.SourceMysqlUpdateReplicationMethodStandard
	if r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC != nil {
		method := shared.SourceMysqlUpdateReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.Method.ValueString())
		sourceMysqlUpdateReplicationMethodStandard = &shared.SourceMysqlUpdateReplicationMethodStandard{
			Method: method,
		}
	}
	if sourceMysqlUpdateReplicationMethodStandard != nil {
		replicationMethod = shared.SourceMysqlUpdateReplicationMethod{
			SourceMysqlUpdateReplicationMethodStandard: sourceMysqlUpdateReplicationMethodStandard,
		}
	}
	var sourceMysqlUpdateReplicationMethodLogicalReplicationCDC *shared.SourceMysqlUpdateReplicationMethodLogicalReplicationCDC
	if r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodStandard != nil {
		method1 := shared.SourceMysqlUpdateReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourceMysqlReplicationMethodStandard.Method.ValueString())
		sourceMysqlUpdateReplicationMethodLogicalReplicationCDC = &shared.SourceMysqlUpdateReplicationMethodLogicalReplicationCDC{
			Method: method1,
		}
	}
	if sourceMysqlUpdateReplicationMethodLogicalReplicationCDC != nil {
		replicationMethod = shared.SourceMysqlUpdateReplicationMethod{
			SourceMysqlUpdateReplicationMethodLogicalReplicationCDC: sourceMysqlUpdateReplicationMethodLogicalReplicationCDC,
		}
	}
	var sslMode *shared.SourceMysqlUpdateSSLModes
	var sourceMysqlUpdateSSLModesPreferred *shared.SourceMysqlUpdateSSLModesPreferred
	if r.Configuration.SslMode.SourceMysqlSSLModesPreferred != nil {
		mode := shared.SourceMysqlUpdateSSLModesPreferredMode(r.Configuration.SslMode.SourceMysqlSSLModesPreferred.Mode.ValueString())
		sourceMysqlUpdateSSLModesPreferred = &shared.SourceMysqlUpdateSSLModesPreferred{
			Mode: mode,
		}
	}
	if sourceMysqlUpdateSSLModesPreferred != nil {
		sslMode = &shared.SourceMysqlUpdateSSLModes{
			SourceMysqlUpdateSSLModesPreferred: sourceMysqlUpdateSSLModesPreferred,
		}
	}
	var sourceMysqlUpdateSSLModesRequired *shared.SourceMysqlUpdateSSLModesRequired
	if r.Configuration.SslMode.SourceMysqlSSLModesRequired != nil {
		mode1 := shared.SourceMysqlUpdateSSLModesRequiredMode(r.Configuration.SslMode.SourceMysqlSSLModesRequired.Mode.ValueString())
		sourceMysqlUpdateSSLModesRequired = &shared.SourceMysqlUpdateSSLModesRequired{
			Mode: mode1,
		}
	}
	if sourceMysqlUpdateSSLModesRequired != nil {
		sslMode = &shared.SourceMysqlUpdateSSLModes{
			SourceMysqlUpdateSSLModesRequired: sourceMysqlUpdateSSLModesRequired,
		}
	}
	var sourceMysqlUpdateSSLModesVerifyCA *shared.SourceMysqlUpdateSSLModesVerifyCA
	if r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA != nil {
		caCertificate := r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate.ValueString()
		clientCertificate := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsNull() {
			*clientCertificate = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.ValueString()
		} else {
			clientCertificate = nil
		}
		clientKey := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsNull() {
			*clientKey = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.ValueString()
		} else {
			clientKey = nil
		}
		clientKeyPassword := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsNull() {
			*clientKeyPassword = r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword = nil
		}
		mode2 := shared.SourceMysqlUpdateSSLModesVerifyCAMode(r.Configuration.SslMode.SourceMysqlSSLModesVerifyCA.Mode.ValueString())
		sourceMysqlUpdateSSLModesVerifyCA = &shared.SourceMysqlUpdateSSLModesVerifyCA{
			CaCertificate:     caCertificate,
			ClientCertificate: clientCertificate,
			ClientKey:         clientKey,
			ClientKeyPassword: clientKeyPassword,
			Mode:              mode2,
		}
	}
	if sourceMysqlUpdateSSLModesVerifyCA != nil {
		sslMode = &shared.SourceMysqlUpdateSSLModes{
			SourceMysqlUpdateSSLModesVerifyCA: sourceMysqlUpdateSSLModesVerifyCA,
		}
	}
	var sourceMysqlUpdateSSLModesVerifyIdentity *shared.SourceMysqlUpdateSSLModesVerifyIdentity
	if r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity != nil {
		caCertificate1 := r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate.ValueString()
		clientCertificate1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsNull() {
			*clientCertificate1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.ValueString()
		} else {
			clientCertificate1 = nil
		}
		clientKey1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsNull() {
			*clientKey1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.ValueString()
		} else {
			clientKey1 = nil
		}
		clientKeyPassword1 := new(string)
		if !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsNull() {
			*clientKeyPassword1 = r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword1 = nil
		}
		mode3 := shared.SourceMysqlUpdateSSLModesVerifyIdentityMode(r.Configuration.SslMode.SourceMysqlSSLModesVerifyIdentity.Mode.ValueString())
		sourceMysqlUpdateSSLModesVerifyIdentity = &shared.SourceMysqlUpdateSSLModesVerifyIdentity{
			CaCertificate:     caCertificate1,
			ClientCertificate: clientCertificate1,
			ClientKey:         clientKey1,
			ClientKeyPassword: clientKeyPassword1,
			Mode:              mode3,
		}
	}
	if sourceMysqlUpdateSSLModesVerifyIdentity != nil {
		sslMode = &shared.SourceMysqlUpdateSSLModes{
			SourceMysqlUpdateSSLModesVerifyIdentity: sourceMysqlUpdateSSLModesVerifyIdentity,
		}
	}
	var tunnelMethod *shared.SourceMysqlUpdateSSHTunnelMethod
	var sourceMysqlUpdateSSHTunnelMethodNoTunnel *shared.SourceMysqlUpdateSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourceMysqlUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourceMysqlUpdateSSHTunnelMethodNoTunnel = &shared.SourceMysqlUpdateSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourceMysqlUpdateSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
			SourceMysqlUpdateSSHTunnelMethodNoTunnel: sourceMysqlUpdateSSHTunnelMethodNoTunnel,
		}
	}
	var sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication{
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
			SourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication: sourceMysqlUpdateSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourceMysqlUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication{
			TunnelHost:   tunnelHost1,
			TunnelMethod: tunnelMethod3,
			TunnelPort:   tunnelPort1,
			TunnelUser:   tunnelUser1,
		}
	}
	if sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourceMysqlUpdateSSHTunnelMethod{
			SourceMysqlUpdateSSHTunnelMethodPasswordAuthentication: sourceMysqlUpdateSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceMysqlUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMysqlPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMysqlResourceModel) ToDeleteSDKType() *shared.SourceMysqlCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMysqlResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMysqlResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
