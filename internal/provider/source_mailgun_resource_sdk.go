// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceMailgunResourceModel) ToCreateSDKType() *shared.SourceMailgunCreateRequest {
	domainRegion := new(string)
	if !r.Configuration.DomainRegion.IsUnknown() && !r.Configuration.DomainRegion.IsNull() {
		*domainRegion = r.Configuration.DomainRegion.ValueString()
	} else {
		domainRegion = nil
	}
	privateKey := r.Configuration.PrivateKey.ValueString()
	sourceType := shared.SourceMailgunMailgun(r.Configuration.SourceType.ValueString())
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailgun{
		DomainRegion: domainRegion,
		PrivateKey:   privateKey,
		SourceType:   sourceType,
		StartDate:    startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailgunCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailgunResourceModel) ToGetSDKType() *shared.SourceMailgunCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailgunResourceModel) ToUpdateSDKType() *shared.SourceMailgunPutRequest {
	domainRegion := new(string)
	if !r.Configuration.DomainRegion.IsUnknown() && !r.Configuration.DomainRegion.IsNull() {
		*domainRegion = r.Configuration.DomainRegion.ValueString()
	} else {
		domainRegion = nil
	}
	privateKey := r.Configuration.PrivateKey.ValueString()
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailgunUpdate{
		DomainRegion: domainRegion,
		PrivateKey:   privateKey,
		StartDate:    startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailgunPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailgunResourceModel) ToDeleteSDKType() *shared.SourceMailgunCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailgunResourceModel) RefreshFromGetResponse(resp *shared.SourceMailgunGetResponse) {
	if resp.Configuration.DomainRegion != nil {
		r.Configuration.DomainRegion = types.StringValue(*resp.Configuration.DomainRegion)
	} else {
		r.Configuration.DomainRegion = types.StringNull()
	}
	r.Configuration.PrivateKey = types.StringValue(resp.Configuration.PrivateKey)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMailgunResourceModel) RefreshFromCreateResponse(resp *shared.SourceMailgunGetResponse) {
	r.RefreshFromGetResponse(resp)
}
