// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceLeverHiringResourceModel) ToSharedSourceLeverHiringCreateRequest() *shared.SourceLeverHiringCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceLeverHiringAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var authenticateViaLeverOAuth *shared.AuthenticateViaLeverOAuth
		if r.Configuration.Credentials.AuthenticateViaLeverOAuth != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaLeverOAuth.RefreshToken.ValueString()

			authenticateViaLeverOAuth = &shared.AuthenticateViaLeverOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if authenticateViaLeverOAuth != nil {
			credentials = &shared.SourceLeverHiringAuthenticationMechanism{
				AuthenticateViaLeverOAuth: authenticateViaLeverOAuth,
			}
		}
		var authenticateViaLeverAPIKey *shared.AuthenticateViaLeverAPIKey
		if r.Configuration.Credentials.AuthenticateViaLeverAPIKey != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.AuthenticateViaLeverAPIKey.APIKey.ValueString()

			authenticateViaLeverAPIKey = &shared.AuthenticateViaLeverAPIKey{
				APIKey: apiKey,
			}
		}
		if authenticateViaLeverAPIKey != nil {
			credentials = &shared.SourceLeverHiringAuthenticationMechanism{
				AuthenticateViaLeverAPIKey: authenticateViaLeverAPIKey,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	environment := new(shared.SourceLeverHiringEnvironment)
	if !r.Configuration.Environment.IsUnknown() && !r.Configuration.Environment.IsNull() {
		*environment = shared.SourceLeverHiringEnvironment(r.Configuration.Environment.ValueString())
	} else {
		environment = nil
	}
	configuration := shared.SourceLeverHiring{
		Credentials: credentials,
		StartDate:   startDate,
		Environment: environment,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceLeverHiringCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceLeverHiringResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceLeverHiringResourceModel) ToSharedSourceLeverHiringPutRequest() *shared.SourceLeverHiringPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceLeverHiringUpdateAuthenticationMechanism
	if r.Configuration.Credentials != nil {
		var sourceLeverHiringUpdateAuthenticateViaLeverOAuth *shared.SourceLeverHiringUpdateAuthenticateViaLeverOAuth
		if r.Configuration.Credentials.AuthenticateViaLeverOAuth != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.AuthenticateViaLeverOAuth.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var refreshToken string
			refreshToken = r.Configuration.Credentials.AuthenticateViaLeverOAuth.RefreshToken.ValueString()

			sourceLeverHiringUpdateAuthenticateViaLeverOAuth = &shared.SourceLeverHiringUpdateAuthenticateViaLeverOAuth{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceLeverHiringUpdateAuthenticateViaLeverOAuth != nil {
			credentials = &shared.SourceLeverHiringUpdateAuthenticationMechanism{
				SourceLeverHiringUpdateAuthenticateViaLeverOAuth: sourceLeverHiringUpdateAuthenticateViaLeverOAuth,
			}
		}
		var sourceLeverHiringUpdateAuthenticateViaLeverAPIKey *shared.SourceLeverHiringUpdateAuthenticateViaLeverAPIKey
		if r.Configuration.Credentials.AuthenticateViaLeverAPIKey != nil {
			var apiKey string
			apiKey = r.Configuration.Credentials.AuthenticateViaLeverAPIKey.APIKey.ValueString()

			sourceLeverHiringUpdateAuthenticateViaLeverAPIKey = &shared.SourceLeverHiringUpdateAuthenticateViaLeverAPIKey{
				APIKey: apiKey,
			}
		}
		if sourceLeverHiringUpdateAuthenticateViaLeverAPIKey != nil {
			credentials = &shared.SourceLeverHiringUpdateAuthenticationMechanism{
				SourceLeverHiringUpdateAuthenticateViaLeverAPIKey: sourceLeverHiringUpdateAuthenticateViaLeverAPIKey,
			}
		}
	}
	var startDate string
	startDate = r.Configuration.StartDate.ValueString()

	environment := new(shared.SourceLeverHiringUpdateEnvironment)
	if !r.Configuration.Environment.IsUnknown() && !r.Configuration.Environment.IsNull() {
		*environment = shared.SourceLeverHiringUpdateEnvironment(r.Configuration.Environment.ValueString())
	} else {
		environment = nil
	}
	configuration := shared.SourceLeverHiringUpdate{
		Credentials: credentials,
		StartDate:   startDate,
		Environment: environment,
	}
	out := shared.SourceLeverHiringPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
