// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceMixpanelResourceModel) ToSharedSourceMixpanelCreateRequest() *shared.SourceMixpanelCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.AuthenticationWildcard
	var serviceAccount *shared.ServiceAccount
	if r.Configuration.Credentials.ServiceAccount != nil {
		var username string
		username = r.Configuration.Credentials.ServiceAccount.Username.ValueString()

		var secret string
		secret = r.Configuration.Credentials.ServiceAccount.Secret.ValueString()

		var projectID int64
		projectID = r.Configuration.Credentials.ServiceAccount.ProjectID.ValueInt64()

		serviceAccount = &shared.ServiceAccount{
			Username:  username,
			Secret:    secret,
			ProjectID: projectID,
		}
	}
	if serviceAccount != nil {
		credentials = shared.AuthenticationWildcard{
			ServiceAccount: serviceAccount,
		}
	}
	var projectSecret *shared.ProjectSecret
	if r.Configuration.Credentials.ProjectSecret != nil {
		var apiSecret string
		apiSecret = r.Configuration.Credentials.ProjectSecret.APISecret.ValueString()

		projectSecret = &shared.ProjectSecret{
			APISecret: apiSecret,
		}
	}
	if projectSecret != nil {
		credentials = shared.AuthenticationWildcard{
			ProjectSecret: projectSecret,
		}
	}
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	projectTimezone := new(string)
	if !r.Configuration.ProjectTimezone.IsUnknown() && !r.Configuration.ProjectTimezone.IsNull() {
		*projectTimezone = r.Configuration.ProjectTimezone.ValueString()
	} else {
		projectTimezone = nil
	}
	selectPropertiesByDefault := new(bool)
	if !r.Configuration.SelectPropertiesByDefault.IsUnknown() && !r.Configuration.SelectPropertiesByDefault.IsNull() {
		*selectPropertiesByDefault = r.Configuration.SelectPropertiesByDefault.ValueBool()
	} else {
		selectPropertiesByDefault = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(time.Time)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	region := new(shared.SourceMixpanelRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceMixpanelRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	dateWindowSize := new(int64)
	if !r.Configuration.DateWindowSize.IsUnknown() && !r.Configuration.DateWindowSize.IsNull() {
		*dateWindowSize = r.Configuration.DateWindowSize.ValueInt64()
	} else {
		dateWindowSize = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	configuration := shared.SourceMixpanel{
		Credentials:               credentials,
		AttributionWindow:         attributionWindow,
		ProjectTimezone:           projectTimezone,
		SelectPropertiesByDefault: selectPropertiesByDefault,
		StartDate:                 startDate,
		EndDate:                   endDate,
		Region:                    region,
		DateWindowSize:            dateWindowSize,
		PageSize:                  pageSize,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceMixpanelCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceMixpanelResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceMixpanelResourceModel) ToSharedSourceMixpanelPutRequest() *shared.SourceMixpanelPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceMixpanelUpdateAuthenticationWildcard
	var sourceMixpanelUpdateServiceAccount *shared.SourceMixpanelUpdateServiceAccount
	if r.Configuration.Credentials.ServiceAccount != nil {
		var username string
		username = r.Configuration.Credentials.ServiceAccount.Username.ValueString()

		var secret string
		secret = r.Configuration.Credentials.ServiceAccount.Secret.ValueString()

		var projectID int64
		projectID = r.Configuration.Credentials.ServiceAccount.ProjectID.ValueInt64()

		sourceMixpanelUpdateServiceAccount = &shared.SourceMixpanelUpdateServiceAccount{
			Username:  username,
			Secret:    secret,
			ProjectID: projectID,
		}
	}
	if sourceMixpanelUpdateServiceAccount != nil {
		credentials = shared.SourceMixpanelUpdateAuthenticationWildcard{
			SourceMixpanelUpdateServiceAccount: sourceMixpanelUpdateServiceAccount,
		}
	}
	var sourceMixpanelUpdateProjectSecret *shared.SourceMixpanelUpdateProjectSecret
	if r.Configuration.Credentials.ProjectSecret != nil {
		var apiSecret string
		apiSecret = r.Configuration.Credentials.ProjectSecret.APISecret.ValueString()

		sourceMixpanelUpdateProjectSecret = &shared.SourceMixpanelUpdateProjectSecret{
			APISecret: apiSecret,
		}
	}
	if sourceMixpanelUpdateProjectSecret != nil {
		credentials = shared.SourceMixpanelUpdateAuthenticationWildcard{
			SourceMixpanelUpdateProjectSecret: sourceMixpanelUpdateProjectSecret,
		}
	}
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	projectTimezone := new(string)
	if !r.Configuration.ProjectTimezone.IsUnknown() && !r.Configuration.ProjectTimezone.IsNull() {
		*projectTimezone = r.Configuration.ProjectTimezone.ValueString()
	} else {
		projectTimezone = nil
	}
	selectPropertiesByDefault := new(bool)
	if !r.Configuration.SelectPropertiesByDefault.IsUnknown() && !r.Configuration.SelectPropertiesByDefault.IsNull() {
		*selectPropertiesByDefault = r.Configuration.SelectPropertiesByDefault.ValueBool()
	} else {
		selectPropertiesByDefault = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(time.Time)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	region := new(shared.SourceMixpanelUpdateRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceMixpanelUpdateRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	dateWindowSize := new(int64)
	if !r.Configuration.DateWindowSize.IsUnknown() && !r.Configuration.DateWindowSize.IsNull() {
		*dateWindowSize = r.Configuration.DateWindowSize.ValueInt64()
	} else {
		dateWindowSize = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	configuration := shared.SourceMixpanelUpdate{
		Credentials:               credentials,
		AttributionWindow:         attributionWindow,
		ProjectTimezone:           projectTimezone,
		SelectPropertiesByDefault: selectPropertiesByDefault,
		StartDate:                 startDate,
		EndDate:                   endDate,
		Region:                    region,
		DateWindowSize:            dateWindowSize,
		PageSize:                  pageSize,
	}
	out := shared.SourceMixpanelPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
