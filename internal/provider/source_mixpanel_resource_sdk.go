// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceMixpanelResourceModel) ToSharedSourceMixpanelCreateRequest() *shared.SourceMixpanelCreateRequest {
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	var credentials shared.SourceMixpanelAuthenticationWildcard
	var sourceMixpanelServiceAccount *shared.SourceMixpanelServiceAccount
	if r.Configuration.Credentials.ServiceAccount != nil {
		projectID := r.Configuration.Credentials.ServiceAccount.ProjectID.ValueInt64()
		secret := r.Configuration.Credentials.ServiceAccount.Secret.ValueString()
		username := r.Configuration.Credentials.ServiceAccount.Username.ValueString()
		sourceMixpanelServiceAccount = &shared.SourceMixpanelServiceAccount{
			ProjectID: projectID,
			Secret:    secret,
			Username:  username,
		}
	}
	if sourceMixpanelServiceAccount != nil {
		credentials = shared.SourceMixpanelAuthenticationWildcard{
			SourceMixpanelServiceAccount: sourceMixpanelServiceAccount,
		}
	}
	var sourceMixpanelProjectSecret *shared.SourceMixpanelProjectSecret
	if r.Configuration.Credentials.ProjectSecret != nil {
		apiSecret := r.Configuration.Credentials.ProjectSecret.APISecret.ValueString()
		sourceMixpanelProjectSecret = &shared.SourceMixpanelProjectSecret{
			APISecret: apiSecret,
		}
	}
	if sourceMixpanelProjectSecret != nil {
		credentials = shared.SourceMixpanelAuthenticationWildcard{
			SourceMixpanelProjectSecret: sourceMixpanelProjectSecret,
		}
	}
	dateWindowSize := new(int64)
	if !r.Configuration.DateWindowSize.IsUnknown() && !r.Configuration.DateWindowSize.IsNull() {
		*dateWindowSize = r.Configuration.DateWindowSize.ValueInt64()
	} else {
		dateWindowSize = nil
	}
	endDate := new(time.Time)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	projectTimezone := new(string)
	if !r.Configuration.ProjectTimezone.IsUnknown() && !r.Configuration.ProjectTimezone.IsNull() {
		*projectTimezone = r.Configuration.ProjectTimezone.ValueString()
	} else {
		projectTimezone = nil
	}
	region := new(shared.SourceMixpanelRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceMixpanelRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	selectPropertiesByDefault := new(bool)
	if !r.Configuration.SelectPropertiesByDefault.IsUnknown() && !r.Configuration.SelectPropertiesByDefault.IsNull() {
		*selectPropertiesByDefault = r.Configuration.SelectPropertiesByDefault.ValueBool()
	} else {
		selectPropertiesByDefault = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMixpanel{
		AttributionWindow:         attributionWindow,
		Credentials:               credentials,
		DateWindowSize:            dateWindowSize,
		EndDate:                   endDate,
		PageSize:                  pageSize,
		ProjectTimezone:           projectTimezone,
		Region:                    region,
		SelectPropertiesByDefault: selectPropertiesByDefault,
		StartDate:                 startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMixpanelCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMixpanelResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceMixpanelResourceModel) ToSharedSourceMixpanelPutRequest() *shared.SourceMixpanelPutRequest {
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	var credentials shared.AuthenticationWildcard
	var serviceAccount *shared.ServiceAccount
	if r.Configuration.Credentials.ServiceAccount != nil {
		projectID := r.Configuration.Credentials.ServiceAccount.ProjectID.ValueInt64()
		secret := r.Configuration.Credentials.ServiceAccount.Secret.ValueString()
		username := r.Configuration.Credentials.ServiceAccount.Username.ValueString()
		serviceAccount = &shared.ServiceAccount{
			ProjectID: projectID,
			Secret:    secret,
			Username:  username,
		}
	}
	if serviceAccount != nil {
		credentials = shared.AuthenticationWildcard{
			ServiceAccount: serviceAccount,
		}
	}
	var projectSecret *shared.ProjectSecret
	if r.Configuration.Credentials.ProjectSecret != nil {
		apiSecret := r.Configuration.Credentials.ProjectSecret.APISecret.ValueString()
		projectSecret = &shared.ProjectSecret{
			APISecret: apiSecret,
		}
	}
	if projectSecret != nil {
		credentials = shared.AuthenticationWildcard{
			ProjectSecret: projectSecret,
		}
	}
	dateWindowSize := new(int64)
	if !r.Configuration.DateWindowSize.IsUnknown() && !r.Configuration.DateWindowSize.IsNull() {
		*dateWindowSize = r.Configuration.DateWindowSize.ValueInt64()
	} else {
		dateWindowSize = nil
	}
	endDate := new(time.Time)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	pageSize := new(int64)
	if !r.Configuration.PageSize.IsUnknown() && !r.Configuration.PageSize.IsNull() {
		*pageSize = r.Configuration.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	projectTimezone := new(string)
	if !r.Configuration.ProjectTimezone.IsUnknown() && !r.Configuration.ProjectTimezone.IsNull() {
		*projectTimezone = r.Configuration.ProjectTimezone.ValueString()
	} else {
		projectTimezone = nil
	}
	region := new(shared.SourceMixpanelUpdateRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceMixpanelUpdateRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	selectPropertiesByDefault := new(bool)
	if !r.Configuration.SelectPropertiesByDefault.IsUnknown() && !r.Configuration.SelectPropertiesByDefault.IsNull() {
		*selectPropertiesByDefault = r.Configuration.SelectPropertiesByDefault.ValueBool()
	} else {
		selectPropertiesByDefault = nil
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMixpanelUpdate{
		AttributionWindow:         attributionWindow,
		Credentials:               credentials,
		DateWindowSize:            dateWindowSize,
		EndDate:                   endDate,
		PageSize:                  pageSize,
		ProjectTimezone:           projectTimezone,
		Region:                    region,
		SelectPropertiesByDefault: selectPropertiesByDefault,
		StartDate:                 startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMixpanelPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
