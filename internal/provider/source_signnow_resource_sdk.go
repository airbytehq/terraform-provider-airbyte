// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSignnowResourceModel) ToSharedSourceSignnowCreateRequest(ctx context.Context) (*shared.SourceSignnowCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authToken string
	authToken = r.Configuration.AuthToken.ValueString()

	var apiKeyID string
	apiKeyID = r.Configuration.APIKeyID.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var nameFilterForDocuments []interface{} = []interface{}{}
	for _, nameFilterForDocumentsItem := range r.Configuration.NameFilterForDocuments {
		var nameFilterForDocumentsTmp interface{}
		_ = json.Unmarshal([]byte(nameFilterForDocumentsItem.ValueString()), &nameFilterForDocumentsTmp)
		nameFilterForDocuments = append(nameFilterForDocuments, nameFilterForDocumentsTmp)
	}
	configuration := shared.SourceSignnow{
		AuthToken:              authToken,
		APIKeyID:               apiKeyID,
		StartDate:              startDate,
		NameFilterForDocuments: nameFilterForDocuments,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSignnowCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}

	return &out, diags
}

func (r *SourceSignnowResourceModel) ToSharedSourceSignnowPutRequest(ctx context.Context) (*shared.SourceSignnowPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var authToken string
	authToken = r.Configuration.AuthToken.ValueString()

	var apiKeyID string
	apiKeyID = r.Configuration.APIKeyID.ValueString()

	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var nameFilterForDocuments []interface{} = []interface{}{}
	for _, nameFilterForDocumentsItem := range r.Configuration.NameFilterForDocuments {
		var nameFilterForDocumentsTmp interface{}
		_ = json.Unmarshal([]byte(nameFilterForDocumentsItem.ValueString()), &nameFilterForDocumentsTmp)
		nameFilterForDocuments = append(nameFilterForDocuments, nameFilterForDocumentsTmp)
	}
	configuration := shared.SourceSignnowUpdate{
		AuthToken:              authToken,
		APIKeyID:               apiKeyID,
		StartDate:              startDate,
		NameFilterForDocuments: nameFilterForDocuments,
	}
	out := shared.SourceSignnowPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *SourceSignnowResourceModel) ToOperationsPutSourceSignnowRequest(ctx context.Context) (*operations.PutSourceSignnowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	sourceSignnowPutRequest, sourceSignnowPutRequestDiags := r.ToSharedSourceSignnowPutRequest(ctx)
	diags.Append(sourceSignnowPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSourceSignnowRequest{
		SourceID:                sourceID,
		SourceSignnowPutRequest: sourceSignnowPutRequest,
	}

	return &out, diags
}

func (r *SourceSignnowResourceModel) ToOperationsGetSourceSignnowRequest(ctx context.Context) (*operations.GetSourceSignnowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.GetSourceSignnowRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSignnowResourceModel) ToOperationsDeleteSourceSignnowRequest(ctx context.Context) (*operations.DeleteSourceSignnowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sourceID string
	sourceID = r.SourceID.ValueString()

	out := operations.DeleteSourceSignnowRequest{
		SourceID: sourceID,
	}

	return &out, diags
}

func (r *SourceSignnowResourceModel) RefreshFromSharedSourceResponse(ctx context.Context, resp *shared.SourceResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
