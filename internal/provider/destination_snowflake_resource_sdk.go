// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationSnowflakeResourceModel) ToCreateSDKType() *shared.DestinationSnowflakeCreateRequest {
	var credentials *shared.DestinationSnowflakeAuthorizationMethod
	if r.Configuration.Credentials != nil {
		var destinationSnowflakeOAuth20 *shared.DestinationSnowflakeOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
			destinationSnowflakeOAuth20 = &shared.DestinationSnowflakeOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if destinationSnowflakeOAuth20 != nil {
			credentials = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeOAuth20: destinationSnowflakeOAuth20,
			}
		}
		var destinationSnowflakeKeyPairAuthentication *shared.DestinationSnowflakeKeyPairAuthentication
		if r.Configuration.Credentials.KeyPairAuthentication != nil {
			privateKey := r.Configuration.Credentials.KeyPairAuthentication.PrivateKey.ValueString()
			privateKeyPassword := new(string)
			if !r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.IsUnknown() && !r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.IsNull() {
				*privateKeyPassword = r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.ValueString()
			} else {
				privateKeyPassword = nil
			}
			destinationSnowflakeKeyPairAuthentication = &shared.DestinationSnowflakeKeyPairAuthentication{
				PrivateKey:         privateKey,
				PrivateKeyPassword: privateKeyPassword,
			}
		}
		if destinationSnowflakeKeyPairAuthentication != nil {
			credentials = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeKeyPairAuthentication: destinationSnowflakeKeyPairAuthentication,
			}
		}
		var destinationSnowflakeUsernameAndPassword *shared.DestinationSnowflakeUsernameAndPassword
		if r.Configuration.Credentials.UsernameAndPassword != nil {
			password := r.Configuration.Credentials.UsernameAndPassword.Password.ValueString()
			destinationSnowflakeUsernameAndPassword = &shared.DestinationSnowflakeUsernameAndPassword{
				Password: password,
			}
		}
		if destinationSnowflakeUsernameAndPassword != nil {
			credentials = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeUsernameAndPassword: destinationSnowflakeUsernameAndPassword,
			}
		}
	}
	database := r.Configuration.Database.ValueString()
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	role := r.Configuration.Role.ValueString()
	schema := r.Configuration.Schema.ValueString()
	username := r.Configuration.Username.ValueString()
	warehouse := r.Configuration.Warehouse.ValueString()
	configuration := shared.DestinationSnowflake{
		Credentials:       credentials,
		Database:          database,
		DisableTypeDedupe: disableTypeDedupe,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		RawDataSchema:     rawDataSchema,
		Role:              role,
		Schema:            schema,
		Username:          username,
		Warehouse:         warehouse,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationSnowflakeCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationSnowflakeResourceModel) ToGetSDKType() *shared.DestinationSnowflakeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationSnowflakeResourceModel) ToUpdateSDKType() *shared.DestinationSnowflakePutRequest {
	var credentials *shared.AuthorizationMethod
	if r.Configuration.Credentials != nil {
		var oAuth20 *shared.OAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
			oAuth20 = &shared.OAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if oAuth20 != nil {
			credentials = &shared.AuthorizationMethod{
				OAuth20: oAuth20,
			}
		}
		var keyPairAuthentication *shared.KeyPairAuthentication
		if r.Configuration.Credentials.KeyPairAuthentication != nil {
			privateKey := r.Configuration.Credentials.KeyPairAuthentication.PrivateKey.ValueString()
			privateKeyPassword := new(string)
			if !r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.IsUnknown() && !r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.IsNull() {
				*privateKeyPassword = r.Configuration.Credentials.KeyPairAuthentication.PrivateKeyPassword.ValueString()
			} else {
				privateKeyPassword = nil
			}
			keyPairAuthentication = &shared.KeyPairAuthentication{
				PrivateKey:         privateKey,
				PrivateKeyPassword: privateKeyPassword,
			}
		}
		if keyPairAuthentication != nil {
			credentials = &shared.AuthorizationMethod{
				KeyPairAuthentication: keyPairAuthentication,
			}
		}
		var usernameAndPassword *shared.UsernameAndPassword
		if r.Configuration.Credentials.UsernameAndPassword != nil {
			password := r.Configuration.Credentials.UsernameAndPassword.Password.ValueString()
			usernameAndPassword = &shared.UsernameAndPassword{
				Password: password,
			}
		}
		if usernameAndPassword != nil {
			credentials = &shared.AuthorizationMethod{
				UsernameAndPassword: usernameAndPassword,
			}
		}
	}
	database := r.Configuration.Database.ValueString()
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	rawDataSchema := new(string)
	if !r.Configuration.RawDataSchema.IsUnknown() && !r.Configuration.RawDataSchema.IsNull() {
		*rawDataSchema = r.Configuration.RawDataSchema.ValueString()
	} else {
		rawDataSchema = nil
	}
	role := r.Configuration.Role.ValueString()
	schema := r.Configuration.Schema.ValueString()
	username := r.Configuration.Username.ValueString()
	warehouse := r.Configuration.Warehouse.ValueString()
	configuration := shared.DestinationSnowflakeUpdate{
		Credentials:       credentials,
		Database:          database,
		DisableTypeDedupe: disableTypeDedupe,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		RawDataSchema:     rawDataSchema,
		Role:              role,
		Schema:            schema,
		Username:          username,
		Warehouse:         warehouse,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationSnowflakePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationSnowflakeResourceModel) ToDeleteSDKType() *shared.DestinationSnowflakeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationSnowflakeResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationSnowflakeResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
