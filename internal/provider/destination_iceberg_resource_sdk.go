// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationIcebergResourceModel) ToSharedDestinationIcebergCreateRequest() *shared.DestinationIcebergCreateRequest {
	var catalogConfig shared.DestinationIcebergIcebergCatalogConfig
	var destinationIcebergHiveCatalogUseApacheHiveMetaStore *shared.DestinationIcebergHiveCatalogUseApacheHiveMetaStore
	if r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore != nil {
		catalogType := new(shared.DestinationIcebergCatalogType)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsNull() {
			*catalogType = shared.DestinationIcebergCatalogType(r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.ValueString())
		} else {
			catalogType = nil
		}
		database := new(string)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsNull() {
			*database = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.ValueString()
		} else {
			database = nil
		}
		var hiveThriftURI string
		hiveThriftURI = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.HiveThriftURI.ValueString()

		destinationIcebergHiveCatalogUseApacheHiveMetaStore = &shared.DestinationIcebergHiveCatalogUseApacheHiveMetaStore{
			CatalogType:   catalogType,
			Database:      database,
			HiveThriftURI: hiveThriftURI,
		}
	}
	if destinationIcebergHiveCatalogUseApacheHiveMetaStore != nil {
		catalogConfig = shared.DestinationIcebergIcebergCatalogConfig{
			DestinationIcebergHiveCatalogUseApacheHiveMetaStore: destinationIcebergHiveCatalogUseApacheHiveMetaStore,
		}
	}
	var destinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig *shared.DestinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
	if r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogType1 := new(shared.DestinationIcebergSchemasCatalogType)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsNull() {
			*catalogType1 = shared.DestinationIcebergSchemasCatalogType(r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.ValueString())
		} else {
			catalogType1 = nil
		}
		database1 := new(string)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsNull() {
			*database1 = r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.ValueString()
		} else {
			database1 = nil
		}
		destinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = &shared.DestinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig{
			CatalogType: catalogType1,
			Database:    database1,
		}
	}
	if destinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogConfig = shared.DestinationIcebergIcebergCatalogConfig{
			DestinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig: destinationIcebergHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig,
		}
	}
	var destinationIcebergJdbcCatalogUseRelationalDatabase *shared.DestinationIcebergJdbcCatalogUseRelationalDatabase
	if r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase != nil {
		catalogSchema := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsNull() {
			*catalogSchema = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.ValueString()
		} else {
			catalogSchema = nil
		}
		catalogType2 := new(shared.DestinationIcebergSchemasCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsNull() {
			*catalogType2 = shared.DestinationIcebergSchemasCatalogConfigCatalogType(r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.ValueString())
		} else {
			catalogType2 = nil
		}
		database2 := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsNull() {
			*database2 = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.ValueString()
		} else {
			database2 = nil
		}
		jdbcURL := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsNull() {
			*jdbcURL = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.ValueString()
		} else {
			jdbcURL = nil
		}
		password := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsNull() {
			*password = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.ValueString()
		} else {
			password = nil
		}
		ssl := new(bool)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsNull() {
			*ssl = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		username := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsNull() {
			*username = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.ValueString()
		} else {
			username = nil
		}
		destinationIcebergJdbcCatalogUseRelationalDatabase = &shared.DestinationIcebergJdbcCatalogUseRelationalDatabase{
			CatalogSchema: catalogSchema,
			CatalogType:   catalogType2,
			Database:      database2,
			JdbcURL:       jdbcURL,
			Password:      password,
			Ssl:           ssl,
			Username:      username,
		}
	}
	if destinationIcebergJdbcCatalogUseRelationalDatabase != nil {
		catalogConfig = shared.DestinationIcebergIcebergCatalogConfig{
			DestinationIcebergJdbcCatalogUseRelationalDatabase: destinationIcebergJdbcCatalogUseRelationalDatabase,
		}
	}
	var destinationIcebergRESTCatalog *shared.DestinationIcebergRESTCatalog
	if r.Configuration.CatalogConfig.RESTCatalog != nil {
		catalogType3 := new(shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsNull() {
			*catalogType3 = shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType(r.Configuration.CatalogConfig.RESTCatalog.CatalogType.ValueString())
		} else {
			catalogType3 = nil
		}
		restCredential := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsNull() {
			*restCredential = r.Configuration.CatalogConfig.RESTCatalog.RestCredential.ValueString()
		} else {
			restCredential = nil
		}
		restToken := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsNull() {
			*restToken = r.Configuration.CatalogConfig.RESTCatalog.RestToken.ValueString()
		} else {
			restToken = nil
		}
		var restURI string
		restURI = r.Configuration.CatalogConfig.RESTCatalog.RestURI.ValueString()

		destinationIcebergRESTCatalog = &shared.DestinationIcebergRESTCatalog{
			CatalogType:    catalogType3,
			RestCredential: restCredential,
			RestToken:      restToken,
			RestURI:        restURI,
		}
	}
	if destinationIcebergRESTCatalog != nil {
		catalogConfig = shared.DestinationIcebergIcebergCatalogConfig{
			DestinationIcebergRESTCatalog: destinationIcebergRESTCatalog,
		}
	}
	var destinationIcebergGlueCatalog *shared.DestinationIcebergGlueCatalog
	if r.Configuration.CatalogConfig.GlueCatalog != nil {
		catalogType4 := new(shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig5CatalogType)
		if !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsNull() {
			*catalogType4 = shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig5CatalogType(r.Configuration.CatalogConfig.GlueCatalog.CatalogType.ValueString())
		} else {
			catalogType4 = nil
		}
		database3 := new(string)
		if !r.Configuration.CatalogConfig.GlueCatalog.Database.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.Database.IsNull() {
			*database3 = r.Configuration.CatalogConfig.GlueCatalog.Database.ValueString()
		} else {
			database3 = nil
		}
		destinationIcebergGlueCatalog = &shared.DestinationIcebergGlueCatalog{
			CatalogType: catalogType4,
			Database:    database3,
		}
	}
	if destinationIcebergGlueCatalog != nil {
		catalogConfig = shared.DestinationIcebergIcebergCatalogConfig{
			DestinationIcebergGlueCatalog: destinationIcebergGlueCatalog,
		}
	}
	autoCompact := new(bool)
	if !r.Configuration.FormatConfig.AutoCompact.IsUnknown() && !r.Configuration.FormatConfig.AutoCompact.IsNull() {
		*autoCompact = r.Configuration.FormatConfig.AutoCompact.ValueBool()
	} else {
		autoCompact = nil
	}
	compactTargetFileSizeInMb := new(int64)
	if !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsUnknown() && !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsNull() {
		*compactTargetFileSizeInMb = r.Configuration.FormatConfig.CompactTargetFileSizeInMb.ValueInt64()
	} else {
		compactTargetFileSizeInMb = nil
	}
	flushBatchSize := new(int64)
	if !r.Configuration.FormatConfig.FlushBatchSize.IsUnknown() && !r.Configuration.FormatConfig.FlushBatchSize.IsNull() {
		*flushBatchSize = r.Configuration.FormatConfig.FlushBatchSize.ValueInt64()
	} else {
		flushBatchSize = nil
	}
	format := new(shared.DestinationIcebergFileStorageFormat)
	if !r.Configuration.FormatConfig.Format.IsUnknown() && !r.Configuration.FormatConfig.Format.IsNull() {
		*format = shared.DestinationIcebergFileStorageFormat(r.Configuration.FormatConfig.Format.ValueString())
	} else {
		format = nil
	}
	formatConfig := shared.DestinationIcebergFileFormat{
		AutoCompact:               autoCompact,
		CompactTargetFileSizeInMb: compactTargetFileSizeInMb,
		FlushBatchSize:            flushBatchSize,
		Format:                    format,
	}
	var storageConfig shared.DestinationIcebergStorageConfig
	var destinationIcebergS3 *shared.DestinationIcebergS3
	if r.Configuration.StorageConfig.S3 != nil {
		var accessKeyID string
		accessKeyID = r.Configuration.StorageConfig.S3.AccessKeyID.ValueString()

		s3BucketRegion := new(shared.DestinationIcebergS3BucketRegion)
		if !r.Configuration.StorageConfig.S3.S3BucketRegion.IsUnknown() && !r.Configuration.StorageConfig.S3.S3BucketRegion.IsNull() {
			*s3BucketRegion = shared.DestinationIcebergS3BucketRegion(r.Configuration.StorageConfig.S3.S3BucketRegion.ValueString())
		} else {
			s3BucketRegion = nil
		}
		s3Endpoint := new(string)
		if !r.Configuration.StorageConfig.S3.S3Endpoint.IsUnknown() && !r.Configuration.StorageConfig.S3.S3Endpoint.IsNull() {
			*s3Endpoint = r.Configuration.StorageConfig.S3.S3Endpoint.ValueString()
		} else {
			s3Endpoint = nil
		}
		s3PathStyleAccess := new(bool)
		if !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsUnknown() && !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsNull() {
			*s3PathStyleAccess = r.Configuration.StorageConfig.S3.S3PathStyleAccess.ValueBool()
		} else {
			s3PathStyleAccess = nil
		}
		var s3WarehouseURI string
		s3WarehouseURI = r.Configuration.StorageConfig.S3.S3WarehouseURI.ValueString()

		var secretAccessKey string
		secretAccessKey = r.Configuration.StorageConfig.S3.SecretAccessKey.ValueString()

		storageType := new(shared.DestinationIcebergStorageType)
		if !r.Configuration.StorageConfig.S3.StorageType.IsUnknown() && !r.Configuration.StorageConfig.S3.StorageType.IsNull() {
			*storageType = shared.DestinationIcebergStorageType(r.Configuration.StorageConfig.S3.StorageType.ValueString())
		} else {
			storageType = nil
		}
		destinationIcebergS3 = &shared.DestinationIcebergS3{
			AccessKeyID:       accessKeyID,
			S3BucketRegion:    s3BucketRegion,
			S3Endpoint:        s3Endpoint,
			S3PathStyleAccess: s3PathStyleAccess,
			S3WarehouseURI:    s3WarehouseURI,
			SecretAccessKey:   secretAccessKey,
			StorageType:       storageType,
		}
	}
	if destinationIcebergS3 != nil {
		storageConfig = shared.DestinationIcebergStorageConfig{
			DestinationIcebergS3: destinationIcebergS3,
		}
	}
	var destinationIcebergServerManaged *shared.DestinationIcebergServerManaged
	if r.Configuration.StorageConfig.ServerManaged != nil {
		var managedWarehouseName string
		managedWarehouseName = r.Configuration.StorageConfig.ServerManaged.ManagedWarehouseName.ValueString()

		storageType1 := new(shared.DestinationIcebergSchemasStorageType)
		if !r.Configuration.StorageConfig.ServerManaged.StorageType.IsUnknown() && !r.Configuration.StorageConfig.ServerManaged.StorageType.IsNull() {
			*storageType1 = shared.DestinationIcebergSchemasStorageType(r.Configuration.StorageConfig.ServerManaged.StorageType.ValueString())
		} else {
			storageType1 = nil
		}
		destinationIcebergServerManaged = &shared.DestinationIcebergServerManaged{
			ManagedWarehouseName: managedWarehouseName,
			StorageType:          storageType1,
		}
	}
	if destinationIcebergServerManaged != nil {
		storageConfig = shared.DestinationIcebergStorageConfig{
			DestinationIcebergServerManaged: destinationIcebergServerManaged,
		}
	}
	configuration := shared.DestinationIceberg{
		CatalogConfig: catalogConfig,
		FormatConfig:  formatConfig,
		StorageConfig: storageConfig,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationIcebergCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationIcebergResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationIcebergResourceModel) ToSharedDestinationIcebergPutRequest() *shared.DestinationIcebergPutRequest {
	var catalogConfig shared.IcebergCatalogConfig
	var hiveCatalogUseApacheHiveMetaStore *shared.HiveCatalogUseApacheHiveMetaStore
	if r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore != nil {
		catalogType := new(shared.CatalogType)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsNull() {
			*catalogType = shared.CatalogType(r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.ValueString())
		} else {
			catalogType = nil
		}
		database := new(string)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsNull() {
			*database = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.ValueString()
		} else {
			database = nil
		}
		var hiveThriftURI string
		hiveThriftURI = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.HiveThriftURI.ValueString()

		hiveCatalogUseApacheHiveMetaStore = &shared.HiveCatalogUseApacheHiveMetaStore{
			CatalogType:   catalogType,
			Database:      database,
			HiveThriftURI: hiveThriftURI,
		}
	}
	if hiveCatalogUseApacheHiveMetaStore != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			HiveCatalogUseApacheHiveMetaStore: hiveCatalogUseApacheHiveMetaStore,
		}
	}
	var hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig *shared.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
	if r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogType1 := new(shared.DestinationIcebergUpdateCatalogType)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsNull() {
			*catalogType1 = shared.DestinationIcebergUpdateCatalogType(r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.ValueString())
		} else {
			catalogType1 = nil
		}
		database1 := new(string)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsNull() {
			*database1 = r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.ValueString()
		} else {
			database1 = nil
		}
		hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = &shared.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig{
			CatalogType: catalogType1,
			Database:    database1,
		}
	}
	if hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig: hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig,
		}
	}
	var jdbcCatalogUseRelationalDatabase *shared.JdbcCatalogUseRelationalDatabase
	if r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase != nil {
		catalogSchema := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsNull() {
			*catalogSchema = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.ValueString()
		} else {
			catalogSchema = nil
		}
		catalogType2 := new(shared.DestinationIcebergUpdateSchemasCatalogType)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsNull() {
			*catalogType2 = shared.DestinationIcebergUpdateSchemasCatalogType(r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.ValueString())
		} else {
			catalogType2 = nil
		}
		database2 := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsNull() {
			*database2 = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.ValueString()
		} else {
			database2 = nil
		}
		jdbcURL := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsNull() {
			*jdbcURL = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.ValueString()
		} else {
			jdbcURL = nil
		}
		password := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsNull() {
			*password = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.ValueString()
		} else {
			password = nil
		}
		ssl := new(bool)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsNull() {
			*ssl = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		username := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsNull() {
			*username = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.ValueString()
		} else {
			username = nil
		}
		jdbcCatalogUseRelationalDatabase = &shared.JdbcCatalogUseRelationalDatabase{
			CatalogSchema: catalogSchema,
			CatalogType:   catalogType2,
			Database:      database2,
			JdbcURL:       jdbcURL,
			Password:      password,
			Ssl:           ssl,
			Username:      username,
		}
	}
	if jdbcCatalogUseRelationalDatabase != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			JdbcCatalogUseRelationalDatabase: jdbcCatalogUseRelationalDatabase,
		}
	}
	var restCatalog *shared.RESTCatalog
	if r.Configuration.CatalogConfig.RESTCatalog != nil {
		catalogType3 := new(shared.DestinationIcebergUpdateSchemasCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsNull() {
			*catalogType3 = shared.DestinationIcebergUpdateSchemasCatalogConfigCatalogType(r.Configuration.CatalogConfig.RESTCatalog.CatalogType.ValueString())
		} else {
			catalogType3 = nil
		}
		restCredential := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsNull() {
			*restCredential = r.Configuration.CatalogConfig.RESTCatalog.RestCredential.ValueString()
		} else {
			restCredential = nil
		}
		restToken := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsNull() {
			*restToken = r.Configuration.CatalogConfig.RESTCatalog.RestToken.ValueString()
		} else {
			restToken = nil
		}
		var restURI string
		restURI = r.Configuration.CatalogConfig.RESTCatalog.RestURI.ValueString()

		restCatalog = &shared.RESTCatalog{
			CatalogType:    catalogType3,
			RestCredential: restCredential,
			RestToken:      restToken,
			RestURI:        restURI,
		}
	}
	if restCatalog != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			RESTCatalog: restCatalog,
		}
	}
	var glueCatalog *shared.GlueCatalog
	if r.Configuration.CatalogConfig.GlueCatalog != nil {
		catalogType4 := new(shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsNull() {
			*catalogType4 = shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfigCatalogType(r.Configuration.CatalogConfig.GlueCatalog.CatalogType.ValueString())
		} else {
			catalogType4 = nil
		}
		database3 := new(string)
		if !r.Configuration.CatalogConfig.GlueCatalog.Database.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.Database.IsNull() {
			*database3 = r.Configuration.CatalogConfig.GlueCatalog.Database.ValueString()
		} else {
			database3 = nil
		}
		glueCatalog = &shared.GlueCatalog{
			CatalogType: catalogType4,
			Database:    database3,
		}
	}
	if glueCatalog != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			GlueCatalog: glueCatalog,
		}
	}
	autoCompact := new(bool)
	if !r.Configuration.FormatConfig.AutoCompact.IsUnknown() && !r.Configuration.FormatConfig.AutoCompact.IsNull() {
		*autoCompact = r.Configuration.FormatConfig.AutoCompact.ValueBool()
	} else {
		autoCompact = nil
	}
	compactTargetFileSizeInMb := new(int64)
	if !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsUnknown() && !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsNull() {
		*compactTargetFileSizeInMb = r.Configuration.FormatConfig.CompactTargetFileSizeInMb.ValueInt64()
	} else {
		compactTargetFileSizeInMb = nil
	}
	flushBatchSize := new(int64)
	if !r.Configuration.FormatConfig.FlushBatchSize.IsUnknown() && !r.Configuration.FormatConfig.FlushBatchSize.IsNull() {
		*flushBatchSize = r.Configuration.FormatConfig.FlushBatchSize.ValueInt64()
	} else {
		flushBatchSize = nil
	}
	format := new(shared.FileStorageFormat)
	if !r.Configuration.FormatConfig.Format.IsUnknown() && !r.Configuration.FormatConfig.Format.IsNull() {
		*format = shared.FileStorageFormat(r.Configuration.FormatConfig.Format.ValueString())
	} else {
		format = nil
	}
	formatConfig := shared.FileFormat{
		AutoCompact:               autoCompact,
		CompactTargetFileSizeInMb: compactTargetFileSizeInMb,
		FlushBatchSize:            flushBatchSize,
		Format:                    format,
	}
	var storageConfig shared.StorageConfig
	var destinationIcebergUpdateS3 *shared.DestinationIcebergUpdateS3
	if r.Configuration.StorageConfig.S3 != nil {
		var accessKeyID string
		accessKeyID = r.Configuration.StorageConfig.S3.AccessKeyID.ValueString()

		s3BucketRegion := new(shared.DestinationIcebergUpdateS3BucketRegion)
		if !r.Configuration.StorageConfig.S3.S3BucketRegion.IsUnknown() && !r.Configuration.StorageConfig.S3.S3BucketRegion.IsNull() {
			*s3BucketRegion = shared.DestinationIcebergUpdateS3BucketRegion(r.Configuration.StorageConfig.S3.S3BucketRegion.ValueString())
		} else {
			s3BucketRegion = nil
		}
		s3Endpoint := new(string)
		if !r.Configuration.StorageConfig.S3.S3Endpoint.IsUnknown() && !r.Configuration.StorageConfig.S3.S3Endpoint.IsNull() {
			*s3Endpoint = r.Configuration.StorageConfig.S3.S3Endpoint.ValueString()
		} else {
			s3Endpoint = nil
		}
		s3PathStyleAccess := new(bool)
		if !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsUnknown() && !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsNull() {
			*s3PathStyleAccess = r.Configuration.StorageConfig.S3.S3PathStyleAccess.ValueBool()
		} else {
			s3PathStyleAccess = nil
		}
		var s3WarehouseURI string
		s3WarehouseURI = r.Configuration.StorageConfig.S3.S3WarehouseURI.ValueString()

		var secretAccessKey string
		secretAccessKey = r.Configuration.StorageConfig.S3.SecretAccessKey.ValueString()

		storageType := new(shared.StorageType)
		if !r.Configuration.StorageConfig.S3.StorageType.IsUnknown() && !r.Configuration.StorageConfig.S3.StorageType.IsNull() {
			*storageType = shared.StorageType(r.Configuration.StorageConfig.S3.StorageType.ValueString())
		} else {
			storageType = nil
		}
		destinationIcebergUpdateS3 = &shared.DestinationIcebergUpdateS3{
			AccessKeyID:       accessKeyID,
			S3BucketRegion:    s3BucketRegion,
			S3Endpoint:        s3Endpoint,
			S3PathStyleAccess: s3PathStyleAccess,
			S3WarehouseURI:    s3WarehouseURI,
			SecretAccessKey:   secretAccessKey,
			StorageType:       storageType,
		}
	}
	if destinationIcebergUpdateS3 != nil {
		storageConfig = shared.StorageConfig{
			DestinationIcebergUpdateS3: destinationIcebergUpdateS3,
		}
	}
	var serverManaged *shared.ServerManaged
	if r.Configuration.StorageConfig.ServerManaged != nil {
		var managedWarehouseName string
		managedWarehouseName = r.Configuration.StorageConfig.ServerManaged.ManagedWarehouseName.ValueString()

		storageType1 := new(shared.DestinationIcebergUpdateStorageType)
		if !r.Configuration.StorageConfig.ServerManaged.StorageType.IsUnknown() && !r.Configuration.StorageConfig.ServerManaged.StorageType.IsNull() {
			*storageType1 = shared.DestinationIcebergUpdateStorageType(r.Configuration.StorageConfig.ServerManaged.StorageType.ValueString())
		} else {
			storageType1 = nil
		}
		serverManaged = &shared.ServerManaged{
			ManagedWarehouseName: managedWarehouseName,
			StorageType:          storageType1,
		}
	}
	if serverManaged != nil {
		storageConfig = shared.StorageConfig{
			ServerManaged: serverManaged,
		}
	}
	configuration := shared.DestinationIcebergUpdate{
		CatalogConfig: catalogConfig,
		FormatConfig:  formatConfig,
		StorageConfig: storageConfig,
	}
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	out := shared.DestinationIcebergPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
