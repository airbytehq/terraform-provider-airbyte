// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationIcebergResourceModel) ToSharedDestinationIcebergCreateRequest() *shared.DestinationIcebergCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var catalogConfig shared.IcebergCatalogConfig
	var hiveCatalogUseApacheHiveMetaStore *shared.HiveCatalogUseApacheHiveMetaStore
	if r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore != nil {
		catalogType := new(shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsNull() {
			*catalogType = shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType(r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.ValueString())
		} else {
			catalogType = nil
		}
		var hiveThriftURI string
		hiveThriftURI = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.HiveThriftURI.ValueString()

		database := new(string)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsNull() {
			*database = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.ValueString()
		} else {
			database = nil
		}
		hiveCatalogUseApacheHiveMetaStore = &shared.HiveCatalogUseApacheHiveMetaStore{
			CatalogType:   catalogType,
			HiveThriftURI: hiveThriftURI,
			Database:      database,
		}
	}
	if hiveCatalogUseApacheHiveMetaStore != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			HiveCatalogUseApacheHiveMetaStore: hiveCatalogUseApacheHiveMetaStore,
		}
	}
	var hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig *shared.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
	if r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogType1 := new(shared.DestinationIcebergCatalogType)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsNull() {
			*catalogType1 = shared.DestinationIcebergCatalogType(r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.ValueString())
		} else {
			catalogType1 = nil
		}
		database1 := new(string)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsNull() {
			*database1 = r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.ValueString()
		} else {
			database1 = nil
		}
		hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = &shared.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig{
			CatalogType: catalogType1,
			Database:    database1,
		}
	}
	if hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig: hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig,
		}
	}
	var jdbcCatalogUseRelationalDatabase *shared.JdbcCatalogUseRelationalDatabase
	if r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase != nil {
		catalogType2 := new(shared.DestinationIcebergSchemasCatalogType)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsNull() {
			*catalogType2 = shared.DestinationIcebergSchemasCatalogType(r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.ValueString())
		} else {
			catalogType2 = nil
		}
		database2 := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsNull() {
			*database2 = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.ValueString()
		} else {
			database2 = nil
		}
		jdbcURL := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsNull() {
			*jdbcURL = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.ValueString()
		} else {
			jdbcURL = nil
		}
		username := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsNull() {
			*username = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsNull() {
			*password = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.ValueString()
		} else {
			password = nil
		}
		ssl := new(bool)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsNull() {
			*ssl = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		catalogSchema := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsNull() {
			*catalogSchema = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.ValueString()
		} else {
			catalogSchema = nil
		}
		jdbcCatalogUseRelationalDatabase = &shared.JdbcCatalogUseRelationalDatabase{
			CatalogType:   catalogType2,
			Database:      database2,
			JdbcURL:       jdbcURL,
			Username:      username,
			Password:      password,
			Ssl:           ssl,
			CatalogSchema: catalogSchema,
		}
	}
	if jdbcCatalogUseRelationalDatabase != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			JdbcCatalogUseRelationalDatabase: jdbcCatalogUseRelationalDatabase,
		}
	}
	var restCatalog *shared.RESTCatalog
	if r.Configuration.CatalogConfig.RESTCatalog != nil {
		catalogType3 := new(shared.DestinationIcebergSchemasCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsNull() {
			*catalogType3 = shared.DestinationIcebergSchemasCatalogConfigCatalogType(r.Configuration.CatalogConfig.RESTCatalog.CatalogType.ValueString())
		} else {
			catalogType3 = nil
		}
		var restURI string
		restURI = r.Configuration.CatalogConfig.RESTCatalog.RestURI.ValueString()

		restCredential := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsNull() {
			*restCredential = r.Configuration.CatalogConfig.RESTCatalog.RestCredential.ValueString()
		} else {
			restCredential = nil
		}
		restToken := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsNull() {
			*restToken = r.Configuration.CatalogConfig.RESTCatalog.RestToken.ValueString()
		} else {
			restToken = nil
		}
		restCatalog = &shared.RESTCatalog{
			CatalogType:    catalogType3,
			RestURI:        restURI,
			RestCredential: restCredential,
			RestToken:      restToken,
		}
	}
	if restCatalog != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			RESTCatalog: restCatalog,
		}
	}
	var glueCatalog *shared.GlueCatalog
	if r.Configuration.CatalogConfig.GlueCatalog != nil {
		catalogType4 := new(shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsNull() {
			*catalogType4 = shared.DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType(r.Configuration.CatalogConfig.GlueCatalog.CatalogType.ValueString())
		} else {
			catalogType4 = nil
		}
		database3 := new(string)
		if !r.Configuration.CatalogConfig.GlueCatalog.Database.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.Database.IsNull() {
			*database3 = r.Configuration.CatalogConfig.GlueCatalog.Database.ValueString()
		} else {
			database3 = nil
		}
		glueCatalog = &shared.GlueCatalog{
			CatalogType: catalogType4,
			Database:    database3,
		}
	}
	if glueCatalog != nil {
		catalogConfig = shared.IcebergCatalogConfig{
			GlueCatalog: glueCatalog,
		}
	}
	var storageConfig shared.StorageConfig
	var destinationIcebergS3 *shared.DestinationIcebergS3
	if r.Configuration.StorageConfig.S3 != nil {
		storageType := new(shared.StorageType)
		if !r.Configuration.StorageConfig.S3.StorageType.IsUnknown() && !r.Configuration.StorageConfig.S3.StorageType.IsNull() {
			*storageType = shared.StorageType(r.Configuration.StorageConfig.S3.StorageType.ValueString())
		} else {
			storageType = nil
		}
		var accessKeyID string
		accessKeyID = r.Configuration.StorageConfig.S3.AccessKeyID.ValueString()

		var secretAccessKey string
		secretAccessKey = r.Configuration.StorageConfig.S3.SecretAccessKey.ValueString()

		var s3WarehouseURI string
		s3WarehouseURI = r.Configuration.StorageConfig.S3.S3WarehouseURI.ValueString()

		s3BucketRegion := new(shared.DestinationIcebergS3BucketRegion)
		if !r.Configuration.StorageConfig.S3.S3BucketRegion.IsUnknown() && !r.Configuration.StorageConfig.S3.S3BucketRegion.IsNull() {
			*s3BucketRegion = shared.DestinationIcebergS3BucketRegion(r.Configuration.StorageConfig.S3.S3BucketRegion.ValueString())
		} else {
			s3BucketRegion = nil
		}
		s3Endpoint := new(string)
		if !r.Configuration.StorageConfig.S3.S3Endpoint.IsUnknown() && !r.Configuration.StorageConfig.S3.S3Endpoint.IsNull() {
			*s3Endpoint = r.Configuration.StorageConfig.S3.S3Endpoint.ValueString()
		} else {
			s3Endpoint = nil
		}
		s3PathStyleAccess := new(bool)
		if !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsUnknown() && !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsNull() {
			*s3PathStyleAccess = r.Configuration.StorageConfig.S3.S3PathStyleAccess.ValueBool()
		} else {
			s3PathStyleAccess = nil
		}
		destinationIcebergS3 = &shared.DestinationIcebergS3{
			StorageType:       storageType,
			AccessKeyID:       accessKeyID,
			SecretAccessKey:   secretAccessKey,
			S3WarehouseURI:    s3WarehouseURI,
			S3BucketRegion:    s3BucketRegion,
			S3Endpoint:        s3Endpoint,
			S3PathStyleAccess: s3PathStyleAccess,
		}
	}
	if destinationIcebergS3 != nil {
		storageConfig = shared.StorageConfig{
			DestinationIcebergS3: destinationIcebergS3,
		}
	}
	var serverManaged *shared.ServerManaged
	if r.Configuration.StorageConfig.ServerManaged != nil {
		storageType1 := new(shared.DestinationIcebergStorageType)
		if !r.Configuration.StorageConfig.ServerManaged.StorageType.IsUnknown() && !r.Configuration.StorageConfig.ServerManaged.StorageType.IsNull() {
			*storageType1 = shared.DestinationIcebergStorageType(r.Configuration.StorageConfig.ServerManaged.StorageType.ValueString())
		} else {
			storageType1 = nil
		}
		var managedWarehouseName string
		managedWarehouseName = r.Configuration.StorageConfig.ServerManaged.ManagedWarehouseName.ValueString()

		serverManaged = &shared.ServerManaged{
			StorageType:          storageType1,
			ManagedWarehouseName: managedWarehouseName,
		}
	}
	if serverManaged != nil {
		storageConfig = shared.StorageConfig{
			ServerManaged: serverManaged,
		}
	}
	format := new(shared.FileStorageFormat)
	if !r.Configuration.FormatConfig.Format.IsUnknown() && !r.Configuration.FormatConfig.Format.IsNull() {
		*format = shared.FileStorageFormat(r.Configuration.FormatConfig.Format.ValueString())
	} else {
		format = nil
	}
	flushBatchSize := new(int64)
	if !r.Configuration.FormatConfig.FlushBatchSize.IsUnknown() && !r.Configuration.FormatConfig.FlushBatchSize.IsNull() {
		*flushBatchSize = r.Configuration.FormatConfig.FlushBatchSize.ValueInt64()
	} else {
		flushBatchSize = nil
	}
	autoCompact := new(bool)
	if !r.Configuration.FormatConfig.AutoCompact.IsUnknown() && !r.Configuration.FormatConfig.AutoCompact.IsNull() {
		*autoCompact = r.Configuration.FormatConfig.AutoCompact.ValueBool()
	} else {
		autoCompact = nil
	}
	compactTargetFileSizeInMb := new(int64)
	if !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsUnknown() && !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsNull() {
		*compactTargetFileSizeInMb = r.Configuration.FormatConfig.CompactTargetFileSizeInMb.ValueInt64()
	} else {
		compactTargetFileSizeInMb = nil
	}
	formatConfig := shared.DestinationIcebergFileFormat{
		Format:                    format,
		FlushBatchSize:            flushBatchSize,
		AutoCompact:               autoCompact,
		CompactTargetFileSizeInMb: compactTargetFileSizeInMb,
	}
	configuration := shared.DestinationIceberg{
		CatalogConfig: catalogConfig,
		StorageConfig: storageConfig,
		FormatConfig:  formatConfig,
	}
	out := shared.DestinationIcebergCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationIcebergResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationIcebergResourceModel) ToSharedDestinationIcebergPutRequest() *shared.DestinationIcebergPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var catalogConfig shared.DestinationIcebergUpdateIcebergCatalogConfig
	var destinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore *shared.DestinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore
	if r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore != nil {
		catalogType := new(shared.DestinationIcebergUpdateCatalogType)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.IsNull() {
			*catalogType = shared.DestinationIcebergUpdateCatalogType(r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.CatalogType.ValueString())
		} else {
			catalogType = nil
		}
		var hiveThriftURI string
		hiveThriftURI = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.HiveThriftURI.ValueString()

		database := new(string)
		if !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsUnknown() && !r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.IsNull() {
			*database = r.Configuration.CatalogConfig.HiveCatalogUseApacheHiveMetaStore.Database.ValueString()
		} else {
			database = nil
		}
		destinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore = &shared.DestinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore{
			CatalogType:   catalogType,
			HiveThriftURI: hiveThriftURI,
			Database:      database,
		}
	}
	if destinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore != nil {
		catalogConfig = shared.DestinationIcebergUpdateIcebergCatalogConfig{
			DestinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore: destinationIcebergUpdateHiveCatalogUseApacheHiveMetaStore,
		}
	}
	var destinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig *shared.DestinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
	if r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogType1 := new(shared.DestinationIcebergUpdateSchemasCatalogType)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.IsNull() {
			*catalogType1 = shared.DestinationIcebergUpdateSchemasCatalogType(r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.CatalogType.ValueString())
		} else {
			catalogType1 = nil
		}
		database1 := new(string)
		if !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsUnknown() && !r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.IsNull() {
			*database1 = r.Configuration.CatalogConfig.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig.Database.ValueString()
		} else {
			database1 = nil
		}
		destinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = &shared.DestinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig{
			CatalogType: catalogType1,
			Database:    database1,
		}
	}
	if destinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		catalogConfig = shared.DestinationIcebergUpdateIcebergCatalogConfig{
			DestinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig: destinationIcebergUpdateHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig,
		}
	}
	var destinationIcebergUpdateJdbcCatalogUseRelationalDatabase *shared.DestinationIcebergUpdateJdbcCatalogUseRelationalDatabase
	if r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase != nil {
		catalogType2 := new(shared.DestinationIcebergUpdateSchemasCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.IsNull() {
			*catalogType2 = shared.DestinationIcebergUpdateSchemasCatalogConfigCatalogType(r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogType.ValueString())
		} else {
			catalogType2 = nil
		}
		database2 := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.IsNull() {
			*database2 = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Database.ValueString()
		} else {
			database2 = nil
		}
		jdbcURL := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.IsNull() {
			*jdbcURL = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.JdbcURL.ValueString()
		} else {
			jdbcURL = nil
		}
		username := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.IsNull() {
			*username = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.IsNull() {
			*password = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Password.ValueString()
		} else {
			password = nil
		}
		ssl := new(bool)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.IsNull() {
			*ssl = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		catalogSchema := new(string)
		if !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsUnknown() && !r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.IsNull() {
			*catalogSchema = r.Configuration.CatalogConfig.JdbcCatalogUseRelationalDatabase.CatalogSchema.ValueString()
		} else {
			catalogSchema = nil
		}
		destinationIcebergUpdateJdbcCatalogUseRelationalDatabase = &shared.DestinationIcebergUpdateJdbcCatalogUseRelationalDatabase{
			CatalogType:   catalogType2,
			Database:      database2,
			JdbcURL:       jdbcURL,
			Username:      username,
			Password:      password,
			Ssl:           ssl,
			CatalogSchema: catalogSchema,
		}
	}
	if destinationIcebergUpdateJdbcCatalogUseRelationalDatabase != nil {
		catalogConfig = shared.DestinationIcebergUpdateIcebergCatalogConfig{
			DestinationIcebergUpdateJdbcCatalogUseRelationalDatabase: destinationIcebergUpdateJdbcCatalogUseRelationalDatabase,
		}
	}
	var destinationIcebergUpdateRESTCatalog *shared.DestinationIcebergUpdateRESTCatalog
	if r.Configuration.CatalogConfig.RESTCatalog != nil {
		catalogType3 := new(shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfigCatalogType)
		if !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.CatalogType.IsNull() {
			*catalogType3 = shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfigCatalogType(r.Configuration.CatalogConfig.RESTCatalog.CatalogType.ValueString())
		} else {
			catalogType3 = nil
		}
		var restURI string
		restURI = r.Configuration.CatalogConfig.RESTCatalog.RestURI.ValueString()

		restCredential := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestCredential.IsNull() {
			*restCredential = r.Configuration.CatalogConfig.RESTCatalog.RestCredential.ValueString()
		} else {
			restCredential = nil
		}
		restToken := new(string)
		if !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsUnknown() && !r.Configuration.CatalogConfig.RESTCatalog.RestToken.IsNull() {
			*restToken = r.Configuration.CatalogConfig.RESTCatalog.RestToken.ValueString()
		} else {
			restToken = nil
		}
		destinationIcebergUpdateRESTCatalog = &shared.DestinationIcebergUpdateRESTCatalog{
			CatalogType:    catalogType3,
			RestURI:        restURI,
			RestCredential: restCredential,
			RestToken:      restToken,
		}
	}
	if destinationIcebergUpdateRESTCatalog != nil {
		catalogConfig = shared.DestinationIcebergUpdateIcebergCatalogConfig{
			DestinationIcebergUpdateRESTCatalog: destinationIcebergUpdateRESTCatalog,
		}
	}
	var destinationIcebergUpdateGlueCatalog *shared.DestinationIcebergUpdateGlueCatalog
	if r.Configuration.CatalogConfig.GlueCatalog != nil {
		catalogType4 := new(shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfig5CatalogType)
		if !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.CatalogType.IsNull() {
			*catalogType4 = shared.DestinationIcebergUpdateSchemasCatalogConfigIcebergCatalogConfig5CatalogType(r.Configuration.CatalogConfig.GlueCatalog.CatalogType.ValueString())
		} else {
			catalogType4 = nil
		}
		database3 := new(string)
		if !r.Configuration.CatalogConfig.GlueCatalog.Database.IsUnknown() && !r.Configuration.CatalogConfig.GlueCatalog.Database.IsNull() {
			*database3 = r.Configuration.CatalogConfig.GlueCatalog.Database.ValueString()
		} else {
			database3 = nil
		}
		destinationIcebergUpdateGlueCatalog = &shared.DestinationIcebergUpdateGlueCatalog{
			CatalogType: catalogType4,
			Database:    database3,
		}
	}
	if destinationIcebergUpdateGlueCatalog != nil {
		catalogConfig = shared.DestinationIcebergUpdateIcebergCatalogConfig{
			DestinationIcebergUpdateGlueCatalog: destinationIcebergUpdateGlueCatalog,
		}
	}
	var storageConfig shared.DestinationIcebergUpdateStorageConfig
	var destinationIcebergUpdateS3 *shared.DestinationIcebergUpdateS3
	if r.Configuration.StorageConfig.S3 != nil {
		storageType := new(shared.DestinationIcebergUpdateStorageType)
		if !r.Configuration.StorageConfig.S3.StorageType.IsUnknown() && !r.Configuration.StorageConfig.S3.StorageType.IsNull() {
			*storageType = shared.DestinationIcebergUpdateStorageType(r.Configuration.StorageConfig.S3.StorageType.ValueString())
		} else {
			storageType = nil
		}
		var accessKeyID string
		accessKeyID = r.Configuration.StorageConfig.S3.AccessKeyID.ValueString()

		var secretAccessKey string
		secretAccessKey = r.Configuration.StorageConfig.S3.SecretAccessKey.ValueString()

		var s3WarehouseURI string
		s3WarehouseURI = r.Configuration.StorageConfig.S3.S3WarehouseURI.ValueString()

		s3BucketRegion := new(shared.DestinationIcebergUpdateS3BucketRegion)
		if !r.Configuration.StorageConfig.S3.S3BucketRegion.IsUnknown() && !r.Configuration.StorageConfig.S3.S3BucketRegion.IsNull() {
			*s3BucketRegion = shared.DestinationIcebergUpdateS3BucketRegion(r.Configuration.StorageConfig.S3.S3BucketRegion.ValueString())
		} else {
			s3BucketRegion = nil
		}
		s3Endpoint := new(string)
		if !r.Configuration.StorageConfig.S3.S3Endpoint.IsUnknown() && !r.Configuration.StorageConfig.S3.S3Endpoint.IsNull() {
			*s3Endpoint = r.Configuration.StorageConfig.S3.S3Endpoint.ValueString()
		} else {
			s3Endpoint = nil
		}
		s3PathStyleAccess := new(bool)
		if !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsUnknown() && !r.Configuration.StorageConfig.S3.S3PathStyleAccess.IsNull() {
			*s3PathStyleAccess = r.Configuration.StorageConfig.S3.S3PathStyleAccess.ValueBool()
		} else {
			s3PathStyleAccess = nil
		}
		destinationIcebergUpdateS3 = &shared.DestinationIcebergUpdateS3{
			StorageType:       storageType,
			AccessKeyID:       accessKeyID,
			SecretAccessKey:   secretAccessKey,
			S3WarehouseURI:    s3WarehouseURI,
			S3BucketRegion:    s3BucketRegion,
			S3Endpoint:        s3Endpoint,
			S3PathStyleAccess: s3PathStyleAccess,
		}
	}
	if destinationIcebergUpdateS3 != nil {
		storageConfig = shared.DestinationIcebergUpdateStorageConfig{
			DestinationIcebergUpdateS3: destinationIcebergUpdateS3,
		}
	}
	var destinationIcebergUpdateServerManaged *shared.DestinationIcebergUpdateServerManaged
	if r.Configuration.StorageConfig.ServerManaged != nil {
		storageType1 := new(shared.DestinationIcebergUpdateSchemasStorageType)
		if !r.Configuration.StorageConfig.ServerManaged.StorageType.IsUnknown() && !r.Configuration.StorageConfig.ServerManaged.StorageType.IsNull() {
			*storageType1 = shared.DestinationIcebergUpdateSchemasStorageType(r.Configuration.StorageConfig.ServerManaged.StorageType.ValueString())
		} else {
			storageType1 = nil
		}
		var managedWarehouseName string
		managedWarehouseName = r.Configuration.StorageConfig.ServerManaged.ManagedWarehouseName.ValueString()

		destinationIcebergUpdateServerManaged = &shared.DestinationIcebergUpdateServerManaged{
			StorageType:          storageType1,
			ManagedWarehouseName: managedWarehouseName,
		}
	}
	if destinationIcebergUpdateServerManaged != nil {
		storageConfig = shared.DestinationIcebergUpdateStorageConfig{
			DestinationIcebergUpdateServerManaged: destinationIcebergUpdateServerManaged,
		}
	}
	format := new(shared.DestinationIcebergUpdateFileStorageFormat)
	if !r.Configuration.FormatConfig.Format.IsUnknown() && !r.Configuration.FormatConfig.Format.IsNull() {
		*format = shared.DestinationIcebergUpdateFileStorageFormat(r.Configuration.FormatConfig.Format.ValueString())
	} else {
		format = nil
	}
	flushBatchSize := new(int64)
	if !r.Configuration.FormatConfig.FlushBatchSize.IsUnknown() && !r.Configuration.FormatConfig.FlushBatchSize.IsNull() {
		*flushBatchSize = r.Configuration.FormatConfig.FlushBatchSize.ValueInt64()
	} else {
		flushBatchSize = nil
	}
	autoCompact := new(bool)
	if !r.Configuration.FormatConfig.AutoCompact.IsUnknown() && !r.Configuration.FormatConfig.AutoCompact.IsNull() {
		*autoCompact = r.Configuration.FormatConfig.AutoCompact.ValueBool()
	} else {
		autoCompact = nil
	}
	compactTargetFileSizeInMb := new(int64)
	if !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsUnknown() && !r.Configuration.FormatConfig.CompactTargetFileSizeInMb.IsNull() {
		*compactTargetFileSizeInMb = r.Configuration.FormatConfig.CompactTargetFileSizeInMb.ValueInt64()
	} else {
		compactTargetFileSizeInMb = nil
	}
	formatConfig := shared.DestinationIcebergUpdateFileFormat{
		Format:                    format,
		FlushBatchSize:            flushBatchSize,
		AutoCompact:               autoCompact,
		CompactTargetFileSizeInMb: compactTargetFileSizeInMb,
	}
	configuration := shared.DestinationIcebergUpdate{
		CatalogConfig: catalogConfig,
		StorageConfig: storageConfig,
		FormatConfig:  formatConfig,
	}
	out := shared.DestinationIcebergPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
