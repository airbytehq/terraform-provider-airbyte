// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceGoogleAdsResourceModel) ToCreateSDKType() *shared.SourceGoogleAdsCreateRequest {
	conversionWindowDays := new(int64)
	if !r.Configuration.ConversionWindowDays.IsUnknown() && !r.Configuration.ConversionWindowDays.IsNull() {
		*conversionWindowDays = r.Configuration.ConversionWindowDays.ValueInt64()
	} else {
		conversionWindowDays = nil
	}
	accessToken := new(string)
	if !r.Configuration.Credentials.AccessToken.IsUnknown() && !r.Configuration.Credentials.AccessToken.IsNull() {
		*accessToken = r.Configuration.Credentials.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	clientID := r.Configuration.Credentials.ClientID.ValueString()
	clientSecret := r.Configuration.Credentials.ClientSecret.ValueString()
	developerToken := r.Configuration.Credentials.DeveloperToken.ValueString()
	refreshToken := r.Configuration.Credentials.RefreshToken.ValueString()
	credentials := shared.SourceGoogleAdsGoogleCredentials{
		AccessToken:    accessToken,
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		DeveloperToken: developerToken,
		RefreshToken:   refreshToken,
	}
	var customQueries []shared.SourceGoogleAdsCustomQueries = nil
	for _, customQueriesItem := range r.Configuration.CustomQueries {
		query := customQueriesItem.Query.ValueString()
		tableName := customQueriesItem.TableName.ValueString()
		customQueries = append(customQueries, shared.SourceGoogleAdsCustomQueries{
			Query:     query,
			TableName: tableName,
		})
	}
	customerID := r.Configuration.CustomerID.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	loginCustomerID := new(string)
	if !r.Configuration.LoginCustomerID.IsUnknown() && !r.Configuration.LoginCustomerID.IsNull() {
		*loginCustomerID = r.Configuration.LoginCustomerID.ValueString()
	} else {
		loginCustomerID = nil
	}
	sourceType := shared.SourceGoogleAdsGoogleAds(r.Configuration.SourceType.ValueString())
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGoogleAds{
		ConversionWindowDays: conversionWindowDays,
		Credentials:          credentials,
		CustomQueries:        customQueries,
		CustomerID:           customerID,
		EndDate:              endDate,
		LoginCustomerID:      loginCustomerID,
		SourceType:           sourceType,
		StartDate:            startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleAdsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleAdsResourceModel) ToGetSDKType() *shared.SourceGoogleAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleAdsResourceModel) ToUpdateSDKType() *shared.SourceGoogleAdsPutRequest {
	conversionWindowDays := new(int64)
	if !r.Configuration.ConversionWindowDays.IsUnknown() && !r.Configuration.ConversionWindowDays.IsNull() {
		*conversionWindowDays = r.Configuration.ConversionWindowDays.ValueInt64()
	} else {
		conversionWindowDays = nil
	}
	accessToken := new(string)
	if !r.Configuration.Credentials.AccessToken.IsUnknown() && !r.Configuration.Credentials.AccessToken.IsNull() {
		*accessToken = r.Configuration.Credentials.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	clientID := r.Configuration.Credentials.ClientID.ValueString()
	clientSecret := r.Configuration.Credentials.ClientSecret.ValueString()
	developerToken := r.Configuration.Credentials.DeveloperToken.ValueString()
	refreshToken := r.Configuration.Credentials.RefreshToken.ValueString()
	credentials := shared.SourceGoogleAdsUpdateGoogleCredentials{
		AccessToken:    accessToken,
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		DeveloperToken: developerToken,
		RefreshToken:   refreshToken,
	}
	var customQueries []shared.SourceGoogleAdsUpdateCustomQueries = nil
	for _, customQueriesItem := range r.Configuration.CustomQueries {
		query := customQueriesItem.Query.ValueString()
		tableName := customQueriesItem.TableName.ValueString()
		customQueries = append(customQueries, shared.SourceGoogleAdsUpdateCustomQueries{
			Query:     query,
			TableName: tableName,
		})
	}
	customerID := r.Configuration.CustomerID.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	loginCustomerID := new(string)
	if !r.Configuration.LoginCustomerID.IsUnknown() && !r.Configuration.LoginCustomerID.IsNull() {
		*loginCustomerID = r.Configuration.LoginCustomerID.ValueString()
	} else {
		loginCustomerID = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceGoogleAdsUpdate{
		ConversionWindowDays: conversionWindowDays,
		Credentials:          credentials,
		CustomQueries:        customQueries,
		CustomerID:           customerID,
		EndDate:              endDate,
		LoginCustomerID:      loginCustomerID,
		StartDate:            startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleAdsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleAdsResourceModel) ToDeleteSDKType() *shared.SourceGoogleAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleAdsResourceModel) RefreshFromGetResponse(resp *shared.SourceGoogleAdsGetResponse) {
	if resp.Configuration.ConversionWindowDays != nil {
		r.Configuration.ConversionWindowDays = types.Int64Value(*resp.Configuration.ConversionWindowDays)
	} else {
		r.Configuration.ConversionWindowDays = types.Int64Null()
	}
	if resp.Configuration.Credentials.AccessToken != nil {
		r.Configuration.Credentials.AccessToken = types.StringValue(*resp.Configuration.Credentials.AccessToken)
	} else {
		r.Configuration.Credentials.AccessToken = types.StringNull()
	}
	r.Configuration.Credentials.ClientID = types.StringValue(resp.Configuration.Credentials.ClientID)
	r.Configuration.Credentials.ClientSecret = types.StringValue(resp.Configuration.Credentials.ClientSecret)
	r.Configuration.Credentials.DeveloperToken = types.StringValue(resp.Configuration.Credentials.DeveloperToken)
	r.Configuration.Credentials.RefreshToken = types.StringValue(resp.Configuration.Credentials.RefreshToken)
	r.Configuration.CustomQueries = nil
	for _, customQueriesItem := range resp.Configuration.CustomQueries {
		var customQueries1 SourceGoogleAdsCustomQueries
		customQueries1.Query = types.StringValue(customQueriesItem.Query)
		customQueries1.TableName = types.StringValue(customQueriesItem.TableName)
		r.Configuration.CustomQueries = append(r.Configuration.CustomQueries, customQueries1)
	}
	r.Configuration.CustomerID = types.StringValue(resp.Configuration.CustomerID)
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(resp.Configuration.EndDate.String())
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	if resp.Configuration.LoginCustomerID != nil {
		r.Configuration.LoginCustomerID = types.StringValue(*resp.Configuration.LoginCustomerID)
	} else {
		r.Configuration.LoginCustomerID = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGoogleAdsResourceModel) RefreshFromCreateResponse(resp *shared.SourceGoogleAdsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
