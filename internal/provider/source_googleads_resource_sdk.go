// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGoogleAdsResourceModel) ToSharedSourceGoogleAdsCreateRequest() *shared.SourceGoogleAdsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var developerToken string
	developerToken = r.Configuration.Credentials.DeveloperToken.ValueString()

	var clientID string
	clientID = r.Configuration.Credentials.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.Credentials.RefreshToken.ValueString()

	accessToken := new(string)
	if !r.Configuration.Credentials.AccessToken.IsUnknown() && !r.Configuration.Credentials.AccessToken.IsNull() {
		*accessToken = r.Configuration.Credentials.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	credentials := shared.GoogleCredentials{
		DeveloperToken: developerToken,
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		RefreshToken:   refreshToken,
		AccessToken:    accessToken,
	}
	customerID := new(string)
	if !r.Configuration.CustomerID.IsUnknown() && !r.Configuration.CustomerID.IsNull() {
		*customerID = r.Configuration.CustomerID.ValueString()
	} else {
		customerID = nil
	}
	var customerStatusFilter []shared.CustomerStatus = []shared.CustomerStatus{}
	for _, customerStatusFilterItem := range r.Configuration.CustomerStatusFilter {
		customerStatusFilter = append(customerStatusFilter, shared.CustomerStatus(customerStatusFilterItem.ValueString()))
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	var customQueriesArray []shared.CustomQueriesArray = []shared.CustomQueriesArray{}
	for _, customQueriesArrayItem := range r.Configuration.CustomQueriesArray {
		var query string
		query = customQueriesArrayItem.Query.ValueString()

		var tableName string
		tableName = customQueriesArrayItem.TableName.ValueString()

		customQueriesArray = append(customQueriesArray, shared.CustomQueriesArray{
			Query:     query,
			TableName: tableName,
		})
	}
	conversionWindowDays := new(int64)
	if !r.Configuration.ConversionWindowDays.IsUnknown() && !r.Configuration.ConversionWindowDays.IsNull() {
		*conversionWindowDays = r.Configuration.ConversionWindowDays.ValueInt64()
	} else {
		conversionWindowDays = nil
	}
	configuration := shared.SourceGoogleAds{
		Credentials:          credentials,
		CustomerID:           customerID,
		CustomerStatusFilter: customerStatusFilter,
		StartDate:            startDate,
		EndDate:              endDate,
		CustomQueriesArray:   customQueriesArray,
		ConversionWindowDays: conversionWindowDays,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceGoogleAdsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceGoogleAdsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceGoogleAdsResourceModel) ToSharedSourceGoogleAdsPutRequest() *shared.SourceGoogleAdsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var developerToken string
	developerToken = r.Configuration.Credentials.DeveloperToken.ValueString()

	var clientID string
	clientID = r.Configuration.Credentials.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.Credentials.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.Credentials.RefreshToken.ValueString()

	accessToken := new(string)
	if !r.Configuration.Credentials.AccessToken.IsUnknown() && !r.Configuration.Credentials.AccessToken.IsNull() {
		*accessToken = r.Configuration.Credentials.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	credentials := shared.SourceGoogleAdsUpdateGoogleCredentials{
		DeveloperToken: developerToken,
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		RefreshToken:   refreshToken,
		AccessToken:    accessToken,
	}
	customerID := new(string)
	if !r.Configuration.CustomerID.IsUnknown() && !r.Configuration.CustomerID.IsNull() {
		*customerID = r.Configuration.CustomerID.ValueString()
	} else {
		customerID = nil
	}
	var customerStatusFilter []shared.SourceGoogleAdsUpdateCustomerStatus = []shared.SourceGoogleAdsUpdateCustomerStatus{}
	for _, customerStatusFilterItem := range r.Configuration.CustomerStatusFilter {
		customerStatusFilter = append(customerStatusFilter, shared.SourceGoogleAdsUpdateCustomerStatus(customerStatusFilterItem.ValueString()))
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	var customQueriesArray []shared.SourceGoogleAdsUpdateCustomQueriesArray = []shared.SourceGoogleAdsUpdateCustomQueriesArray{}
	for _, customQueriesArrayItem := range r.Configuration.CustomQueriesArray {
		var query string
		query = customQueriesArrayItem.Query.ValueString()

		var tableName string
		tableName = customQueriesArrayItem.TableName.ValueString()

		customQueriesArray = append(customQueriesArray, shared.SourceGoogleAdsUpdateCustomQueriesArray{
			Query:     query,
			TableName: tableName,
		})
	}
	conversionWindowDays := new(int64)
	if !r.Configuration.ConversionWindowDays.IsUnknown() && !r.Configuration.ConversionWindowDays.IsNull() {
		*conversionWindowDays = r.Configuration.ConversionWindowDays.ValueInt64()
	} else {
		conversionWindowDays = nil
	}
	configuration := shared.SourceGoogleAdsUpdate{
		Credentials:          credentials,
		CustomerID:           customerID,
		CustomerStatusFilter: customerStatusFilter,
		StartDate:            startDate,
		EndDate:              endDate,
		CustomQueriesArray:   customQueriesArray,
		ConversionWindowDays: conversionWindowDays,
	}
	out := shared.SourceGoogleAdsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
