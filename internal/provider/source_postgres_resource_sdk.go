// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourcePostgresResourceModel) ToSharedSourcePostgresCreateRequest() *shared.SourcePostgresCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.SourcePostgresUpdateMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourcePostgresReadChangesUsingWriteAheadLogCDC *shared.SourcePostgresReadChangesUsingWriteAheadLogCDC
		if r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			heartbeatActionQuery := new(string)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.IsNull() {
				*heartbeatActionQuery = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.ValueString()
			} else {
				heartbeatActionQuery = nil
			}
			initialLoadTimeoutHours := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.IsNull() {
				*initialLoadTimeoutHours = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.ValueInt64()
			} else {
				initialLoadTimeoutHours = nil
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			invalidCdcCursorPositionBehavior := new(shared.SourcePostgresInvalidCDCPositionBehaviorAdvanced)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.IsNull() {
				*invalidCdcCursorPositionBehavior = shared.SourcePostgresInvalidCDCPositionBehaviorAdvanced(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.ValueString())
			} else {
				invalidCdcCursorPositionBehavior = nil
			}
			lsnCommitBehaviour := new(shared.SourcePostgresLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourcePostgresLSNCommitBehaviour(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.SourcePostgresPlugin)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.IsNull() {
				*plugin = shared.SourcePostgresPlugin(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.ReplicationSlot.ValueString()
			sourcePostgresReadChangesUsingWriteAheadLogCDC = &shared.SourcePostgresReadChangesUsingWriteAheadLogCDC{
				AdditionalProperties:             additionalProperties,
				HeartbeatActionQuery:             heartbeatActionQuery,
				InitialLoadTimeoutHours:          initialLoadTimeoutHours,
				InitialWaitingSeconds:            initialWaitingSeconds,
				InvalidCdcCursorPositionBehavior: invalidCdcCursorPositionBehavior,
				LsnCommitBehaviour:               lsnCommitBehaviour,
				Plugin:                           plugin,
				Publication:                      publication,
				QueueSize:                        queueSize,
				ReplicationSlot:                  replicationSlot,
			}
		}
		if sourcePostgresReadChangesUsingWriteAheadLogCDC != nil {
			replicationMethod = &shared.SourcePostgresUpdateMethod{
				SourcePostgresReadChangesUsingWriteAheadLogCDC: sourcePostgresReadChangesUsingWriteAheadLogCDC,
			}
		}
		var sourcePostgresDetectChangesWithXminSystemColumn *shared.SourcePostgresDetectChangesWithXminSystemColumn
		if r.Configuration.ReplicationMethod.DetectChangesWithXminSystemColumn != nil {
			sourcePostgresDetectChangesWithXminSystemColumn = &shared.SourcePostgresDetectChangesWithXminSystemColumn{}
		}
		if sourcePostgresDetectChangesWithXminSystemColumn != nil {
			replicationMethod = &shared.SourcePostgresUpdateMethod{
				SourcePostgresDetectChangesWithXminSystemColumn: sourcePostgresDetectChangesWithXminSystemColumn,
			}
		}
		var sourcePostgresScanChangesWithUserDefinedCursor *shared.SourcePostgresScanChangesWithUserDefinedCursor
		if r.Configuration.ReplicationMethod.ScanChangesWithUserDefinedCursor != nil {
			sourcePostgresScanChangesWithUserDefinedCursor = &shared.SourcePostgresScanChangesWithUserDefinedCursor{}
		}
		if sourcePostgresScanChangesWithUserDefinedCursor != nil {
			replicationMethod = &shared.SourcePostgresUpdateMethod{
				SourcePostgresScanChangesWithUserDefinedCursor: sourcePostgresScanChangesWithUserDefinedCursor,
			}
		}
	}
	var schemas []string = []string{}
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourcePostgresSSLModes
	if r.Configuration.SslMode != nil {
		var sourcePostgresDisable *shared.SourcePostgresDisable
		if r.Configuration.SslMode.Disable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.Disable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Disable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Disable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourcePostgresDisable = &shared.SourcePostgresDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourcePostgresDisable != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresDisable: sourcePostgresDisable,
			}
		}
		var sourcePostgresAllow *shared.SourcePostgresAllow
		if r.Configuration.SslMode.Allow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.Allow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Allow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Allow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourcePostgresAllow = &shared.SourcePostgresAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourcePostgresAllow != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresAllow: sourcePostgresAllow,
			}
		}
		var sourcePostgresPrefer *shared.SourcePostgresPrefer
		if r.Configuration.SslMode.Prefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.Prefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Prefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Prefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourcePostgresPrefer = &shared.SourcePostgresPrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourcePostgresPrefer != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresPrefer: sourcePostgresPrefer,
			}
		}
		var sourcePostgresRequire *shared.SourcePostgresRequire
		if r.Configuration.SslMode.Require != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.Require.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Require.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Require.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourcePostgresRequire = &shared.SourcePostgresRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourcePostgresRequire != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresRequire: sourcePostgresRequire,
			}
		}
		var sourcePostgresVerifyCa *shared.SourcePostgresVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.VerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.VerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourcePostgresVerifyCa = &shared.SourcePostgresVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourcePostgresVerifyCa != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresVerifyCa: sourcePostgresVerifyCa,
			}
		}
		var sourcePostgresVerifyFull *shared.SourcePostgresVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourcePostgresVerifyFull = &shared.SourcePostgresVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourcePostgresVerifyFull != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresVerifyFull: sourcePostgresVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourcePostgresSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourcePostgresNoTunnel *shared.SourcePostgresNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourcePostgresNoTunnel = &shared.SourcePostgresNoTunnel{}
		}
		if sourcePostgresNoTunnel != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresNoTunnel: sourcePostgresNoTunnel,
			}
		}
		var sourcePostgresSSHKeyAuthentication *shared.SourcePostgresSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourcePostgresSSHKeyAuthentication = &shared.SourcePostgresSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourcePostgresSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHKeyAuthentication: sourcePostgresSSHKeyAuthentication,
			}
		}
		var sourcePostgresPasswordAuthentication *shared.SourcePostgresPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourcePostgresPasswordAuthentication = &shared.SourcePostgresPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourcePostgresPasswordAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresPasswordAuthentication: sourcePostgresPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourcePostgres{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePostgresCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePostgresResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourcePostgresResourceModel) ToSharedSourcePostgresPutRequest() *shared.SourcePostgresPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var replicationMethod *shared.SourcePostgresUpdateUpdateMethod
	if r.Configuration.ReplicationMethod != nil {
		var readChangesUsingWriteAheadLogCDC *shared.ReadChangesUsingWriteAheadLogCDC
		if r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC != nil {
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			heartbeatActionQuery := new(string)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.IsNull() {
				*heartbeatActionQuery = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.HeartbeatActionQuery.ValueString()
			} else {
				heartbeatActionQuery = nil
			}
			initialLoadTimeoutHours := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.IsNull() {
				*initialLoadTimeoutHours = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialLoadTimeoutHours.ValueInt64()
			} else {
				initialLoadTimeoutHours = nil
			}
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			invalidCdcCursorPositionBehavior := new(shared.SourcePostgresUpdateInvalidCDCPositionBehaviorAdvanced)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.IsNull() {
				*invalidCdcCursorPositionBehavior = shared.SourcePostgresUpdateInvalidCDCPositionBehaviorAdvanced(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.InvalidCdcCursorPositionBehavior.ValueString())
			} else {
				invalidCdcCursorPositionBehavior = nil
			}
			lsnCommitBehaviour := new(shared.LSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.LSNCommitBehaviour(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			plugin := new(shared.Plugin)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.IsNull() {
				*plugin = shared.Plugin(r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.ReadChangesUsingWriteAheadLogCDC.ReplicationSlot.ValueString()
			readChangesUsingWriteAheadLogCDC = &shared.ReadChangesUsingWriteAheadLogCDC{
				AdditionalProperties:             additionalProperties,
				HeartbeatActionQuery:             heartbeatActionQuery,
				InitialLoadTimeoutHours:          initialLoadTimeoutHours,
				InitialWaitingSeconds:            initialWaitingSeconds,
				InvalidCdcCursorPositionBehavior: invalidCdcCursorPositionBehavior,
				LsnCommitBehaviour:               lsnCommitBehaviour,
				Plugin:                           plugin,
				Publication:                      publication,
				QueueSize:                        queueSize,
				ReplicationSlot:                  replicationSlot,
			}
		}
		if readChangesUsingWriteAheadLogCDC != nil {
			replicationMethod = &shared.SourcePostgresUpdateUpdateMethod{
				ReadChangesUsingWriteAheadLogCDC: readChangesUsingWriteAheadLogCDC,
			}
		}
		var detectChangesWithXminSystemColumn *shared.DetectChangesWithXminSystemColumn
		if r.Configuration.ReplicationMethod.DetectChangesWithXminSystemColumn != nil {
			detectChangesWithXminSystemColumn = &shared.DetectChangesWithXminSystemColumn{}
		}
		if detectChangesWithXminSystemColumn != nil {
			replicationMethod = &shared.SourcePostgresUpdateUpdateMethod{
				DetectChangesWithXminSystemColumn: detectChangesWithXminSystemColumn,
			}
		}
		var sourcePostgresUpdateScanChangesWithUserDefinedCursor *shared.SourcePostgresUpdateScanChangesWithUserDefinedCursor
		if r.Configuration.ReplicationMethod.ScanChangesWithUserDefinedCursor != nil {
			sourcePostgresUpdateScanChangesWithUserDefinedCursor = &shared.SourcePostgresUpdateScanChangesWithUserDefinedCursor{}
		}
		if sourcePostgresUpdateScanChangesWithUserDefinedCursor != nil {
			replicationMethod = &shared.SourcePostgresUpdateUpdateMethod{
				SourcePostgresUpdateScanChangesWithUserDefinedCursor: sourcePostgresUpdateScanChangesWithUserDefinedCursor,
			}
		}
	}
	var schemas []string = []string{}
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourcePostgresUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourcePostgresUpdateDisable *shared.SourcePostgresUpdateDisable
		if r.Configuration.SslMode.Disable != nil {
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.Disable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Disable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Disable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourcePostgresUpdateDisable = &shared.SourcePostgresUpdateDisable{
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourcePostgresUpdateDisable != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateDisable: sourcePostgresUpdateDisable,
			}
		}
		var sourcePostgresUpdateAllow *shared.SourcePostgresUpdateAllow
		if r.Configuration.SslMode.Allow != nil {
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.Allow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Allow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Allow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourcePostgresUpdateAllow = &shared.SourcePostgresUpdateAllow{
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourcePostgresUpdateAllow != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateAllow: sourcePostgresUpdateAllow,
			}
		}
		var sourcePostgresUpdatePrefer *shared.SourcePostgresUpdatePrefer
		if r.Configuration.SslMode.Prefer != nil {
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.Prefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Prefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Prefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourcePostgresUpdatePrefer = &shared.SourcePostgresUpdatePrefer{
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourcePostgresUpdatePrefer != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdatePrefer: sourcePostgresUpdatePrefer,
			}
		}
		var sourcePostgresUpdateRequire *shared.SourcePostgresUpdateRequire
		if r.Configuration.SslMode.Require != nil {
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.Require.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.Require.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.Require.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourcePostgresUpdateRequire = &shared.SourcePostgresUpdateRequire{
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourcePostgresUpdateRequire != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateRequire: sourcePostgresUpdateRequire,
			}
		}
		var sourcePostgresUpdateVerifyCa *shared.SourcePostgresUpdateVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			caCertificate := r.Configuration.SslMode.VerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.VerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.VerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.VerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			sourcePostgresUpdateVerifyCa = &shared.SourcePostgresUpdateVerifyCa{
				AdditionalProperties: additionalProperties5,
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
			}
		}
		if sourcePostgresUpdateVerifyCa != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateVerifyCa: sourcePostgresUpdateVerifyCa,
			}
		}
		var sourcePostgresUpdateVerifyFull *shared.SourcePostgresUpdateVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.VerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.VerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			caCertificate1 := r.Configuration.SslMode.VerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.VerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.VerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.VerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.VerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			sourcePostgresUpdateVerifyFull = &shared.SourcePostgresUpdateVerifyFull{
				AdditionalProperties: additionalProperties6,
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
			}
		}
		if sourcePostgresUpdateVerifyFull != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateVerifyFull: sourcePostgresUpdateVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourcePostgresUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourcePostgresUpdateNoTunnel *shared.SourcePostgresUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourcePostgresUpdateNoTunnel = &shared.SourcePostgresUpdateNoTunnel{}
		}
		if sourcePostgresUpdateNoTunnel != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdateNoTunnel: sourcePostgresUpdateNoTunnel,
			}
		}
		var sourcePostgresUpdateSSHKeyAuthentication *shared.SourcePostgresUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourcePostgresUpdateSSHKeyAuthentication = &shared.SourcePostgresUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourcePostgresUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdateSSHKeyAuthentication: sourcePostgresUpdateSSHKeyAuthentication,
			}
		}
		var sourcePostgresUpdatePasswordAuthentication *shared.SourcePostgresUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourcePostgresUpdatePasswordAuthentication = &shared.SourcePostgresUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourcePostgresUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdatePasswordAuthentication: sourcePostgresUpdatePasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourcePostgresUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePostgresPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
