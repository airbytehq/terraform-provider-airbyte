// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourcePostgresResourceModel) ToCreateSDKType() *shared.SourcePostgresCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourcePostgresReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourcePostgresReplicationMethodStandardXmin *shared.SourcePostgresReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandardXmin != nil {
			method := shared.SourcePostgresReplicationMethodStandardXminMethod(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandardXmin.Method.ValueString())
			sourcePostgresReplicationMethodStandardXmin = &shared.SourcePostgresReplicationMethodStandardXmin{
				Method: method,
			}
		}
		if sourcePostgresReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourcePostgresReplicationMethod{
				SourcePostgresReplicationMethodStandardXmin: sourcePostgresReplicationMethodStandardXmin,
			}
		}
		var sourcePostgresReplicationMethodLogicalReplicationCDC *shared.SourcePostgresReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			method1 := shared.SourcePostgresReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourcePostgresReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourcePostgresReplicationMethodLogicalReplicationCDC = &shared.SourcePostgresReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Method:                method1,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
				AdditionalProperties:  additionalProperties,
			}
		}
		if sourcePostgresReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourcePostgresReplicationMethod{
				SourcePostgresReplicationMethodLogicalReplicationCDC: sourcePostgresReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourcePostgresReplicationMethodStandard *shared.SourcePostgresReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandard != nil {
			method2 := shared.SourcePostgresReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandard.Method.ValueString())
			sourcePostgresReplicationMethodStandard = &shared.SourcePostgresReplicationMethodStandard{
				Method: method2,
			}
		}
		if sourcePostgresReplicationMethodStandard != nil {
			replicationMethod = &shared.SourcePostgresReplicationMethod{
				SourcePostgresReplicationMethodStandard: sourcePostgresReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	sourceType := shared.SourcePostgresPostgres(r.Configuration.SourceType.ValueString())
	var sslMode *shared.SourcePostgresSSLModes
	if r.Configuration.SslMode != nil {
		var sourcePostgresSSLModesDisable *shared.SourcePostgresSSLModesDisable
		if r.Configuration.SslMode.SourcePostgresSSLModesDisable != nil {
			mode := shared.SourcePostgresSSLModesDisableMode(r.Configuration.SslMode.SourcePostgresSSLModesDisable.Mode.ValueString())
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourcePostgresSSLModesDisable = &shared.SourcePostgresSSLModesDisable{
				Mode:                 mode,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourcePostgresSSLModesDisable != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesDisable: sourcePostgresSSLModesDisable,
			}
		}
		var sourcePostgresSSLModesAllow *shared.SourcePostgresSSLModesAllow
		if r.Configuration.SslMode.SourcePostgresSSLModesAllow != nil {
			mode1 := shared.SourcePostgresSSLModesAllowMode(r.Configuration.SslMode.SourcePostgresSSLModesAllow.Mode.ValueString())
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourcePostgresSSLModesAllow = &shared.SourcePostgresSSLModesAllow{
				Mode:                 mode1,
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourcePostgresSSLModesAllow != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesAllow: sourcePostgresSSLModesAllow,
			}
		}
		var sourcePostgresSSLModesPrefer *shared.SourcePostgresSSLModesPrefer
		if r.Configuration.SslMode.SourcePostgresSSLModesPrefer != nil {
			mode2 := shared.SourcePostgresSSLModesPreferMode(r.Configuration.SslMode.SourcePostgresSSLModesPrefer.Mode.ValueString())
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourcePostgresSSLModesPrefer = &shared.SourcePostgresSSLModesPrefer{
				Mode:                 mode2,
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourcePostgresSSLModesPrefer != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesPrefer: sourcePostgresSSLModesPrefer,
			}
		}
		var sourcePostgresSSLModesRequire *shared.SourcePostgresSSLModesRequire
		if r.Configuration.SslMode.SourcePostgresSSLModesRequire != nil {
			mode3 := shared.SourcePostgresSSLModesRequireMode(r.Configuration.SslMode.SourcePostgresSSLModesRequire.Mode.ValueString())
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourcePostgresSSLModesRequire = &shared.SourcePostgresSSLModesRequire{
				Mode:                 mode3,
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourcePostgresSSLModesRequire != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesRequire: sourcePostgresSSLModesRequire,
			}
		}
		var sourcePostgresSSLModesVerifyCa *shared.SourcePostgresSSLModesVerifyCa
		if r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.SourcePostgresSSLModesVerifyCaMode(r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.Mode.ValueString())
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			sourcePostgresSSLModesVerifyCa = &shared.SourcePostgresSSLModesVerifyCa{
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
				Mode:                 mode4,
				AdditionalProperties: additionalProperties5,
			}
		}
		if sourcePostgresSSLModesVerifyCa != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesVerifyCa: sourcePostgresSSLModesVerifyCa,
			}
		}
		var sourcePostgresSSLModesVerifyFull *shared.SourcePostgresSSLModesVerifyFull
		if r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.SourcePostgresSSLModesVerifyFullMode(r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.Mode.ValueString())
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			sourcePostgresSSLModesVerifyFull = &shared.SourcePostgresSSLModesVerifyFull{
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
				Mode:                 mode5,
				AdditionalProperties: additionalProperties6,
			}
		}
		if sourcePostgresSSLModesVerifyFull != nil {
			sslMode = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesVerifyFull: sourcePostgresSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourcePostgresSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourcePostgresSSHTunnelMethodNoTunnel *shared.SourcePostgresSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourcePostgresSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourcePostgresSSHTunnelMethodNoTunnel = &shared.SourcePostgresSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourcePostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodNoTunnel: sourcePostgresSSHTunnelMethodNoTunnel,
			}
		}
		var sourcePostgresSSHTunnelMethodSSHKeyAuthentication *shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourcePostgresSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourcePostgresSSHTunnelMethodSSHKeyAuthentication = &shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodSSHKeyAuthentication: sourcePostgresSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourcePostgresSSHTunnelMethodPasswordAuthentication *shared.SourcePostgresSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourcePostgresSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourcePostgresSSHTunnelMethodPasswordAuthentication = &shared.SourcePostgresSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodPasswordAuthentication: sourcePostgresSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourcePostgres{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SourceType:        sourceType,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePostgresCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePostgresResourceModel) ToGetSDKType() *shared.SourcePostgresCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePostgresResourceModel) ToUpdateSDKType() *shared.SourcePostgresPutRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourcePostgresUpdateReplicationMethod
	if r.Configuration.ReplicationMethod != nil {
		var sourcePostgresUpdateReplicationMethodStandardXmin *shared.SourcePostgresUpdateReplicationMethodStandardXmin
		if r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodStandardXmin != nil {
			method := shared.SourcePostgresUpdateReplicationMethodStandardXminMethod(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodStandardXmin.Method.ValueString())
			sourcePostgresUpdateReplicationMethodStandardXmin = &shared.SourcePostgresUpdateReplicationMethodStandardXmin{
				Method: method,
			}
		}
		if sourcePostgresUpdateReplicationMethodStandardXmin != nil {
			replicationMethod = &shared.SourcePostgresUpdateReplicationMethod{
				SourcePostgresUpdateReplicationMethodStandardXmin: sourcePostgresUpdateReplicationMethodStandardXmin,
			}
		}
		var sourcePostgresUpdateReplicationMethodLogicalReplicationCDC *shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC
		if r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds := new(int64)
			if !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour)
			if !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			method1 := shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDCMethod(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin := new(shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDCPlugin)
			if !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDCPlugin(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			queueSize := new(int64)
			if !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.QueueSize.IsNull() {
				*queueSize = r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.QueueSize.ValueInt64()
			} else {
				queueSize = nil
			}
			replicationSlot := r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			var additionalProperties interface{}
			if !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC.AdditionalProperties.ValueString()), &additionalProperties)
			}
			sourcePostgresUpdateReplicationMethodLogicalReplicationCDC = &shared.SourcePostgresUpdateReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Method:                method1,
				Plugin:                plugin,
				Publication:           publication,
				QueueSize:             queueSize,
				ReplicationSlot:       replicationSlot,
				AdditionalProperties:  additionalProperties,
			}
		}
		if sourcePostgresUpdateReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourcePostgresUpdateReplicationMethod{
				SourcePostgresUpdateReplicationMethodLogicalReplicationCDC: sourcePostgresUpdateReplicationMethodLogicalReplicationCDC,
			}
		}
		var sourcePostgresUpdateReplicationMethodStandard *shared.SourcePostgresUpdateReplicationMethodStandard
		if r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodStandard != nil {
			method2 := shared.SourcePostgresUpdateReplicationMethodStandardMethod(r.Configuration.ReplicationMethod.SourcePostgresUpdateReplicationMethodStandard.Method.ValueString())
			sourcePostgresUpdateReplicationMethodStandard = &shared.SourcePostgresUpdateReplicationMethodStandard{
				Method: method2,
			}
		}
		if sourcePostgresUpdateReplicationMethodStandard != nil {
			replicationMethod = &shared.SourcePostgresUpdateReplicationMethod{
				SourcePostgresUpdateReplicationMethodStandard: sourcePostgresUpdateReplicationMethodStandard,
			}
		}
	}
	var schemas []string = nil
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var sslMode *shared.SourcePostgresUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var sourcePostgresUpdateSSLModesDisable *shared.SourcePostgresUpdateSSLModesDisable
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesDisable != nil {
			mode := shared.SourcePostgresUpdateSSLModesDisableMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesDisable.Mode.ValueString())
			var additionalProperties1 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesDisable.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesDisable.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesDisable.AdditionalProperties.ValueString()), &additionalProperties1)
			}
			sourcePostgresUpdateSSLModesDisable = &shared.SourcePostgresUpdateSSLModesDisable{
				Mode:                 mode,
				AdditionalProperties: additionalProperties1,
			}
		}
		if sourcePostgresUpdateSSLModesDisable != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesDisable: sourcePostgresUpdateSSLModesDisable,
			}
		}
		var sourcePostgresUpdateSSLModesAllow *shared.SourcePostgresUpdateSSLModesAllow
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesAllow != nil {
			mode1 := shared.SourcePostgresUpdateSSLModesAllowMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesAllow.Mode.ValueString())
			var additionalProperties2 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesAllow.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesAllow.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesAllow.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			sourcePostgresUpdateSSLModesAllow = &shared.SourcePostgresUpdateSSLModesAllow{
				Mode:                 mode1,
				AdditionalProperties: additionalProperties2,
			}
		}
		if sourcePostgresUpdateSSLModesAllow != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesAllow: sourcePostgresUpdateSSLModesAllow,
			}
		}
		var sourcePostgresUpdateSSLModesPrefer *shared.SourcePostgresUpdateSSLModesPrefer
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesPrefer != nil {
			mode2 := shared.SourcePostgresUpdateSSLModesPreferMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesPrefer.Mode.ValueString())
			var additionalProperties3 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesPrefer.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesPrefer.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesPrefer.AdditionalProperties.ValueString()), &additionalProperties3)
			}
			sourcePostgresUpdateSSLModesPrefer = &shared.SourcePostgresUpdateSSLModesPrefer{
				Mode:                 mode2,
				AdditionalProperties: additionalProperties3,
			}
		}
		if sourcePostgresUpdateSSLModesPrefer != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesPrefer: sourcePostgresUpdateSSLModesPrefer,
			}
		}
		var sourcePostgresUpdateSSLModesRequire *shared.SourcePostgresUpdateSSLModesRequire
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesRequire != nil {
			mode3 := shared.SourcePostgresUpdateSSLModesRequireMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesRequire.Mode.ValueString())
			var additionalProperties4 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesRequire.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesRequire.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesRequire.AdditionalProperties.ValueString()), &additionalProperties4)
			}
			sourcePostgresUpdateSSLModesRequire = &shared.SourcePostgresUpdateSSLModesRequire{
				Mode:                 mode3,
				AdditionalProperties: additionalProperties4,
			}
		}
		if sourcePostgresUpdateSSLModesRequire != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesRequire: sourcePostgresUpdateSSLModesRequire,
			}
		}
		var sourcePostgresUpdateSSLModesVerifyCa *shared.SourcePostgresUpdateSSLModesVerifyCa
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.SourcePostgresUpdateSSLModesVerifyCaMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.Mode.ValueString())
			var additionalProperties5 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyCa.AdditionalProperties.ValueString()), &additionalProperties5)
			}
			sourcePostgresUpdateSSLModesVerifyCa = &shared.SourcePostgresUpdateSSLModesVerifyCa{
				CaCertificate:        caCertificate,
				ClientCertificate:    clientCertificate,
				ClientKey:            clientKey,
				ClientKeyPassword:    clientKeyPassword,
				Mode:                 mode4,
				AdditionalProperties: additionalProperties5,
			}
		}
		if sourcePostgresUpdateSSLModesVerifyCa != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesVerifyCa: sourcePostgresUpdateSSLModesVerifyCa,
			}
		}
		var sourcePostgresUpdateSSLModesVerifyFull *shared.SourcePostgresUpdateSSLModesVerifyFull
		if r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.SourcePostgresUpdateSSLModesVerifyFullMode(r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.Mode.ValueString())
			var additionalProperties6 interface{}
			if !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.AdditionalProperties.IsUnknown() && !r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(r.Configuration.SslMode.SourcePostgresUpdateSSLModesVerifyFull.AdditionalProperties.ValueString()), &additionalProperties6)
			}
			sourcePostgresUpdateSSLModesVerifyFull = &shared.SourcePostgresUpdateSSLModesVerifyFull{
				CaCertificate:        caCertificate1,
				ClientCertificate:    clientCertificate1,
				ClientKey:            clientKey1,
				ClientKeyPassword:    clientKeyPassword1,
				Mode:                 mode5,
				AdditionalProperties: additionalProperties6,
			}
		}
		if sourcePostgresUpdateSSLModesVerifyFull != nil {
			sslMode = &shared.SourcePostgresUpdateSSLModes{
				SourcePostgresUpdateSSLModesVerifyFull: sourcePostgresUpdateSSLModesVerifyFull,
			}
		}
	}
	var tunnelMethod *shared.SourcePostgresUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourcePostgresUpdateSSHTunnelMethodNoTunnel *shared.SourcePostgresUpdateSSHTunnelMethodNoTunnel
		if r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourcePostgresUpdateSSHTunnelMethodNoTunnel = &shared.SourcePostgresUpdateSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourcePostgresUpdateSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdateSSHTunnelMethodNoTunnel: sourcePostgresUpdateSSHTunnelMethodNoTunnel,
			}
		}
		var sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication: sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication *shared.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication
		if r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourcePostgresUpdateSSHTunnelMethod{
				SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication: sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourcePostgresUpdate{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePostgresPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePostgresResourceModel) ToDeleteSDKType() *shared.SourcePostgresCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourcePostgresResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourcePostgresResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
