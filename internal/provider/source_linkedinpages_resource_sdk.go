// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceLinkedinPagesResourceModel) ToCreateSDKType() *shared.SourceLinkedinPagesCreateRequest {
	var credentials *shared.SourceLinkedinPagesAuthentication
	if r.Configuration.Credentials != nil {
		var sourceLinkedinPagesAuthenticationOAuth20 *shared.SourceLinkedinPagesAuthenticationOAuth20
		if r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20 != nil {
			authMethod := new(shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethod)
			if !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsNull() {
				*authMethod = shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethod(r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.ValueString())
			} else {
				authMethod = nil
			}
			clientID := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken.ValueString()
			sourceLinkedinPagesAuthenticationOAuth20 = &shared.SourceLinkedinPagesAuthenticationOAuth20{
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceLinkedinPagesAuthenticationOAuth20 != nil {
			credentials = &shared.SourceLinkedinPagesAuthentication{
				SourceLinkedinPagesAuthenticationOAuth20: sourceLinkedinPagesAuthenticationOAuth20,
			}
		}
		var sourceLinkedinPagesAuthenticationAccessToken *shared.SourceLinkedinPagesAuthenticationAccessToken
		if r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken != nil {
			accessToken := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken.ValueString()
			authMethod1 := new(shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethod)
			if !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsNull() {
				*authMethod1 = shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethod(r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.ValueString())
			} else {
				authMethod1 = nil
			}
			sourceLinkedinPagesAuthenticationAccessToken = &shared.SourceLinkedinPagesAuthenticationAccessToken{
				AccessToken: accessToken,
				AuthMethod:  authMethod1,
			}
		}
		if sourceLinkedinPagesAuthenticationAccessToken != nil {
			credentials = &shared.SourceLinkedinPagesAuthentication{
				SourceLinkedinPagesAuthenticationAccessToken: sourceLinkedinPagesAuthenticationAccessToken,
			}
		}
	}
	orgID := r.Configuration.OrgID.ValueString()
	sourceType := shared.SourceLinkedinPagesLinkedinPages(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceLinkedinPages{
		Credentials: credentials,
		OrgID:       orgID,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceLinkedinPagesCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceLinkedinPagesResourceModel) ToGetSDKType() *shared.SourceLinkedinPagesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceLinkedinPagesResourceModel) ToUpdateSDKType() *shared.SourceLinkedinPagesPutRequest {
	var credentials *shared.SourceLinkedinPagesUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceLinkedinPagesUpdateAuthenticationOAuth20 *shared.SourceLinkedinPagesUpdateAuthenticationOAuth20
		if r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20 != nil {
			authMethod := new(shared.SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod)
			if !r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.AuthMethod.IsNull() {
				*authMethod = shared.SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod(r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.AuthMethod.ValueString())
			} else {
				authMethod = nil
			}
			clientID := r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20.RefreshToken.ValueString()
			sourceLinkedinPagesUpdateAuthenticationOAuth20 = &shared.SourceLinkedinPagesUpdateAuthenticationOAuth20{
				AuthMethod:   authMethod,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceLinkedinPagesUpdateAuthenticationOAuth20 != nil {
			credentials = &shared.SourceLinkedinPagesUpdateAuthentication{
				SourceLinkedinPagesUpdateAuthenticationOAuth20: sourceLinkedinPagesUpdateAuthenticationOAuth20,
			}
		}
		var sourceLinkedinPagesUpdateAuthenticationAccessToken *shared.SourceLinkedinPagesUpdateAuthenticationAccessToken
		if r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken != nil {
			accessToken := r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken.AccessToken.ValueString()
			authMethod1 := new(shared.SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod)
			if !r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken.AuthMethod.IsNull() {
				*authMethod1 = shared.SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod(r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken.AuthMethod.ValueString())
			} else {
				authMethod1 = nil
			}
			sourceLinkedinPagesUpdateAuthenticationAccessToken = &shared.SourceLinkedinPagesUpdateAuthenticationAccessToken{
				AccessToken: accessToken,
				AuthMethod:  authMethod1,
			}
		}
		if sourceLinkedinPagesUpdateAuthenticationAccessToken != nil {
			credentials = &shared.SourceLinkedinPagesUpdateAuthentication{
				SourceLinkedinPagesUpdateAuthenticationAccessToken: sourceLinkedinPagesUpdateAuthenticationAccessToken,
			}
		}
	}
	orgID := r.Configuration.OrgID.ValueString()
	configuration := shared.SourceLinkedinPagesUpdate{
		Credentials: credentials,
		OrgID:       orgID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceLinkedinPagesPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceLinkedinPagesResourceModel) ToDeleteSDKType() *shared.SourceLinkedinPagesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceLinkedinPagesResourceModel) RefreshFromGetResponse(resp *shared.SourceLinkedinPagesGetResponse) {
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceLinkedinPagesAuthentication{}
		if resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken != nil {
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken = &SourceLinkedinAdsAuthenticationAccessToken{}
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken)
			if resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod != nil {
				r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod = types.StringValue(string(*resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod))
			} else {
				r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20 != nil {
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20 = &SourceLinkedinAdsAuthenticationOAuth20{}
			if resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod != nil {
				r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod = types.StringValue(string(*resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod))
			} else {
				r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod = types.StringNull()
			}
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID = types.StringValue(resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID)
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret = types.StringValue(resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret)
			r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken = types.StringValue(resp.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken)
		}
		if resp.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken != nil {
			r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationAccessToken = &SourceLinkedinAdsAuthenticationAccessToken{}
		}
		if resp.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20 != nil {
			r.Configuration.Credentials.SourceLinkedinPagesUpdateAuthenticationOAuth20 = &SourceLinkedinAdsAuthenticationOAuth20{}
		}
	}
	r.Configuration.OrgID = types.StringValue(resp.Configuration.OrgID)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceLinkedinPagesResourceModel) RefreshFromCreateResponse(resp *shared.SourceLinkedinPagesGetResponse) {
	r.RefreshFromGetResponse(resp)
}
