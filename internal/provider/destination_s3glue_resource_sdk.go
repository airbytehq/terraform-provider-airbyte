// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationS3GlueResourceModel) ToSharedDestinationS3GlueCreateRequest() *shared.DestinationS3GlueCreateRequest {
	accessKeyID := new(string)
	if !r.Configuration.AccessKeyID.IsUnknown() && !r.Configuration.AccessKeyID.IsNull() {
		*accessKeyID = r.Configuration.AccessKeyID.ValueString()
	} else {
		accessKeyID = nil
	}
	fileNamePattern := new(string)
	if !r.Configuration.FileNamePattern.IsUnknown() && !r.Configuration.FileNamePattern.IsNull() {
		*fileNamePattern = r.Configuration.FileNamePattern.ValueString()
	} else {
		fileNamePattern = nil
	}
	var format shared.DestinationS3GlueOutputFormat
	var destinationS3GlueJSONLinesNewlineDelimitedJSON *shared.DestinationS3GlueJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		var compression *shared.DestinationS3GlueCompression
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression != nil {
			var destinationS3GlueNoCompression *shared.DestinationS3GlueNoCompression
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression != nil {
				compressionType := new(shared.DestinationS3GlueCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType = shared.DestinationS3GlueCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType = nil
				}
				destinationS3GlueNoCompression = &shared.DestinationS3GlueNoCompression{
					CompressionType: compressionType,
				}
			}
			if destinationS3GlueNoCompression != nil {
				compression = &shared.DestinationS3GlueCompression{
					DestinationS3GlueNoCompression: destinationS3GlueNoCompression,
				}
			}
			var destinationS3GlueGZIP *shared.DestinationS3GlueGZIP
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip != nil {
				compressionType1 := new(shared.DestinationS3GlueSchemasCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsNull() {
					*compressionType1 = shared.DestinationS3GlueSchemasCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType1 = nil
				}
				destinationS3GlueGZIP = &shared.DestinationS3GlueGZIP{
					CompressionType: compressionType1,
				}
			}
			if destinationS3GlueGZIP != nil {
				compression = &shared.DestinationS3GlueCompression{
					DestinationS3GlueGZIP: destinationS3GlueGZIP,
				}
			}
		}
		flattening := new(shared.DestinationS3GlueFlattening)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.IsNull() {
			*flattening = shared.DestinationS3GlueFlattening(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.ValueString())
		} else {
			flattening = nil
		}
		formatType := new(shared.DestinationS3GlueFormatType)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
			*formatType = shared.DestinationS3GlueFormatType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		} else {
			formatType = nil
		}
		destinationS3GlueJSONLinesNewlineDelimitedJSON = &shared.DestinationS3GlueJSONLinesNewlineDelimitedJSON{
			Compression: compression,
			Flattening:  flattening,
			FormatType:  formatType,
		}
	}
	if destinationS3GlueJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationS3GlueOutputFormat{
			DestinationS3GlueJSONLinesNewlineDelimitedJSON: destinationS3GlueJSONLinesNewlineDelimitedJSON,
		}
	}
	glueDatabase := r.Configuration.GlueDatabase.ValueString()
	glueSerializationLibrary := new(shared.DestinationS3GlueSerializationLibrary)
	if !r.Configuration.GlueSerializationLibrary.IsUnknown() && !r.Configuration.GlueSerializationLibrary.IsNull() {
		*glueSerializationLibrary = shared.DestinationS3GlueSerializationLibrary(r.Configuration.GlueSerializationLibrary.ValueString())
	} else {
		glueSerializationLibrary = nil
	}
	s3BucketName := r.Configuration.S3BucketName.ValueString()
	s3BucketPath := r.Configuration.S3BucketPath.ValueString()
	s3BucketRegion := new(shared.DestinationS3GlueS3BucketRegion)
	if !r.Configuration.S3BucketRegion.IsUnknown() && !r.Configuration.S3BucketRegion.IsNull() {
		*s3BucketRegion = shared.DestinationS3GlueS3BucketRegion(r.Configuration.S3BucketRegion.ValueString())
	} else {
		s3BucketRegion = nil
	}
	s3Endpoint := new(string)
	if !r.Configuration.S3Endpoint.IsUnknown() && !r.Configuration.S3Endpoint.IsNull() {
		*s3Endpoint = r.Configuration.S3Endpoint.ValueString()
	} else {
		s3Endpoint = nil
	}
	s3PathFormat := new(string)
	if !r.Configuration.S3PathFormat.IsUnknown() && !r.Configuration.S3PathFormat.IsNull() {
		*s3PathFormat = r.Configuration.S3PathFormat.ValueString()
	} else {
		s3PathFormat = nil
	}
	secretAccessKey := new(string)
	if !r.Configuration.SecretAccessKey.IsUnknown() && !r.Configuration.SecretAccessKey.IsNull() {
		*secretAccessKey = r.Configuration.SecretAccessKey.ValueString()
	} else {
		secretAccessKey = nil
	}
	configuration := shared.DestinationS3Glue{
		AccessKeyID:              accessKeyID,
		FileNamePattern:          fileNamePattern,
		Format:                   format,
		GlueDatabase:             glueDatabase,
		GlueSerializationLibrary: glueSerializationLibrary,
		S3BucketName:             s3BucketName,
		S3BucketPath:             s3BucketPath,
		S3BucketRegion:           s3BucketRegion,
		S3Endpoint:               s3Endpoint,
		S3PathFormat:             s3PathFormat,
		SecretAccessKey:          secretAccessKey,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationS3GlueCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationS3GlueResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationS3GlueResourceModel) ToSharedDestinationS3GluePutRequest() *shared.DestinationS3GluePutRequest {
	accessKeyID := new(string)
	if !r.Configuration.AccessKeyID.IsUnknown() && !r.Configuration.AccessKeyID.IsNull() {
		*accessKeyID = r.Configuration.AccessKeyID.ValueString()
	} else {
		accessKeyID = nil
	}
	fileNamePattern := new(string)
	if !r.Configuration.FileNamePattern.IsUnknown() && !r.Configuration.FileNamePattern.IsNull() {
		*fileNamePattern = r.Configuration.FileNamePattern.ValueString()
	} else {
		fileNamePattern = nil
	}
	var format shared.DestinationS3GlueUpdateOutputFormat
	var destinationS3GlueUpdateJSONLinesNewlineDelimitedJSON *shared.DestinationS3GlueUpdateJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		var compression *shared.DestinationS3GlueUpdateCompression
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression != nil {
			var destinationS3GlueUpdateNoCompression *shared.DestinationS3GlueUpdateNoCompression
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression != nil {
				compressionType := new(shared.DestinationS3GlueUpdateCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType = shared.DestinationS3GlueUpdateCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType = nil
				}
				destinationS3GlueUpdateNoCompression = &shared.DestinationS3GlueUpdateNoCompression{
					CompressionType: compressionType,
				}
			}
			if destinationS3GlueUpdateNoCompression != nil {
				compression = &shared.DestinationS3GlueUpdateCompression{
					DestinationS3GlueUpdateNoCompression: destinationS3GlueUpdateNoCompression,
				}
			}
			var destinationS3GlueUpdateGZIP *shared.DestinationS3GlueUpdateGZIP
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip != nil {
				compressionType1 := new(shared.DestinationS3GlueUpdateSchemasCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsNull() {
					*compressionType1 = shared.DestinationS3GlueUpdateSchemasCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType1 = nil
				}
				destinationS3GlueUpdateGZIP = &shared.DestinationS3GlueUpdateGZIP{
					CompressionType: compressionType1,
				}
			}
			if destinationS3GlueUpdateGZIP != nil {
				compression = &shared.DestinationS3GlueUpdateCompression{
					DestinationS3GlueUpdateGZIP: destinationS3GlueUpdateGZIP,
				}
			}
		}
		flattening := new(shared.Flattening)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.IsNull() {
			*flattening = shared.Flattening(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Flattening.ValueString())
		} else {
			flattening = nil
		}
		formatType := new(shared.DestinationS3GlueUpdateFormatType)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
			*formatType = shared.DestinationS3GlueUpdateFormatType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		} else {
			formatType = nil
		}
		destinationS3GlueUpdateJSONLinesNewlineDelimitedJSON = &shared.DestinationS3GlueUpdateJSONLinesNewlineDelimitedJSON{
			Compression: compression,
			Flattening:  flattening,
			FormatType:  formatType,
		}
	}
	if destinationS3GlueUpdateJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationS3GlueUpdateOutputFormat{
			DestinationS3GlueUpdateJSONLinesNewlineDelimitedJSON: destinationS3GlueUpdateJSONLinesNewlineDelimitedJSON,
		}
	}
	glueDatabase := r.Configuration.GlueDatabase.ValueString()
	glueSerializationLibrary := new(shared.SerializationLibrary)
	if !r.Configuration.GlueSerializationLibrary.IsUnknown() && !r.Configuration.GlueSerializationLibrary.IsNull() {
		*glueSerializationLibrary = shared.SerializationLibrary(r.Configuration.GlueSerializationLibrary.ValueString())
	} else {
		glueSerializationLibrary = nil
	}
	s3BucketName := r.Configuration.S3BucketName.ValueString()
	s3BucketPath := r.Configuration.S3BucketPath.ValueString()
	s3BucketRegion := new(shared.DestinationS3GlueUpdateS3BucketRegion)
	if !r.Configuration.S3BucketRegion.IsUnknown() && !r.Configuration.S3BucketRegion.IsNull() {
		*s3BucketRegion = shared.DestinationS3GlueUpdateS3BucketRegion(r.Configuration.S3BucketRegion.ValueString())
	} else {
		s3BucketRegion = nil
	}
	s3Endpoint := new(string)
	if !r.Configuration.S3Endpoint.IsUnknown() && !r.Configuration.S3Endpoint.IsNull() {
		*s3Endpoint = r.Configuration.S3Endpoint.ValueString()
	} else {
		s3Endpoint = nil
	}
	s3PathFormat := new(string)
	if !r.Configuration.S3PathFormat.IsUnknown() && !r.Configuration.S3PathFormat.IsNull() {
		*s3PathFormat = r.Configuration.S3PathFormat.ValueString()
	} else {
		s3PathFormat = nil
	}
	secretAccessKey := new(string)
	if !r.Configuration.SecretAccessKey.IsUnknown() && !r.Configuration.SecretAccessKey.IsNull() {
		*secretAccessKey = r.Configuration.SecretAccessKey.ValueString()
	} else {
		secretAccessKey = nil
	}
	configuration := shared.DestinationS3GlueUpdate{
		AccessKeyID:              accessKeyID,
		FileNamePattern:          fileNamePattern,
		Format:                   format,
		GlueDatabase:             glueDatabase,
		GlueSerializationLibrary: glueSerializationLibrary,
		S3BucketName:             s3BucketName,
		S3BucketPath:             s3BucketPath,
		S3BucketRegion:           s3BucketRegion,
		S3Endpoint:               s3Endpoint,
		S3PathFormat:             s3PathFormat,
		SecretAccessKey:          secretAccessKey,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationS3GluePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
