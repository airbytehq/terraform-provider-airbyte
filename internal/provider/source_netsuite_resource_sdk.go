// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceNetsuiteResourceModel) ToCreateSDKType() *shared.SourceNetsuiteCreateRequest {
	consumerKey := r.Configuration.ConsumerKey.ValueString()
	consumerSecret := r.Configuration.ConsumerSecret.ValueString()
	var objectTypes []string = nil
	for _, objectTypesItem := range r.Configuration.ObjectTypes {
		objectTypes = append(objectTypes, objectTypesItem.ValueString())
	}
	realm := r.Configuration.Realm.ValueString()
	sourceType := shared.SourceNetsuiteNetsuite(r.Configuration.SourceType.ValueString())
	startDatetime := r.Configuration.StartDatetime.ValueString()
	tokenKey := r.Configuration.TokenKey.ValueString()
	tokenSecret := r.Configuration.TokenSecret.ValueString()
	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceNetsuite{
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		ObjectTypes:    objectTypes,
		Realm:          realm,
		SourceType:     sourceType,
		StartDatetime:  startDatetime,
		TokenKey:       tokenKey,
		TokenSecret:    tokenSecret,
		WindowInDays:   windowInDays,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNetsuiteCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNetsuiteResourceModel) ToGetSDKType() *shared.SourceNetsuiteCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNetsuiteResourceModel) ToUpdateSDKType() *shared.SourceNetsuitePutRequest {
	consumerKey := r.Configuration.ConsumerKey.ValueString()
	consumerSecret := r.Configuration.ConsumerSecret.ValueString()
	var objectTypes []string = nil
	for _, objectTypesItem := range r.Configuration.ObjectTypes {
		objectTypes = append(objectTypes, objectTypesItem.ValueString())
	}
	realm := r.Configuration.Realm.ValueString()
	startDatetime := r.Configuration.StartDatetime.ValueString()
	tokenKey := r.Configuration.TokenKey.ValueString()
	tokenSecret := r.Configuration.TokenSecret.ValueString()
	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceNetsuiteUpdate{
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		ObjectTypes:    objectTypes,
		Realm:          realm,
		StartDatetime:  startDatetime,
		TokenKey:       tokenKey,
		TokenSecret:    tokenSecret,
		WindowInDays:   windowInDays,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNetsuitePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNetsuiteResourceModel) ToDeleteSDKType() *shared.SourceNetsuiteCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNetsuiteResourceModel) RefreshFromGetResponse(resp *shared.SourceNetsuiteGetResponse) {
	r.Configuration.ConsumerKey = types.StringValue(resp.Configuration.ConsumerKey)
	r.Configuration.ConsumerSecret = types.StringValue(resp.Configuration.ConsumerSecret)
	r.Configuration.ObjectTypes = nil
	for _, v := range resp.Configuration.ObjectTypes {
		r.Configuration.ObjectTypes = append(r.Configuration.ObjectTypes, types.StringValue(v))
	}
	r.Configuration.Realm = types.StringValue(resp.Configuration.Realm)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDatetime = types.StringValue(resp.Configuration.StartDatetime)
	r.Configuration.TokenKey = types.StringValue(resp.Configuration.TokenKey)
	r.Configuration.TokenSecret = types.StringValue(resp.Configuration.TokenSecret)
	if resp.Configuration.WindowInDays != nil {
		r.Configuration.WindowInDays = types.Int64Value(*resp.Configuration.WindowInDays)
	} else {
		r.Configuration.WindowInDays = types.Int64Null()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceNetsuiteResourceModel) RefreshFromCreateResponse(resp *shared.SourceNetsuiteGetResponse) {
	r.RefreshFromGetResponse(resp)
}
