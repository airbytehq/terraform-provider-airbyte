// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceNetsuiteResourceModel) ToSharedSourceNetsuiteCreateRequest() *shared.SourceNetsuiteCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var realm string
	realm = r.Configuration.Realm.ValueString()

	var consumerKey string
	consumerKey = r.Configuration.ConsumerKey.ValueString()

	var consumerSecret string
	consumerSecret = r.Configuration.ConsumerSecret.ValueString()

	var tokenKey string
	tokenKey = r.Configuration.TokenKey.ValueString()

	var tokenSecret string
	tokenSecret = r.Configuration.TokenSecret.ValueString()

	var objectTypes []string = []string{}
	for _, objectTypesItem := range r.Configuration.ObjectTypes {
		objectTypes = append(objectTypes, objectTypesItem.ValueString())
	}
	var startDatetime string
	startDatetime = r.Configuration.StartDatetime.ValueString()

	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceNetsuite{
		Realm:          realm,
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		TokenKey:       tokenKey,
		TokenSecret:    tokenSecret,
		ObjectTypes:    objectTypes,
		StartDatetime:  startDatetime,
		WindowInDays:   windowInDays,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceNetsuiteCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceNetsuiteResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNetsuiteResourceModel) ToSharedSourceNetsuitePutRequest() *shared.SourceNetsuitePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var realm string
	realm = r.Configuration.Realm.ValueString()

	var consumerKey string
	consumerKey = r.Configuration.ConsumerKey.ValueString()

	var consumerSecret string
	consumerSecret = r.Configuration.ConsumerSecret.ValueString()

	var tokenKey string
	tokenKey = r.Configuration.TokenKey.ValueString()

	var tokenSecret string
	tokenSecret = r.Configuration.TokenSecret.ValueString()

	var objectTypes []string = []string{}
	for _, objectTypesItem := range r.Configuration.ObjectTypes {
		objectTypes = append(objectTypes, objectTypesItem.ValueString())
	}
	var startDatetime string
	startDatetime = r.Configuration.StartDatetime.ValueString()

	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceNetsuiteUpdate{
		Realm:          realm,
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		TokenKey:       tokenKey,
		TokenSecret:    tokenSecret,
		ObjectTypes:    objectTypes,
		StartDatetime:  startDatetime,
		WindowInDays:   windowInDays,
	}
	out := shared.SourceNetsuitePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
