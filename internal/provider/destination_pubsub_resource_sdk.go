// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPubsubResourceModel) ToSharedDestinationPubsubCreateRequest() *shared.DestinationPubsubCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	batchingDelayThreshold := new(int64)
	if !r.Configuration.BatchingDelayThreshold.IsUnknown() && !r.Configuration.BatchingDelayThreshold.IsNull() {
		*batchingDelayThreshold = r.Configuration.BatchingDelayThreshold.ValueInt64()
	} else {
		batchingDelayThreshold = nil
	}
	batchingElementCountThreshold := new(int64)
	if !r.Configuration.BatchingElementCountThreshold.IsUnknown() && !r.Configuration.BatchingElementCountThreshold.IsNull() {
		*batchingElementCountThreshold = r.Configuration.BatchingElementCountThreshold.ValueInt64()
	} else {
		batchingElementCountThreshold = nil
	}
	batchingEnabled := new(bool)
	if !r.Configuration.BatchingEnabled.IsUnknown() && !r.Configuration.BatchingEnabled.IsNull() {
		*batchingEnabled = r.Configuration.BatchingEnabled.ValueBool()
	} else {
		batchingEnabled = nil
	}
	batchingRequestBytesThreshold := new(int64)
	if !r.Configuration.BatchingRequestBytesThreshold.IsUnknown() && !r.Configuration.BatchingRequestBytesThreshold.IsNull() {
		*batchingRequestBytesThreshold = r.Configuration.BatchingRequestBytesThreshold.ValueInt64()
	} else {
		batchingRequestBytesThreshold = nil
	}
	var credentialsJSON string
	credentialsJSON = r.Configuration.CredentialsJSON.ValueString()

	orderingEnabled := new(bool)
	if !r.Configuration.OrderingEnabled.IsUnknown() && !r.Configuration.OrderingEnabled.IsNull() {
		*orderingEnabled = r.Configuration.OrderingEnabled.ValueBool()
	} else {
		orderingEnabled = nil
	}
	var projectID string
	projectID = r.Configuration.ProjectID.ValueString()

	var topicID string
	topicID = r.Configuration.TopicID.ValueString()

	configuration := shared.DestinationPubsub{
		BatchingDelayThreshold:        batchingDelayThreshold,
		BatchingElementCountThreshold: batchingElementCountThreshold,
		BatchingEnabled:               batchingEnabled,
		BatchingRequestBytesThreshold: batchingRequestBytesThreshold,
		CredentialsJSON:               credentialsJSON,
		OrderingEnabled:               orderingEnabled,
		ProjectID:                     projectID,
		TopicID:                       topicID,
	}
	out := shared.DestinationPubsubCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationPubsubResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationPubsubResourceModel) ToSharedDestinationPubsubPutRequest() *shared.DestinationPubsubPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	batchingDelayThreshold := new(int64)
	if !r.Configuration.BatchingDelayThreshold.IsUnknown() && !r.Configuration.BatchingDelayThreshold.IsNull() {
		*batchingDelayThreshold = r.Configuration.BatchingDelayThreshold.ValueInt64()
	} else {
		batchingDelayThreshold = nil
	}
	batchingElementCountThreshold := new(int64)
	if !r.Configuration.BatchingElementCountThreshold.IsUnknown() && !r.Configuration.BatchingElementCountThreshold.IsNull() {
		*batchingElementCountThreshold = r.Configuration.BatchingElementCountThreshold.ValueInt64()
	} else {
		batchingElementCountThreshold = nil
	}
	batchingEnabled := new(bool)
	if !r.Configuration.BatchingEnabled.IsUnknown() && !r.Configuration.BatchingEnabled.IsNull() {
		*batchingEnabled = r.Configuration.BatchingEnabled.ValueBool()
	} else {
		batchingEnabled = nil
	}
	batchingRequestBytesThreshold := new(int64)
	if !r.Configuration.BatchingRequestBytesThreshold.IsUnknown() && !r.Configuration.BatchingRequestBytesThreshold.IsNull() {
		*batchingRequestBytesThreshold = r.Configuration.BatchingRequestBytesThreshold.ValueInt64()
	} else {
		batchingRequestBytesThreshold = nil
	}
	var credentialsJSON string
	credentialsJSON = r.Configuration.CredentialsJSON.ValueString()

	orderingEnabled := new(bool)
	if !r.Configuration.OrderingEnabled.IsUnknown() && !r.Configuration.OrderingEnabled.IsNull() {
		*orderingEnabled = r.Configuration.OrderingEnabled.ValueBool()
	} else {
		orderingEnabled = nil
	}
	var projectID string
	projectID = r.Configuration.ProjectID.ValueString()

	var topicID string
	topicID = r.Configuration.TopicID.ValueString()

	configuration := shared.DestinationPubsubUpdate{
		BatchingDelayThreshold:        batchingDelayThreshold,
		BatchingElementCountThreshold: batchingElementCountThreshold,
		BatchingEnabled:               batchingEnabled,
		BatchingRequestBytesThreshold: batchingRequestBytesThreshold,
		CredentialsJSON:               credentialsJSON,
		OrderingEnabled:               orderingEnabled,
		ProjectID:                     projectID,
		TopicID:                       topicID,
	}
	out := shared.DestinationPubsubPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
