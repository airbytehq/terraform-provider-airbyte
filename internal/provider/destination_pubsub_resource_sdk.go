// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPubsubResourceModel) ToSharedDestinationPubsubCreateRequest() *shared.DestinationPubsubCreateRequest {
	batchingDelayThreshold := new(int64)
	if !r.Configuration.BatchingDelayThreshold.IsUnknown() && !r.Configuration.BatchingDelayThreshold.IsNull() {
		*batchingDelayThreshold = r.Configuration.BatchingDelayThreshold.ValueInt64()
	} else {
		batchingDelayThreshold = nil
	}
	batchingElementCountThreshold := new(int64)
	if !r.Configuration.BatchingElementCountThreshold.IsUnknown() && !r.Configuration.BatchingElementCountThreshold.IsNull() {
		*batchingElementCountThreshold = r.Configuration.BatchingElementCountThreshold.ValueInt64()
	} else {
		batchingElementCountThreshold = nil
	}
	batchingEnabled := new(bool)
	if !r.Configuration.BatchingEnabled.IsUnknown() && !r.Configuration.BatchingEnabled.IsNull() {
		*batchingEnabled = r.Configuration.BatchingEnabled.ValueBool()
	} else {
		batchingEnabled = nil
	}
	batchingRequestBytesThreshold := new(int64)
	if !r.Configuration.BatchingRequestBytesThreshold.IsUnknown() && !r.Configuration.BatchingRequestBytesThreshold.IsNull() {
		*batchingRequestBytesThreshold = r.Configuration.BatchingRequestBytesThreshold.ValueInt64()
	} else {
		batchingRequestBytesThreshold = nil
	}
	credentialsJSON := r.Configuration.CredentialsJSON.ValueString()
	orderingEnabled := new(bool)
	if !r.Configuration.OrderingEnabled.IsUnknown() && !r.Configuration.OrderingEnabled.IsNull() {
		*orderingEnabled = r.Configuration.OrderingEnabled.ValueBool()
	} else {
		orderingEnabled = nil
	}
	projectID := r.Configuration.ProjectID.ValueString()
	topicID := r.Configuration.TopicID.ValueString()
	configuration := shared.DestinationPubsub{
		BatchingDelayThreshold:        batchingDelayThreshold,
		BatchingElementCountThreshold: batchingElementCountThreshold,
		BatchingEnabled:               batchingEnabled,
		BatchingRequestBytesThreshold: batchingRequestBytesThreshold,
		CredentialsJSON:               credentialsJSON,
		OrderingEnabled:               orderingEnabled,
		ProjectID:                     projectID,
		TopicID:                       topicID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPubsubCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPubsubResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationPubsubResourceModel) ToSharedDestinationPubsubPutRequest() *shared.DestinationPubsubPutRequest {
	batchingDelayThreshold := new(int64)
	if !r.Configuration.BatchingDelayThreshold.IsUnknown() && !r.Configuration.BatchingDelayThreshold.IsNull() {
		*batchingDelayThreshold = r.Configuration.BatchingDelayThreshold.ValueInt64()
	} else {
		batchingDelayThreshold = nil
	}
	batchingElementCountThreshold := new(int64)
	if !r.Configuration.BatchingElementCountThreshold.IsUnknown() && !r.Configuration.BatchingElementCountThreshold.IsNull() {
		*batchingElementCountThreshold = r.Configuration.BatchingElementCountThreshold.ValueInt64()
	} else {
		batchingElementCountThreshold = nil
	}
	batchingEnabled := new(bool)
	if !r.Configuration.BatchingEnabled.IsUnknown() && !r.Configuration.BatchingEnabled.IsNull() {
		*batchingEnabled = r.Configuration.BatchingEnabled.ValueBool()
	} else {
		batchingEnabled = nil
	}
	batchingRequestBytesThreshold := new(int64)
	if !r.Configuration.BatchingRequestBytesThreshold.IsUnknown() && !r.Configuration.BatchingRequestBytesThreshold.IsNull() {
		*batchingRequestBytesThreshold = r.Configuration.BatchingRequestBytesThreshold.ValueInt64()
	} else {
		batchingRequestBytesThreshold = nil
	}
	credentialsJSON := r.Configuration.CredentialsJSON.ValueString()
	orderingEnabled := new(bool)
	if !r.Configuration.OrderingEnabled.IsUnknown() && !r.Configuration.OrderingEnabled.IsNull() {
		*orderingEnabled = r.Configuration.OrderingEnabled.ValueBool()
	} else {
		orderingEnabled = nil
	}
	projectID := r.Configuration.ProjectID.ValueString()
	topicID := r.Configuration.TopicID.ValueString()
	configuration := shared.DestinationPubsubUpdate{
		BatchingDelayThreshold:        batchingDelayThreshold,
		BatchingElementCountThreshold: batchingElementCountThreshold,
		BatchingEnabled:               batchingEnabled,
		BatchingRequestBytesThreshold: batchingRequestBytesThreshold,
		CredentialsJSON:               credentialsJSON,
		OrderingEnabled:               orderingEnabled,
		ProjectID:                     projectID,
		TopicID:                       topicID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPubsubPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
