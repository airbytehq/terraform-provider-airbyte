// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceNytimesResourceModel) ToCreateSDKType() *shared.SourceNytimesCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	period := shared.SourceNytimesPeriodUsedForMostPopularStreams(r.Configuration.Period.ValueInt64())
	shareType := new(shared.SourceNytimesShareTypeUsedForMostPopularSharedStream)
	if !r.Configuration.ShareType.IsUnknown() && !r.Configuration.ShareType.IsNull() {
		*shareType = shared.SourceNytimesShareTypeUsedForMostPopularSharedStream(r.Configuration.ShareType.ValueString())
	} else {
		shareType = nil
	}
	sourceType := shared.SourceNytimesNytimes(r.Configuration.SourceType.ValueString())
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceNytimes{
		APIKey:     apiKey,
		EndDate:    endDate,
		Period:     period,
		ShareType:  shareType,
		SourceType: sourceType,
		StartDate:  startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNytimesCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNytimesResourceModel) ToGetSDKType() *shared.SourceNytimesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNytimesResourceModel) ToUpdateSDKType() *shared.SourceNytimesPutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	period := shared.SourceNytimesUpdatePeriodUsedForMostPopularStreams(r.Configuration.Period.ValueInt64())
	shareType := new(shared.SourceNytimesUpdateShareTypeUsedForMostPopularSharedStream)
	if !r.Configuration.ShareType.IsUnknown() && !r.Configuration.ShareType.IsNull() {
		*shareType = shared.SourceNytimesUpdateShareTypeUsedForMostPopularSharedStream(r.Configuration.ShareType.ValueString())
	} else {
		shareType = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	configuration := shared.SourceNytimesUpdate{
		APIKey:    apiKey,
		EndDate:   endDate,
		Period:    period,
		ShareType: shareType,
		StartDate: startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNytimesPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNytimesResourceModel) ToDeleteSDKType() *shared.SourceNytimesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNytimesResourceModel) RefreshFromGetResponse(resp *shared.SourceNytimesGetResponse) {
	r.Configuration.APIKey = types.StringValue(resp.Configuration.APIKey)
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(resp.Configuration.EndDate.String())
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	r.Configuration.Period = types.Int64Value(int64(resp.Configuration.Period))
	if resp.Configuration.ShareType != nil {
		r.Configuration.ShareType = types.StringValue(string(*resp.Configuration.ShareType))
	} else {
		r.Configuration.ShareType = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceNytimesResourceModel) RefreshFromCreateResponse(resp *shared.SourceNytimesGetResponse) {
	r.RefreshFromGetResponse(resp)
}
