// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceOpenweatherResourceModel) ToSharedSourceOpenweatherCreateRequest() *shared.SourceOpenweatherCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var appid string
	appid = r.Configuration.Appid.ValueString()

	lang := new(shared.Lang)
	if !r.Configuration.Lang.IsUnknown() && !r.Configuration.Lang.IsNull() {
		*lang = shared.Lang(r.Configuration.Lang.ValueString())
	} else {
		lang = nil
	}
	var lat string
	lat = r.Configuration.Lat.ValueString()

	var lon string
	lon = r.Configuration.Lon.ValueString()

	onlyCurrent := new(bool)
	if !r.Configuration.OnlyCurrent.IsUnknown() && !r.Configuration.OnlyCurrent.IsNull() {
		*onlyCurrent = r.Configuration.OnlyCurrent.ValueBool()
	} else {
		onlyCurrent = nil
	}
	units := new(shared.Units)
	if !r.Configuration.Units.IsUnknown() && !r.Configuration.Units.IsNull() {
		*units = shared.Units(r.Configuration.Units.ValueString())
	} else {
		units = nil
	}
	configuration := shared.SourceOpenweather{
		Appid:       appid,
		Lang:        lang,
		Lat:         lat,
		Lon:         lon,
		OnlyCurrent: onlyCurrent,
		Units:       units,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceOpenweatherCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceOpenweatherResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceOpenweatherResourceModel) ToSharedSourceOpenweatherPutRequest() *shared.SourceOpenweatherPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var appid string
	appid = r.Configuration.Appid.ValueString()

	lang := new(shared.SourceOpenweatherUpdateLang)
	if !r.Configuration.Lang.IsUnknown() && !r.Configuration.Lang.IsNull() {
		*lang = shared.SourceOpenweatherUpdateLang(r.Configuration.Lang.ValueString())
	} else {
		lang = nil
	}
	var lat string
	lat = r.Configuration.Lat.ValueString()

	var lon string
	lon = r.Configuration.Lon.ValueString()

	onlyCurrent := new(bool)
	if !r.Configuration.OnlyCurrent.IsUnknown() && !r.Configuration.OnlyCurrent.IsNull() {
		*onlyCurrent = r.Configuration.OnlyCurrent.ValueBool()
	} else {
		onlyCurrent = nil
	}
	units := new(shared.SourceOpenweatherUpdateUnits)
	if !r.Configuration.Units.IsUnknown() && !r.Configuration.Units.IsNull() {
		*units = shared.SourceOpenweatherUpdateUnits(r.Configuration.Units.ValueString())
	} else {
		units = nil
	}
	configuration := shared.SourceOpenweatherUpdate{
		Appid:       appid,
		Lang:        lang,
		Lat:         lat,
		Lon:         lon,
		OnlyCurrent: onlyCurrent,
		Units:       units,
	}
	out := shared.SourceOpenweatherPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
