// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceClickupAPIResourceModel) ToSharedSourceClickupAPICreateRequest() *shared.SourceClickupAPICreateRequest {
	apiToken := r.Configuration.APIToken.ValueString()
	folderID := new(string)
	if !r.Configuration.FolderID.IsUnknown() && !r.Configuration.FolderID.IsNull() {
		*folderID = r.Configuration.FolderID.ValueString()
	} else {
		folderID = nil
	}
	includeClosedTasks := new(bool)
	if !r.Configuration.IncludeClosedTasks.IsUnknown() && !r.Configuration.IncludeClosedTasks.IsNull() {
		*includeClosedTasks = r.Configuration.IncludeClosedTasks.ValueBool()
	} else {
		includeClosedTasks = nil
	}
	listID := new(string)
	if !r.Configuration.ListID.IsUnknown() && !r.Configuration.ListID.IsNull() {
		*listID = r.Configuration.ListID.ValueString()
	} else {
		listID = nil
	}
	spaceID := new(string)
	if !r.Configuration.SpaceID.IsUnknown() && !r.Configuration.SpaceID.IsNull() {
		*spaceID = r.Configuration.SpaceID.ValueString()
	} else {
		spaceID = nil
	}
	teamID := new(string)
	if !r.Configuration.TeamID.IsUnknown() && !r.Configuration.TeamID.IsNull() {
		*teamID = r.Configuration.TeamID.ValueString()
	} else {
		teamID = nil
	}
	configuration := shared.SourceClickupAPI{
		APIToken:           apiToken,
		FolderID:           folderID,
		IncludeClosedTasks: includeClosedTasks,
		ListID:             listID,
		SpaceID:            spaceID,
		TeamID:             teamID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceClickupAPICreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceClickupAPIResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceClickupAPIResourceModel) ToSharedSourceClickupAPIPutRequest() *shared.SourceClickupAPIPutRequest {
	apiToken := r.Configuration.APIToken.ValueString()
	folderID := new(string)
	if !r.Configuration.FolderID.IsUnknown() && !r.Configuration.FolderID.IsNull() {
		*folderID = r.Configuration.FolderID.ValueString()
	} else {
		folderID = nil
	}
	includeClosedTasks := new(bool)
	if !r.Configuration.IncludeClosedTasks.IsUnknown() && !r.Configuration.IncludeClosedTasks.IsNull() {
		*includeClosedTasks = r.Configuration.IncludeClosedTasks.ValueBool()
	} else {
		includeClosedTasks = nil
	}
	listID := new(string)
	if !r.Configuration.ListID.IsUnknown() && !r.Configuration.ListID.IsNull() {
		*listID = r.Configuration.ListID.ValueString()
	} else {
		listID = nil
	}
	spaceID := new(string)
	if !r.Configuration.SpaceID.IsUnknown() && !r.Configuration.SpaceID.IsNull() {
		*spaceID = r.Configuration.SpaceID.ValueString()
	} else {
		spaceID = nil
	}
	teamID := new(string)
	if !r.Configuration.TeamID.IsUnknown() && !r.Configuration.TeamID.IsNull() {
		*teamID = r.Configuration.TeamID.ValueString()
	} else {
		teamID = nil
	}
	configuration := shared.SourceClickupAPIUpdate{
		APIToken:           apiToken,
		FolderID:           folderID,
		IncludeClosedTasks: includeClosedTasks,
		ListID:             listID,
		SpaceID:            spaceID,
		TeamID:             teamID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceClickupAPIPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
