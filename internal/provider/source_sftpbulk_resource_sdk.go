// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSftpBulkResourceModel) ToCreateSDKType() *shared.SourceSftpBulkCreateRequest {
	fileMostRecent := new(bool)
	if !r.Configuration.FileMostRecent.IsUnknown() && !r.Configuration.FileMostRecent.IsNull() {
		*fileMostRecent = r.Configuration.FileMostRecent.ValueBool()
	} else {
		fileMostRecent = nil
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	fileType := new(shared.SourceSftpBulkFileType)
	if !r.Configuration.FileType.IsUnknown() && !r.Configuration.FileType.IsNull() {
		*fileType = shared.SourceSftpBulkFileType(r.Configuration.FileType.ValueString())
	} else {
		fileType = nil
	}
	folderPath := r.Configuration.FolderPath.ValueString()
	host := r.Configuration.Host.ValueString()
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	privateKey := new(string)
	if !r.Configuration.PrivateKey.IsUnknown() && !r.Configuration.PrivateKey.IsNull() {
		*privateKey = r.Configuration.PrivateKey.ValueString()
	} else {
		privateKey = nil
	}
	separator := new(string)
	if !r.Configuration.Separator.IsUnknown() && !r.Configuration.Separator.IsNull() {
		*separator = r.Configuration.Separator.ValueString()
	} else {
		separator = nil
	}
	sourceType := shared.SourceSftpBulkSftpBulk(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	streamName := r.Configuration.StreamName.ValueString()
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceSftpBulk{
		FileMostRecent: fileMostRecent,
		FilePattern:    filePattern,
		FileType:       fileType,
		FolderPath:     folderPath,
		Host:           host,
		Password:       password,
		Port:           port,
		PrivateKey:     privateKey,
		Separator:      separator,
		SourceType:     sourceType,
		StartDate:      startDate,
		StreamName:     streamName,
		Username:       username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSftpBulkCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSftpBulkResourceModel) ToGetSDKType() *shared.SourceSftpBulkCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSftpBulkResourceModel) ToUpdateSDKType() *shared.SourceSftpBulkPutRequest {
	fileMostRecent := new(bool)
	if !r.Configuration.FileMostRecent.IsUnknown() && !r.Configuration.FileMostRecent.IsNull() {
		*fileMostRecent = r.Configuration.FileMostRecent.ValueBool()
	} else {
		fileMostRecent = nil
	}
	filePattern := new(string)
	if !r.Configuration.FilePattern.IsUnknown() && !r.Configuration.FilePattern.IsNull() {
		*filePattern = r.Configuration.FilePattern.ValueString()
	} else {
		filePattern = nil
	}
	fileType := new(shared.SourceSftpBulkUpdateFileType)
	if !r.Configuration.FileType.IsUnknown() && !r.Configuration.FileType.IsNull() {
		*fileType = shared.SourceSftpBulkUpdateFileType(r.Configuration.FileType.ValueString())
	} else {
		fileType = nil
	}
	folderPath := r.Configuration.FolderPath.ValueString()
	host := r.Configuration.Host.ValueString()
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	privateKey := new(string)
	if !r.Configuration.PrivateKey.IsUnknown() && !r.Configuration.PrivateKey.IsNull() {
		*privateKey = r.Configuration.PrivateKey.ValueString()
	} else {
		privateKey = nil
	}
	separator := new(string)
	if !r.Configuration.Separator.IsUnknown() && !r.Configuration.Separator.IsNull() {
		*separator = r.Configuration.Separator.ValueString()
	} else {
		separator = nil
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	streamName := r.Configuration.StreamName.ValueString()
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceSftpBulkUpdate{
		FileMostRecent: fileMostRecent,
		FilePattern:    filePattern,
		FileType:       fileType,
		FolderPath:     folderPath,
		Host:           host,
		Password:       password,
		Port:           port,
		PrivateKey:     privateKey,
		Separator:      separator,
		StartDate:      startDate,
		StreamName:     streamName,
		Username:       username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSftpBulkPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSftpBulkResourceModel) ToDeleteSDKType() *shared.SourceSftpBulkCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSftpBulkResourceModel) RefreshFromGetResponse(resp *shared.SourceSftpBulkGetResponse) {
	if resp.Configuration.FileMostRecent != nil {
		r.Configuration.FileMostRecent = types.BoolValue(*resp.Configuration.FileMostRecent)
	} else {
		r.Configuration.FileMostRecent = types.BoolNull()
	}
	if resp.Configuration.FilePattern != nil {
		r.Configuration.FilePattern = types.StringValue(*resp.Configuration.FilePattern)
	} else {
		r.Configuration.FilePattern = types.StringNull()
	}
	if resp.Configuration.FileType != nil {
		r.Configuration.FileType = types.StringValue(string(*resp.Configuration.FileType))
	} else {
		r.Configuration.FileType = types.StringNull()
	}
	r.Configuration.FolderPath = types.StringValue(resp.Configuration.FolderPath)
	r.Configuration.Host = types.StringValue(resp.Configuration.Host)
	if resp.Configuration.Password != nil {
		r.Configuration.Password = types.StringValue(*resp.Configuration.Password)
	} else {
		r.Configuration.Password = types.StringNull()
	}
	r.Configuration.Port = types.Int64Value(resp.Configuration.Port)
	if resp.Configuration.PrivateKey != nil {
		r.Configuration.PrivateKey = types.StringValue(*resp.Configuration.PrivateKey)
	} else {
		r.Configuration.PrivateKey = types.StringNull()
	}
	if resp.Configuration.Separator != nil {
		r.Configuration.Separator = types.StringValue(*resp.Configuration.Separator)
	} else {
		r.Configuration.Separator = types.StringNull()
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Configuration.StreamName = types.StringValue(resp.Configuration.StreamName)
	r.Configuration.Username = types.StringValue(resp.Configuration.Username)
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSftpBulkResourceModel) RefreshFromCreateResponse(resp *shared.SourceSftpBulkGetResponse) {
	r.RefreshFromGetResponse(resp)
}
