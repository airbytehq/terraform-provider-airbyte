// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationTypesenseResourceModel) ToCreateSDKType() *shared.DestinationTypesenseCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	destinationType := shared.DestinationTypesenseTypesense(r.Configuration.DestinationType.ValueString())
	host := r.Configuration.Host.ValueString()
	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	configuration := shared.DestinationTypesense{
		APIKey:          apiKey,
		BatchSize:       batchSize,
		DestinationType: destinationType,
		Host:            host,
		Port:            port,
		Protocol:        protocol,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationTypesenseCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationTypesenseResourceModel) ToGetSDKType() *shared.DestinationTypesenseCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationTypesenseResourceModel) ToUpdateSDKType() *shared.DestinationTypesensePutRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	host := r.Configuration.Host.ValueString()
	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	configuration := shared.DestinationTypesenseUpdate{
		APIKey:    apiKey,
		BatchSize: batchSize,
		Host:      host,
		Port:      port,
		Protocol:  protocol,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationTypesensePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationTypesenseResourceModel) ToDeleteSDKType() *shared.DestinationTypesenseCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationTypesenseResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationTypesenseResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
