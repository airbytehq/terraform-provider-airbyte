// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationTypesenseResourceModel) ToSharedDestinationTypesenseCreateRequest(ctx context.Context) (*shared.DestinationTypesenseCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	path := new(string)
	if !r.Configuration.Path.IsUnknown() && !r.Configuration.Path.IsNull() {
		*path = r.Configuration.Path.ValueString()
	} else {
		path = nil
	}
	configuration := shared.DestinationTypesense{
		APIKey:    apiKey,
		Host:      host,
		Port:      port,
		Protocol:  protocol,
		BatchSize: batchSize,
		Path:      path,
	}
	out := shared.DestinationTypesenseCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationTypesenseResourceModel) ToSharedDestinationTypesensePutRequest(ctx context.Context) (*shared.DestinationTypesensePutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	path := new(string)
	if !r.Configuration.Path.IsUnknown() && !r.Configuration.Path.IsNull() {
		*path = r.Configuration.Path.ValueString()
	} else {
		path = nil
	}
	configuration := shared.DestinationTypesenseUpdate{
		APIKey:    apiKey,
		Host:      host,
		Port:      port,
		Protocol:  protocol,
		BatchSize: batchSize,
		Path:      path,
	}
	out := shared.DestinationTypesensePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationTypesenseResourceModel) ToOperationsPutDestinationTypesenseRequest(ctx context.Context) (*operations.PutDestinationTypesenseRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationTypesensePutRequest, destinationTypesensePutRequestDiags := r.ToSharedDestinationTypesensePutRequest(ctx)
	diags.Append(destinationTypesensePutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationTypesenseRequest{
		DestinationID:                  destinationID,
		DestinationTypesensePutRequest: destinationTypesensePutRequest,
	}

	return &out, diags
}

func (r *DestinationTypesenseResourceModel) ToOperationsGetDestinationTypesenseRequest(ctx context.Context) (*operations.GetDestinationTypesenseRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationTypesenseRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationTypesenseResourceModel) ToOperationsDeleteDestinationTypesenseRequest(ctx context.Context) (*operations.DeleteDestinationTypesenseRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationTypesenseRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationTypesenseResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
