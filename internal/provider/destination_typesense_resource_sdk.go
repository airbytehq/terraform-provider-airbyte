// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationTypesenseResourceModel) ToSharedDestinationTypesenseCreateRequest() *shared.DestinationTypesenseCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	path := new(string)
	if !r.Configuration.Path.IsUnknown() && !r.Configuration.Path.IsNull() {
		*path = r.Configuration.Path.ValueString()
	} else {
		path = nil
	}
	configuration := shared.DestinationTypesense{
		APIKey:    apiKey,
		Host:      host,
		Port:      port,
		Protocol:  protocol,
		BatchSize: batchSize,
		Path:      path,
	}
	out := shared.DestinationTypesenseCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}

func (r *DestinationTypesenseResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationTypesenseResourceModel) ToSharedDestinationTypesensePutRequest() *shared.DestinationTypesensePutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	port := new(string)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueString()
	} else {
		port = nil
	}
	protocol := new(string)
	if !r.Configuration.Protocol.IsUnknown() && !r.Configuration.Protocol.IsNull() {
		*protocol = r.Configuration.Protocol.ValueString()
	} else {
		protocol = nil
	}
	batchSize := new(int64)
	if !r.Configuration.BatchSize.IsUnknown() && !r.Configuration.BatchSize.IsNull() {
		*batchSize = r.Configuration.BatchSize.ValueInt64()
	} else {
		batchSize = nil
	}
	path := new(string)
	if !r.Configuration.Path.IsUnknown() && !r.Configuration.Path.IsNull() {
		*path = r.Configuration.Path.ValueString()
	} else {
		path = nil
	}
	configuration := shared.DestinationTypesenseUpdate{
		APIKey:    apiKey,
		Host:      host,
		Port:      port,
		Protocol:  protocol,
		BatchSize: batchSize,
		Path:      path,
	}
	out := shared.DestinationTypesensePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
