// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationLangchainResourceModel) ToCreateSDKType() *shared.DestinationLangchainCreateRequest {
	var embedding shared.DestinationLangchainEmbedding
	var destinationLangchainEmbeddingOpenAI *shared.DestinationLangchainEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationLangchainEmbeddingOpenAI != nil {
		openaiKey := r.Configuration.Embedding.DestinationLangchainEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationLangchainEmbeddingOpenAI = &shared.DestinationLangchainEmbeddingOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationLangchainEmbeddingOpenAI != nil {
		embedding = shared.DestinationLangchainEmbedding{
			DestinationLangchainEmbeddingOpenAI: destinationLangchainEmbeddingOpenAI,
		}
	}
	var destinationLangchainEmbeddingFake *shared.DestinationLangchainEmbeddingFake
	if r.Configuration.Embedding.DestinationLangchainEmbeddingFake != nil {
		destinationLangchainEmbeddingFake = &shared.DestinationLangchainEmbeddingFake{}
	}
	if destinationLangchainEmbeddingFake != nil {
		embedding = shared.DestinationLangchainEmbedding{
			DestinationLangchainEmbeddingFake: destinationLangchainEmbeddingFake,
		}
	}
	var indexing shared.DestinationLangchainIndexing
	var destinationLangchainIndexingPinecone *shared.DestinationLangchainIndexingPinecone
	if r.Configuration.Indexing.DestinationLangchainIndexingPinecone != nil {
		index := r.Configuration.Indexing.DestinationLangchainIndexingPinecone.Index.ValueString()
		pineconeEnvironment := r.Configuration.Indexing.DestinationLangchainIndexingPinecone.PineconeEnvironment.ValueString()
		pineconeKey := r.Configuration.Indexing.DestinationLangchainIndexingPinecone.PineconeKey.ValueString()
		destinationLangchainIndexingPinecone = &shared.DestinationLangchainIndexingPinecone{
			Index:               index,
			PineconeEnvironment: pineconeEnvironment,
			PineconeKey:         pineconeKey,
		}
	}
	if destinationLangchainIndexingPinecone != nil {
		indexing = shared.DestinationLangchainIndexing{
			DestinationLangchainIndexingPinecone: destinationLangchainIndexingPinecone,
		}
	}
	var destinationLangchainIndexingDocArrayHnswSearch *shared.DestinationLangchainIndexingDocArrayHnswSearch
	if r.Configuration.Indexing.DestinationLangchainIndexingDocArrayHnswSearch != nil {
		destinationPath := r.Configuration.Indexing.DestinationLangchainIndexingDocArrayHnswSearch.DestinationPath.ValueString()
		destinationLangchainIndexingDocArrayHnswSearch = &shared.DestinationLangchainIndexingDocArrayHnswSearch{
			DestinationPath: destinationPath,
		}
	}
	if destinationLangchainIndexingDocArrayHnswSearch != nil {
		indexing = shared.DestinationLangchainIndexing{
			DestinationLangchainIndexingDocArrayHnswSearch: destinationLangchainIndexingDocArrayHnswSearch,
		}
	}
	var destinationLangchainIndexingChromaLocalPersistance *shared.DestinationLangchainIndexingChromaLocalPersistance
	if r.Configuration.Indexing.DestinationLangchainIndexingChromaLocalPersistance != nil {
		collectionName := new(string)
		if !r.Configuration.Indexing.DestinationLangchainIndexingChromaLocalPersistance.CollectionName.IsUnknown() && !r.Configuration.Indexing.DestinationLangchainIndexingChromaLocalPersistance.CollectionName.IsNull() {
			*collectionName = r.Configuration.Indexing.DestinationLangchainIndexingChromaLocalPersistance.CollectionName.ValueString()
		} else {
			collectionName = nil
		}
		destinationPath1 := r.Configuration.Indexing.DestinationLangchainIndexingChromaLocalPersistance.DestinationPath.ValueString()
		destinationLangchainIndexingChromaLocalPersistance = &shared.DestinationLangchainIndexingChromaLocalPersistance{
			CollectionName:  collectionName,
			DestinationPath: destinationPath1,
		}
	}
	if destinationLangchainIndexingChromaLocalPersistance != nil {
		indexing = shared.DestinationLangchainIndexing{
			DestinationLangchainIndexingChromaLocalPersistance: destinationLangchainIndexingChromaLocalPersistance,
		}
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationLangchainProcessingConfigModel{
		ChunkOverlap: chunkOverlap,
		ChunkSize:    chunkSize,
		TextFields:   textFields,
	}
	configuration := shared.DestinationLangchain{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationLangchainCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationLangchainResourceModel) ToGetSDKType() *shared.DestinationLangchainCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationLangchainResourceModel) ToUpdateSDKType() *shared.DestinationLangchainPutRequest {
	var embedding shared.DestinationLangchainUpdateEmbedding
	var destinationLangchainUpdateEmbeddingOpenAI *shared.DestinationLangchainUpdateEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationLangchainUpdateEmbeddingOpenAI != nil {
		openaiKey := r.Configuration.Embedding.DestinationLangchainUpdateEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationLangchainUpdateEmbeddingOpenAI = &shared.DestinationLangchainUpdateEmbeddingOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationLangchainUpdateEmbeddingOpenAI != nil {
		embedding = shared.DestinationLangchainUpdateEmbedding{
			DestinationLangchainUpdateEmbeddingOpenAI: destinationLangchainUpdateEmbeddingOpenAI,
		}
	}
	var destinationLangchainUpdateEmbeddingFake *shared.DestinationLangchainUpdateEmbeddingFake
	if r.Configuration.Embedding.DestinationLangchainUpdateEmbeddingFake != nil {
		destinationLangchainUpdateEmbeddingFake = &shared.DestinationLangchainUpdateEmbeddingFake{}
	}
	if destinationLangchainUpdateEmbeddingFake != nil {
		embedding = shared.DestinationLangchainUpdateEmbedding{
			DestinationLangchainUpdateEmbeddingFake: destinationLangchainUpdateEmbeddingFake,
		}
	}
	var indexing shared.DestinationLangchainUpdateIndexing
	var destinationLangchainUpdateIndexingPinecone *shared.DestinationLangchainUpdateIndexingPinecone
	if r.Configuration.Indexing.DestinationLangchainUpdateIndexingPinecone != nil {
		index := r.Configuration.Indexing.DestinationLangchainUpdateIndexingPinecone.Index.ValueString()
		pineconeEnvironment := r.Configuration.Indexing.DestinationLangchainUpdateIndexingPinecone.PineconeEnvironment.ValueString()
		pineconeKey := r.Configuration.Indexing.DestinationLangchainUpdateIndexingPinecone.PineconeKey.ValueString()
		destinationLangchainUpdateIndexingPinecone = &shared.DestinationLangchainUpdateIndexingPinecone{
			Index:               index,
			PineconeEnvironment: pineconeEnvironment,
			PineconeKey:         pineconeKey,
		}
	}
	if destinationLangchainUpdateIndexingPinecone != nil {
		indexing = shared.DestinationLangchainUpdateIndexing{
			DestinationLangchainUpdateIndexingPinecone: destinationLangchainUpdateIndexingPinecone,
		}
	}
	var destinationLangchainUpdateIndexingDocArrayHnswSearch *shared.DestinationLangchainUpdateIndexingDocArrayHnswSearch
	if r.Configuration.Indexing.DestinationLangchainUpdateIndexingDocArrayHnswSearch != nil {
		destinationPath := r.Configuration.Indexing.DestinationLangchainUpdateIndexingDocArrayHnswSearch.DestinationPath.ValueString()
		destinationLangchainUpdateIndexingDocArrayHnswSearch = &shared.DestinationLangchainUpdateIndexingDocArrayHnswSearch{
			DestinationPath: destinationPath,
		}
	}
	if destinationLangchainUpdateIndexingDocArrayHnswSearch != nil {
		indexing = shared.DestinationLangchainUpdateIndexing{
			DestinationLangchainUpdateIndexingDocArrayHnswSearch: destinationLangchainUpdateIndexingDocArrayHnswSearch,
		}
	}
	var destinationLangchainUpdateIndexingChromaLocalPersistance *shared.DestinationLangchainUpdateIndexingChromaLocalPersistance
	if r.Configuration.Indexing.DestinationLangchainUpdateIndexingChromaLocalPersistance != nil {
		collectionName := new(string)
		if !r.Configuration.Indexing.DestinationLangchainUpdateIndexingChromaLocalPersistance.CollectionName.IsUnknown() && !r.Configuration.Indexing.DestinationLangchainUpdateIndexingChromaLocalPersistance.CollectionName.IsNull() {
			*collectionName = r.Configuration.Indexing.DestinationLangchainUpdateIndexingChromaLocalPersistance.CollectionName.ValueString()
		} else {
			collectionName = nil
		}
		destinationPath1 := r.Configuration.Indexing.DestinationLangchainUpdateIndexingChromaLocalPersistance.DestinationPath.ValueString()
		destinationLangchainUpdateIndexingChromaLocalPersistance = &shared.DestinationLangchainUpdateIndexingChromaLocalPersistance{
			CollectionName:  collectionName,
			DestinationPath: destinationPath1,
		}
	}
	if destinationLangchainUpdateIndexingChromaLocalPersistance != nil {
		indexing = shared.DestinationLangchainUpdateIndexing{
			DestinationLangchainUpdateIndexingChromaLocalPersistance: destinationLangchainUpdateIndexingChromaLocalPersistance,
		}
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationLangchainUpdateProcessingConfigModel{
		ChunkOverlap: chunkOverlap,
		ChunkSize:    chunkSize,
		TextFields:   textFields,
	}
	configuration := shared.DestinationLangchainUpdate{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationLangchainPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationLangchainResourceModel) ToDeleteSDKType() *shared.DestinationLangchainCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationLangchainResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationLangchainResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
