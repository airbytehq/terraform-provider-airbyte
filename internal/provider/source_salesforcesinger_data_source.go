// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk"
	"airbyte/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SourceSalesforceSingerDataSource{}
var _ datasource.DataSourceWithConfigure = &SourceSalesforceSingerDataSource{}

func NewSourceSalesforceSingerDataSource() datasource.DataSource {
	return &SourceSalesforceSingerDataSource{}
}

// SourceSalesforceSingerDataSource is the data source implementation.
type SourceSalesforceSingerDataSource struct {
	client *sdk.SDK
}

// SourceSalesforceSingerDataSourceModel describes the data model.
type SourceSalesforceSingerDataSourceModel struct {
	Configuration SourceSalesforceSinger `tfsdk:"configuration"`
	Name          types.String           `tfsdk:"name"`
	SecretID      types.String           `tfsdk:"secret_id"`
	SourceID      types.String           `tfsdk:"source_id"`
	WorkspaceID   types.String           `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *SourceSalesforceSingerDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_salesforce_singer"
}

// Schema defines the schema for the data source.
func (r *SourceSalesforceSingerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceSalesforceSinger DataSource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"api_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"BULK",
								"REST",
							),
						},
						MarkdownDescription: `must be one of ["BULK", "REST"]` + "\n" +
							`Unless you know that you are transferring a very small amount of data, prefer using the BULK API. This will help avoid using up all of your API call quota with Salesforce. Valid values are BULK or REST.`,
					},
					"client_id": schema.StringAttribute{
						Computed:    true,
						Description: `The Consumer Key that can be found when viewing your app in Salesforce`,
					},
					"client_secret": schema.StringAttribute{
						Computed:    true,
						Description: `The Consumer Secret that can be found when viewing your app in Salesforce`,
					},
					"is_sandbox": schema.BoolAttribute{
						Computed:    true,
						Description: `Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false. We provide more info on this field in the <a href="https://docs.airbyte.io/integrations/destinations/salesforce#is_sandbox">docs</a>.`,
					},
					"quota_percent_per_run": schema.NumberAttribute{
						Computed:    true,
						Description: `determines the maximum allowed API quota percentage the connector is allowed to consume per sync job`,
					},
					"quota_percent_total": schema.NumberAttribute{
						Computed:    true,
						Description: `Determines the maximum allowed API quota percentage the connector is allowed to consume at any time`,
					},
					"refresh_token": schema.StringAttribute{
						Computed:    true,
						Description: `Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this <a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b">guide</a> to retrieve it.`,
					},
					"source_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"salesforce-singer",
							),
						},
						Description: `must be one of ["salesforce-singer"]`,
					},
					"start_date": schema.StringAttribute{
						Computed:    true,
						Description: `UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.`,
					},
				},
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"secret_id": schema.StringAttribute{
				Optional:    true,
				Description: `Optional secretID obtained through the public API OAuth redirect flow.`,
			},
			"source_id": schema.StringAttribute{
				Required: true,
			},
			"workspace_id": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SourceSalesforceSingerDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceSalesforceSingerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SourceSalesforceSingerDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.GetSourceSalesforceSingerRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.GetSourceSalesforceSinger(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
