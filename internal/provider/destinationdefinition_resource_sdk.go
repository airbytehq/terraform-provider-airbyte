// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationDefinitionResourceModel) ToSharedCreateDefinitionRequest(ctx context.Context) (*shared.CreateDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var dockerRepository string
	dockerRepository = r.DockerRepository.ValueString()

	var dockerImageTag string
	dockerImageTag = r.DockerImageTag.ValueString()

	documentationURL := new(string)
	if !r.DocumentationURL.IsUnknown() && !r.DocumentationURL.IsNull() {
		*documentationURL = r.DocumentationURL.ValueString()
	} else {
		documentationURL = nil
	}
	out := shared.CreateDefinitionRequest{
		Name:             name,
		DockerRepository: dockerRepository,
		DockerImageTag:   dockerImageTag,
		DocumentationURL: documentationURL,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) ToOperationsCreateDestinationDefinitionRequest(ctx context.Context) (*operations.CreateDestinationDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	createDefinitionRequest, createDefinitionRequestDiags := r.ToSharedCreateDefinitionRequest(ctx)
	diags.Append(createDefinitionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateDestinationDefinitionRequest{
		WorkspaceID:             workspaceID,
		CreateDefinitionRequest: *createDefinitionRequest,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) ToSharedUpdateDefinitionRequest(ctx context.Context) (*shared.UpdateDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var dockerImageTag string
	dockerImageTag = r.DockerImageTag.ValueString()

	out := shared.UpdateDefinitionRequest{
		Name:           name,
		DockerImageTag: dockerImageTag,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) ToOperationsUpdateDestinationDefinitionRequest(ctx context.Context) (*operations.UpdateDestinationDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var definitionID string
	definitionID = r.ID.ValueString()

	updateDefinitionRequest, updateDefinitionRequestDiags := r.ToSharedUpdateDefinitionRequest(ctx)
	diags.Append(updateDefinitionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDestinationDefinitionRequest{
		WorkspaceID:             workspaceID,
		DefinitionID:            definitionID,
		UpdateDefinitionRequest: *updateDefinitionRequest,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) ToOperationsGetDestinationDefinitionRequest(ctx context.Context) (*operations.GetDestinationDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var definitionID string
	definitionID = r.ID.ValueString()

	out := operations.GetDestinationDefinitionRequest{
		WorkspaceID:  workspaceID,
		DefinitionID: definitionID,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) ToOperationsDeleteDestinationDefinitionRequest(ctx context.Context) (*operations.DeleteDestinationDefinitionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var definitionID string
	definitionID = r.ID.ValueString()

	out := operations.DeleteDestinationDefinitionRequest{
		WorkspaceID:  workspaceID,
		DefinitionID: definitionID,
	}

	return &out, diags
}

func (r *DestinationDefinitionResourceModel) RefreshFromSharedDefinitionResponse(ctx context.Context, resp *shared.DefinitionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.DockerImageTag = types.StringValue(resp.DockerImageTag)
		r.DockerRepository = types.StringValue(resp.DockerRepository)
		r.DocumentationURL = types.StringPointerValue(resp.DocumentationURL)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}
