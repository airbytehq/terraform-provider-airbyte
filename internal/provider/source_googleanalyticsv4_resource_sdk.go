// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGoogleAnalyticsV4ResourceModel) ToCreateSDKType() *shared.SourceGoogleAnalyticsV4CreateRequest {
	var credentials *shared.SourceGoogleAnalyticsV4Credentials
	if r.Configuration.Credentials != nil {
		var sourceGoogleAnalyticsV4AuthenticateViaGoogleOauth *shared.SourceGoogleAnalyticsV4AuthenticateViaGoogleOauth
		if r.Configuration.Credentials.AuthenticateViaGoogleOauth != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := r.Configuration.Credentials.AuthenticateViaGoogleOauth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.AuthenticateViaGoogleOauth.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.AuthenticateViaGoogleOauth.RefreshToken.ValueString()
			sourceGoogleAnalyticsV4AuthenticateViaGoogleOauth = &shared.SourceGoogleAnalyticsV4AuthenticateViaGoogleOauth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceGoogleAnalyticsV4AuthenticateViaGoogleOauth != nil {
			credentials = &shared.SourceGoogleAnalyticsV4Credentials{
				SourceGoogleAnalyticsV4AuthenticateViaGoogleOauth: sourceGoogleAnalyticsV4AuthenticateViaGoogleOauth,
			}
		}
		var sourceGoogleAnalyticsV4ServiceAccountKeyAuthentication *shared.SourceGoogleAnalyticsV4ServiceAccountKeyAuthentication
		if r.Configuration.Credentials.ServiceAccountKeyAuthentication != nil {
			credentialsJSON := r.Configuration.Credentials.ServiceAccountKeyAuthentication.CredentialsJSON.ValueString()
			sourceGoogleAnalyticsV4ServiceAccountKeyAuthentication = &shared.SourceGoogleAnalyticsV4ServiceAccountKeyAuthentication{
				CredentialsJSON: credentialsJSON,
			}
		}
		if sourceGoogleAnalyticsV4ServiceAccountKeyAuthentication != nil {
			credentials = &shared.SourceGoogleAnalyticsV4Credentials{
				SourceGoogleAnalyticsV4ServiceAccountKeyAuthentication: sourceGoogleAnalyticsV4ServiceAccountKeyAuthentication,
			}
		}
	}
	customReports := new(string)
	if !r.Configuration.CustomReports.IsUnknown() && !r.Configuration.CustomReports.IsNull() {
		*customReports = r.Configuration.CustomReports.ValueString()
	} else {
		customReports = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	viewID := r.Configuration.ViewID.ValueString()
	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceGoogleAnalyticsV4{
		Credentials:   credentials,
		CustomReports: customReports,
		StartDate:     startDate,
		ViewID:        viewID,
		WindowInDays:  windowInDays,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleAnalyticsV4CreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleAnalyticsV4ResourceModel) ToGetSDKType() *shared.SourceGoogleAnalyticsV4CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleAnalyticsV4ResourceModel) ToUpdateSDKType() *shared.SourceGoogleAnalyticsV4PutRequest {
	var credentials *shared.SourceGoogleAnalyticsV4UpdateCredentials
	if r.Configuration.Credentials != nil {
		var sourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth *shared.SourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth
		if r.Configuration.Credentials.AuthenticateViaGoogleOauth != nil {
			accessToken := new(string)
			if !r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.IsUnknown() && !r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.IsNull() {
				*accessToken = r.Configuration.Credentials.AuthenticateViaGoogleOauth.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			clientID := r.Configuration.Credentials.AuthenticateViaGoogleOauth.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.AuthenticateViaGoogleOauth.ClientSecret.ValueString()
			refreshToken := r.Configuration.Credentials.AuthenticateViaGoogleOauth.RefreshToken.ValueString()
			sourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth = &shared.SourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
				RefreshToken: refreshToken,
			}
		}
		if sourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth != nil {
			credentials = &shared.SourceGoogleAnalyticsV4UpdateCredentials{
				SourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth: sourceGoogleAnalyticsV4UpdateAuthenticateViaGoogleOauth,
			}
		}
		var sourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication *shared.SourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication
		if r.Configuration.Credentials.ServiceAccountKeyAuthentication != nil {
			credentialsJSON := r.Configuration.Credentials.ServiceAccountKeyAuthentication.CredentialsJSON.ValueString()
			sourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication = &shared.SourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication{
				CredentialsJSON: credentialsJSON,
			}
		}
		if sourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication != nil {
			credentials = &shared.SourceGoogleAnalyticsV4UpdateCredentials{
				SourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication: sourceGoogleAnalyticsV4UpdateServiceAccountKeyAuthentication,
			}
		}
	}
	customReports := new(string)
	if !r.Configuration.CustomReports.IsUnknown() && !r.Configuration.CustomReports.IsNull() {
		*customReports = r.Configuration.CustomReports.ValueString()
	} else {
		customReports = nil
	}
	startDate := customTypes.MustDateFromString(r.Configuration.StartDate.ValueString())
	viewID := r.Configuration.ViewID.ValueString()
	windowInDays := new(int64)
	if !r.Configuration.WindowInDays.IsUnknown() && !r.Configuration.WindowInDays.IsNull() {
		*windowInDays = r.Configuration.WindowInDays.ValueInt64()
	} else {
		windowInDays = nil
	}
	configuration := shared.SourceGoogleAnalyticsV4Update{
		Credentials:   credentials,
		CustomReports: customReports,
		StartDate:     startDate,
		ViewID:        viewID,
		WindowInDays:  windowInDays,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGoogleAnalyticsV4PutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGoogleAnalyticsV4ResourceModel) ToDeleteSDKType() *shared.SourceGoogleAnalyticsV4CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGoogleAnalyticsV4ResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGoogleAnalyticsV4ResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
