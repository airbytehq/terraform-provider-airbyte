// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceNotionResourceModel) ToCreateSDKType() *shared.SourceNotionCreateRequest {
	var credentials *shared.SourceNotionAuthenticateUsing
	var sourceNotionAuthenticateUsingOAuth20 *shared.SourceNotionAuthenticateUsingOAuth20
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken != nil {
		authType := shared.SourceNotionAuthenticateUsingOAuth20AuthType(r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType.ValueString())
		sourceNotionAuthenticateUsingOAuth20 = &shared.SourceNotionAuthenticateUsingOAuth20{
			AuthType: authType,
		}
	}
	if sourceNotionAuthenticateUsingOAuth20 != nil {
		credentials = &shared.SourceNotionAuthenticateUsing{
			SourceNotionAuthenticateUsingOAuth20: sourceNotionAuthenticateUsingOAuth20,
		}
	}
	var sourceNotionAuthenticateUsingAccessToken *shared.SourceNotionAuthenticateUsingAccessToken
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20 != nil {
		authType1 := shared.SourceNotionAuthenticateUsingAccessTokenAuthType(r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType.ValueString())
		sourceNotionAuthenticateUsingAccessToken = &shared.SourceNotionAuthenticateUsingAccessToken{
			AuthType: authType1,
		}
	}
	if sourceNotionAuthenticateUsingAccessToken != nil {
		credentials = &shared.SourceNotionAuthenticateUsing{
			SourceNotionAuthenticateUsingAccessToken: sourceNotionAuthenticateUsingAccessToken,
		}
	}
	sourceType := shared.SourceNotionNotion(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceNotion{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNotionCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNotionResourceModel) ToGetSDKType() *shared.SourceNotionCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNotionResourceModel) ToUpdateSDKType() *shared.SourceNotionPutRequest {
	var credentials *shared.SourceNotionUpdateAuthenticateUsing
	var sourceNotionUpdateAuthenticateUsingOAuth20 *shared.SourceNotionUpdateAuthenticateUsingOAuth20
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken != nil {
		authType := shared.SourceNotionUpdateAuthenticateUsingOAuth20AuthType(r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType.ValueString())
		sourceNotionUpdateAuthenticateUsingOAuth20 = &shared.SourceNotionUpdateAuthenticateUsingOAuth20{
			AuthType: authType,
		}
	}
	if sourceNotionUpdateAuthenticateUsingOAuth20 != nil {
		credentials = &shared.SourceNotionUpdateAuthenticateUsing{
			SourceNotionUpdateAuthenticateUsingOAuth20: sourceNotionUpdateAuthenticateUsingOAuth20,
		}
	}
	var sourceNotionUpdateAuthenticateUsingAccessToken *shared.SourceNotionUpdateAuthenticateUsingAccessToken
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20 != nil {
		authType1 := shared.SourceNotionUpdateAuthenticateUsingAccessTokenAuthType(r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType.ValueString())
		sourceNotionUpdateAuthenticateUsingAccessToken = &shared.SourceNotionUpdateAuthenticateUsingAccessToken{
			AuthType: authType1,
		}
	}
	if sourceNotionUpdateAuthenticateUsingAccessToken != nil {
		credentials = &shared.SourceNotionUpdateAuthenticateUsing{
			SourceNotionUpdateAuthenticateUsingAccessToken: sourceNotionUpdateAuthenticateUsingAccessToken,
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceNotionUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNotionPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNotionResourceModel) ToDeleteSDKType() *shared.SourceNotionCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceNotionResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceNotionResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
