// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceNotionResourceModel) ToSharedSourceNotionCreateRequest() *shared.SourceNotionCreateRequest {
	var credentials *shared.SourceNotionAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceNotionOAuth20 *shared.SourceNotionOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			sourceNotionOAuth20 = &shared.SourceNotionOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceNotionOAuth20 != nil {
			credentials = &shared.SourceNotionAuthenticationMethod{
				SourceNotionOAuth20: sourceNotionOAuth20,
			}
		}
		var sourceNotionAccessToken *shared.SourceNotionAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			token := r.Configuration.Credentials.AccessToken.Token.ValueString()
			sourceNotionAccessToken = &shared.SourceNotionAccessToken{
				Token: token,
			}
		}
		if sourceNotionAccessToken != nil {
			credentials = &shared.SourceNotionAuthenticationMethod{
				SourceNotionAccessToken: sourceNotionAccessToken,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceNotion{
		Credentials: credentials,
		StartDate:   startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNotionCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNotionResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNotionResourceModel) ToSharedSourceNotionPutRequest() *shared.SourceNotionPutRequest {
	var credentials *shared.SourceNotionUpdateAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceNotionUpdateOAuth20 *shared.SourceNotionUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			sourceNotionUpdateOAuth20 = &shared.SourceNotionUpdateOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceNotionUpdateOAuth20 != nil {
			credentials = &shared.SourceNotionUpdateAuthenticationMethod{
				SourceNotionUpdateOAuth20: sourceNotionUpdateOAuth20,
			}
		}
		var sourceNotionUpdateAccessToken *shared.SourceNotionUpdateAccessToken
		if r.Configuration.Credentials.AccessToken != nil {
			token := r.Configuration.Credentials.AccessToken.Token.ValueString()
			sourceNotionUpdateAccessToken = &shared.SourceNotionUpdateAccessToken{
				Token: token,
			}
		}
		if sourceNotionUpdateAccessToken != nil {
			credentials = &shared.SourceNotionUpdateAuthenticationMethod{
				SourceNotionUpdateAccessToken: sourceNotionUpdateAccessToken,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceNotionUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNotionPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
