// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceFinnworldsResourceModel) ToSharedSourceFinnworldsCreateRequest() *shared.SourceFinnworldsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	list := new(string)
	if !r.Configuration.List.IsUnknown() && !r.Configuration.List.IsNull() {
		*list = r.Configuration.List.ValueString()
	} else {
		list = nil
	}
	listCountriesForBonds := new(string)
	if !r.Configuration.ListCountriesForBonds.IsUnknown() && !r.Configuration.ListCountriesForBonds.IsNull() {
		*listCountriesForBonds = r.Configuration.ListCountriesForBonds.ValueString()
	} else {
		listCountriesForBonds = nil
	}
	var key string
	key = r.Configuration.Key.ValueString()

	var bondType []interface{} = []interface{}{}
	for _, bondTypeItem := range r.Configuration.BondType {
		var bondTypeTmp interface{}
		_ = json.Unmarshal([]byte(bondTypeItem.ValueString()), &bondTypeTmp)
		bondType = append(bondType, bondTypeTmp)
	}
	var countries []interface{} = []interface{}{}
	for _, countriesItem := range r.Configuration.Countries {
		var countriesTmp interface{}
		_ = json.Unmarshal([]byte(countriesItem.ValueString()), &countriesTmp)
		countries = append(countries, countriesTmp)
	}
	var tickers []interface{} = []interface{}{}
	for _, tickersItem := range r.Configuration.Tickers {
		var tickersTmp interface{}
		_ = json.Unmarshal([]byte(tickersItem.ValueString()), &tickersTmp)
		tickers = append(tickers, tickersTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var commodities []interface{} = []interface{}{}
	for _, commoditiesItem := range r.Configuration.Commodities {
		var commoditiesTmp interface{}
		_ = json.Unmarshal([]byte(commoditiesItem.ValueString()), &commoditiesTmp)
		commodities = append(commodities, commoditiesTmp)
	}
	configuration := shared.SourceFinnworlds{
		List:                  list,
		ListCountriesForBonds: listCountriesForBonds,
		Key:                   key,
		BondType:              bondType,
		Countries:             countries,
		Tickers:               tickers,
		StartDate:             startDate,
		Commodities:           commodities,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceFinnworldsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceFinnworldsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceFinnworldsResourceModel) ToSharedSourceFinnworldsPutRequest() *shared.SourceFinnworldsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	list := new(string)
	if !r.Configuration.List.IsUnknown() && !r.Configuration.List.IsNull() {
		*list = r.Configuration.List.ValueString()
	} else {
		list = nil
	}
	listCountriesForBonds := new(string)
	if !r.Configuration.ListCountriesForBonds.IsUnknown() && !r.Configuration.ListCountriesForBonds.IsNull() {
		*listCountriesForBonds = r.Configuration.ListCountriesForBonds.ValueString()
	} else {
		listCountriesForBonds = nil
	}
	var key string
	key = r.Configuration.Key.ValueString()

	var bondType []interface{} = []interface{}{}
	for _, bondTypeItem := range r.Configuration.BondType {
		var bondTypeTmp interface{}
		_ = json.Unmarshal([]byte(bondTypeItem.ValueString()), &bondTypeTmp)
		bondType = append(bondType, bondTypeTmp)
	}
	var countries []interface{} = []interface{}{}
	for _, countriesItem := range r.Configuration.Countries {
		var countriesTmp interface{}
		_ = json.Unmarshal([]byte(countriesItem.ValueString()), &countriesTmp)
		countries = append(countries, countriesTmp)
	}
	var tickers []interface{} = []interface{}{}
	for _, tickersItem := range r.Configuration.Tickers {
		var tickersTmp interface{}
		_ = json.Unmarshal([]byte(tickersItem.ValueString()), &tickersTmp)
		tickers = append(tickers, tickersTmp)
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	var commodities []interface{} = []interface{}{}
	for _, commoditiesItem := range r.Configuration.Commodities {
		var commoditiesTmp interface{}
		_ = json.Unmarshal([]byte(commoditiesItem.ValueString()), &commoditiesTmp)
		commodities = append(commodities, commoditiesTmp)
	}
	configuration := shared.SourceFinnworldsUpdate{
		List:                  list,
		ListCountriesForBonds: listCountriesForBonds,
		Key:                   key,
		BondType:              bondType,
		Countries:             countries,
		Tickers:               tickers,
		StartDate:             startDate,
		Commodities:           commodities,
	}
	out := shared.SourceFinnworldsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
