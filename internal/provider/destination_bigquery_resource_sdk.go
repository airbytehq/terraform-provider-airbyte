// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationBigqueryResourceModel) ToCreateSDKType() *shared.DestinationBigqueryCreateRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := shared.DestinationBigqueryDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	var loadingMethod *shared.DestinationBigqueryLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var destinationBigqueryLoadingMethodStandardInserts *shared.DestinationBigqueryLoadingMethodStandardInserts
		if r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts != nil {
			destinationBigqueryLoadingMethodStandardInserts = &shared.DestinationBigqueryLoadingMethodStandardInserts{}
		}
		if destinationBigqueryLoadingMethodStandardInserts != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryLoadingMethodStandardInserts: destinationBigqueryLoadingMethodStandardInserts,
			}
		}
		var destinationBigqueryLoadingMethodGCSStaging *shared.DestinationBigqueryLoadingMethodGCSStaging
		if r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging != nil {
			var credential shared.DestinationBigqueryLoadingMethodGCSStagingCredential
			var destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey *shared.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey
			if r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret.ValueString()
				destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey = &shared.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey != nil {
				credential = shared.DestinationBigqueryLoadingMethodGCSStagingCredential{
					DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey: destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey,
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.FileBufferCount.IsUnknown() && !r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			gcsBucketName := r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			destinationBigqueryLoadingMethodGCSStaging = &shared.DestinationBigqueryLoadingMethodGCSStaging{
				Credential:           credential,
				FileBufferCount:      fileBufferCount,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if destinationBigqueryLoadingMethodGCSStaging != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryLoadingMethodGCSStaging: destinationBigqueryLoadingMethodGCSStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	rawDataDataset := new(string)
	if !r.Configuration.RawDataDataset.IsUnknown() && !r.Configuration.RawDataDataset.IsNull() {
		*rawDataDataset = r.Configuration.RawDataDataset.ValueString()
	} else {
		rawDataDataset = nil
	}
	transformationPriority := new(shared.DestinationBigqueryTransformationQueryRunType)
	if !r.Configuration.TransformationPriority.IsUnknown() && !r.Configuration.TransformationPriority.IsNull() {
		*transformationPriority = shared.DestinationBigqueryTransformationQueryRunType(r.Configuration.TransformationPriority.ValueString())
	} else {
		transformationPriority = nil
	}
	configuration := shared.DestinationBigquery{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
		RawDataDataset:             rawDataDataset,
		TransformationPriority:     transformationPriority,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryResourceModel) ToGetSDKType() *shared.DestinationBigqueryCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryResourceModel) ToUpdateSDKType() *shared.DestinationBigqueryPutRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := shared.DestinationBigqueryUpdateDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	var loadingMethod *shared.DestinationBigqueryUpdateLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var destinationBigqueryUpdateLoadingMethodStandardInserts *shared.DestinationBigqueryUpdateLoadingMethodStandardInserts
		if r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodStandardInserts != nil {
			destinationBigqueryUpdateLoadingMethodStandardInserts = &shared.DestinationBigqueryUpdateLoadingMethodStandardInserts{}
		}
		if destinationBigqueryUpdateLoadingMethodStandardInserts != nil {
			loadingMethod = &shared.DestinationBigqueryUpdateLoadingMethod{
				DestinationBigqueryUpdateLoadingMethodStandardInserts: destinationBigqueryUpdateLoadingMethodStandardInserts,
			}
		}
		var destinationBigqueryUpdateLoadingMethodGCSStaging *shared.DestinationBigqueryUpdateLoadingMethodGCSStaging
		if r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging != nil {
			var credential shared.DestinationBigqueryUpdateLoadingMethodGCSStagingCredential
			var destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey *shared.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey
			if r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.Credential.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.Credential.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.Credential.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret.ValueString()
				destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey = &shared.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey != nil {
				credential = shared.DestinationBigqueryUpdateLoadingMethodGCSStagingCredential{
					DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey: destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey,
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.FileBufferCount.IsUnknown() && !r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			gcsBucketName := r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.DestinationBigqueryUpdateLoadingMethodGCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			destinationBigqueryUpdateLoadingMethodGCSStaging = &shared.DestinationBigqueryUpdateLoadingMethodGCSStaging{
				Credential:           credential,
				FileBufferCount:      fileBufferCount,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if destinationBigqueryUpdateLoadingMethodGCSStaging != nil {
			loadingMethod = &shared.DestinationBigqueryUpdateLoadingMethod{
				DestinationBigqueryUpdateLoadingMethodGCSStaging: destinationBigqueryUpdateLoadingMethodGCSStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	rawDataDataset := new(string)
	if !r.Configuration.RawDataDataset.IsUnknown() && !r.Configuration.RawDataDataset.IsNull() {
		*rawDataDataset = r.Configuration.RawDataDataset.ValueString()
	} else {
		rawDataDataset = nil
	}
	transformationPriority := new(shared.DestinationBigqueryUpdateTransformationQueryRunType)
	if !r.Configuration.TransformationPriority.IsUnknown() && !r.Configuration.TransformationPriority.IsNull() {
		*transformationPriority = shared.DestinationBigqueryUpdateTransformationQueryRunType(r.Configuration.TransformationPriority.ValueString())
	} else {
		transformationPriority = nil
	}
	configuration := shared.DestinationBigqueryUpdate{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
		RawDataDataset:             rawDataDataset,
		TransformationPriority:     transformationPriority,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryResourceModel) ToDeleteSDKType() *shared.DestinationBigqueryCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationBigqueryResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationBigqueryResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
