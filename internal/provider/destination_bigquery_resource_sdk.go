// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationBigqueryResourceModel) ToSharedDestinationBigqueryCreateRequest() *shared.DestinationBigqueryCreateRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := shared.DestinationBigqueryDatasetLocation(r.Configuration.DatasetLocation.ValueString())
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	var loadingMethod *shared.DestinationBigqueryLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var destinationBigqueryBatchedStandardInserts *shared.DestinationBigqueryBatchedStandardInserts
		if r.Configuration.LoadingMethod.BatchedStandardInserts != nil {
			destinationBigqueryBatchedStandardInserts = &shared.DestinationBigqueryBatchedStandardInserts{}
		}
		if destinationBigqueryBatchedStandardInserts != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryBatchedStandardInserts: destinationBigqueryBatchedStandardInserts,
			}
		}
		var destinationBigqueryGCSStaging *shared.DestinationBigqueryGCSStaging
		if r.Configuration.LoadingMethod.GCSStaging != nil {
			var credential shared.DestinationBigqueryCredential
			var destinationBigqueryHMACKey *shared.DestinationBigqueryHMACKey
			if r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeySecret.ValueString()
				destinationBigqueryHMACKey = &shared.DestinationBigqueryHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryHMACKey != nil {
				credential = shared.DestinationBigqueryCredential{
					DestinationBigqueryHMACKey: destinationBigqueryHMACKey,
				}
			}
			gcsBucketName := r.Configuration.LoadingMethod.GCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.GCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.DestinationBigqueryGCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.DestinationBigqueryGCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			destinationBigqueryGCSStaging = &shared.DestinationBigqueryGCSStaging{
				Credential:           credential,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if destinationBigqueryGCSStaging != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryGCSStaging: destinationBigqueryGCSStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	rawDataDataset := new(string)
	if !r.Configuration.RawDataDataset.IsUnknown() && !r.Configuration.RawDataDataset.IsNull() {
		*rawDataDataset = r.Configuration.RawDataDataset.ValueString()
	} else {
		rawDataDataset = nil
	}
	transformationPriority := new(shared.DestinationBigqueryTransformationQueryRunType)
	if !r.Configuration.TransformationPriority.IsUnknown() && !r.Configuration.TransformationPriority.IsNull() {
		*transformationPriority = shared.DestinationBigqueryTransformationQueryRunType(r.Configuration.TransformationPriority.ValueString())
	} else {
		transformationPriority = nil
	}
	configuration := shared.DestinationBigquery{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		DisableTypeDedupe:          disableTypeDedupe,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
		RawDataDataset:             rawDataDataset,
		TransformationPriority:     transformationPriority,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationBigqueryResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationBigqueryResourceModel) ToSharedDestinationBigqueryPutRequest() *shared.DestinationBigqueryPutRequest {
	bigQueryClientBufferSizeMb := new(int64)
	if !r.Configuration.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.BigQueryClientBufferSizeMb.IsNull() {
		*bigQueryClientBufferSizeMb = r.Configuration.BigQueryClientBufferSizeMb.ValueInt64()
	} else {
		bigQueryClientBufferSizeMb = nil
	}
	credentialsJSON := new(string)
	if !r.Configuration.CredentialsJSON.IsUnknown() && !r.Configuration.CredentialsJSON.IsNull() {
		*credentialsJSON = r.Configuration.CredentialsJSON.ValueString()
	} else {
		credentialsJSON = nil
	}
	datasetID := r.Configuration.DatasetID.ValueString()
	datasetLocation := shared.DatasetLocation(r.Configuration.DatasetLocation.ValueString())
	disableTypeDedupe := new(bool)
	if !r.Configuration.DisableTypeDedupe.IsUnknown() && !r.Configuration.DisableTypeDedupe.IsNull() {
		*disableTypeDedupe = r.Configuration.DisableTypeDedupe.ValueBool()
	} else {
		disableTypeDedupe = nil
	}
	var loadingMethod *shared.LoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var batchedStandardInserts *shared.BatchedStandardInserts
		if r.Configuration.LoadingMethod.BatchedStandardInserts != nil {
			batchedStandardInserts = &shared.BatchedStandardInserts{}
		}
		if batchedStandardInserts != nil {
			loadingMethod = &shared.LoadingMethod{
				BatchedStandardInserts: batchedStandardInserts,
			}
		}
		var gcsStaging *shared.GCSStaging
		if r.Configuration.LoadingMethod.GCSStaging != nil {
			var credential shared.Credential
			var destinationBigqueryUpdateHMACKey *shared.DestinationBigqueryUpdateHMACKey
			if r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey != nil {
				hmacKeyAccessID := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.LoadingMethod.GCSStaging.Credential.HMACKey.HmacKeySecret.ValueString()
				destinationBigqueryUpdateHMACKey = &shared.DestinationBigqueryUpdateHMACKey{
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryUpdateHMACKey != nil {
				credential = shared.Credential{
					DestinationBigqueryUpdateHMACKey: destinationBigqueryUpdateHMACKey,
				}
			}
			gcsBucketName := r.Configuration.LoadingMethod.GCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.LoadingMethod.GCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.GCSTmpFilesAfterwardProcessing)
			if !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.GCSTmpFilesAfterwardProcessing(r.Configuration.LoadingMethod.GCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			gcsStaging = &shared.GCSStaging{
				Credential:           credential,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
			}
		}
		if gcsStaging != nil {
			loadingMethod = &shared.LoadingMethod{
				GCSStaging: gcsStaging,
			}
		}
	}
	projectID := r.Configuration.ProjectID.ValueString()
	rawDataDataset := new(string)
	if !r.Configuration.RawDataDataset.IsUnknown() && !r.Configuration.RawDataDataset.IsNull() {
		*rawDataDataset = r.Configuration.RawDataDataset.ValueString()
	} else {
		rawDataDataset = nil
	}
	transformationPriority := new(shared.TransformationQueryRunType)
	if !r.Configuration.TransformationPriority.IsUnknown() && !r.Configuration.TransformationPriority.IsNull() {
		*transformationPriority = shared.TransformationQueryRunType(r.Configuration.TransformationPriority.ValueString())
	} else {
		transformationPriority = nil
	}
	configuration := shared.DestinationBigqueryUpdate{
		BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
		CredentialsJSON:            credentialsJSON,
		DatasetID:                  datasetID,
		DatasetLocation:            datasetLocation,
		DisableTypeDedupe:          disableTypeDedupe,
		LoadingMethod:              loadingMethod,
		ProjectID:                  projectID,
		RawDataDataset:             rawDataDataset,
		TransformationPriority:     transformationPriority,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationBigqueryPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
