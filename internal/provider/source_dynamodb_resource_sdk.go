// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceDynamodbResourceModel) ToCreateSDKType() *shared.SourceDynamodbCreateRequest {
	accessKeyID := r.Configuration.AccessKeyID.ValueString()
	endpoint := new(string)
	if !r.Configuration.Endpoint.IsUnknown() && !r.Configuration.Endpoint.IsNull() {
		*endpoint = r.Configuration.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	region := new(shared.SourceDynamodbDynamodbRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceDynamodbDynamodbRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	reservedAttributeNames := new(string)
	if !r.Configuration.ReservedAttributeNames.IsUnknown() && !r.Configuration.ReservedAttributeNames.IsNull() {
		*reservedAttributeNames = r.Configuration.ReservedAttributeNames.ValueString()
	} else {
		reservedAttributeNames = nil
	}
	secretAccessKey := r.Configuration.SecretAccessKey.ValueString()
	sourceType := shared.SourceDynamodbDynamodb(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceDynamodb{
		AccessKeyID:            accessKeyID,
		Endpoint:               endpoint,
		Region:                 region,
		ReservedAttributeNames: reservedAttributeNames,
		SecretAccessKey:        secretAccessKey,
		SourceType:             sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceDynamodbCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceDynamodbResourceModel) ToGetSDKType() *shared.SourceDynamodbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceDynamodbResourceModel) ToUpdateSDKType() *shared.SourceDynamodbPutRequest {
	accessKeyID := r.Configuration.AccessKeyID.ValueString()
	endpoint := new(string)
	if !r.Configuration.Endpoint.IsUnknown() && !r.Configuration.Endpoint.IsNull() {
		*endpoint = r.Configuration.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	region := new(shared.SourceDynamodbUpdateDynamodbRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceDynamodbUpdateDynamodbRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	reservedAttributeNames := new(string)
	if !r.Configuration.ReservedAttributeNames.IsUnknown() && !r.Configuration.ReservedAttributeNames.IsNull() {
		*reservedAttributeNames = r.Configuration.ReservedAttributeNames.ValueString()
	} else {
		reservedAttributeNames = nil
	}
	secretAccessKey := r.Configuration.SecretAccessKey.ValueString()
	configuration := shared.SourceDynamodbUpdate{
		AccessKeyID:            accessKeyID,
		Endpoint:               endpoint,
		Region:                 region,
		ReservedAttributeNames: reservedAttributeNames,
		SecretAccessKey:        secretAccessKey,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceDynamodbPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceDynamodbResourceModel) ToDeleteSDKType() *shared.SourceDynamodbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceDynamodbResourceModel) RefreshFromGetResponse(resp *shared.SourceDynamodbGetResponse) {
	r.Configuration.AccessKeyID = types.StringValue(resp.Configuration.AccessKeyID)
	if resp.Configuration.Endpoint != nil {
		r.Configuration.Endpoint = types.StringValue(*resp.Configuration.Endpoint)
	} else {
		r.Configuration.Endpoint = types.StringNull()
	}
	if resp.Configuration.Region != nil {
		r.Configuration.Region = types.StringValue(string(*resp.Configuration.Region))
	} else {
		r.Configuration.Region = types.StringNull()
	}
	if resp.Configuration.ReservedAttributeNames != nil {
		r.Configuration.ReservedAttributeNames = types.StringValue(*resp.Configuration.ReservedAttributeNames)
	} else {
		r.Configuration.ReservedAttributeNames = types.StringNull()
	}
	r.Configuration.SecretAccessKey = types.StringValue(resp.Configuration.SecretAccessKey)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceDynamodbResourceModel) RefreshFromCreateResponse(resp *shared.SourceDynamodbGetResponse) {
	r.RefreshFromGetResponse(resp)
}
