// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceStravaResourceModel) ToCreateSDKType() *shared.SourceStravaCreateRequest {
	athleteID := r.Configuration.AthleteID.ValueInt64()
	authType := new(shared.SourceStravaAuthType)
	if !r.Configuration.AuthType.IsUnknown() && !r.Configuration.AuthType.IsNull() {
		*authType = shared.SourceStravaAuthType(r.Configuration.AuthType.ValueString())
	} else {
		authType = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	refreshToken := r.Configuration.RefreshToken.ValueString()
	sourceType := shared.SourceStravaStrava(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceStrava{
		AthleteID:    athleteID,
		AuthType:     authType,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RefreshToken: refreshToken,
		SourceType:   sourceType,
		StartDate:    startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceStravaCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceStravaResourceModel) ToGetSDKType() *shared.SourceStravaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceStravaResourceModel) ToUpdateSDKType() *shared.SourceStravaPutRequest {
	athleteID := r.Configuration.AthleteID.ValueInt64()
	authType := new(shared.SourceStravaUpdateAuthType)
	if !r.Configuration.AuthType.IsUnknown() && !r.Configuration.AuthType.IsNull() {
		*authType = shared.SourceStravaUpdateAuthType(r.Configuration.AuthType.ValueString())
	} else {
		authType = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	refreshToken := r.Configuration.RefreshToken.ValueString()
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceStravaUpdate{
		AthleteID:    athleteID,
		AuthType:     authType,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RefreshToken: refreshToken,
		StartDate:    startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceStravaPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceStravaResourceModel) ToDeleteSDKType() *shared.SourceStravaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceStravaResourceModel) RefreshFromGetResponse(resp *shared.SourceStravaGetResponse) {
	r.Configuration.AthleteID = types.Int64Value(resp.Configuration.AthleteID)
	if resp.Configuration.AuthType != nil {
		r.Configuration.AuthType = types.StringValue(string(*resp.Configuration.AuthType))
	} else {
		r.Configuration.AuthType = types.StringNull()
	}
	r.Configuration.ClientID = types.StringValue(resp.Configuration.ClientID)
	r.Configuration.ClientSecret = types.StringValue(resp.Configuration.ClientSecret)
	r.Configuration.RefreshToken = types.StringValue(resp.Configuration.RefreshToken)
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceStravaResourceModel) RefreshFromCreateResponse(resp *shared.SourceStravaGetResponse) {
	r.RefreshFromGetResponse(resp)
}
