// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk"
	"airbyte/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SourceGnewsDataSource{}
var _ datasource.DataSourceWithConfigure = &SourceGnewsDataSource{}

func NewSourceGnewsDataSource() datasource.DataSource {
	return &SourceGnewsDataSource{}
}

// SourceGnewsDataSource is the data source implementation.
type SourceGnewsDataSource struct {
	client *sdk.SDK
}

// SourceGnewsDataSourceModel describes the data model.
type SourceGnewsDataSourceModel struct {
	Configuration SourceGnews  `tfsdk:"configuration"`
	Name          types.String `tfsdk:"name"`
	SecretID      types.String `tfsdk:"secret_id"`
	SourceID      types.String `tfsdk:"source_id"`
	WorkspaceID   types.String `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *SourceGnewsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_gnews"
}

// Schema defines the schema for the data source.
func (r *SourceGnewsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceGnews DataSource",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"api_key": schema.StringAttribute{
						Computed:    true,
						Description: `API Key`,
					},
					"country": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"au",
								"br",
								"ca",
								"cn",
								"eg",
								"fr",
								"de",
								"gr",
								"hk",
								"in",
								"ie",
								"il",
								"it",
								"jp",
								"nl",
								"no",
								"pk",
								"pe",
								"ph",
								"pt",
								"ro",
								"ru",
								"sg",
								"es",
								"se",
								"ch",
								"tw",
								"ua",
								"gb",
								"us",
							),
						},
						MarkdownDescription: `must be one of ["au", "br", "ca", "cn", "eg", "fr", "de", "gr", "hk", "in", "ie", "il", "it", "jp", "nl", "no", "pk", "pe", "ph", "pt", "ro", "ru", "sg", "es", "se", "ch", "tw", "ua", "gb", "us"]` + "\n" +
							`This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.`,
					},
					"end_date": schema.StringAttribute{
						Computed:    true,
						Description: `This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)`,
					},
					"in": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.`,
					},
					"language": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"ar",
								"zh",
								"nl",
								"en",
								"fr",
								"de",
								"el",
								"he",
								"hi",
								"it",
								"ja",
								"ml",
								"mr",
								"no",
								"pt",
								"ro",
								"ru",
								"es",
								"sv",
								"ta",
								"te",
								"uk",
							),
						},
						Description: `must be one of ["ar", "zh", "nl", "en", "fr", "de", "el", "he", "hi", "it", "ja", "ml", "mr", "no", "pt", "ro", "ru", "es", "sv", "ta", "te", "uk"]`,
					},
					"nullable": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes`,
					},
					"query": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by ` + "\n" +
							`  quotation marks are used to search for articles with the exact same keyword sequence. ` + "\n" +
							`  For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.` + "\n" +
							`- Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article` + "\n" +
							`  search. By default the space character acts as an AND operator, it is possible to replace the space character ` + "\n" +
							`  by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft` + "\n" +
							`- Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.` + "\n" +
							`  It is important to note that this operator has a higher precedence than the AND operator. For example the ` + "\n" +
							`  query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching ` + "\n" +
							`  the keyword Microsoft` + "\n" +
							`- Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the` + "\n" +
							`  specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.` + "\n" +
							`  For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword` + "\n" +
							`  iPhone`,
					},
					"sortby": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"publishedAt",
								"relevance",
							),
						},
						MarkdownDescription: `must be one of ["publishedAt", "relevance"]` + "\n" +
							`This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:` + "\n" +
							`  - publishedAt = sort by publication date, the articles with the most recent publication date are returned first` + "\n" +
							`  - relevance = sort by best match to keywords, the articles with the best match are returned first`,
					},
					"source_type": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"gnews",
							),
						},
						Description: `must be one of ["gnews"]`,
					},
					"start_date": schema.StringAttribute{
						Computed:    true,
						Description: `This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)`,
					},
					"top_headlines_query": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by ` + "\n" +
							`  quotation marks are used to search for articles with the exact same keyword sequence. ` + "\n" +
							`  For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.` + "\n" +
							`- Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article` + "\n" +
							`  search. By default the space character acts as an AND operator, it is possible to replace the space character ` + "\n" +
							`  by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft` + "\n" +
							`- Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.` + "\n" +
							`  It is important to note that this operator has a higher precedence than the AND operator. For example the ` + "\n" +
							`  query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching ` + "\n" +
							`  the keyword Microsoft` + "\n" +
							`- Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the` + "\n" +
							`  specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.` + "\n" +
							`  For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword` + "\n" +
							`  iPhone`,
					},
					"top_headlines_topic": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"breaking-news",
								"world",
								"nation",
								"business",
								"technology",
								"entertainment",
								"sports",
								"science",
								"health",
							),
						},
						MarkdownDescription: `must be one of ["breaking-news", "world", "nation", "business", "technology", "entertainment", "sports", "science", "health"]` + "\n" +
							`This parameter allows you to change the category for the request.`,
					},
				},
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"secret_id": schema.StringAttribute{
				Optional:    true,
				Description: `Optional secretID obtained through the public API OAuth redirect flow.`,
			},
			"source_id": schema.StringAttribute{
				Required: true,
			},
			"workspace_id": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *SourceGnewsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceGnewsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SourceGnewsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	sourceID := data.SourceID.ValueString()
	request := operations.GetSourceGnewsRequest{
		SourceID: sourceID,
	}
	res, err := r.client.Sources.GetSourceGnews(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
