// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSmartsheetsResourceModel) ToSharedSourceSmartsheetsCreateRequest() *shared.SourceSmartsheetsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceSmartsheetsAuthorizationMethod
	var sourceSmartsheetsOAuth20 *shared.SourceSmartsheetsOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		sourceSmartsheetsOAuth20 = &shared.SourceSmartsheetsOAuth20{
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			AccessToken:     accessToken,
			TokenExpiryDate: tokenExpiryDate,
			RefreshToken:    refreshToken,
		}
	}
	if sourceSmartsheetsOAuth20 != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			SourceSmartsheetsOAuth20: sourceSmartsheetsOAuth20,
		}
	}
	var apiAccessToken *shared.APIAccessToken
	if r.Configuration.Credentials.APIAccessToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.APIAccessToken.AccessToken.ValueString()

		apiAccessToken = &shared.APIAccessToken{
			AccessToken: accessToken1,
		}
	}
	if apiAccessToken != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			APIAccessToken: apiAccessToken,
		}
	}
	var spreadsheetID string
	spreadsheetID = r.Configuration.SpreadsheetID.ValueString()

	var metadataFields []shared.Validenums = []shared.Validenums{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.Validenums(metadataFieldsItem.ValueString()))
	}
	configuration := shared.SourceSmartsheets{
		Credentials:    credentials,
		SpreadsheetID:  spreadsheetID,
		MetadataFields: metadataFields,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceSmartsheetsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceSmartsheetsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSmartsheetsResourceModel) ToSharedSourceSmartsheetsPutRequest() *shared.SourceSmartsheetsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials shared.SourceSmartsheetsUpdateAuthorizationMethod
	var sourceSmartsheetsUpdateOAuth20 *shared.SourceSmartsheetsUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		var clientID string
		clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()

		var accessToken string
		accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		var refreshToken string
		refreshToken = r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()

		sourceSmartsheetsUpdateOAuth20 = &shared.SourceSmartsheetsUpdateOAuth20{
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			AccessToken:     accessToken,
			TokenExpiryDate: tokenExpiryDate,
			RefreshToken:    refreshToken,
		}
	}
	if sourceSmartsheetsUpdateOAuth20 != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			SourceSmartsheetsUpdateOAuth20: sourceSmartsheetsUpdateOAuth20,
		}
	}
	var sourceSmartsheetsUpdateAPIAccessToken *shared.SourceSmartsheetsUpdateAPIAccessToken
	if r.Configuration.Credentials.APIAccessToken != nil {
		var accessToken1 string
		accessToken1 = r.Configuration.Credentials.APIAccessToken.AccessToken.ValueString()

		sourceSmartsheetsUpdateAPIAccessToken = &shared.SourceSmartsheetsUpdateAPIAccessToken{
			AccessToken: accessToken1,
		}
	}
	if sourceSmartsheetsUpdateAPIAccessToken != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			SourceSmartsheetsUpdateAPIAccessToken: sourceSmartsheetsUpdateAPIAccessToken,
		}
	}
	var spreadsheetID string
	spreadsheetID = r.Configuration.SpreadsheetID.ValueString()

	var metadataFields []shared.SourceSmartsheetsUpdateValidenums = []shared.SourceSmartsheetsUpdateValidenums{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.SourceSmartsheetsUpdateValidenums(metadataFieldsItem.ValueString()))
	}
	configuration := shared.SourceSmartsheetsUpdate{
		Credentials:    credentials,
		SpreadsheetID:  spreadsheetID,
		MetadataFields: metadataFields,
	}
	out := shared.SourceSmartsheetsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
