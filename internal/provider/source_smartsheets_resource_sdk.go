// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSmartsheetsResourceModel) ToSharedSourceSmartsheetsCreateRequest() *shared.SourceSmartsheetsCreateRequest {
	var credentials shared.SourceSmartsheetsAuthorizationMethod
	var sourceSmartsheetsOAuth20 *shared.SourceSmartsheetsOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
		clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceSmartsheetsOAuth20 = &shared.SourceSmartsheetsOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSmartsheetsOAuth20 != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			SourceSmartsheetsOAuth20: sourceSmartsheetsOAuth20,
		}
	}
	var sourceSmartsheetsAPIAccessToken *shared.SourceSmartsheetsAPIAccessToken
	if r.Configuration.Credentials.APIAccessToken != nil {
		accessToken1 := r.Configuration.Credentials.APIAccessToken.AccessToken.ValueString()
		sourceSmartsheetsAPIAccessToken = &shared.SourceSmartsheetsAPIAccessToken{
			AccessToken: accessToken1,
		}
	}
	if sourceSmartsheetsAPIAccessToken != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			SourceSmartsheetsAPIAccessToken: sourceSmartsheetsAPIAccessToken,
		}
	}
	var metadataFields []shared.SourceSmartsheetsValidenums = []shared.SourceSmartsheetsValidenums{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.SourceSmartsheetsValidenums(metadataFieldsItem.ValueString()))
	}
	spreadsheetID := r.Configuration.SpreadsheetID.ValueString()
	configuration := shared.SourceSmartsheets{
		Credentials:    credentials,
		MetadataFields: metadataFields,
		SpreadsheetID:  spreadsheetID,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSmartsheetsCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSmartsheetsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceSmartsheetsResourceModel) ToSharedSourceSmartsheetsPutRequest() *shared.SourceSmartsheetsPutRequest {
	var credentials shared.SourceSmartsheetsUpdateAuthorizationMethod
	var sourceSmartsheetsUpdateOAuth20 *shared.SourceSmartsheetsUpdateOAuth20
	if r.Configuration.Credentials.OAuth20 != nil {
		accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
		clientID := r.Configuration.Credentials.OAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.OAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.OAuth20.TokenExpiryDate.ValueString())
		sourceSmartsheetsUpdateOAuth20 = &shared.SourceSmartsheetsUpdateOAuth20{
			AccessToken:     accessToken,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSmartsheetsUpdateOAuth20 != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			SourceSmartsheetsUpdateOAuth20: sourceSmartsheetsUpdateOAuth20,
		}
	}
	var apiAccessToken *shared.APIAccessToken
	if r.Configuration.Credentials.APIAccessToken != nil {
		accessToken1 := r.Configuration.Credentials.APIAccessToken.AccessToken.ValueString()
		apiAccessToken = &shared.APIAccessToken{
			AccessToken: accessToken1,
		}
	}
	if apiAccessToken != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			APIAccessToken: apiAccessToken,
		}
	}
	var metadataFields []shared.Validenums = []shared.Validenums{}
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.Validenums(metadataFieldsItem.ValueString()))
	}
	spreadsheetID := r.Configuration.SpreadsheetID.ValueString()
	configuration := shared.SourceSmartsheetsUpdate{
		Credentials:    credentials,
		MetadataFields: metadataFields,
		SpreadsheetID:  spreadsheetID,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSmartsheetsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
