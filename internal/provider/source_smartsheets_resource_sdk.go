// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSmartsheetsResourceModel) ToCreateSDKType() *shared.SourceSmartsheetsCreateRequest {
	var credentials shared.SourceSmartsheetsAuthorizationMethod
	var sourceSmartsheetsAuthorizationMethodOAuth20 *shared.SourceSmartsheetsAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken.ValueString()
		authType := new(shared.SourceSmartsheetsAuthorizationMethodOAuth20AuthType)
		if !r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.IsNull() {
			*authType = shared.SourceSmartsheetsAuthorizationMethodOAuth20AuthType(r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.ValueString())
		} else {
			authType = nil
		}
		clientID := r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate.ValueString())
		sourceSmartsheetsAuthorizationMethodOAuth20 = &shared.SourceSmartsheetsAuthorizationMethodOAuth20{
			AccessToken:     accessToken,
			AuthType:        authType,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSmartsheetsAuthorizationMethodOAuth20 != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			SourceSmartsheetsAuthorizationMethodOAuth20: sourceSmartsheetsAuthorizationMethodOAuth20,
		}
	}
	var sourceSmartsheetsAuthorizationMethodAPIAccessToken *shared.SourceSmartsheetsAuthorizationMethodAPIAccessToken
	if r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
		accessToken1 := r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken.ValueString()
		authType1 := new(shared.SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType)
		if !r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.IsNull() {
			*authType1 = shared.SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType(r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		sourceSmartsheetsAuthorizationMethodAPIAccessToken = &shared.SourceSmartsheetsAuthorizationMethodAPIAccessToken{
			AccessToken: accessToken1,
			AuthType:    authType1,
		}
	}
	if sourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
		credentials = shared.SourceSmartsheetsAuthorizationMethod{
			SourceSmartsheetsAuthorizationMethodAPIAccessToken: sourceSmartsheetsAuthorizationMethodAPIAccessToken,
		}
	}
	var metadataFields []shared.SourceSmartsheetsValidenums = nil
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.SourceSmartsheetsValidenums(metadataFieldsItem.ValueString()))
	}
	sourceType := shared.SourceSmartsheetsSmartsheets(r.Configuration.SourceType.ValueString())
	spreadsheetID := r.Configuration.SpreadsheetID.ValueString()
	startDatetime := new(time.Time)
	if !r.Configuration.StartDatetime.IsUnknown() && !r.Configuration.StartDatetime.IsNull() {
		*startDatetime, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDatetime.ValueString())
	} else {
		startDatetime = nil
	}
	configuration := shared.SourceSmartsheets{
		Credentials:    credentials,
		MetadataFields: metadataFields,
		SourceType:     sourceType,
		SpreadsheetID:  spreadsheetID,
		StartDatetime:  startDatetime,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSmartsheetsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSmartsheetsResourceModel) ToGetSDKType() *shared.SourceSmartsheetsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSmartsheetsResourceModel) ToUpdateSDKType() *shared.SourceSmartsheetsPutRequest {
	var credentials shared.SourceSmartsheetsUpdateAuthorizationMethod
	var sourceSmartsheetsUpdateAuthorizationMethodOAuth20 *shared.SourceSmartsheetsUpdateAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.AccessToken.ValueString()
		authType := new(shared.SourceSmartsheetsUpdateAuthorizationMethodOAuth20AuthType)
		if !r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.AuthType.IsNull() {
			*authType = shared.SourceSmartsheetsUpdateAuthorizationMethodOAuth20AuthType(r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.AuthType.ValueString())
		} else {
			authType = nil
		}
		clientID := r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20.TokenExpiryDate.ValueString())
		sourceSmartsheetsUpdateAuthorizationMethodOAuth20 = &shared.SourceSmartsheetsUpdateAuthorizationMethodOAuth20{
			AccessToken:     accessToken,
			AuthType:        authType,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSmartsheetsUpdateAuthorizationMethodOAuth20 != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			SourceSmartsheetsUpdateAuthorizationMethodOAuth20: sourceSmartsheetsUpdateAuthorizationMethodOAuth20,
		}
	}
	var sourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken *shared.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken
	if r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken != nil {
		accessToken1 := r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken.AccessToken.ValueString()
		authType1 := new(shared.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessTokenAuthType)
		if !r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken.AuthType.IsNull() {
			*authType1 = shared.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessTokenAuthType(r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		sourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken = &shared.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken{
			AccessToken: accessToken1,
			AuthType:    authType1,
		}
	}
	if sourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken != nil {
		credentials = shared.SourceSmartsheetsUpdateAuthorizationMethod{
			SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken: sourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken,
		}
	}
	var metadataFields []shared.SourceSmartsheetsUpdateValidenums = nil
	for _, metadataFieldsItem := range r.Configuration.MetadataFields {
		metadataFields = append(metadataFields, shared.SourceSmartsheetsUpdateValidenums(metadataFieldsItem.ValueString()))
	}
	spreadsheetID := r.Configuration.SpreadsheetID.ValueString()
	startDatetime := new(time.Time)
	if !r.Configuration.StartDatetime.IsUnknown() && !r.Configuration.StartDatetime.IsNull() {
		*startDatetime, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDatetime.ValueString())
	} else {
		startDatetime = nil
	}
	configuration := shared.SourceSmartsheetsUpdate{
		Credentials:    credentials,
		MetadataFields: metadataFields,
		SpreadsheetID:  spreadsheetID,
		StartDatetime:  startDatetime,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSmartsheetsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSmartsheetsResourceModel) ToDeleteSDKType() *shared.SourceSmartsheetsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSmartsheetsResourceModel) RefreshFromGetResponse(resp *shared.SourceSmartsheetsGetResponse) {
	if resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken = &SourceGitlabAuthorizationMethodPrivateToken{}
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken)
		if resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType != nil {
			r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType = types.StringValue(string(*resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType))
		} else {
			r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType = types.StringNull()
		}
	}
	if resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 != nil {
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 = &SourceGitlabAuthorizationMethodOAuth20{}
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken)
		if resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType != nil {
			r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType))
		} else {
			r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType = types.StringNull()
		}
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID)
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret)
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken)
		r.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate = types.StringValue(resp.Configuration.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate.Format(time.RFC3339))
	}
	if resp.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken != nil {
		r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodAPIAccessToken = &SourceGitlabAuthorizationMethodPrivateToken{}
	}
	if resp.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20 != nil {
		r.Configuration.Credentials.SourceSmartsheetsUpdateAuthorizationMethodOAuth20 = &SourceGitlabAuthorizationMethodOAuth20{}
	}
	r.Configuration.MetadataFields = nil
	for _, v := range resp.Configuration.MetadataFields {
		r.Configuration.MetadataFields = append(r.Configuration.MetadataFields, types.StringValue(string(v)))
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.SpreadsheetID = types.StringValue(resp.Configuration.SpreadsheetID)
	if resp.Configuration.StartDatetime != nil {
		r.Configuration.StartDatetime = types.StringValue(resp.Configuration.StartDatetime.Format(time.RFC3339))
	} else {
		r.Configuration.StartDatetime = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSmartsheetsResourceModel) RefreshFromCreateResponse(resp *shared.SourceSmartsheetsGetResponse) {
	r.RefreshFromGetResponse(resp)
}
