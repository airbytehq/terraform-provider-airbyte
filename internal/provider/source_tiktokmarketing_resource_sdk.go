// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceTiktokMarketingResourceModel) ToSharedSourceTiktokMarketingCreateRequest() *shared.SourceTiktokMarketingCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceTiktokMarketingAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceTiktokMarketingOAuth20 *shared.SourceTiktokMarketingOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var appID string
			appID = r.Configuration.Credentials.OAuth20.AppID.ValueString()

			var secret string
			secret = r.Configuration.Credentials.OAuth20.Secret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			advertiserID := new(string)
			if !r.Configuration.Credentials.OAuth20.AdvertiserID.IsUnknown() && !r.Configuration.Credentials.OAuth20.AdvertiserID.IsNull() {
				*advertiserID = r.Configuration.Credentials.OAuth20.AdvertiserID.ValueString()
			} else {
				advertiserID = nil
			}
			sourceTiktokMarketingOAuth20 = &shared.SourceTiktokMarketingOAuth20{
				AppID:        appID,
				Secret:       secret,
				AccessToken:  accessToken,
				AdvertiserID: advertiserID,
			}
		}
		if sourceTiktokMarketingOAuth20 != nil {
			credentials = &shared.SourceTiktokMarketingAuthenticationMethod{
				SourceTiktokMarketingOAuth20: sourceTiktokMarketingOAuth20,
			}
		}
		var sandboxAccessToken *shared.SandboxAccessToken
		if r.Configuration.Credentials.SandboxAccessToken != nil {
			var advertiserId1 string
			advertiserId1 = r.Configuration.Credentials.SandboxAccessToken.AdvertiserID.ValueString()

			var accessToken1 string
			accessToken1 = r.Configuration.Credentials.SandboxAccessToken.AccessToken.ValueString()

			sandboxAccessToken = &shared.SandboxAccessToken{
				AdvertiserID: advertiserId1,
				AccessToken:  accessToken1,
			}
		}
		if sandboxAccessToken != nil {
			credentials = &shared.SourceTiktokMarketingAuthenticationMethod{
				SandboxAccessToken: sandboxAccessToken,
			}
		}
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	includeDeleted := new(bool)
	if !r.Configuration.IncludeDeleted.IsUnknown() && !r.Configuration.IncludeDeleted.IsNull() {
		*includeDeleted = r.Configuration.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	configuration := shared.SourceTiktokMarketing{
		Credentials:       credentials,
		StartDate:         startDate,
		EndDate:           endDate,
		AttributionWindow: attributionWindow,
		IncludeDeleted:    includeDeleted,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceTiktokMarketingCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceTiktokMarketingResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceTiktokMarketingResourceModel) ToSharedSourceTiktokMarketingPutRequest() *shared.SourceTiktokMarketingPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceTiktokMarketingUpdateAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceTiktokMarketingUpdateOAuth20 *shared.SourceTiktokMarketingUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			var appID string
			appID = r.Configuration.Credentials.OAuth20.AppID.ValueString()

			var secret string
			secret = r.Configuration.Credentials.OAuth20.Secret.ValueString()

			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			advertiserID := new(string)
			if !r.Configuration.Credentials.OAuth20.AdvertiserID.IsUnknown() && !r.Configuration.Credentials.OAuth20.AdvertiserID.IsNull() {
				*advertiserID = r.Configuration.Credentials.OAuth20.AdvertiserID.ValueString()
			} else {
				advertiserID = nil
			}
			sourceTiktokMarketingUpdateOAuth20 = &shared.SourceTiktokMarketingUpdateOAuth20{
				AppID:        appID,
				Secret:       secret,
				AccessToken:  accessToken,
				AdvertiserID: advertiserID,
			}
		}
		if sourceTiktokMarketingUpdateOAuth20 != nil {
			credentials = &shared.SourceTiktokMarketingUpdateAuthenticationMethod{
				SourceTiktokMarketingUpdateOAuth20: sourceTiktokMarketingUpdateOAuth20,
			}
		}
		var sourceTiktokMarketingUpdateSandboxAccessToken *shared.SourceTiktokMarketingUpdateSandboxAccessToken
		if r.Configuration.Credentials.SandboxAccessToken != nil {
			var advertiserId1 string
			advertiserId1 = r.Configuration.Credentials.SandboxAccessToken.AdvertiserID.ValueString()

			var accessToken1 string
			accessToken1 = r.Configuration.Credentials.SandboxAccessToken.AccessToken.ValueString()

			sourceTiktokMarketingUpdateSandboxAccessToken = &shared.SourceTiktokMarketingUpdateSandboxAccessToken{
				AdvertiserID: advertiserId1,
				AccessToken:  accessToken1,
			}
		}
		if sourceTiktokMarketingUpdateSandboxAccessToken != nil {
			credentials = &shared.SourceTiktokMarketingUpdateAuthenticationMethod{
				SourceTiktokMarketingUpdateSandboxAccessToken: sourceTiktokMarketingUpdateSandboxAccessToken,
			}
		}
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	includeDeleted := new(bool)
	if !r.Configuration.IncludeDeleted.IsUnknown() && !r.Configuration.IncludeDeleted.IsNull() {
		*includeDeleted = r.Configuration.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	configuration := shared.SourceTiktokMarketingUpdate{
		Credentials:       credentials,
		StartDate:         startDate,
		EndDate:           endDate,
		AttributionWindow: attributionWindow,
		IncludeDeleted:    includeDeleted,
	}
	out := shared.SourceTiktokMarketingPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
