// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceTiktokMarketingResourceModel) ToCreateSDKType() *shared.SourceTiktokMarketingCreateRequest {
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	var credentials *shared.SourceTiktokMarketingAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceTiktokMarketingAuthenticationMethodOAuth20 *shared.SourceTiktokMarketingAuthenticationMethodOAuth20
		if r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken.ValueString()
			advertiserID := new(string)
			if !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.IsNull() {
				*advertiserID = r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.ValueString()
			} else {
				advertiserID = nil
			}
			appID := r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID.ValueString()
			authType := new(shared.SourceTiktokMarketingAuthenticationMethodOAuth20AuthType)
			if !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.IsNull() {
				*authType = shared.SourceTiktokMarketingAuthenticationMethodOAuth20AuthType(r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.ValueString())
			} else {
				authType = nil
			}
			secret := r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret.ValueString()
			sourceTiktokMarketingAuthenticationMethodOAuth20 = &shared.SourceTiktokMarketingAuthenticationMethodOAuth20{
				AccessToken:  accessToken,
				AdvertiserID: advertiserID,
				AppID:        appID,
				AuthType:     authType,
				Secret:       secret,
			}
		}
		if sourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
			credentials = &shared.SourceTiktokMarketingAuthenticationMethod{
				SourceTiktokMarketingAuthenticationMethodOAuth20: sourceTiktokMarketingAuthenticationMethodOAuth20,
			}
		}
		var sourceTiktokMarketingAuthenticationMethodSandboxAccessToken *shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken
		if r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
			accessToken1 := r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken.ValueString()
			advertiserId1 := r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID.ValueString()
			authType1 := new(shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthType)
			if !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.IsNull() {
				*authType1 = shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthType(r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.ValueString())
			} else {
				authType1 = nil
			}
			sourceTiktokMarketingAuthenticationMethodSandboxAccessToken = &shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken{
				AccessToken:  accessToken1,
				AdvertiserID: advertiserId1,
				AuthType:     authType1,
			}
		}
		if sourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
			credentials = &shared.SourceTiktokMarketingAuthenticationMethod{
				SourceTiktokMarketingAuthenticationMethodSandboxAccessToken: sourceTiktokMarketingAuthenticationMethodSandboxAccessToken,
			}
		}
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	includeDeleted := new(bool)
	if !r.Configuration.IncludeDeleted.IsUnknown() && !r.Configuration.IncludeDeleted.IsNull() {
		*includeDeleted = r.Configuration.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	sourceType := new(shared.SourceTiktokMarketingTiktokMarketing)
	if !r.Configuration.SourceType.IsUnknown() && !r.Configuration.SourceType.IsNull() {
		*sourceType = shared.SourceTiktokMarketingTiktokMarketing(r.Configuration.SourceType.ValueString())
	} else {
		sourceType = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTiktokMarketing{
		AttributionWindow: attributionWindow,
		Credentials:       credentials,
		EndDate:           endDate,
		IncludeDeleted:    includeDeleted,
		SourceType:        sourceType,
		StartDate:         startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTiktokMarketingCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceTiktokMarketingResourceModel) ToGetSDKType() *shared.SourceTiktokMarketingCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceTiktokMarketingResourceModel) ToUpdateSDKType() *shared.SourceTiktokMarketingPutRequest {
	attributionWindow := new(int64)
	if !r.Configuration.AttributionWindow.IsUnknown() && !r.Configuration.AttributionWindow.IsNull() {
		*attributionWindow = r.Configuration.AttributionWindow.ValueInt64()
	} else {
		attributionWindow = nil
	}
	var credentials *shared.SourceTiktokMarketingUpdateAuthenticationMethod
	if r.Configuration.Credentials != nil {
		var sourceTiktokMarketingUpdateAuthenticationMethodOAuth20 *shared.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20
		if r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AccessToken.ValueString()
			advertiserID := new(string)
			if !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AdvertiserID.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AdvertiserID.IsNull() {
				*advertiserID = r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AdvertiserID.ValueString()
			} else {
				advertiserID = nil
			}
			appID := r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AppID.ValueString()
			authType := new(shared.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType)
			if !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AuthType.IsNull() {
				*authType = shared.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType(r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.AuthType.ValueString())
			} else {
				authType = nil
			}
			secret := r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20.Secret.ValueString()
			sourceTiktokMarketingUpdateAuthenticationMethodOAuth20 = &shared.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20{
				AccessToken:  accessToken,
				AdvertiserID: advertiserID,
				AppID:        appID,
				AuthType:     authType,
				Secret:       secret,
			}
		}
		if sourceTiktokMarketingUpdateAuthenticationMethodOAuth20 != nil {
			credentials = &shared.SourceTiktokMarketingUpdateAuthenticationMethod{
				SourceTiktokMarketingUpdateAuthenticationMethodOAuth20: sourceTiktokMarketingUpdateAuthenticationMethodOAuth20,
			}
		}
		var sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken *shared.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken
		if r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken != nil {
			accessToken1 := r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.AccessToken.ValueString()
			advertiserId1 := r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.AdvertiserID.ValueString()
			authType1 := new(shared.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType)
			if !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.AuthType.IsNull() {
				*authType1 = shared.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType(r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken.AuthType.ValueString())
			} else {
				authType1 = nil
			}
			sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken = &shared.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken{
				AccessToken:  accessToken1,
				AdvertiserID: advertiserId1,
				AuthType:     authType1,
			}
		}
		if sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken != nil {
			credentials = &shared.SourceTiktokMarketingUpdateAuthenticationMethod{
				SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken: sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken,
			}
		}
	}
	endDate := new(customTypes.Date)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		endDate = customTypes.MustNewDateFromString(r.Configuration.EndDate.ValueString())
	} else {
		endDate = nil
	}
	includeDeleted := new(bool)
	if !r.Configuration.IncludeDeleted.IsUnknown() && !r.Configuration.IncludeDeleted.IsNull() {
		*includeDeleted = r.Configuration.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceTiktokMarketingUpdate{
		AttributionWindow: attributionWindow,
		Credentials:       credentials,
		EndDate:           endDate,
		IncludeDeleted:    includeDeleted,
		StartDate:         startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceTiktokMarketingPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceTiktokMarketingResourceModel) ToDeleteSDKType() *shared.SourceTiktokMarketingCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceTiktokMarketingResourceModel) RefreshFromGetResponse(resp *shared.SourceTiktokMarketingGetResponse) {
	if resp.Configuration.AttributionWindow != nil {
		r.Configuration.AttributionWindow = types.Int64Value(*resp.Configuration.AttributionWindow)
	} else {
		r.Configuration.AttributionWindow = types.Int64Null()
	}
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceTiktokMarketingAuthenticationMethod{}
		if resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 = &SourceTiktokMarketingAuthenticationMethodOAuth20{}
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken)
			if resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID != nil {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID = types.StringValue(*resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID)
			} else {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID = types.StringNull()
			}
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID = types.StringValue(resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID)
			if resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType != nil {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType))
			} else {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType = types.StringNull()
			}
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret = types.StringValue(resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret)
		}
		if resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken = &SourceTiktokMarketingAuthenticationMethodSandboxAccessToken{}
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken)
			r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID = types.StringValue(resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID)
			if resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType != nil {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType = types.StringValue(string(*resp.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType))
			} else {
				r.Configuration.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 != nil {
			r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 = &SourceTiktokMarketingAuthenticationMethodOAuth20{}
		}
		if resp.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken != nil {
			r.Configuration.Credentials.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken = &SourceTiktokMarketingAuthenticationMethodSandboxAccessToken{}
		}
	}
	if resp.Configuration.EndDate != nil {
		r.Configuration.EndDate = types.StringValue(resp.Configuration.EndDate.String())
	} else {
		r.Configuration.EndDate = types.StringNull()
	}
	if resp.Configuration.IncludeDeleted != nil {
		r.Configuration.IncludeDeleted = types.BoolValue(*resp.Configuration.IncludeDeleted)
	} else {
		r.Configuration.IncludeDeleted = types.BoolNull()
	}
	if resp.Configuration.SourceType != nil {
		r.Configuration.SourceType = types.StringValue(string(*resp.Configuration.SourceType))
	} else {
		r.Configuration.SourceType = types.StringNull()
	}
	if resp.Configuration.StartDate != nil {
		r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.String())
	} else {
		r.Configuration.StartDate = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceTiktokMarketingResourceModel) RefreshFromCreateResponse(resp *shared.SourceTiktokMarketingGetResponse) {
	r.RefreshFromGetResponse(resp)
}
