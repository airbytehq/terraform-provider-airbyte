// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceGooglePagespeedInsightsResourceModel) ToCreateSDKType() *shared.SourceGooglePagespeedInsightsCreateRequest {
	apiKey := new(string)
	if !r.Configuration.APIKey.IsUnknown() && !r.Configuration.APIKey.IsNull() {
		*apiKey = r.Configuration.APIKey.ValueString()
	} else {
		apiKey = nil
	}
	categories := make([]shared.SourceGooglePagespeedInsightsCategories, 0)
	for _, categoriesItem := range r.Configuration.Categories {
		categories = append(categories, shared.SourceGooglePagespeedInsightsCategories(categoriesItem.ValueString()))
	}
	sourceType := shared.SourceGooglePagespeedInsightsGooglePagespeedInsights(r.Configuration.SourceType.ValueString())
	strategies := make([]shared.SourceGooglePagespeedInsightsStrategies, 0)
	for _, strategiesItem := range r.Configuration.Strategies {
		strategies = append(strategies, shared.SourceGooglePagespeedInsightsStrategies(strategiesItem.ValueString()))
	}
	urls := make([]string, 0)
	for _, urlsItem := range r.Configuration.Urls {
		urls = append(urls, urlsItem.ValueString())
	}
	configuration := shared.SourceGooglePagespeedInsights{
		APIKey:     apiKey,
		Categories: categories,
		SourceType: sourceType,
		Strategies: strategies,
		Urls:       urls,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGooglePagespeedInsightsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGooglePagespeedInsightsResourceModel) ToGetSDKType() *shared.SourceGooglePagespeedInsightsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGooglePagespeedInsightsResourceModel) ToUpdateSDKType() *shared.SourceGooglePagespeedInsightsPutRequest {
	apiKey := new(string)
	if !r.Configuration.APIKey.IsUnknown() && !r.Configuration.APIKey.IsNull() {
		*apiKey = r.Configuration.APIKey.ValueString()
	} else {
		apiKey = nil
	}
	categories := make([]shared.SourceGooglePagespeedInsightsUpdateCategories, 0)
	for _, categoriesItem := range r.Configuration.Categories {
		categories = append(categories, shared.SourceGooglePagespeedInsightsUpdateCategories(categoriesItem.ValueString()))
	}
	strategies := make([]shared.SourceGooglePagespeedInsightsUpdateStrategies, 0)
	for _, strategiesItem := range r.Configuration.Strategies {
		strategies = append(strategies, shared.SourceGooglePagespeedInsightsUpdateStrategies(strategiesItem.ValueString()))
	}
	urls := make([]string, 0)
	for _, urlsItem := range r.Configuration.Urls {
		urls = append(urls, urlsItem.ValueString())
	}
	configuration := shared.SourceGooglePagespeedInsightsUpdate{
		APIKey:     apiKey,
		Categories: categories,
		Strategies: strategies,
		Urls:       urls,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGooglePagespeedInsightsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGooglePagespeedInsightsResourceModel) ToDeleteSDKType() *shared.SourceGooglePagespeedInsightsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceGooglePagespeedInsightsResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceGooglePagespeedInsightsResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
