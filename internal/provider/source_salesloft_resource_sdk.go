// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceSalesloftResourceModel) ToCreateSDKType() *shared.SourceSalesloftCreateRequest {
	var credentials shared.SourceSalesloftCredentials
	var sourceSalesloftCredentialsAuthenticateViaOAuth *shared.SourceSalesloftCredentialsAuthenticateViaOAuth
	if r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth != nil {
		accessToken := r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken.ValueString()
		authType := shared.SourceSalesloftCredentialsAuthenticateViaOAuthAuthType(r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate.ValueString())
		sourceSalesloftCredentialsAuthenticateViaOAuth = &shared.SourceSalesloftCredentialsAuthenticateViaOAuth{
			AccessToken:     accessToken,
			AuthType:        authType,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSalesloftCredentialsAuthenticateViaOAuth != nil {
		credentials = shared.SourceSalesloftCredentials{
			SourceSalesloftCredentialsAuthenticateViaOAuth: sourceSalesloftCredentialsAuthenticateViaOAuth,
		}
	}
	var sourceSalesloftCredentialsAuthenticateViaAPIKey *shared.SourceSalesloftCredentialsAuthenticateViaAPIKey
	if r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
		apiKey := r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey.ValueString()
		authType1 := shared.SourceSalesloftCredentialsAuthenticateViaAPIKeyAuthType(r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType.ValueString())
		sourceSalesloftCredentialsAuthenticateViaAPIKey = &shared.SourceSalesloftCredentialsAuthenticateViaAPIKey{
			APIKey:   apiKey,
			AuthType: authType1,
		}
	}
	if sourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
		credentials = shared.SourceSalesloftCredentials{
			SourceSalesloftCredentialsAuthenticateViaAPIKey: sourceSalesloftCredentialsAuthenticateViaAPIKey,
		}
	}
	sourceType := shared.SourceSalesloftSalesloft(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceSalesloft{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSalesloftCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSalesloftResourceModel) ToGetSDKType() *shared.SourceSalesloftCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSalesloftResourceModel) ToUpdateSDKType() *shared.SourceSalesloftPutRequest {
	var credentials shared.SourceSalesloftUpdateCredentials
	var sourceSalesloftUpdateCredentialsAuthenticateViaOAuth *shared.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth
	if r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth != nil {
		accessToken := r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.AccessToken.ValueString()
		authType := shared.SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType(r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.RefreshToken.ValueString()
		tokenExpiryDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth.TokenExpiryDate.ValueString())
		sourceSalesloftUpdateCredentialsAuthenticateViaOAuth = &shared.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth{
			AccessToken:     accessToken,
			AuthType:        authType,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceSalesloftUpdateCredentialsAuthenticateViaOAuth != nil {
		credentials = shared.SourceSalesloftUpdateCredentials{
			SourceSalesloftUpdateCredentialsAuthenticateViaOAuth: sourceSalesloftUpdateCredentialsAuthenticateViaOAuth,
		}
	}
	var sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey *shared.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey
	if r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey != nil {
		apiKey := r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey.APIKey.ValueString()
		authType1 := shared.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType(r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey.AuthType.ValueString())
		sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey = &shared.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey{
			APIKey:   apiKey,
			AuthType: authType1,
		}
	}
	if sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey != nil {
		credentials = shared.SourceSalesloftUpdateCredentials{
			SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey: sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey,
		}
	}
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceSalesloftUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSalesloftPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSalesloftResourceModel) ToDeleteSDKType() *shared.SourceSalesloftCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceSalesloftResourceModel) RefreshFromGetResponse(resp *shared.SourceSalesloftGetResponse) {
	if resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey = &SourceSalesloftCredentialsAuthenticateViaAPIKey{}
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey)
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType))
	}
	if resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth != nil {
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth = &SourceGitlabAuthorizationMethodOAuth20{}
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken)
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType))
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID)
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret)
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken)
		r.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate = types.StringValue(resp.Configuration.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate.Format(time.RFC3339))
	}
	if resp.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey != nil {
		r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey = &SourceSalesloftCredentialsAuthenticateViaAPIKey{}
	}
	if resp.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth != nil {
		r.Configuration.Credentials.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth = &SourceGitlabAuthorizationMethodOAuth20{}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Configuration.StartDate = types.StringValue(resp.Configuration.StartDate.Format(time.RFC3339))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceSalesloftResourceModel) RefreshFromCreateResponse(resp *shared.SourceSalesloftGetResponse) {
	r.RefreshFromGetResponse(resp)
}
