// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceMailchimpResourceModel) ToCreateSDKType() *shared.SourceMailchimpCreateRequest {
	campaignID := new(string)
	if !r.Configuration.CampaignID.IsUnknown() && !r.Configuration.CampaignID.IsNull() {
		*campaignID = r.Configuration.CampaignID.ValueString()
	} else {
		campaignID = nil
	}
	var credentials *shared.SourceMailchimpAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpAuthenticationOAuth20 *shared.SourceMailchimpAuthenticationOAuth20
		if r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken.ValueString()
			authType := shared.SourceMailchimpAuthenticationOAuth20AuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType.ValueString())
			clientID := new(string)
			if !r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceMailchimpAuthenticationOAuth20 = &shared.SourceMailchimpAuthenticationOAuth20{
				AccessToken:  accessToken,
				AuthType:     authType,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceMailchimpAuthenticationOAuth20 != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				SourceMailchimpAuthenticationOAuth20: sourceMailchimpAuthenticationOAuth20,
			}
		}
		var sourceMailchimpAuthenticationAPIKey *shared.SourceMailchimpAuthenticationAPIKey
		if r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
			apikey := r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey.ValueString()
			authType1 := shared.SourceMailchimpAuthenticationAPIKeyAuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType.ValueString())
			sourceMailchimpAuthenticationAPIKey = &shared.SourceMailchimpAuthenticationAPIKey{
				Apikey:   apikey,
				AuthType: authType1,
			}
		}
		if sourceMailchimpAuthenticationAPIKey != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				SourceMailchimpAuthenticationAPIKey: sourceMailchimpAuthenticationAPIKey,
			}
		}
	}
	sourceType := shared.SourceMailchimpMailchimp(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceMailchimp{
		CampaignID:  campaignID,
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) ToGetSDKType() *shared.SourceMailchimpCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailchimpResourceModel) ToUpdateSDKType() *shared.SourceMailchimpPutRequest {
	campaignID := new(string)
	if !r.Configuration.CampaignID.IsUnknown() && !r.Configuration.CampaignID.IsNull() {
		*campaignID = r.Configuration.CampaignID.ValueString()
	} else {
		campaignID = nil
	}
	var credentials *shared.SourceMailchimpUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpUpdateAuthenticationOAuth20 *shared.SourceMailchimpUpdateAuthenticationOAuth20
		if r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20 != nil {
			accessToken := r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.AccessToken.ValueString()
			authType := shared.SourceMailchimpUpdateAuthenticationOAuth20AuthType(r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.AuthType.ValueString())
			clientID := new(string)
			if !r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceMailchimpUpdateAuthenticationOAuth20 = &shared.SourceMailchimpUpdateAuthenticationOAuth20{
				AccessToken:  accessToken,
				AuthType:     authType,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceMailchimpUpdateAuthenticationOAuth20 != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				SourceMailchimpUpdateAuthenticationOAuth20: sourceMailchimpUpdateAuthenticationOAuth20,
			}
		}
		var sourceMailchimpUpdateAuthenticationAPIKey *shared.SourceMailchimpUpdateAuthenticationAPIKey
		if r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationAPIKey != nil {
			apikey := r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationAPIKey.Apikey.ValueString()
			authType1 := shared.SourceMailchimpUpdateAuthenticationAPIKeyAuthType(r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationAPIKey.AuthType.ValueString())
			sourceMailchimpUpdateAuthenticationAPIKey = &shared.SourceMailchimpUpdateAuthenticationAPIKey{
				Apikey:   apikey,
				AuthType: authType1,
			}
		}
		if sourceMailchimpUpdateAuthenticationAPIKey != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				SourceMailchimpUpdateAuthenticationAPIKey: sourceMailchimpUpdateAuthenticationAPIKey,
			}
		}
	}
	configuration := shared.SourceMailchimpUpdate{
		CampaignID:  campaignID,
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) ToDeleteSDKType() *shared.SourceMailchimpCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailchimpResourceModel) RefreshFromGetResponse(resp *shared.SourceMailchimpGetResponse) {
	if resp.Configuration.CampaignID != nil {
		r.Configuration.CampaignID = types.StringValue(*resp.Configuration.CampaignID)
	} else {
		r.Configuration.CampaignID = types.StringNull()
	}
	if resp.Configuration.Credentials == nil {
		r.Configuration.Credentials = nil
	} else {
		r.Configuration.Credentials = &SourceMailchimpAuthentication{}
		if resp.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
			r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey = &SourceMailchimpAuthenticationAPIKey{}
			r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey = types.StringValue(resp.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey)
			r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType))
		}
		if resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
			r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20 = &SourceMailchimpAuthenticationOAuth20{}
			r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken = types.StringValue(resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken)
			r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType = types.StringValue(string(resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType))
			if resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID != nil {
				r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID = types.StringValue(*resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID)
			} else {
				r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID = types.StringNull()
			}
			if resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret != nil {
				r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret = types.StringValue(*resp.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret)
			} else {
				r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret = types.StringNull()
			}
		}
		if resp.Configuration.Credentials.SourceMailchimpUpdateAuthenticationAPIKey != nil {
			r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationAPIKey = &SourceMailchimpAuthenticationAPIKey{}
		}
		if resp.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20 != nil {
			r.Configuration.Credentials.SourceMailchimpUpdateAuthenticationOAuth20 = &SourceMailchimpAuthenticationOAuth20{}
		}
	}
	r.Configuration.SourceType = types.StringValue(string(resp.Configuration.SourceType))
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	if resp.SourceID != nil {
		r.SourceID = types.StringValue(*resp.SourceID)
	} else {
		r.SourceID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMailchimpResourceModel) RefreshFromCreateResponse(resp *shared.SourceMailchimpGetResponse) {
	r.RefreshFromGetResponse(resp)
}
