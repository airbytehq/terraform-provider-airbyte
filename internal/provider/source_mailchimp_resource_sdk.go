// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceMailchimpResourceModel) ToSharedSourceMailchimpCreateRequest() *shared.SourceMailchimpCreateRequest {
	var credentials *shared.SourceMailchimpAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpOAuth20 *shared.SourceMailchimpOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceMailchimpOAuth20 = &shared.SourceMailchimpOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceMailchimpOAuth20 != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				SourceMailchimpOAuth20: sourceMailchimpOAuth20,
			}
		}
		var sourceMailchimpAPIKey *shared.SourceMailchimpAPIKey
		if r.Configuration.Credentials.APIKey != nil {
			apikey := r.Configuration.Credentials.APIKey.Apikey.ValueString()
			sourceMailchimpAPIKey = &shared.SourceMailchimpAPIKey{
				Apikey: apikey,
			}
		}
		if sourceMailchimpAPIKey != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				SourceMailchimpAPIKey: sourceMailchimpAPIKey,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailchimp{
		Credentials: credentials,
		StartDate:   startDate,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceMailchimpResourceModel) ToSharedSourceMailchimpPutRequest() *shared.SourceMailchimpPutRequest {
	var credentials *shared.SourceMailchimpUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpUpdateOAuth20 *shared.SourceMailchimpUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			accessToken := r.Configuration.Credentials.OAuth20.AccessToken.ValueString()
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			sourceMailchimpUpdateOAuth20 = &shared.SourceMailchimpUpdateOAuth20{
				AccessToken:  accessToken,
				ClientID:     clientID,
				ClientSecret: clientSecret,
			}
		}
		if sourceMailchimpUpdateOAuth20 != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				SourceMailchimpUpdateOAuth20: sourceMailchimpUpdateOAuth20,
			}
		}
		var apiKey *shared.APIKey
		if r.Configuration.Credentials.APIKey != nil {
			apikey := r.Configuration.Credentials.APIKey.Apikey.ValueString()
			apiKey = &shared.APIKey{
				Apikey: apikey,
			}
		}
		if apiKey != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				APIKey: apiKey,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailchimpUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
