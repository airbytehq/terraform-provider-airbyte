// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceMailchimpResourceModel) ToCreateSDKType() *shared.SourceMailchimpCreateRequest {
	campaignID := new(string)
	if !r.Configuration.CampaignID.IsUnknown() && !r.Configuration.CampaignID.IsNull() {
		*campaignID = r.Configuration.CampaignID.ValueString()
	} else {
		campaignID = nil
	}
	var credentials *shared.SourceMailchimpAuthentication
	var sourceMailchimpAuthenticationOAuth20 *shared.SourceMailchimpAuthenticationOAuth20
	if r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
		authType := shared.SourceMailchimpAuthenticationOAuth20AuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType.ValueString())
		sourceMailchimpAuthenticationOAuth20 = &shared.SourceMailchimpAuthenticationOAuth20{
			AuthType: authType,
		}
	}
	if sourceMailchimpAuthenticationOAuth20 != nil {
		credentials = &shared.SourceMailchimpAuthentication{
			SourceMailchimpAuthenticationOAuth20: sourceMailchimpAuthenticationOAuth20,
		}
	}
	var sourceMailchimpAuthenticationAPIKey *shared.SourceMailchimpAuthenticationAPIKey
	if r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
		authType1 := shared.SourceMailchimpAuthenticationAPIKeyAuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType.ValueString())
		sourceMailchimpAuthenticationAPIKey = &shared.SourceMailchimpAuthenticationAPIKey{
			AuthType: authType1,
		}
	}
	if sourceMailchimpAuthenticationAPIKey != nil {
		credentials = &shared.SourceMailchimpAuthentication{
			SourceMailchimpAuthenticationAPIKey: sourceMailchimpAuthenticationAPIKey,
		}
	}
	sourceType := shared.SourceMailchimpMailchimp(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceMailchimp{
		CampaignID:  campaignID,
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) ToGetSDKType() *shared.SourceMailchimpCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailchimpResourceModel) ToUpdateSDKType() *shared.SourceMailchimpPutRequest {
	campaignID := new(string)
	if !r.Configuration.CampaignID.IsUnknown() && !r.Configuration.CampaignID.IsNull() {
		*campaignID = r.Configuration.CampaignID.ValueString()
	} else {
		campaignID = nil
	}
	var credentials *shared.SourceMailchimpUpdateAuthentication
	var sourceMailchimpUpdateAuthenticationOAuth20 *shared.SourceMailchimpUpdateAuthenticationOAuth20
	if r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
		authType := shared.SourceMailchimpUpdateAuthenticationOAuth20AuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType.ValueString())
		sourceMailchimpUpdateAuthenticationOAuth20 = &shared.SourceMailchimpUpdateAuthenticationOAuth20{
			AuthType: authType,
		}
	}
	if sourceMailchimpUpdateAuthenticationOAuth20 != nil {
		credentials = &shared.SourceMailchimpUpdateAuthentication{
			SourceMailchimpUpdateAuthenticationOAuth20: sourceMailchimpUpdateAuthenticationOAuth20,
		}
	}
	var sourceMailchimpUpdateAuthenticationAPIKey *shared.SourceMailchimpUpdateAuthenticationAPIKey
	if r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
		authType1 := shared.SourceMailchimpUpdateAuthenticationAPIKeyAuthType(r.Configuration.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType.ValueString())
		sourceMailchimpUpdateAuthenticationAPIKey = &shared.SourceMailchimpUpdateAuthenticationAPIKey{
			AuthType: authType1,
		}
	}
	if sourceMailchimpUpdateAuthenticationAPIKey != nil {
		credentials = &shared.SourceMailchimpUpdateAuthentication{
			SourceMailchimpUpdateAuthenticationAPIKey: sourceMailchimpUpdateAuthenticationAPIKey,
		}
	}
	configuration := shared.SourceMailchimpUpdate{
		CampaignID:  campaignID,
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMailchimpPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) ToDeleteSDKType() *shared.SourceMailchimpCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMailchimpResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMailchimpResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
