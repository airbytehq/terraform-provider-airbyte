// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *SourceMailchimpResourceModel) ToSharedSourceMailchimpCreateRequest() *shared.SourceMailchimpCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceMailchimpAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpOAuth20 *shared.SourceMailchimpOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			sourceMailchimpOAuth20 = &shared.SourceMailchimpOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceMailchimpOAuth20 != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				SourceMailchimpOAuth20: sourceMailchimpOAuth20,
			}
		}
		var apiKey *shared.APIKey
		if r.Configuration.Credentials.APIKey != nil {
			var apikey string
			apikey = r.Configuration.Credentials.APIKey.Apikey.ValueString()

			apiKey = &shared.APIKey{
				Apikey: apikey,
			}
		}
		if apiKey != nil {
			credentials = &shared.SourceMailchimpAuthentication{
				APIKey: apiKey,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailchimp{
		Credentials: credentials,
		StartDate:   startDate,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceMailchimpCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceMailchimpResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceMailchimpResourceModel) ToSharedSourceMailchimpPutRequest() *shared.SourceMailchimpPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var credentials *shared.SourceMailchimpUpdateAuthentication
	if r.Configuration.Credentials != nil {
		var sourceMailchimpUpdateOAuth20 *shared.SourceMailchimpUpdateOAuth20
		if r.Configuration.Credentials.OAuth20 != nil {
			clientID := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientID.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientID.IsNull() {
				*clientID = r.Configuration.Credentials.OAuth20.ClientID.ValueString()
			} else {
				clientID = nil
			}
			clientSecret := new(string)
			if !r.Configuration.Credentials.OAuth20.ClientSecret.IsUnknown() && !r.Configuration.Credentials.OAuth20.ClientSecret.IsNull() {
				*clientSecret = r.Configuration.Credentials.OAuth20.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			var accessToken string
			accessToken = r.Configuration.Credentials.OAuth20.AccessToken.ValueString()

			sourceMailchimpUpdateOAuth20 = &shared.SourceMailchimpUpdateOAuth20{
				ClientID:     clientID,
				ClientSecret: clientSecret,
				AccessToken:  accessToken,
			}
		}
		if sourceMailchimpUpdateOAuth20 != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				SourceMailchimpUpdateOAuth20: sourceMailchimpUpdateOAuth20,
			}
		}
		var sourceMailchimpUpdateAPIKey *shared.SourceMailchimpUpdateAPIKey
		if r.Configuration.Credentials.APIKey != nil {
			var apikey string
			apikey = r.Configuration.Credentials.APIKey.Apikey.ValueString()

			sourceMailchimpUpdateAPIKey = &shared.SourceMailchimpUpdateAPIKey{
				Apikey: apikey,
			}
		}
		if sourceMailchimpUpdateAPIKey != nil {
			credentials = &shared.SourceMailchimpUpdateAuthentication{
				SourceMailchimpUpdateAPIKey: sourceMailchimpUpdateAPIKey,
			}
		}
	}
	startDate := new(time.Time)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceMailchimpUpdate{
		Credentials: credentials,
		StartDate:   startDate,
	}
	out := shared.SourceMailchimpPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
