// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAwsDatalakeResourceModel) ToCreateSDKType() *shared.DestinationAwsDatalakeCreateRequest {
	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	bucketName := r.Configuration.BucketName.ValueString()
	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var credentials shared.DestinationAwsDatalakeAuthenticationMode
	var destinationAwsDatalakeAuthenticationModeIAMRole *shared.DestinationAwsDatalakeAuthenticationModeIAMRole
	if r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole != nil {
		credentialsTitle := shared.DestinationAwsDatalakeAuthenticationModeIAMRoleCredentialsTitle(r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle.ValueString())
		roleArn := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn.ValueString()
		destinationAwsDatalakeAuthenticationModeIAMRole = &shared.DestinationAwsDatalakeAuthenticationModeIAMRole{
			CredentialsTitle: credentialsTitle,
			RoleArn:          roleArn,
		}
	}
	if destinationAwsDatalakeAuthenticationModeIAMRole != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeAuthenticationModeIAMRole: destinationAwsDatalakeAuthenticationModeIAMRole,
		}
	}
	var destinationAwsDatalakeAuthenticationModeIAMUser *shared.DestinationAwsDatalakeAuthenticationModeIAMUser
	if r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser != nil {
		awsAccessKeyID := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID.ValueString()
		awsSecretAccessKey := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey.ValueString()
		credentialsTitle1 := shared.DestinationAwsDatalakeAuthenticationModeIAMUserCredentialsTitle(r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle.ValueString())
		destinationAwsDatalakeAuthenticationModeIAMUser = &shared.DestinationAwsDatalakeAuthenticationModeIAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
			CredentialsTitle:   credentialsTitle1,
		}
	}
	if destinationAwsDatalakeAuthenticationModeIAMUser != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeAuthenticationModeIAMUser: destinationAwsDatalakeAuthenticationModeIAMUser,
		}
	}
	destinationType := shared.DestinationAwsDatalakeAwsDatalake(r.Configuration.DestinationType.ValueString())
	var format *shared.DestinationAwsDatalakeOutputFormatWildcard
	if r.Configuration.Format != nil {
		var destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			compressionCodec := new(shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptional)
			if !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptional(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			formatType := shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONFormatTypeWildcard(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{
				CompressionCodec: compressionCodec,
				FormatType:       formatType,
			}
		}
		if destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage *shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage
		if r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
			compressionCodec1 := new(shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptional)
			if !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptional(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			formatType1 := shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageFormatTypeWildcard(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType.ValueString())
			destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage = &shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{
				CompressionCodec: compressionCodec1,
				FormatType:       formatType1,
			}
		}
		if destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage: destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage,
			}
		}
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationDatabaseName := r.Configuration.LakeformationDatabaseName.ValueString()
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	partitioning := new(shared.DestinationAwsDatalakeChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.DestinationAwsDatalakeChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	region := shared.DestinationAwsDatalakeS3BucketRegion(r.Configuration.Region.ValueString())
	configuration := shared.DestinationAwsDatalake{
		AwsAccountID:                          awsAccountID,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		Credentials:                           credentials,
		DestinationType:                       destinationType,
		Format:                                format,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Partitioning:                          partitioning,
		Region:                                region,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAwsDatalakeCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAwsDatalakeResourceModel) ToGetSDKType() *shared.DestinationAwsDatalakeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationAwsDatalakeResourceModel) ToUpdateSDKType() *shared.DestinationAwsDatalakePutRequest {
	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	bucketName := r.Configuration.BucketName.ValueString()
	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var credentials shared.DestinationAwsDatalakeUpdateAuthenticationMode
	var destinationAwsDatalakeUpdateAuthenticationModeIAMRole *shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole
	if r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole != nil {
		credentialsTitle := shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMRoleCredentialsTitle(r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole.CredentialsTitle.ValueString())
		roleArn := r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole.RoleArn.ValueString()
		destinationAwsDatalakeUpdateAuthenticationModeIAMRole = &shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole{
			CredentialsTitle: credentialsTitle,
			RoleArn:          roleArn,
		}
	}
	if destinationAwsDatalakeUpdateAuthenticationModeIAMRole != nil {
		credentials = shared.DestinationAwsDatalakeUpdateAuthenticationMode{
			DestinationAwsDatalakeUpdateAuthenticationModeIAMRole: destinationAwsDatalakeUpdateAuthenticationModeIAMRole,
		}
	}
	var destinationAwsDatalakeUpdateAuthenticationModeIAMUser *shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser
	if r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser != nil {
		awsAccessKeyID := r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser.AwsAccessKeyID.ValueString()
		awsSecretAccessKey := r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser.AwsSecretAccessKey.ValueString()
		credentialsTitle1 := shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMUserCredentialsTitle(r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser.CredentialsTitle.ValueString())
		destinationAwsDatalakeUpdateAuthenticationModeIAMUser = &shared.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
			CredentialsTitle:   credentialsTitle1,
		}
	}
	if destinationAwsDatalakeUpdateAuthenticationModeIAMUser != nil {
		credentials = shared.DestinationAwsDatalakeUpdateAuthenticationMode{
			DestinationAwsDatalakeUpdateAuthenticationModeIAMUser: destinationAwsDatalakeUpdateAuthenticationModeIAMUser,
		}
	}
	var format *shared.DestinationAwsDatalakeUpdateOutputFormatWildcard
	if r.Configuration.Format != nil {
		var destinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			compressionCodec := new(shared.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptional)
			if !r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptional(r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			formatType := shared.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSONFormatTypeWildcard(r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON{
				CompressionCodec: compressionCodec,
				FormatType:       formatType,
			}
		}
		if destinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			format = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcard{
				DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage *shared.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage
		if r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage != nil {
			compressionCodec1 := new(shared.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageCompressionCodecOptional)
			if !r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageCompressionCodecOptional(r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			formatType1 := shared.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageFormatTypeWildcard(r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage.FormatType.ValueString())
			destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage{
				CompressionCodec: compressionCodec1,
				FormatType:       formatType1,
			}
		}
		if destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage != nil {
			format = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcard{
				DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage: destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage,
			}
		}
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationDatabaseName := r.Configuration.LakeformationDatabaseName.ValueString()
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	partitioning := new(shared.DestinationAwsDatalakeUpdateChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.DestinationAwsDatalakeUpdateChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	region := shared.DestinationAwsDatalakeUpdateS3BucketRegion(r.Configuration.Region.ValueString())
	configuration := shared.DestinationAwsDatalakeUpdate{
		AwsAccountID:                          awsAccountID,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		Credentials:                           credentials,
		Format:                                format,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Partitioning:                          partitioning,
		Region:                                region,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAwsDatalakePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAwsDatalakeResourceModel) ToDeleteSDKType() *shared.DestinationAwsDatalakeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationAwsDatalakeResourceModel) RefreshFromGetResponse(resp *shared.DestinationAwsDatalakeGetResponse) {
	if resp.Configuration.AwsAccountID != nil {
		r.Configuration.AwsAccountID = types.StringValue(*resp.Configuration.AwsAccountID)
	} else {
		r.Configuration.AwsAccountID = types.StringNull()
	}
	r.Configuration.BucketName = types.StringValue(resp.Configuration.BucketName)
	if resp.Configuration.BucketPrefix != nil {
		r.Configuration.BucketPrefix = types.StringValue(*resp.Configuration.BucketPrefix)
	} else {
		r.Configuration.BucketPrefix = types.StringNull()
	}
	if resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole != nil {
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole = &DestinationAwsDatalakeAuthenticationModeIAMRole{}
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle = types.StringValue(string(resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle))
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn = types.StringValue(resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn)
	}
	if resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser != nil {
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser = &DestinationAwsDatalakeAuthenticationModeIAMUser{}
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID = types.StringValue(resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID)
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey = types.StringValue(resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey)
		r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle = types.StringValue(string(resp.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle))
	}
	if resp.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole != nil {
		r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMRole = &DestinationAwsDatalakeAuthenticationModeIAMRole{}
	}
	if resp.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser != nil {
		r.Configuration.Credentials.DestinationAwsDatalakeUpdateAuthenticationModeIAMUser = &DestinationAwsDatalakeAuthenticationModeIAMUser{}
	}
	r.Configuration.DestinationType = types.StringValue(string(resp.Configuration.DestinationType))
	if resp.Configuration.Format == nil {
		r.Configuration.Format = nil
	} else {
		r.Configuration.Format = &DestinationAwsDatalakeOutputFormatWildcard{}
		if resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{}
			if resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec != nil {
				r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec = types.StringValue(string(*resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec))
			} else {
				r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec = types.StringNull()
			}
			r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType))
		}
		if resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
			r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage = &DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{}
			if resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec != nil {
				r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec = types.StringValue(string(*resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec))
			} else {
				r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec = types.StringNull()
			}
			r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType = types.StringValue(string(resp.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType))
		}
		if resp.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{}
		}
		if resp.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage != nil {
			r.Configuration.Format.DestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage = &DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{}
		}
	}
	if resp.Configuration.GlueCatalogFloatAsDecimal != nil {
		r.Configuration.GlueCatalogFloatAsDecimal = types.BoolValue(*resp.Configuration.GlueCatalogFloatAsDecimal)
	} else {
		r.Configuration.GlueCatalogFloatAsDecimal = types.BoolNull()
	}
	if resp.Configuration.LakeformationDatabaseDefaultTagKey != nil {
		r.Configuration.LakeformationDatabaseDefaultTagKey = types.StringValue(*resp.Configuration.LakeformationDatabaseDefaultTagKey)
	} else {
		r.Configuration.LakeformationDatabaseDefaultTagKey = types.StringNull()
	}
	if resp.Configuration.LakeformationDatabaseDefaultTagValues != nil {
		r.Configuration.LakeformationDatabaseDefaultTagValues = types.StringValue(*resp.Configuration.LakeformationDatabaseDefaultTagValues)
	} else {
		r.Configuration.LakeformationDatabaseDefaultTagValues = types.StringNull()
	}
	r.Configuration.LakeformationDatabaseName = types.StringValue(resp.Configuration.LakeformationDatabaseName)
	if resp.Configuration.LakeformationGovernedTables != nil {
		r.Configuration.LakeformationGovernedTables = types.BoolValue(*resp.Configuration.LakeformationGovernedTables)
	} else {
		r.Configuration.LakeformationGovernedTables = types.BoolNull()
	}
	if resp.Configuration.Partitioning != nil {
		r.Configuration.Partitioning = types.StringValue(string(*resp.Configuration.Partitioning))
	} else {
		r.Configuration.Partitioning = types.StringNull()
	}
	r.Configuration.Region = types.StringValue(string(resp.Configuration.Region))
	if resp.DestinationID != nil {
		r.DestinationID = types.StringValue(*resp.DestinationID)
	} else {
		r.DestinationID = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationAwsDatalakeResourceModel) RefreshFromCreateResponse(resp *shared.DestinationAwsDatalakeGetResponse) {
	r.RefreshFromGetResponse(resp)
}
