// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAwsDatalakeResourceModel) ToSharedDestinationAwsDatalakeCreateRequest() *shared.DestinationAwsDatalakeCreateRequest {
	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	bucketName := r.Configuration.BucketName.ValueString()
	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var credentials shared.DestinationAwsDatalakeAuthenticationMode
	var destinationAwsDatalakeIAMRole *shared.DestinationAwsDatalakeIAMRole
	if r.Configuration.Credentials.IAMRole != nil {
		roleArn := r.Configuration.Credentials.IAMRole.RoleArn.ValueString()
		destinationAwsDatalakeIAMRole = &shared.DestinationAwsDatalakeIAMRole{
			RoleArn: roleArn,
		}
	}
	if destinationAwsDatalakeIAMRole != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeIAMRole: destinationAwsDatalakeIAMRole,
		}
	}
	var destinationAwsDatalakeIAMUser *shared.DestinationAwsDatalakeIAMUser
	if r.Configuration.Credentials.IAMUser != nil {
		awsAccessKeyID := r.Configuration.Credentials.IAMUser.AwsAccessKeyID.ValueString()
		awsSecretAccessKey := r.Configuration.Credentials.IAMUser.AwsSecretAccessKey.ValueString()
		destinationAwsDatalakeIAMUser = &shared.DestinationAwsDatalakeIAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if destinationAwsDatalakeIAMUser != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeIAMUser: destinationAwsDatalakeIAMUser,
		}
	}
	var format *shared.DestinationAwsDatalakeOutputFormatWildcard
	if r.Configuration.Format != nil {
		var destinationAwsDatalakeJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeJSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
			compressionCodec := new(shared.DestinationAwsDatalakeCompressionCodecOptional)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.DestinationAwsDatalakeCompressionCodecOptional(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			formatType := new(shared.DestinationAwsDatalakeFormatTypeWildcard)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
				*formatType = shared.DestinationAwsDatalakeFormatTypeWildcard(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			} else {
				formatType = nil
			}
			destinationAwsDatalakeJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeJSONLinesNewlineDelimitedJSON{
				CompressionCodec: compressionCodec,
				FormatType:       formatType,
			}
		}
		if destinationAwsDatalakeJSONLinesNewlineDelimitedJSON != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationAwsDatalakeParquetColumnarStorage *shared.DestinationAwsDatalakeParquetColumnarStorage
		if r.Configuration.Format.ParquetColumnarStorage != nil {
			compressionCodec1 := new(shared.DestinationAwsDatalakeSchemasCompressionCodecOptional)
			if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeSchemasCompressionCodecOptional(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			formatType1 := new(shared.DestinationAwsDatalakeSchemasFormatTypeWildcard)
			if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
				*formatType1 = shared.DestinationAwsDatalakeSchemasFormatTypeWildcard(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
			} else {
				formatType1 = nil
			}
			destinationAwsDatalakeParquetColumnarStorage = &shared.DestinationAwsDatalakeParquetColumnarStorage{
				CompressionCodec: compressionCodec1,
				FormatType:       formatType1,
			}
		}
		if destinationAwsDatalakeParquetColumnarStorage != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeParquetColumnarStorage: destinationAwsDatalakeParquetColumnarStorage,
			}
		}
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationDatabaseName := r.Configuration.LakeformationDatabaseName.ValueString()
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	partitioning := new(shared.DestinationAwsDatalakeChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.DestinationAwsDatalakeChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	region := new(shared.DestinationAwsDatalakeS3BucketRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.DestinationAwsDatalakeS3BucketRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	configuration := shared.DestinationAwsDatalake{
		AwsAccountID:                          awsAccountID,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		Credentials:                           credentials,
		Format:                                format,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Partitioning:                          partitioning,
		Region:                                region,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAwsDatalakeCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAwsDatalakeResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationAwsDatalakeResourceModel) ToSharedDestinationAwsDatalakePutRequest() *shared.DestinationAwsDatalakePutRequest {
	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	bucketName := r.Configuration.BucketName.ValueString()
	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var credentials shared.AuthenticationMode
	var iamRole *shared.IAMRole
	if r.Configuration.Credentials.IAMRole != nil {
		roleArn := r.Configuration.Credentials.IAMRole.RoleArn.ValueString()
		iamRole = &shared.IAMRole{
			RoleArn: roleArn,
		}
	}
	if iamRole != nil {
		credentials = shared.AuthenticationMode{
			IAMRole: iamRole,
		}
	}
	var iamUser *shared.IAMUser
	if r.Configuration.Credentials.IAMUser != nil {
		awsAccessKeyID := r.Configuration.Credentials.IAMUser.AwsAccessKeyID.ValueString()
		awsSecretAccessKey := r.Configuration.Credentials.IAMUser.AwsSecretAccessKey.ValueString()
		iamUser = &shared.IAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if iamUser != nil {
		credentials = shared.AuthenticationMode{
			IAMUser: iamUser,
		}
	}
	var format *shared.OutputFormatWildcard
	if r.Configuration.Format != nil {
		var jsonLinesNewlineDelimitedJSON *shared.JSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
			compressionCodec := new(shared.CompressionCodecOptional)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.CompressionCodecOptional(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			formatType := new(shared.FormatTypeWildcard)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
				*formatType = shared.FormatTypeWildcard(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			} else {
				formatType = nil
			}
			jsonLinesNewlineDelimitedJSON = &shared.JSONLinesNewlineDelimitedJSON{
				CompressionCodec: compressionCodec,
				FormatType:       formatType,
			}
		}
		if jsonLinesNewlineDelimitedJSON != nil {
			format = &shared.OutputFormatWildcard{
				JSONLinesNewlineDelimitedJSON: jsonLinesNewlineDelimitedJSON,
			}
		}
		var parquetColumnarStorage *shared.ParquetColumnarStorage
		if r.Configuration.Format.ParquetColumnarStorage != nil {
			compressionCodec1 := new(shared.DestinationAwsDatalakeUpdateCompressionCodecOptional)
			if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeUpdateCompressionCodecOptional(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			formatType1 := new(shared.DestinationAwsDatalakeUpdateFormatTypeWildcard)
			if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
				*formatType1 = shared.DestinationAwsDatalakeUpdateFormatTypeWildcard(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
			} else {
				formatType1 = nil
			}
			parquetColumnarStorage = &shared.ParquetColumnarStorage{
				CompressionCodec: compressionCodec1,
				FormatType:       formatType1,
			}
		}
		if parquetColumnarStorage != nil {
			format = &shared.OutputFormatWildcard{
				ParquetColumnarStorage: parquetColumnarStorage,
			}
		}
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationDatabaseName := r.Configuration.LakeformationDatabaseName.ValueString()
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	partitioning := new(shared.ChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.ChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	region := new(shared.S3BucketRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.S3BucketRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	configuration := shared.DestinationAwsDatalakeUpdate{
		AwsAccountID:                          awsAccountID,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		Credentials:                           credentials,
		Format:                                format,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Partitioning:                          partitioning,
		Region:                                region,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAwsDatalakePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
