// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAwsDatalakeResourceModel) ToSharedDestinationAwsDatalakeCreateRequest(ctx context.Context) (*shared.DestinationAwsDatalakeCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	var credentials shared.AuthenticationMode
	var iamRole *shared.IAMRole
	if r.Configuration.Credentials.IAMRole != nil {
		var roleArn string
		roleArn = r.Configuration.Credentials.IAMRole.RoleArn.ValueString()

		iamRole = &shared.IAMRole{
			RoleArn: roleArn,
		}
	}
	if iamRole != nil {
		credentials = shared.AuthenticationMode{
			IAMRole: iamRole,
		}
	}
	var iamUser *shared.IAMUser
	if r.Configuration.Credentials.IAMUser != nil {
		var awsAccessKeyID string
		awsAccessKeyID = r.Configuration.Credentials.IAMUser.AwsAccessKeyID.ValueString()

		var awsSecretAccessKey string
		awsSecretAccessKey = r.Configuration.Credentials.IAMUser.AwsSecretAccessKey.ValueString()

		iamUser = &shared.IAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if iamUser != nil {
		credentials = shared.AuthenticationMode{
			IAMUser: iamUser,
		}
	}
	region := new(shared.S3BucketRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.S3BucketRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	var bucketName string
	bucketName = r.Configuration.BucketName.ValueString()

	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var lakeformationDatabaseName string
	lakeformationDatabaseName = r.Configuration.LakeformationDatabaseName.ValueString()

	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	var format *shared.OutputFormatWildcard
	if r.Configuration.Format != nil {
		var jsonLinesNewlineDelimitedJSON *shared.JSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
			formatType := new(shared.FormatTypeWildcard)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
				*formatType = shared.FormatTypeWildcard(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			} else {
				formatType = nil
			}
			compressionCodec := new(shared.CompressionCodecOptional)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.CompressionCodecOptional(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			jsonLinesNewlineDelimitedJSON = &shared.JSONLinesNewlineDelimitedJSON{
				FormatType:       formatType,
				CompressionCodec: compressionCodec,
			}
		}
		if jsonLinesNewlineDelimitedJSON != nil {
			format = &shared.OutputFormatWildcard{
				JSONLinesNewlineDelimitedJSON: jsonLinesNewlineDelimitedJSON,
			}
		}
		var parquetColumnarStorage *shared.ParquetColumnarStorage
		if r.Configuration.Format.ParquetColumnarStorage != nil {
			formatType1 := new(shared.DestinationAwsDatalakeFormatTypeWildcard)
			if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
				*formatType1 = shared.DestinationAwsDatalakeFormatTypeWildcard(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
			} else {
				formatType1 = nil
			}
			compressionCodec1 := new(shared.DestinationAwsDatalakeCompressionCodecOptional)
			if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeCompressionCodecOptional(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			parquetColumnarStorage = &shared.ParquetColumnarStorage{
				FormatType:       formatType1,
				CompressionCodec: compressionCodec1,
			}
		}
		if parquetColumnarStorage != nil {
			format = &shared.OutputFormatWildcard{
				ParquetColumnarStorage: parquetColumnarStorage,
			}
		}
	}
	partitioning := new(shared.ChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.ChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	configuration := shared.DestinationAwsDatalake{
		AwsAccountID:                          awsAccountID,
		Credentials:                           credentials,
		Region:                                region,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Format:                                format,
		Partitioning:                          partitioning,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
	}
	out := shared.DestinationAwsDatalakeCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationAwsDatalakeResourceModel) ToSharedDestinationAwsDatalakePutRequest(ctx context.Context) (*shared.DestinationAwsDatalakePutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	var credentials shared.DestinationAwsDatalakeUpdateAuthenticationMode
	var destinationAwsDatalakeUpdateIAMRole *shared.DestinationAwsDatalakeUpdateIAMRole
	if r.Configuration.Credentials.IAMRole != nil {
		var roleArn string
		roleArn = r.Configuration.Credentials.IAMRole.RoleArn.ValueString()

		destinationAwsDatalakeUpdateIAMRole = &shared.DestinationAwsDatalakeUpdateIAMRole{
			RoleArn: roleArn,
		}
	}
	if destinationAwsDatalakeUpdateIAMRole != nil {
		credentials = shared.DestinationAwsDatalakeUpdateAuthenticationMode{
			DestinationAwsDatalakeUpdateIAMRole: destinationAwsDatalakeUpdateIAMRole,
		}
	}
	var destinationAwsDatalakeUpdateIAMUser *shared.DestinationAwsDatalakeUpdateIAMUser
	if r.Configuration.Credentials.IAMUser != nil {
		var awsAccessKeyID string
		awsAccessKeyID = r.Configuration.Credentials.IAMUser.AwsAccessKeyID.ValueString()

		var awsSecretAccessKey string
		awsSecretAccessKey = r.Configuration.Credentials.IAMUser.AwsSecretAccessKey.ValueString()

		destinationAwsDatalakeUpdateIAMUser = &shared.DestinationAwsDatalakeUpdateIAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
		}
	}
	if destinationAwsDatalakeUpdateIAMUser != nil {
		credentials = shared.DestinationAwsDatalakeUpdateAuthenticationMode{
			DestinationAwsDatalakeUpdateIAMUser: destinationAwsDatalakeUpdateIAMUser,
		}
	}
	region := new(shared.DestinationAwsDatalakeUpdateS3BucketRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.DestinationAwsDatalakeUpdateS3BucketRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	var bucketName string
	bucketName = r.Configuration.BucketName.ValueString()

	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var lakeformationDatabaseName string
	lakeformationDatabaseName = r.Configuration.LakeformationDatabaseName.ValueString()

	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	var format *shared.DestinationAwsDatalakeUpdateOutputFormatWildcard
	if r.Configuration.Format != nil {
		var destinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
			formatType := new(shared.DestinationAwsDatalakeUpdateFormatTypeWildcard)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
				*formatType = shared.DestinationAwsDatalakeUpdateFormatTypeWildcard(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			} else {
				formatType = nil
			}
			compressionCodec := new(shared.DestinationAwsDatalakeUpdateCompressionCodecOptional)
			if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.DestinationAwsDatalakeUpdateCompressionCodecOptional(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			destinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON{
				FormatType:       formatType,
				CompressionCodec: compressionCodec,
			}
		}
		if destinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON != nil {
			format = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcard{
				DestinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeUpdateJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationAwsDatalakeUpdateParquetColumnarStorage *shared.DestinationAwsDatalakeUpdateParquetColumnarStorage
		if r.Configuration.Format.ParquetColumnarStorage != nil {
			formatType1 := new(shared.DestinationAwsDatalakeUpdateSchemasFormatTypeWildcard)
			if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
				*formatType1 = shared.DestinationAwsDatalakeUpdateSchemasFormatTypeWildcard(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
			} else {
				formatType1 = nil
			}
			compressionCodec1 := new(shared.DestinationAwsDatalakeUpdateSchemasCompressionCodecOptional)
			if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeUpdateSchemasCompressionCodecOptional(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			destinationAwsDatalakeUpdateParquetColumnarStorage = &shared.DestinationAwsDatalakeUpdateParquetColumnarStorage{
				FormatType:       formatType1,
				CompressionCodec: compressionCodec1,
			}
		}
		if destinationAwsDatalakeUpdateParquetColumnarStorage != nil {
			format = &shared.DestinationAwsDatalakeUpdateOutputFormatWildcard{
				DestinationAwsDatalakeUpdateParquetColumnarStorage: destinationAwsDatalakeUpdateParquetColumnarStorage,
			}
		}
	}
	partitioning := new(shared.DestinationAwsDatalakeUpdateChooseHowToPartitionData)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.DestinationAwsDatalakeUpdateChooseHowToPartitionData(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	configuration := shared.DestinationAwsDatalakeUpdate{
		AwsAccountID:                          awsAccountID,
		Credentials:                           credentials,
		Region:                                region,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Format:                                format,
		Partitioning:                          partitioning,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
	}
	out := shared.DestinationAwsDatalakePutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationAwsDatalakeResourceModel) ToOperationsPutDestinationAwsDatalakeRequest(ctx context.Context) (*operations.PutDestinationAwsDatalakeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationAwsDatalakePutRequest, destinationAwsDatalakePutRequestDiags := r.ToSharedDestinationAwsDatalakePutRequest(ctx)
	diags.Append(destinationAwsDatalakePutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationAwsDatalakeRequest{
		DestinationID:                    destinationID,
		DestinationAwsDatalakePutRequest: destinationAwsDatalakePutRequest,
	}

	return &out, diags
}

func (r *DestinationAwsDatalakeResourceModel) ToOperationsGetDestinationAwsDatalakeRequest(ctx context.Context) (*operations.GetDestinationAwsDatalakeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationAwsDatalakeRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationAwsDatalakeResourceModel) ToOperationsDeleteDestinationAwsDatalakeRequest(ctx context.Context) (*operations.DeleteDestinationAwsDatalakeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationAwsDatalakeRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationAwsDatalakeResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
