// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceMondayResourceModel) ToCreateSDKType() *shared.SourceMondayCreateRequest {
	var credentials *shared.SourceMondayAuthorizationMethod
	var sourceMondayAuthorizationMethodOAuth20 *shared.SourceMondayAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceMondayAuthorizationMethodAPIToken != nil {
		authType := shared.SourceMondayAuthorizationMethodOAuth20AuthType(r.Configuration.Credentials.SourceMondayAuthorizationMethodAPIToken.AuthType.ValueString())
		sourceMondayAuthorizationMethodOAuth20 = &shared.SourceMondayAuthorizationMethodOAuth20{
			AuthType: authType,
		}
	}
	if sourceMondayAuthorizationMethodOAuth20 != nil {
		credentials = &shared.SourceMondayAuthorizationMethod{
			SourceMondayAuthorizationMethodOAuth20: sourceMondayAuthorizationMethodOAuth20,
		}
	}
	var sourceMondayAuthorizationMethodAPIToken *shared.SourceMondayAuthorizationMethodAPIToken
	if r.Configuration.Credentials.SourceMondayAuthorizationMethodOAuth20 != nil {
		authType1 := shared.SourceMondayAuthorizationMethodAPITokenAuthType(r.Configuration.Credentials.SourceMondayAuthorizationMethodOAuth20.AuthType.ValueString())
		sourceMondayAuthorizationMethodAPIToken = &shared.SourceMondayAuthorizationMethodAPIToken{
			AuthType: authType1,
		}
	}
	if sourceMondayAuthorizationMethodAPIToken != nil {
		credentials = &shared.SourceMondayAuthorizationMethod{
			SourceMondayAuthorizationMethodAPIToken: sourceMondayAuthorizationMethodAPIToken,
		}
	}
	sourceType := shared.SourceMondayMonday(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceMonday{
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMondayCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMondayResourceModel) ToGetSDKType() *shared.SourceMondayCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMondayResourceModel) ToUpdateSDKType() *shared.SourceMondayPutRequest {
	var credentials *shared.SourceMondayUpdateAuthorizationMethod
	var sourceMondayUpdateAuthorizationMethodOAuth20 *shared.SourceMondayUpdateAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceMondayAuthorizationMethodAPIToken != nil {
		authType := shared.SourceMondayUpdateAuthorizationMethodOAuth20AuthType(r.Configuration.Credentials.SourceMondayAuthorizationMethodAPIToken.AuthType.ValueString())
		sourceMondayUpdateAuthorizationMethodOAuth20 = &shared.SourceMondayUpdateAuthorizationMethodOAuth20{
			AuthType: authType,
		}
	}
	if sourceMondayUpdateAuthorizationMethodOAuth20 != nil {
		credentials = &shared.SourceMondayUpdateAuthorizationMethod{
			SourceMondayUpdateAuthorizationMethodOAuth20: sourceMondayUpdateAuthorizationMethodOAuth20,
		}
	}
	var sourceMondayUpdateAuthorizationMethodAPIToken *shared.SourceMondayUpdateAuthorizationMethodAPIToken
	if r.Configuration.Credentials.SourceMondayAuthorizationMethodOAuth20 != nil {
		authType1 := shared.SourceMondayUpdateAuthorizationMethodAPITokenAuthType(r.Configuration.Credentials.SourceMondayAuthorizationMethodOAuth20.AuthType.ValueString())
		sourceMondayUpdateAuthorizationMethodAPIToken = &shared.SourceMondayUpdateAuthorizationMethodAPIToken{
			AuthType: authType1,
		}
	}
	if sourceMondayUpdateAuthorizationMethodAPIToken != nil {
		credentials = &shared.SourceMondayUpdateAuthorizationMethod{
			SourceMondayUpdateAuthorizationMethodAPIToken: sourceMondayUpdateAuthorizationMethodAPIToken,
		}
	}
	configuration := shared.SourceMondayUpdate{
		Credentials: credentials,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceMondayPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceMondayResourceModel) ToDeleteSDKType() *shared.SourceMondayCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceMondayResourceModel) RefreshFromGetResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *SourceMondayResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.RefreshFromGetResponse(resp)
}
