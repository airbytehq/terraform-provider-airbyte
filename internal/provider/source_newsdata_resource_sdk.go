// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceNewsdataResourceModel) ToSharedSourceNewsdataCreateRequest() *shared.SourceNewsdataCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var oneOf interface{}
	if !r.Configuration.OneOf.IsUnknown() && !r.Configuration.OneOf.IsNull() {
		_ = json.Unmarshal([]byte(r.Configuration.OneOf.ValueString()), &oneOf)
	}
	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var category []shared.SourceNewsdataCategory = []shared.SourceNewsdataCategory{}
	for _, categoryItem := range r.Configuration.Category {
		category = append(category, shared.SourceNewsdataCategory(categoryItem.ValueString()))
	}
	var country []shared.SourceNewsdataCountry = []shared.SourceNewsdataCountry{}
	for _, countryItem := range r.Configuration.Country {
		country = append(country, shared.SourceNewsdataCountry(countryItem.ValueString()))
	}
	var domain []string = []string{}
	for _, domainItem := range r.Configuration.Domain {
		domain = append(domain, domainItem.ValueString())
	}
	var language []shared.SourceNewsdataLanguage = []shared.SourceNewsdataLanguage{}
	for _, languageItem := range r.Configuration.Language {
		language = append(language, shared.SourceNewsdataLanguage(languageItem.ValueString()))
	}
	configuration := shared.SourceNewsdata{
		OneOf:    oneOf,
		APIKey:   apiKey,
		Category: category,
		Country:  country,
		Domain:   domain,
		Language: language,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceNewsdataCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceNewsdataResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific1 tfTypes.JobTypeResourceLimit
				jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific1.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific1.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific1)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
				}
			}
		}
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceNewsdataResourceModel) ToSharedSourceNewsdataPutRequest() *shared.SourceNewsdataPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var oneOf interface{}
	if !r.Configuration.OneOf.IsUnknown() && !r.Configuration.OneOf.IsNull() {
		_ = json.Unmarshal([]byte(r.Configuration.OneOf.ValueString()), &oneOf)
	}
	var apiKey string
	apiKey = r.Configuration.APIKey.ValueString()

	var category []shared.SourceNewsdataUpdateCategory = []shared.SourceNewsdataUpdateCategory{}
	for _, categoryItem := range r.Configuration.Category {
		category = append(category, shared.SourceNewsdataUpdateCategory(categoryItem.ValueString()))
	}
	var country []shared.SourceNewsdataUpdateCountry = []shared.SourceNewsdataUpdateCountry{}
	for _, countryItem := range r.Configuration.Country {
		country = append(country, shared.SourceNewsdataUpdateCountry(countryItem.ValueString()))
	}
	var domain []string = []string{}
	for _, domainItem := range r.Configuration.Domain {
		domain = append(domain, domainItem.ValueString())
	}
	var language []shared.SourceNewsdataUpdateLanguage = []shared.SourceNewsdataUpdateLanguage{}
	for _, languageItem := range r.Configuration.Language {
		language = append(language, shared.SourceNewsdataUpdateLanguage(languageItem.ValueString()))
	}
	configuration := shared.SourceNewsdataUpdate{
		OneOf:    oneOf,
		APIKey:   apiKey,
		Category: category,
		Country:  country,
		Domain:   domain,
		Language: language,
	}
	out := shared.SourceNewsdataPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
