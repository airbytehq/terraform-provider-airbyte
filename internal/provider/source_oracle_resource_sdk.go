// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceOracleResourceModel) ToSharedSourceOracleCreateRequest() *shared.SourceOracleCreateRequest {
	var connectionData *shared.SourceOracleConnectBy
	if r.Configuration.ConnectionData != nil {
		var sourceOracleServiceName *shared.SourceOracleServiceName
		if r.Configuration.ConnectionData.ServiceName != nil {
			serviceName := r.Configuration.ConnectionData.ServiceName.ServiceName.ValueString()
			sourceOracleServiceName = &shared.SourceOracleServiceName{
				ServiceName: serviceName,
			}
		}
		if sourceOracleServiceName != nil {
			connectionData = &shared.SourceOracleConnectBy{
				SourceOracleServiceName: sourceOracleServiceName,
			}
		}
		var sourceOracleSystemIDSID *shared.SourceOracleSystemIDSID
		if r.Configuration.ConnectionData.SystemIDSID != nil {
			sid := r.Configuration.ConnectionData.SystemIDSID.Sid.ValueString()
			sourceOracleSystemIDSID = &shared.SourceOracleSystemIDSID{
				Sid: sid,
			}
		}
		if sourceOracleSystemIDSID != nil {
			connectionData = &shared.SourceOracleConnectBy{
				SourceOracleSystemIDSID: sourceOracleSystemIDSID,
			}
		}
	}
	var encryption *shared.SourceOracleEncryption
	if r.Configuration.Encryption != nil {
		var sourceOracleUnencrypted *shared.SourceOracleUnencrypted
		if r.Configuration.Encryption.Unencrypted != nil {
			sourceOracleUnencrypted = &shared.SourceOracleUnencrypted{}
		}
		if sourceOracleUnencrypted != nil {
			encryption = &shared.SourceOracleEncryption{
				SourceOracleUnencrypted: sourceOracleUnencrypted,
			}
		}
		var sourceOracleNativeNetworkEncryptionNNE *shared.SourceOracleNativeNetworkEncryptionNNE
		if r.Configuration.Encryption.NativeNetworkEncryptionNNE != nil {
			encryptionAlgorithm := new(shared.SourceOracleEncryptionAlgorithm)
			if !r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.IsUnknown() && !r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.IsNull() {
				*encryptionAlgorithm = shared.SourceOracleEncryptionAlgorithm(r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.ValueString())
			} else {
				encryptionAlgorithm = nil
			}
			sourceOracleNativeNetworkEncryptionNNE = &shared.SourceOracleNativeNetworkEncryptionNNE{
				EncryptionAlgorithm: encryptionAlgorithm,
			}
		}
		if sourceOracleNativeNetworkEncryptionNNE != nil {
			encryption = &shared.SourceOracleEncryption{
				SourceOracleNativeNetworkEncryptionNNE: sourceOracleNativeNetworkEncryptionNNE,
			}
		}
		var sourceOracleTLSEncryptedVerifyCertificate *shared.SourceOracleTLSEncryptedVerifyCertificate
		if r.Configuration.Encryption.TLSEncryptedVerifyCertificate != nil {
			sslCertificate := r.Configuration.Encryption.TLSEncryptedVerifyCertificate.SslCertificate.ValueString()
			sourceOracleTLSEncryptedVerifyCertificate = &shared.SourceOracleTLSEncryptedVerifyCertificate{
				SslCertificate: sslCertificate,
			}
		}
		if sourceOracleTLSEncryptedVerifyCertificate != nil {
			encryption = &shared.SourceOracleEncryption{
				SourceOracleTLSEncryptedVerifyCertificate: sourceOracleTLSEncryptedVerifyCertificate,
			}
		}
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var schemas []string = []string{}
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var tunnelMethod *shared.SourceOracleSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceOracleNoTunnel *shared.SourceOracleNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourceOracleNoTunnel = &shared.SourceOracleNoTunnel{}
		}
		if sourceOracleNoTunnel != nil {
			tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
				SourceOracleNoTunnel: sourceOracleNoTunnel,
			}
		}
		var sourceOracleSSHKeyAuthentication *shared.SourceOracleSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourceOracleSSHKeyAuthentication = &shared.SourceOracleSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceOracleSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
				SourceOracleSSHKeyAuthentication: sourceOracleSSHKeyAuthentication,
			}
		}
		var sourceOraclePasswordAuthentication *shared.SourceOraclePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourceOraclePasswordAuthentication = &shared.SourceOraclePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceOraclePasswordAuthentication != nil {
			tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
				SourceOraclePasswordAuthentication: sourceOraclePasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceOracle{
		ConnectionData: connectionData,
		Encryption:     encryption,
		Host:           host,
		JdbcURLParams:  jdbcURLParams,
		Password:       password,
		Port:           port,
		Schemas:        schemas,
		TunnelMethod:   tunnelMethod,
		Username:       username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOracleCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceOracleResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceOracleResourceModel) ToSharedSourceOraclePutRequest() *shared.SourceOraclePutRequest {
	var connectionData *shared.ConnectBy
	if r.Configuration.ConnectionData != nil {
		var serviceName *shared.ServiceName
		if r.Configuration.ConnectionData.ServiceName != nil {
			serviceName1 := r.Configuration.ConnectionData.ServiceName.ServiceName.ValueString()
			serviceName = &shared.ServiceName{
				ServiceName: serviceName1,
			}
		}
		if serviceName != nil {
			connectionData = &shared.ConnectBy{
				ServiceName: serviceName,
			}
		}
		var systemIDSID *shared.SystemIDSID
		if r.Configuration.ConnectionData.SystemIDSID != nil {
			sid := r.Configuration.ConnectionData.SystemIDSID.Sid.ValueString()
			systemIDSID = &shared.SystemIDSID{
				Sid: sid,
			}
		}
		if systemIDSID != nil {
			connectionData = &shared.ConnectBy{
				SystemIDSID: systemIDSID,
			}
		}
	}
	var encryption *shared.SourceOracleUpdateEncryption
	if r.Configuration.Encryption != nil {
		var sourceOracleUpdateUnencrypted *shared.SourceOracleUpdateUnencrypted
		if r.Configuration.Encryption.Unencrypted != nil {
			sourceOracleUpdateUnencrypted = &shared.SourceOracleUpdateUnencrypted{}
		}
		if sourceOracleUpdateUnencrypted != nil {
			encryption = &shared.SourceOracleUpdateEncryption{
				SourceOracleUpdateUnencrypted: sourceOracleUpdateUnencrypted,
			}
		}
		var sourceOracleUpdateNativeNetworkEncryptionNNE *shared.SourceOracleUpdateNativeNetworkEncryptionNNE
		if r.Configuration.Encryption.NativeNetworkEncryptionNNE != nil {
			encryptionAlgorithm := new(shared.SourceOracleUpdateEncryptionAlgorithm)
			if !r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.IsUnknown() && !r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.IsNull() {
				*encryptionAlgorithm = shared.SourceOracleUpdateEncryptionAlgorithm(r.Configuration.Encryption.NativeNetworkEncryptionNNE.EncryptionAlgorithm.ValueString())
			} else {
				encryptionAlgorithm = nil
			}
			sourceOracleUpdateNativeNetworkEncryptionNNE = &shared.SourceOracleUpdateNativeNetworkEncryptionNNE{
				EncryptionAlgorithm: encryptionAlgorithm,
			}
		}
		if sourceOracleUpdateNativeNetworkEncryptionNNE != nil {
			encryption = &shared.SourceOracleUpdateEncryption{
				SourceOracleUpdateNativeNetworkEncryptionNNE: sourceOracleUpdateNativeNetworkEncryptionNNE,
			}
		}
		var sourceOracleUpdateTLSEncryptedVerifyCertificate *shared.SourceOracleUpdateTLSEncryptedVerifyCertificate
		if r.Configuration.Encryption.TLSEncryptedVerifyCertificate != nil {
			sslCertificate := r.Configuration.Encryption.TLSEncryptedVerifyCertificate.SslCertificate.ValueString()
			sourceOracleUpdateTLSEncryptedVerifyCertificate = &shared.SourceOracleUpdateTLSEncryptedVerifyCertificate{
				SslCertificate: sslCertificate,
			}
		}
		if sourceOracleUpdateTLSEncryptedVerifyCertificate != nil {
			encryption = &shared.SourceOracleUpdateEncryption{
				SourceOracleUpdateTLSEncryptedVerifyCertificate: sourceOracleUpdateTLSEncryptedVerifyCertificate,
			}
		}
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := new(int64)
	if !r.Configuration.Port.IsUnknown() && !r.Configuration.Port.IsNull() {
		*port = r.Configuration.Port.ValueInt64()
	} else {
		port = nil
	}
	var schemas []string = []string{}
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var tunnelMethod *shared.SourceOracleUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var sourceOracleUpdateNoTunnel *shared.SourceOracleUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			sourceOracleUpdateNoTunnel = &shared.SourceOracleUpdateNoTunnel{}
		}
		if sourceOracleUpdateNoTunnel != nil {
			tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
				SourceOracleUpdateNoTunnel: sourceOracleUpdateNoTunnel,
			}
		}
		var sourceOracleUpdateSSHKeyAuthentication *shared.SourceOracleUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			sshKey := r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()
			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			tunnelUser := r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()
			sourceOracleUpdateSSHKeyAuthentication = &shared.SourceOracleUpdateSSHKeyAuthentication{
				SSHKey:     sshKey,
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
			}
		}
		if sourceOracleUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
				SourceOracleUpdateSSHKeyAuthentication: sourceOracleUpdateSSHKeyAuthentication,
			}
		}
		var sourceOracleUpdatePasswordAuthentication *shared.SourceOracleUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()
			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			tunnelUser1 := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()
			sourceOracleUpdatePasswordAuthentication = &shared.SourceOracleUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceOracleUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
				SourceOracleUpdatePasswordAuthentication: sourceOracleUpdatePasswordAuthentication,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceOracleUpdate{
		ConnectionData: connectionData,
		Encryption:     encryption,
		Host:           host,
		JdbcURLParams:  jdbcURLParams,
		Password:       password,
		Port:           port,
		Schemas:        schemas,
		TunnelMethod:   tunnelMethod,
		Username:       username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOraclePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
