// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationGcsResourceModel) ToSharedDestinationGcsCreateRequest() *shared.DestinationGcsCreateRequest {
	var credential shared.DestinationGcsAuthentication
	var destinationGcsHMACKey *shared.DestinationGcsHMACKey
	if r.Configuration.Credential.HMACKey != nil {
		credentialType := new(shared.DestinationGcsCredentialType)
		if !r.Configuration.Credential.HMACKey.CredentialType.IsUnknown() && !r.Configuration.Credential.HMACKey.CredentialType.IsNull() {
			*credentialType = shared.DestinationGcsCredentialType(r.Configuration.Credential.HMACKey.CredentialType.ValueString())
		} else {
			credentialType = nil
		}
		hmacKeyAccessID := r.Configuration.Credential.HMACKey.HmacKeyAccessID.ValueString()
		hmacKeySecret := r.Configuration.Credential.HMACKey.HmacKeySecret.ValueString()
		destinationGcsHMACKey = &shared.DestinationGcsHMACKey{
			CredentialType:  credentialType,
			HmacKeyAccessID: hmacKeyAccessID,
			HmacKeySecret:   hmacKeySecret,
		}
	}
	if destinationGcsHMACKey != nil {
		credential = shared.DestinationGcsAuthentication{
			DestinationGcsHMACKey: destinationGcsHMACKey,
		}
	}
	var format shared.DestinationGcsOutputFormat
	var destinationGcsAvroApacheAvro *shared.DestinationGcsAvroApacheAvro
	if r.Configuration.Format.AvroApacheAvro != nil {
		var compressionCodec shared.DestinationGcsCompressionCodec
		var destinationGcsNoCompression *shared.DestinationGcsNoCompression
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression != nil {
			codec := new(shared.DestinationGcsCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.IsNull() {
				*codec = shared.DestinationGcsCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.ValueString())
			} else {
				codec = nil
			}
			destinationGcsNoCompression = &shared.DestinationGcsNoCompression{
				Codec: codec,
			}
		}
		if destinationGcsNoCompression != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsNoCompression: destinationGcsNoCompression,
			}
		}
		var destinationGcsDeflate *shared.DestinationGcsDeflate
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate != nil {
			codec1 := new(shared.DestinationGcsSchemasCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.IsNull() {
				*codec1 = shared.DestinationGcsSchemasCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.ValueString())
			} else {
				codec1 = nil
			}
			compressionLevel := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.IsNull() {
				*compressionLevel = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.ValueInt64()
			} else {
				compressionLevel = nil
			}
			destinationGcsDeflate = &shared.DestinationGcsDeflate{
				Codec:            codec1,
				CompressionLevel: compressionLevel,
			}
		}
		if destinationGcsDeflate != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsDeflate: destinationGcsDeflate,
			}
		}
		var destinationGcsBzip2 *shared.DestinationGcsBzip2
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2 != nil {
			codec2 := new(shared.DestinationGcsSchemasFormatCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.IsNull() {
				*codec2 = shared.DestinationGcsSchemasFormatCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.ValueString())
			} else {
				codec2 = nil
			}
			destinationGcsBzip2 = &shared.DestinationGcsBzip2{
				Codec: codec2,
			}
		}
		if destinationGcsBzip2 != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsBzip2: destinationGcsBzip2,
			}
		}
		var destinationGcsXz *shared.DestinationGcsXz
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz != nil {
			codec3 := new(shared.DestinationGcsSchemasFormatOutputFormatCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.IsNull() {
				*codec3 = shared.DestinationGcsSchemasFormatOutputFormatCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.ValueString())
			} else {
				codec3 = nil
			}
			compressionLevel1 := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.IsNull() {
				*compressionLevel1 = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.ValueInt64()
			} else {
				compressionLevel1 = nil
			}
			destinationGcsXz = &shared.DestinationGcsXz{
				Codec:            codec3,
				CompressionLevel: compressionLevel1,
			}
		}
		if destinationGcsXz != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsXz: destinationGcsXz,
			}
		}
		var destinationGcsZstandard *shared.DestinationGcsZstandard
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard != nil {
			codec4 := new(shared.DestinationGcsSchemasFormatOutputFormat1Codec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.IsNull() {
				*codec4 = shared.DestinationGcsSchemasFormatOutputFormat1Codec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.ValueString())
			} else {
				codec4 = nil
			}
			compressionLevel2 := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.IsNull() {
				*compressionLevel2 = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.ValueInt64()
			} else {
				compressionLevel2 = nil
			}
			includeChecksum := new(bool)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.IsNull() {
				*includeChecksum = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.ValueBool()
			} else {
				includeChecksum = nil
			}
			destinationGcsZstandard = &shared.DestinationGcsZstandard{
				Codec:            codec4,
				CompressionLevel: compressionLevel2,
				IncludeChecksum:  includeChecksum,
			}
		}
		if destinationGcsZstandard != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsZstandard: destinationGcsZstandard,
			}
		}
		var destinationGcsSnappy *shared.DestinationGcsSnappy
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy != nil {
			codec5 := new(shared.DestinationGcsSchemasFormatOutputFormat1CompressionCodecCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.IsNull() {
				*codec5 = shared.DestinationGcsSchemasFormatOutputFormat1CompressionCodecCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.ValueString())
			} else {
				codec5 = nil
			}
			destinationGcsSnappy = &shared.DestinationGcsSnappy{
				Codec: codec5,
			}
		}
		if destinationGcsSnappy != nil {
			compressionCodec = shared.DestinationGcsCompressionCodec{
				DestinationGcsSnappy: destinationGcsSnappy,
			}
		}
		formatType := new(shared.DestinationGcsFormatType)
		if !r.Configuration.Format.AvroApacheAvro.FormatType.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.FormatType.IsNull() {
			*formatType = shared.DestinationGcsFormatType(r.Configuration.Format.AvroApacheAvro.FormatType.ValueString())
		} else {
			formatType = nil
		}
		destinationGcsAvroApacheAvro = &shared.DestinationGcsAvroApacheAvro{
			CompressionCodec: compressionCodec,
			FormatType:       formatType,
		}
	}
	if destinationGcsAvroApacheAvro != nil {
		format = shared.DestinationGcsOutputFormat{
			DestinationGcsAvroApacheAvro: destinationGcsAvroApacheAvro,
		}
	}
	var destinationGcsCSVCommaSeparatedValues *shared.DestinationGcsCSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		var compression *shared.DestinationGcsCompression
		if r.Configuration.Format.CSVCommaSeparatedValues.Compression != nil {
			var destinationGcsSchemasNoCompression *shared.DestinationGcsSchemasNoCompression
			if r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression != nil {
				compressionType := new(shared.DestinationGcsCompressionType)
				if !r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType = shared.DestinationGcsCompressionType(r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType = nil
				}
				destinationGcsSchemasNoCompression = &shared.DestinationGcsSchemasNoCompression{
					CompressionType: compressionType,
				}
			}
			if destinationGcsSchemasNoCompression != nil {
				compression = &shared.DestinationGcsCompression{
					DestinationGcsSchemasNoCompression: destinationGcsSchemasNoCompression,
				}
			}
			var destinationGcsGZIP *shared.DestinationGcsGZIP
			if r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip != nil {
				compressionType1 := new(shared.DestinationGcsSchemasCompressionType)
				if !r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.IsNull() {
					*compressionType1 = shared.DestinationGcsSchemasCompressionType(r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType1 = nil
				}
				destinationGcsGZIP = &shared.DestinationGcsGZIP{
					CompressionType: compressionType1,
				}
			}
			if destinationGcsGZIP != nil {
				compression = &shared.DestinationGcsCompression{
					DestinationGcsGZIP: destinationGcsGZIP,
				}
			}
		}
		flattening := new(shared.DestinationGcsNormalization)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.DestinationGcsNormalization(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		formatType1 := new(shared.DestinationGcsSchemasFormatType)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FormatType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FormatType.IsNull() {
			*formatType1 = shared.DestinationGcsSchemasFormatType(r.Configuration.Format.CSVCommaSeparatedValues.FormatType.ValueString())
		} else {
			formatType1 = nil
		}
		destinationGcsCSVCommaSeparatedValues = &shared.DestinationGcsCSVCommaSeparatedValues{
			Compression: compression,
			Flattening:  flattening,
			FormatType:  formatType1,
		}
	}
	if destinationGcsCSVCommaSeparatedValues != nil {
		format = shared.DestinationGcsOutputFormat{
			DestinationGcsCSVCommaSeparatedValues: destinationGcsCSVCommaSeparatedValues,
		}
	}
	var destinationGcsJSONLinesNewlineDelimitedJSON *shared.DestinationGcsJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		var compression1 *shared.DestinationGcsSchemasCompression
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression != nil {
			var destinationGcsSchemasFormatNoCompression *shared.DestinationGcsSchemasFormatNoCompression
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression != nil {
				compressionType2 := new(shared.DestinationGcsSchemasFormatCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType2 = shared.DestinationGcsSchemasFormatCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType2 = nil
				}
				destinationGcsSchemasFormatNoCompression = &shared.DestinationGcsSchemasFormatNoCompression{
					CompressionType: compressionType2,
				}
			}
			if destinationGcsSchemasFormatNoCompression != nil {
				compression1 = &shared.DestinationGcsSchemasCompression{
					DestinationGcsSchemasFormatNoCompression: destinationGcsSchemasFormatNoCompression,
				}
			}
			var destinationGcsSchemasGZIP *shared.DestinationGcsSchemasGZIP
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip != nil {
				compressionType3 := new(shared.DestinationGcsSchemasFormatOutputFormatCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsNull() {
					*compressionType3 = shared.DestinationGcsSchemasFormatOutputFormatCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType3 = nil
				}
				destinationGcsSchemasGZIP = &shared.DestinationGcsSchemasGZIP{
					CompressionType: compressionType3,
				}
			}
			if destinationGcsSchemasGZIP != nil {
				compression1 = &shared.DestinationGcsSchemasCompression{
					DestinationGcsSchemasGZIP: destinationGcsSchemasGZIP,
				}
			}
		}
		formatType2 := new(shared.DestinationGcsSchemasFormatFormatType)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
			*formatType2 = shared.DestinationGcsSchemasFormatFormatType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		} else {
			formatType2 = nil
		}
		destinationGcsJSONLinesNewlineDelimitedJSON = &shared.DestinationGcsJSONLinesNewlineDelimitedJSON{
			Compression: compression1,
			FormatType:  formatType2,
		}
	}
	if destinationGcsJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationGcsOutputFormat{
			DestinationGcsJSONLinesNewlineDelimitedJSON: destinationGcsJSONLinesNewlineDelimitedJSON,
		}
	}
	var destinationGcsParquetColumnarStorage *shared.DestinationGcsParquetColumnarStorage
	if r.Configuration.Format.ParquetColumnarStorage != nil {
		blockSizeMb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.IsNull() {
			*blockSizeMb = r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.ValueInt64()
		} else {
			blockSizeMb = nil
		}
		compressionCodec1 := new(shared.DestinationGcsSchemasCompressionCodec)
		if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
			*compressionCodec1 = shared.DestinationGcsSchemasCompressionCodec(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
		} else {
			compressionCodec1 = nil
		}
		dictionaryEncoding := new(bool)
		if !r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.IsNull() {
			*dictionaryEncoding = r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.ValueBool()
		} else {
			dictionaryEncoding = nil
		}
		dictionaryPageSizeKb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.IsNull() {
			*dictionaryPageSizeKb = r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.ValueInt64()
		} else {
			dictionaryPageSizeKb = nil
		}
		formatType3 := new(shared.DestinationGcsSchemasFormatOutputFormatFormatType)
		if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
			*formatType3 = shared.DestinationGcsSchemasFormatOutputFormatFormatType(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
		} else {
			formatType3 = nil
		}
		maxPaddingSizeMb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.IsNull() {
			*maxPaddingSizeMb = r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.ValueInt64()
		} else {
			maxPaddingSizeMb = nil
		}
		pageSizeKb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.IsNull() {
			*pageSizeKb = r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.ValueInt64()
		} else {
			pageSizeKb = nil
		}
		destinationGcsParquetColumnarStorage = &shared.DestinationGcsParquetColumnarStorage{
			BlockSizeMb:          blockSizeMb,
			CompressionCodec:     compressionCodec1,
			DictionaryEncoding:   dictionaryEncoding,
			DictionaryPageSizeKb: dictionaryPageSizeKb,
			FormatType:           formatType3,
			MaxPaddingSizeMb:     maxPaddingSizeMb,
			PageSizeKb:           pageSizeKb,
		}
	}
	if destinationGcsParquetColumnarStorage != nil {
		format = shared.DestinationGcsOutputFormat{
			DestinationGcsParquetColumnarStorage: destinationGcsParquetColumnarStorage,
		}
	}
	gcsBucketName := r.Configuration.GcsBucketName.ValueString()
	gcsBucketPath := r.Configuration.GcsBucketPath.ValueString()
	gcsBucketRegion := new(shared.DestinationGCSGCSBucketRegion)
	if !r.Configuration.GcsBucketRegion.IsUnknown() && !r.Configuration.GcsBucketRegion.IsNull() {
		*gcsBucketRegion = shared.DestinationGCSGCSBucketRegion(r.Configuration.GcsBucketRegion.ValueString())
	} else {
		gcsBucketRegion = nil
	}
	configuration := shared.DestinationGcs{
		Credential:      credential,
		Format:          format,
		GcsBucketName:   gcsBucketName,
		GcsBucketPath:   gcsBucketPath,
		GcsBucketRegion: gcsBucketRegion,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationGcsCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationGcsResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationGcsResourceModel) ToSharedDestinationGcsPutRequest() *shared.DestinationGcsPutRequest {
	var credential shared.DestinationGcsUpdateAuthentication
	var hmacKey *shared.HMACKey
	if r.Configuration.Credential.HMACKey != nil {
		credentialType := new(shared.CredentialType)
		if !r.Configuration.Credential.HMACKey.CredentialType.IsUnknown() && !r.Configuration.Credential.HMACKey.CredentialType.IsNull() {
			*credentialType = shared.CredentialType(r.Configuration.Credential.HMACKey.CredentialType.ValueString())
		} else {
			credentialType = nil
		}
		hmacKeyAccessID := r.Configuration.Credential.HMACKey.HmacKeyAccessID.ValueString()
		hmacKeySecret := r.Configuration.Credential.HMACKey.HmacKeySecret.ValueString()
		hmacKey = &shared.HMACKey{
			CredentialType:  credentialType,
			HmacKeyAccessID: hmacKeyAccessID,
			HmacKeySecret:   hmacKeySecret,
		}
	}
	if hmacKey != nil {
		credential = shared.DestinationGcsUpdateAuthentication{
			HMACKey: hmacKey,
		}
	}
	var format shared.DestinationGcsUpdateOutputFormat
	var avroApacheAvro *shared.AvroApacheAvro
	if r.Configuration.Format.AvroApacheAvro != nil {
		var compressionCodec shared.CompressionCodec
		var noCompression *shared.NoCompression
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression != nil {
			codec := new(shared.Codec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.IsNull() {
				*codec = shared.Codec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.NoCompression.Codec.ValueString())
			} else {
				codec = nil
			}
			noCompression = &shared.NoCompression{
				Codec: codec,
			}
		}
		if noCompression != nil {
			compressionCodec = shared.CompressionCodec{
				NoCompression: noCompression,
			}
		}
		var deflate *shared.Deflate
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate != nil {
			codec1 := new(shared.DestinationGcsUpdateCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.IsNull() {
				*codec1 = shared.DestinationGcsUpdateCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.Codec.ValueString())
			} else {
				codec1 = nil
			}
			compressionLevel := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.IsNull() {
				*compressionLevel = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Deflate.CompressionLevel.ValueInt64()
			} else {
				compressionLevel = nil
			}
			deflate = &shared.Deflate{
				Codec:            codec1,
				CompressionLevel: compressionLevel,
			}
		}
		if deflate != nil {
			compressionCodec = shared.CompressionCodec{
				Deflate: deflate,
			}
		}
		var bzip2 *shared.Bzip2
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2 != nil {
			codec2 := new(shared.DestinationGcsUpdateSchemasCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.IsNull() {
				*codec2 = shared.DestinationGcsUpdateSchemasCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Bzip2.Codec.ValueString())
			} else {
				codec2 = nil
			}
			bzip2 = &shared.Bzip2{
				Codec: codec2,
			}
		}
		if bzip2 != nil {
			compressionCodec = shared.CompressionCodec{
				Bzip2: bzip2,
			}
		}
		var xz *shared.Xz
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz != nil {
			codec3 := new(shared.DestinationGcsUpdateSchemasFormatCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.IsNull() {
				*codec3 = shared.DestinationGcsUpdateSchemasFormatCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.Codec.ValueString())
			} else {
				codec3 = nil
			}
			compressionLevel1 := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.IsNull() {
				*compressionLevel1 = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Xz.CompressionLevel.ValueInt64()
			} else {
				compressionLevel1 = nil
			}
			xz = &shared.Xz{
				Codec:            codec3,
				CompressionLevel: compressionLevel1,
			}
		}
		if xz != nil {
			compressionCodec = shared.CompressionCodec{
				Xz: xz,
			}
		}
		var zstandard *shared.Zstandard
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard != nil {
			codec4 := new(shared.DestinationGcsUpdateSchemasFormatOutputFormatCodec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.IsNull() {
				*codec4 = shared.DestinationGcsUpdateSchemasFormatOutputFormatCodec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.Codec.ValueString())
			} else {
				codec4 = nil
			}
			compressionLevel2 := new(int64)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.IsNull() {
				*compressionLevel2 = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.CompressionLevel.ValueInt64()
			} else {
				compressionLevel2 = nil
			}
			includeChecksum := new(bool)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.IsNull() {
				*includeChecksum = r.Configuration.Format.AvroApacheAvro.CompressionCodec.Zstandard.IncludeChecksum.ValueBool()
			} else {
				includeChecksum = nil
			}
			zstandard = &shared.Zstandard{
				Codec:            codec4,
				CompressionLevel: compressionLevel2,
				IncludeChecksum:  includeChecksum,
			}
		}
		if zstandard != nil {
			compressionCodec = shared.CompressionCodec{
				Zstandard: zstandard,
			}
		}
		var snappy *shared.Snappy
		if r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy != nil {
			codec5 := new(shared.DestinationGcsUpdateSchemasFormatOutputFormat1Codec)
			if !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.IsNull() {
				*codec5 = shared.DestinationGcsUpdateSchemasFormatOutputFormat1Codec(r.Configuration.Format.AvroApacheAvro.CompressionCodec.Snappy.Codec.ValueString())
			} else {
				codec5 = nil
			}
			snappy = &shared.Snappy{
				Codec: codec5,
			}
		}
		if snappy != nil {
			compressionCodec = shared.CompressionCodec{
				Snappy: snappy,
			}
		}
		formatType := new(shared.DestinationGcsUpdateFormatType)
		if !r.Configuration.Format.AvroApacheAvro.FormatType.IsUnknown() && !r.Configuration.Format.AvroApacheAvro.FormatType.IsNull() {
			*formatType = shared.DestinationGcsUpdateFormatType(r.Configuration.Format.AvroApacheAvro.FormatType.ValueString())
		} else {
			formatType = nil
		}
		avroApacheAvro = &shared.AvroApacheAvro{
			CompressionCodec: compressionCodec,
			FormatType:       formatType,
		}
	}
	if avroApacheAvro != nil {
		format = shared.DestinationGcsUpdateOutputFormat{
			AvroApacheAvro: avroApacheAvro,
		}
	}
	var destinationGcsUpdateCSVCommaSeparatedValues *shared.DestinationGcsUpdateCSVCommaSeparatedValues
	if r.Configuration.Format.CSVCommaSeparatedValues != nil {
		var compression *shared.Compression
		if r.Configuration.Format.CSVCommaSeparatedValues.Compression != nil {
			var destinationGcsUpdateNoCompression *shared.DestinationGcsUpdateNoCompression
			if r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression != nil {
				compressionType := new(shared.CompressionType)
				if !r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType = shared.CompressionType(r.Configuration.Format.CSVCommaSeparatedValues.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType = nil
				}
				destinationGcsUpdateNoCompression = &shared.DestinationGcsUpdateNoCompression{
					CompressionType: compressionType,
				}
			}
			if destinationGcsUpdateNoCompression != nil {
				compression = &shared.Compression{
					DestinationGcsUpdateNoCompression: destinationGcsUpdateNoCompression,
				}
			}
			var gzip *shared.Gzip
			if r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip != nil {
				compressionType1 := new(shared.DestinationGcsUpdateCompressionType)
				if !r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.IsNull() {
					*compressionType1 = shared.DestinationGcsUpdateCompressionType(r.Configuration.Format.CSVCommaSeparatedValues.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType1 = nil
				}
				gzip = &shared.Gzip{
					CompressionType: compressionType1,
				}
			}
			if gzip != nil {
				compression = &shared.Compression{
					Gzip: gzip,
				}
			}
		}
		flattening := new(shared.Normalization)
		if !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.Flattening.IsNull() {
			*flattening = shared.Normalization(r.Configuration.Format.CSVCommaSeparatedValues.Flattening.ValueString())
		} else {
			flattening = nil
		}
		formatType1 := new(shared.DestinationGcsUpdateSchemasFormatType)
		if !r.Configuration.Format.CSVCommaSeparatedValues.FormatType.IsUnknown() && !r.Configuration.Format.CSVCommaSeparatedValues.FormatType.IsNull() {
			*formatType1 = shared.DestinationGcsUpdateSchemasFormatType(r.Configuration.Format.CSVCommaSeparatedValues.FormatType.ValueString())
		} else {
			formatType1 = nil
		}
		destinationGcsUpdateCSVCommaSeparatedValues = &shared.DestinationGcsUpdateCSVCommaSeparatedValues{
			Compression: compression,
			Flattening:  flattening,
			FormatType:  formatType1,
		}
	}
	if destinationGcsUpdateCSVCommaSeparatedValues != nil {
		format = shared.DestinationGcsUpdateOutputFormat{
			DestinationGcsUpdateCSVCommaSeparatedValues: destinationGcsUpdateCSVCommaSeparatedValues,
		}
	}
	var destinationGcsUpdateJSONLinesNewlineDelimitedJSON *shared.DestinationGcsUpdateJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.JSONLinesNewlineDelimitedJSON != nil {
		var compression1 *shared.DestinationGcsUpdateCompression
		if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression != nil {
			var destinationGcsUpdateSchemasNoCompression *shared.DestinationGcsUpdateSchemasNoCompression
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression != nil {
				compressionType2 := new(shared.DestinationGcsUpdateSchemasCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.IsNull() {
					*compressionType2 = shared.DestinationGcsUpdateSchemasCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.NoCompression.CompressionType.ValueString())
				} else {
					compressionType2 = nil
				}
				destinationGcsUpdateSchemasNoCompression = &shared.DestinationGcsUpdateSchemasNoCompression{
					CompressionType: compressionType2,
				}
			}
			if destinationGcsUpdateSchemasNoCompression != nil {
				compression1 = &shared.DestinationGcsUpdateCompression{
					DestinationGcsUpdateSchemasNoCompression: destinationGcsUpdateSchemasNoCompression,
				}
			}
			var destinationGcsUpdateGZIP *shared.DestinationGcsUpdateGZIP
			if r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip != nil {
				compressionType3 := new(shared.DestinationGcsUpdateSchemasFormatCompressionType)
				if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.IsNull() {
					*compressionType3 = shared.DestinationGcsUpdateSchemasFormatCompressionType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.Compression.Gzip.CompressionType.ValueString())
				} else {
					compressionType3 = nil
				}
				destinationGcsUpdateGZIP = &shared.DestinationGcsUpdateGZIP{
					CompressionType: compressionType3,
				}
			}
			if destinationGcsUpdateGZIP != nil {
				compression1 = &shared.DestinationGcsUpdateCompression{
					DestinationGcsUpdateGZIP: destinationGcsUpdateGZIP,
				}
			}
		}
		formatType2 := new(shared.DestinationGcsUpdateSchemasFormatFormatType)
		if !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsUnknown() && !r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.IsNull() {
			*formatType2 = shared.DestinationGcsUpdateSchemasFormatFormatType(r.Configuration.Format.JSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		} else {
			formatType2 = nil
		}
		destinationGcsUpdateJSONLinesNewlineDelimitedJSON = &shared.DestinationGcsUpdateJSONLinesNewlineDelimitedJSON{
			Compression: compression1,
			FormatType:  formatType2,
		}
	}
	if destinationGcsUpdateJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationGcsUpdateOutputFormat{
			DestinationGcsUpdateJSONLinesNewlineDelimitedJSON: destinationGcsUpdateJSONLinesNewlineDelimitedJSON,
		}
	}
	var destinationGcsUpdateParquetColumnarStorage *shared.DestinationGcsUpdateParquetColumnarStorage
	if r.Configuration.Format.ParquetColumnarStorage != nil {
		blockSizeMb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.IsNull() {
			*blockSizeMb = r.Configuration.Format.ParquetColumnarStorage.BlockSizeMb.ValueInt64()
		} else {
			blockSizeMb = nil
		}
		compressionCodec1 := new(shared.DestinationGcsUpdateCompressionCodec)
		if !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.IsNull() {
			*compressionCodec1 = shared.DestinationGcsUpdateCompressionCodec(r.Configuration.Format.ParquetColumnarStorage.CompressionCodec.ValueString())
		} else {
			compressionCodec1 = nil
		}
		dictionaryEncoding := new(bool)
		if !r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.IsNull() {
			*dictionaryEncoding = r.Configuration.Format.ParquetColumnarStorage.DictionaryEncoding.ValueBool()
		} else {
			dictionaryEncoding = nil
		}
		dictionaryPageSizeKb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.IsNull() {
			*dictionaryPageSizeKb = r.Configuration.Format.ParquetColumnarStorage.DictionaryPageSizeKb.ValueInt64()
		} else {
			dictionaryPageSizeKb = nil
		}
		formatType3 := new(shared.DestinationGcsUpdateSchemasFormatOutputFormatFormatType)
		if !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.FormatType.IsNull() {
			*formatType3 = shared.DestinationGcsUpdateSchemasFormatOutputFormatFormatType(r.Configuration.Format.ParquetColumnarStorage.FormatType.ValueString())
		} else {
			formatType3 = nil
		}
		maxPaddingSizeMb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.IsNull() {
			*maxPaddingSizeMb = r.Configuration.Format.ParquetColumnarStorage.MaxPaddingSizeMb.ValueInt64()
		} else {
			maxPaddingSizeMb = nil
		}
		pageSizeKb := new(int64)
		if !r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.IsUnknown() && !r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.IsNull() {
			*pageSizeKb = r.Configuration.Format.ParquetColumnarStorage.PageSizeKb.ValueInt64()
		} else {
			pageSizeKb = nil
		}
		destinationGcsUpdateParquetColumnarStorage = &shared.DestinationGcsUpdateParquetColumnarStorage{
			BlockSizeMb:          blockSizeMb,
			CompressionCodec:     compressionCodec1,
			DictionaryEncoding:   dictionaryEncoding,
			DictionaryPageSizeKb: dictionaryPageSizeKb,
			FormatType:           formatType3,
			MaxPaddingSizeMb:     maxPaddingSizeMb,
			PageSizeKb:           pageSizeKb,
		}
	}
	if destinationGcsUpdateParquetColumnarStorage != nil {
		format = shared.DestinationGcsUpdateOutputFormat{
			DestinationGcsUpdateParquetColumnarStorage: destinationGcsUpdateParquetColumnarStorage,
		}
	}
	gcsBucketName := r.Configuration.GcsBucketName.ValueString()
	gcsBucketPath := r.Configuration.GcsBucketPath.ValueString()
	gcsBucketRegion := new(shared.GCSBucketRegion)
	if !r.Configuration.GcsBucketRegion.IsUnknown() && !r.Configuration.GcsBucketRegion.IsNull() {
		*gcsBucketRegion = shared.GCSBucketRegion(r.Configuration.GcsBucketRegion.ValueString())
	} else {
		gcsBucketRegion = nil
	}
	configuration := shared.DestinationGcsUpdate{
		Credential:      credential,
		Format:          format,
		GcsBucketName:   gcsBucketName,
		GcsBucketPath:   gcsBucketPath,
		GcsBucketRegion: gcsBucketRegion,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationGcsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
