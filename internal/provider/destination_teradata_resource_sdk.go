// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationTeradataResourceModel) ToSharedDestinationTeradataCreateRequest(ctx context.Context) (*shared.DestinationTeradataCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	var logmech *shared.AuthorizationMechanism
	if r.Configuration.Logmech != nil {
		var td2 *shared.Td2
		if r.Configuration.Logmech.Td2 != nil {
			var username string
			username = r.Configuration.Logmech.Td2.Username.ValueString()

			var password string
			password = r.Configuration.Logmech.Td2.Password.ValueString()

			td2 = &shared.Td2{
				Username: username,
				Password: password,
			}
		}
		if td2 != nil {
			logmech = &shared.AuthorizationMechanism{
				Td2: td2,
			}
		}
		var ldap *shared.Ldap
		if r.Configuration.Logmech.Ldap != nil {
			var username1 string
			username1 = r.Configuration.Logmech.Ldap.Username.ValueString()

			var password1 string
			password1 = r.Configuration.Logmech.Ldap.Password.ValueString()

			ldap = &shared.Ldap{
				Username: username1,
				Password: password1,
			}
		}
		if ldap != nil {
			logmech = &shared.AuthorizationMechanism{
				Ldap: ldap,
			}
		}
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationTeradataSSLModes
	if r.Configuration.SslMode != nil {
		var destinationTeradataDisable *shared.DestinationTeradataDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationTeradataDisable = &shared.DestinationTeradataDisable{}
		}
		if destinationTeradataDisable != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataDisable: destinationTeradataDisable,
			}
		}
		var destinationTeradataAllow *shared.DestinationTeradataAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationTeradataAllow = &shared.DestinationTeradataAllow{}
		}
		if destinationTeradataAllow != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataAllow: destinationTeradataAllow,
			}
		}
		var destinationTeradataPrefer *shared.DestinationTeradataPrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationTeradataPrefer = &shared.DestinationTeradataPrefer{}
		}
		if destinationTeradataPrefer != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataPrefer: destinationTeradataPrefer,
			}
		}
		var destinationTeradataRequire *shared.DestinationTeradataRequire
		if r.Configuration.SslMode.Require != nil {
			destinationTeradataRequire = &shared.DestinationTeradataRequire{}
		}
		if destinationTeradataRequire != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataRequire: destinationTeradataRequire,
			}
		}
		var destinationTeradataVerifyCa *shared.DestinationTeradataVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var sslCaCertificate string
			sslCaCertificate = r.Configuration.SslMode.VerifyCa.SslCaCertificate.ValueString()

			destinationTeradataVerifyCa = &shared.DestinationTeradataVerifyCa{
				SslCaCertificate: sslCaCertificate,
			}
		}
		if destinationTeradataVerifyCa != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataVerifyCa: destinationTeradataVerifyCa,
			}
		}
		var destinationTeradataVerifyFull *shared.DestinationTeradataVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var sslCaCertificate1 string
			sslCaCertificate1 = r.Configuration.SslMode.VerifyFull.SslCaCertificate.ValueString()

			destinationTeradataVerifyFull = &shared.DestinationTeradataVerifyFull{
				SslCaCertificate: sslCaCertificate1,
			}
		}
		if destinationTeradataVerifyFull != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataVerifyFull: destinationTeradataVerifyFull,
			}
		}
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	queryBand := new(string)
	if !r.Configuration.QueryBand.IsUnknown() && !r.Configuration.QueryBand.IsNull() {
		*queryBand = r.Configuration.QueryBand.ValueString()
	} else {
		queryBand = nil
	}
	configuration := shared.DestinationTeradata{
		Host:          host,
		Logmech:       logmech,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		JdbcURLParams: jdbcURLParams,
		QueryBand:     queryBand,
	}
	out := shared.DestinationTeradataCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationTeradataResourceModel) ToSharedDestinationTeradataPutRequest(ctx context.Context) (*shared.DestinationTeradataPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var host string
	host = r.Configuration.Host.ValueString()

	var logmech *shared.DestinationTeradataUpdateAuthorizationMechanism
	if r.Configuration.Logmech != nil {
		var destinationTeradataUpdateTd2 *shared.DestinationTeradataUpdateTd2
		if r.Configuration.Logmech.Td2 != nil {
			var username string
			username = r.Configuration.Logmech.Td2.Username.ValueString()

			var password string
			password = r.Configuration.Logmech.Td2.Password.ValueString()

			destinationTeradataUpdateTd2 = &shared.DestinationTeradataUpdateTd2{
				Username: username,
				Password: password,
			}
		}
		if destinationTeradataUpdateTd2 != nil {
			logmech = &shared.DestinationTeradataUpdateAuthorizationMechanism{
				DestinationTeradataUpdateTd2: destinationTeradataUpdateTd2,
			}
		}
		var destinationTeradataUpdateLDAP *shared.DestinationTeradataUpdateLDAP
		if r.Configuration.Logmech.Ldap != nil {
			var username1 string
			username1 = r.Configuration.Logmech.Ldap.Username.ValueString()

			var password1 string
			password1 = r.Configuration.Logmech.Ldap.Password.ValueString()

			destinationTeradataUpdateLDAP = &shared.DestinationTeradataUpdateLDAP{
				Username: username1,
				Password: password1,
			}
		}
		if destinationTeradataUpdateLDAP != nil {
			logmech = &shared.DestinationTeradataUpdateAuthorizationMechanism{
				DestinationTeradataUpdateLDAP: destinationTeradataUpdateLDAP,
			}
		}
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationTeradataUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var destinationTeradataUpdateDisable *shared.DestinationTeradataUpdateDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationTeradataUpdateDisable = &shared.DestinationTeradataUpdateDisable{}
		}
		if destinationTeradataUpdateDisable != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateDisable: destinationTeradataUpdateDisable,
			}
		}
		var destinationTeradataUpdateAllow *shared.DestinationTeradataUpdateAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationTeradataUpdateAllow = &shared.DestinationTeradataUpdateAllow{}
		}
		if destinationTeradataUpdateAllow != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateAllow: destinationTeradataUpdateAllow,
			}
		}
		var destinationTeradataUpdatePrefer *shared.DestinationTeradataUpdatePrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationTeradataUpdatePrefer = &shared.DestinationTeradataUpdatePrefer{}
		}
		if destinationTeradataUpdatePrefer != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdatePrefer: destinationTeradataUpdatePrefer,
			}
		}
		var destinationTeradataUpdateRequire *shared.DestinationTeradataUpdateRequire
		if r.Configuration.SslMode.Require != nil {
			destinationTeradataUpdateRequire = &shared.DestinationTeradataUpdateRequire{}
		}
		if destinationTeradataUpdateRequire != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateRequire: destinationTeradataUpdateRequire,
			}
		}
		var destinationTeradataUpdateVerifyCa *shared.DestinationTeradataUpdateVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			var sslCaCertificate string
			sslCaCertificate = r.Configuration.SslMode.VerifyCa.SslCaCertificate.ValueString()

			destinationTeradataUpdateVerifyCa = &shared.DestinationTeradataUpdateVerifyCa{
				SslCaCertificate: sslCaCertificate,
			}
		}
		if destinationTeradataUpdateVerifyCa != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateVerifyCa: destinationTeradataUpdateVerifyCa,
			}
		}
		var destinationTeradataUpdateVerifyFull *shared.DestinationTeradataUpdateVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			var sslCaCertificate1 string
			sslCaCertificate1 = r.Configuration.SslMode.VerifyFull.SslCaCertificate.ValueString()

			destinationTeradataUpdateVerifyFull = &shared.DestinationTeradataUpdateVerifyFull{
				SslCaCertificate: sslCaCertificate1,
			}
		}
		if destinationTeradataUpdateVerifyFull != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateVerifyFull: destinationTeradataUpdateVerifyFull,
			}
		}
	}
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	queryBand := new(string)
	if !r.Configuration.QueryBand.IsUnknown() && !r.Configuration.QueryBand.IsNull() {
		*queryBand = r.Configuration.QueryBand.ValueString()
	} else {
		queryBand = nil
	}
	configuration := shared.DestinationTeradataUpdate{
		Host:          host,
		Logmech:       logmech,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		JdbcURLParams: jdbcURLParams,
		QueryBand:     queryBand,
	}
	out := shared.DestinationTeradataPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationTeradataResourceModel) ToOperationsPutDestinationTeradataRequest(ctx context.Context) (*operations.PutDestinationTeradataRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationTeradataPutRequest, destinationTeradataPutRequestDiags := r.ToSharedDestinationTeradataPutRequest(ctx)
	diags.Append(destinationTeradataPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationTeradataRequest{
		DestinationID:                 destinationID,
		DestinationTeradataPutRequest: destinationTeradataPutRequest,
	}

	return &out, diags
}

func (r *DestinationTeradataResourceModel) ToOperationsGetDestinationTeradataRequest(ctx context.Context) (*operations.GetDestinationTeradataRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationTeradataRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationTeradataResourceModel) ToOperationsDeleteDestinationTeradataRequest(ctx context.Context) (*operations.DeleteDestinationTeradataRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationTeradataRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationTeradataResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
