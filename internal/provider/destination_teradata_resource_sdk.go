// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationTeradataResourceModel) ToSharedDestinationTeradataCreateRequest() *shared.DestinationTeradataCreateRequest {
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationTeradataSSLModes
	if r.Configuration.SslMode != nil {
		var destinationTeradataDisable *shared.DestinationTeradataDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationTeradataDisable = &shared.DestinationTeradataDisable{}
		}
		if destinationTeradataDisable != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataDisable: destinationTeradataDisable,
			}
		}
		var destinationTeradataAllow *shared.DestinationTeradataAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationTeradataAllow = &shared.DestinationTeradataAllow{}
		}
		if destinationTeradataAllow != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataAllow: destinationTeradataAllow,
			}
		}
		var destinationTeradataPrefer *shared.DestinationTeradataPrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationTeradataPrefer = &shared.DestinationTeradataPrefer{}
		}
		if destinationTeradataPrefer != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataPrefer: destinationTeradataPrefer,
			}
		}
		var destinationTeradataRequire *shared.DestinationTeradataRequire
		if r.Configuration.SslMode.Require != nil {
			destinationTeradataRequire = &shared.DestinationTeradataRequire{}
		}
		if destinationTeradataRequire != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataRequire: destinationTeradataRequire,
			}
		}
		var destinationTeradataVerifyCa *shared.DestinationTeradataVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			sslCaCertificate := r.Configuration.SslMode.VerifyCa.SslCaCertificate.ValueString()
			destinationTeradataVerifyCa = &shared.DestinationTeradataVerifyCa{
				SslCaCertificate: sslCaCertificate,
			}
		}
		if destinationTeradataVerifyCa != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataVerifyCa: destinationTeradataVerifyCa,
			}
		}
		var destinationTeradataVerifyFull *shared.DestinationTeradataVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			sslCaCertificate1 := r.Configuration.SslMode.VerifyFull.SslCaCertificate.ValueString()
			destinationTeradataVerifyFull = &shared.DestinationTeradataVerifyFull{
				SslCaCertificate: sslCaCertificate1,
			}
		}
		if destinationTeradataVerifyFull != nil {
			sslMode = &shared.DestinationTeradataSSLModes{
				DestinationTeradataVerifyFull: destinationTeradataVerifyFull,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationTeradata{
		Host:          host,
		JdbcURLParams: jdbcURLParams,
		Password:      password,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		Username:      username,
	}
	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationTeradataCreateRequest{
		Configuration: configuration,
		DefinitionID:  definitionID,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationTeradataResourceModel) RefreshFromSharedDestinationResponse(resp *shared.DestinationResponse) {
	if resp != nil {
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *DestinationTeradataResourceModel) ToSharedDestinationTeradataPutRequest() *shared.DestinationTeradataPutRequest {
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	schema := new(string)
	if !r.Configuration.Schema.IsUnknown() && !r.Configuration.Schema.IsNull() {
		*schema = r.Configuration.Schema.ValueString()
	} else {
		schema = nil
	}
	ssl := new(bool)
	if !r.Configuration.Ssl.IsUnknown() && !r.Configuration.Ssl.IsNull() {
		*ssl = r.Configuration.Ssl.ValueBool()
	} else {
		ssl = nil
	}
	var sslMode *shared.DestinationTeradataUpdateSSLModes
	if r.Configuration.SslMode != nil {
		var destinationTeradataUpdateDisable *shared.DestinationTeradataUpdateDisable
		if r.Configuration.SslMode.Disable != nil {
			destinationTeradataUpdateDisable = &shared.DestinationTeradataUpdateDisable{}
		}
		if destinationTeradataUpdateDisable != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateDisable: destinationTeradataUpdateDisable,
			}
		}
		var destinationTeradataUpdateAllow *shared.DestinationTeradataUpdateAllow
		if r.Configuration.SslMode.Allow != nil {
			destinationTeradataUpdateAllow = &shared.DestinationTeradataUpdateAllow{}
		}
		if destinationTeradataUpdateAllow != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateAllow: destinationTeradataUpdateAllow,
			}
		}
		var destinationTeradataUpdatePrefer *shared.DestinationTeradataUpdatePrefer
		if r.Configuration.SslMode.Prefer != nil {
			destinationTeradataUpdatePrefer = &shared.DestinationTeradataUpdatePrefer{}
		}
		if destinationTeradataUpdatePrefer != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdatePrefer: destinationTeradataUpdatePrefer,
			}
		}
		var destinationTeradataUpdateRequire *shared.DestinationTeradataUpdateRequire
		if r.Configuration.SslMode.Require != nil {
			destinationTeradataUpdateRequire = &shared.DestinationTeradataUpdateRequire{}
		}
		if destinationTeradataUpdateRequire != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateRequire: destinationTeradataUpdateRequire,
			}
		}
		var destinationTeradataUpdateVerifyCa *shared.DestinationTeradataUpdateVerifyCa
		if r.Configuration.SslMode.VerifyCa != nil {
			sslCaCertificate := r.Configuration.SslMode.VerifyCa.SslCaCertificate.ValueString()
			destinationTeradataUpdateVerifyCa = &shared.DestinationTeradataUpdateVerifyCa{
				SslCaCertificate: sslCaCertificate,
			}
		}
		if destinationTeradataUpdateVerifyCa != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateVerifyCa: destinationTeradataUpdateVerifyCa,
			}
		}
		var destinationTeradataUpdateVerifyFull *shared.DestinationTeradataUpdateVerifyFull
		if r.Configuration.SslMode.VerifyFull != nil {
			sslCaCertificate1 := r.Configuration.SslMode.VerifyFull.SslCaCertificate.ValueString()
			destinationTeradataUpdateVerifyFull = &shared.DestinationTeradataUpdateVerifyFull{
				SslCaCertificate: sslCaCertificate1,
			}
		}
		if destinationTeradataUpdateVerifyFull != nil {
			sslMode = &shared.DestinationTeradataUpdateSSLModes{
				DestinationTeradataUpdateVerifyFull: destinationTeradataUpdateVerifyFull,
			}
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationTeradataUpdate{
		Host:          host,
		JdbcURLParams: jdbcURLParams,
		Password:      password,
		Schema:        schema,
		Ssl:           ssl,
		SslMode:       sslMode,
		Username:      username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationTeradataPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}
