// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	customTypes "github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceAmazonAdsResourceModel) ToSharedSourceAmazonAdsCreateRequest() *shared.SourceAmazonAdsCreateRequest {
	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	region := new(shared.Region)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.Region(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var profiles []int64 = []int64{}
	for _, profilesItem := range r.Configuration.Profiles {
		profiles = append(profiles, profilesItem.ValueInt64())
	}
	var marketplaceIds []string = []string{}
	for _, marketplaceIdsItem := range r.Configuration.MarketplaceIds {
		marketplaceIds = append(marketplaceIds, marketplaceIdsItem.ValueString())
	}
	lookBackWindow := new(int64)
	if !r.Configuration.LookBackWindow.IsUnknown() && !r.Configuration.LookBackWindow.IsNull() {
		*lookBackWindow = r.Configuration.LookBackWindow.ValueInt64()
	} else {
		lookBackWindow = nil
	}
	configuration := shared.SourceAmazonAds{
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		RefreshToken:   refreshToken,
		Region:         region,
		StartDate:      startDate,
		Profiles:       profiles,
		MarketplaceIds: marketplaceIds,
		LookBackWindow: lookBackWindow,
	}
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	out := shared.SourceAmazonAdsCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
		SecretID:      secretID,
	}
	return &out
}

func (r *SourceAmazonAdsResourceModel) RefreshFromSharedSourceResponse(resp *shared.SourceResponse) {
	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.Name = types.StringValue(resp.Name)
		r.SourceID = types.StringValue(resp.SourceID)
		r.SourceType = types.StringValue(resp.SourceType)
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}
}

func (r *SourceAmazonAdsResourceModel) ToSharedSourceAmazonAdsPutRequest() *shared.SourceAmazonAdsPutRequest {
	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var refreshToken string
	refreshToken = r.Configuration.RefreshToken.ValueString()

	region := new(shared.SourceAmazonAdsUpdateRegion)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceAmazonAdsUpdateRegion(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		startDate = customTypes.MustNewDateFromString(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	var profiles []int64 = []int64{}
	for _, profilesItem := range r.Configuration.Profiles {
		profiles = append(profiles, profilesItem.ValueInt64())
	}
	var marketplaceIds []string = []string{}
	for _, marketplaceIdsItem := range r.Configuration.MarketplaceIds {
		marketplaceIds = append(marketplaceIds, marketplaceIdsItem.ValueString())
	}
	lookBackWindow := new(int64)
	if !r.Configuration.LookBackWindow.IsUnknown() && !r.Configuration.LookBackWindow.IsNull() {
		*lookBackWindow = r.Configuration.LookBackWindow.ValueInt64()
	} else {
		lookBackWindow = nil
	}
	configuration := shared.SourceAmazonAdsUpdate{
		ClientID:       clientID,
		ClientSecret:   clientSecret,
		RefreshToken:   refreshToken,
		Region:         region,
		StartDate:      startDate,
		Profiles:       profiles,
		MarketplaceIds: marketplaceIds,
		LookBackWindow: lookBackWindow,
	}
	out := shared.SourceAmazonAdsPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}
	return &out
}
