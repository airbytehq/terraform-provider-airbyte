// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationFireboltResourceModel) ToSharedDestinationFireboltCreateRequest(ctx context.Context) (*shared.DestinationFireboltCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var account string
	account = r.Configuration.Account.ValueString()

	host := new(string)
	if !r.Configuration.Host.IsUnknown() && !r.Configuration.Host.IsNull() {
		*host = r.Configuration.Host.ValueString()
	} else {
		host = nil
	}
	var database string
	database = r.Configuration.Database.ValueString()

	var engine string
	engine = r.Configuration.Engine.ValueString()

	var loadingMethod *shared.DestinationFireboltLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var sqlInserts *shared.SQLInserts
		if r.Configuration.LoadingMethod.SQLInserts != nil {
			sqlInserts = &shared.SQLInserts{}
		}
		if sqlInserts != nil {
			loadingMethod = &shared.DestinationFireboltLoadingMethod{
				SQLInserts: sqlInserts,
			}
		}
		var externalTableViaS3 *shared.ExternalTableViaS3
		if r.Configuration.LoadingMethod.ExternalTableViaS3 != nil {
			var s3Bucket string
			s3Bucket = r.Configuration.LoadingMethod.ExternalTableViaS3.S3Bucket.ValueString()

			var s3Region string
			s3Region = r.Configuration.LoadingMethod.ExternalTableViaS3.S3Region.ValueString()

			var awsKeyID string
			awsKeyID = r.Configuration.LoadingMethod.ExternalTableViaS3.AwsKeyID.ValueString()

			var awsKeySecret string
			awsKeySecret = r.Configuration.LoadingMethod.ExternalTableViaS3.AwsKeySecret.ValueString()

			externalTableViaS3 = &shared.ExternalTableViaS3{
				S3Bucket:     s3Bucket,
				S3Region:     s3Region,
				AwsKeyID:     awsKeyID,
				AwsKeySecret: awsKeySecret,
			}
		}
		if externalTableViaS3 != nil {
			loadingMethod = &shared.DestinationFireboltLoadingMethod{
				ExternalTableViaS3: externalTableViaS3,
			}
		}
	}
	configuration := shared.DestinationFirebolt{
		ClientID:      clientID,
		ClientSecret:  clientSecret,
		Account:       account,
		Host:          host,
		Database:      database,
		Engine:        engine,
		LoadingMethod: loadingMethod,
	}
	out := shared.DestinationFireboltCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationFireboltResourceModel) ToSharedDestinationFireboltPutRequest(ctx context.Context) (*shared.DestinationFireboltPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var clientID string
	clientID = r.Configuration.ClientID.ValueString()

	var clientSecret string
	clientSecret = r.Configuration.ClientSecret.ValueString()

	var account string
	account = r.Configuration.Account.ValueString()

	host := new(string)
	if !r.Configuration.Host.IsUnknown() && !r.Configuration.Host.IsNull() {
		*host = r.Configuration.Host.ValueString()
	} else {
		host = nil
	}
	var database string
	database = r.Configuration.Database.ValueString()

	var engine string
	engine = r.Configuration.Engine.ValueString()

	var loadingMethod *shared.DestinationFireboltUpdateLoadingMethod
	if r.Configuration.LoadingMethod != nil {
		var destinationFireboltUpdateSQLInserts *shared.DestinationFireboltUpdateSQLInserts
		if r.Configuration.LoadingMethod.SQLInserts != nil {
			destinationFireboltUpdateSQLInserts = &shared.DestinationFireboltUpdateSQLInserts{}
		}
		if destinationFireboltUpdateSQLInserts != nil {
			loadingMethod = &shared.DestinationFireboltUpdateLoadingMethod{
				DestinationFireboltUpdateSQLInserts: destinationFireboltUpdateSQLInserts,
			}
		}
		var destinationFireboltUpdateExternalTableViaS3 *shared.DestinationFireboltUpdateExternalTableViaS3
		if r.Configuration.LoadingMethod.ExternalTableViaS3 != nil {
			var s3Bucket string
			s3Bucket = r.Configuration.LoadingMethod.ExternalTableViaS3.S3Bucket.ValueString()

			var s3Region string
			s3Region = r.Configuration.LoadingMethod.ExternalTableViaS3.S3Region.ValueString()

			var awsKeyID string
			awsKeyID = r.Configuration.LoadingMethod.ExternalTableViaS3.AwsKeyID.ValueString()

			var awsKeySecret string
			awsKeySecret = r.Configuration.LoadingMethod.ExternalTableViaS3.AwsKeySecret.ValueString()

			destinationFireboltUpdateExternalTableViaS3 = &shared.DestinationFireboltUpdateExternalTableViaS3{
				S3Bucket:     s3Bucket,
				S3Region:     s3Region,
				AwsKeyID:     awsKeyID,
				AwsKeySecret: awsKeySecret,
			}
		}
		if destinationFireboltUpdateExternalTableViaS3 != nil {
			loadingMethod = &shared.DestinationFireboltUpdateLoadingMethod{
				DestinationFireboltUpdateExternalTableViaS3: destinationFireboltUpdateExternalTableViaS3,
			}
		}
	}
	configuration := shared.DestinationFireboltUpdate{
		ClientID:      clientID,
		ClientSecret:  clientSecret,
		Account:       account,
		Host:          host,
		Database:      database,
		Engine:        engine,
		LoadingMethod: loadingMethod,
	}
	out := shared.DestinationFireboltPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationFireboltResourceModel) ToOperationsPutDestinationFireboltRequest(ctx context.Context) (*operations.PutDestinationFireboltRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationFireboltPutRequest, destinationFireboltPutRequestDiags := r.ToSharedDestinationFireboltPutRequest(ctx)
	diags.Append(destinationFireboltPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationFireboltRequest{
		DestinationID:                 destinationID,
		DestinationFireboltPutRequest: destinationFireboltPutRequest,
	}

	return &out, diags
}

func (r *DestinationFireboltResourceModel) ToOperationsGetDestinationFireboltRequest(ctx context.Context) (*operations.GetDestinationFireboltRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationFireboltRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationFireboltResourceModel) ToOperationsDeleteDestinationFireboltRequest(ctx context.Context) (*operations.DeleteDestinationFireboltRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationFireboltRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationFireboltResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
