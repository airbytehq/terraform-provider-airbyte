// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPineconeResourceModel) ToCreateSDKType() *shared.DestinationPineconeCreateRequest {
	var embedding shared.DestinationPineconeEmbedding
	var destinationPineconeEmbeddingOpenAI *shared.DestinationPineconeEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationPineconeEmbeddingOpenAI != nil {
		openaiKey := r.Configuration.Embedding.DestinationPineconeEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationPineconeEmbeddingOpenAI = &shared.DestinationPineconeEmbeddingOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationPineconeEmbeddingOpenAI != nil {
		embedding = shared.DestinationPineconeEmbedding{
			DestinationPineconeEmbeddingOpenAI: destinationPineconeEmbeddingOpenAI,
		}
	}
	var destinationPineconeEmbeddingCohere *shared.DestinationPineconeEmbeddingCohere
	if r.Configuration.Embedding.DestinationPineconeEmbeddingCohere != nil {
		cohereKey := r.Configuration.Embedding.DestinationPineconeEmbeddingCohere.CohereKey.ValueString()
		destinationPineconeEmbeddingCohere = &shared.DestinationPineconeEmbeddingCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationPineconeEmbeddingCohere != nil {
		embedding = shared.DestinationPineconeEmbedding{
			DestinationPineconeEmbeddingCohere: destinationPineconeEmbeddingCohere,
		}
	}
	var destinationPineconeEmbeddingFake *shared.DestinationPineconeEmbeddingFake
	if r.Configuration.Embedding.DestinationPineconeEmbeddingFake != nil {
		destinationPineconeEmbeddingFake = &shared.DestinationPineconeEmbeddingFake{}
	}
	if destinationPineconeEmbeddingFake != nil {
		embedding = shared.DestinationPineconeEmbedding{
			DestinationPineconeEmbeddingFake: destinationPineconeEmbeddingFake,
		}
	}
	index := r.Configuration.Indexing.Index.ValueString()
	pineconeEnvironment := r.Configuration.Indexing.PineconeEnvironment.ValueString()
	pineconeKey := r.Configuration.Indexing.PineconeKey.ValueString()
	indexing := shared.DestinationPineconeIndexing{
		Index:               index,
		PineconeEnvironment: pineconeEnvironment,
		PineconeKey:         pineconeKey,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationPineconeProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationPinecone{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPineconeCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPineconeResourceModel) ToGetSDKType() *shared.DestinationPineconeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPineconeResourceModel) ToUpdateSDKType() *shared.DestinationPineconePutRequest {
	var embedding shared.DestinationPineconeUpdateEmbedding
	var destinationPineconeUpdateEmbeddingOpenAI *shared.DestinationPineconeUpdateEmbeddingOpenAI
	if r.Configuration.Embedding.DestinationPineconeUpdateEmbeddingOpenAI != nil {
		openaiKey := r.Configuration.Embedding.DestinationPineconeUpdateEmbeddingOpenAI.OpenaiKey.ValueString()
		destinationPineconeUpdateEmbeddingOpenAI = &shared.DestinationPineconeUpdateEmbeddingOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationPineconeUpdateEmbeddingOpenAI != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			DestinationPineconeUpdateEmbeddingOpenAI: destinationPineconeUpdateEmbeddingOpenAI,
		}
	}
	var destinationPineconeUpdateEmbeddingCohere *shared.DestinationPineconeUpdateEmbeddingCohere
	if r.Configuration.Embedding.DestinationPineconeUpdateEmbeddingCohere != nil {
		cohereKey := r.Configuration.Embedding.DestinationPineconeUpdateEmbeddingCohere.CohereKey.ValueString()
		destinationPineconeUpdateEmbeddingCohere = &shared.DestinationPineconeUpdateEmbeddingCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationPineconeUpdateEmbeddingCohere != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			DestinationPineconeUpdateEmbeddingCohere: destinationPineconeUpdateEmbeddingCohere,
		}
	}
	var destinationPineconeUpdateEmbeddingFake *shared.DestinationPineconeUpdateEmbeddingFake
	if r.Configuration.Embedding.DestinationPineconeUpdateEmbeddingFake != nil {
		destinationPineconeUpdateEmbeddingFake = &shared.DestinationPineconeUpdateEmbeddingFake{}
	}
	if destinationPineconeUpdateEmbeddingFake != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			DestinationPineconeUpdateEmbeddingFake: destinationPineconeUpdateEmbeddingFake,
		}
	}
	index := r.Configuration.Indexing.Index.ValueString()
	pineconeEnvironment := r.Configuration.Indexing.PineconeEnvironment.ValueString()
	pineconeKey := r.Configuration.Indexing.PineconeKey.ValueString()
	indexing := shared.DestinationPineconeUpdateIndexing{
		Index:               index,
		PineconeEnvironment: pineconeEnvironment,
		PineconeKey:         pineconeKey,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationPineconeUpdateProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationPineconeUpdate{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPineconePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPineconeResourceModel) ToDeleteSDKType() *shared.DestinationPineconeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPineconeResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationPineconeResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
