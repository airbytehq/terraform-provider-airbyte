// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPineconeResourceModel) ToCreateSDKType() *shared.DestinationPineconeCreateRequest {
	var embedding shared.DestinationPineconeEmbedding
	var destinationPineconeOpenAI *shared.DestinationPineconeOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationPineconeOpenAI = &shared.DestinationPineconeOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationPineconeOpenAI != nil {
		embedding = shared.DestinationPineconeEmbedding{
			OpenAI: destinationPineconeOpenAI,
		}
	}
	var destinationPineconeCohere *shared.DestinationPineconeCohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		destinationPineconeCohere = &shared.DestinationPineconeCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationPineconeCohere != nil {
		embedding = shared.DestinationPineconeEmbedding{
			Cohere: destinationPineconeCohere,
		}
	}
	var destinationPineconeFake *shared.DestinationPineconeFake
	if r.Configuration.Embedding.Fake != nil {
		destinationPineconeFake = &shared.DestinationPineconeFake{}
	}
	if destinationPineconeFake != nil {
		embedding = shared.DestinationPineconeEmbedding{
			Fake: destinationPineconeFake,
		}
	}
	index := r.Configuration.Indexing.Index.ValueString()
	pineconeEnvironment := r.Configuration.Indexing.PineconeEnvironment.ValueString()
	pineconeKey := r.Configuration.Indexing.PineconeKey.ValueString()
	indexing := shared.DestinationPineconeIndexing{
		Index:               index,
		PineconeEnvironment: pineconeEnvironment,
		PineconeKey:         pineconeKey,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationPineconeProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationPinecone{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPineconeCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPineconeResourceModel) ToGetSDKType() *shared.DestinationPineconeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPineconeResourceModel) ToUpdateSDKType() *shared.DestinationPineconePutRequest {
	var embedding shared.DestinationPineconeUpdateEmbedding
	var destinationPineconeUpdateOpenAI *shared.DestinationPineconeUpdateOpenAI
	if r.Configuration.Embedding.OpenAI != nil {
		openaiKey := r.Configuration.Embedding.OpenAI.OpenaiKey.ValueString()
		destinationPineconeUpdateOpenAI = &shared.DestinationPineconeUpdateOpenAI{
			OpenaiKey: openaiKey,
		}
	}
	if destinationPineconeUpdateOpenAI != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			OpenAI: destinationPineconeUpdateOpenAI,
		}
	}
	var destinationPineconeUpdateCohere *shared.DestinationPineconeUpdateCohere
	if r.Configuration.Embedding.Cohere != nil {
		cohereKey := r.Configuration.Embedding.Cohere.CohereKey.ValueString()
		destinationPineconeUpdateCohere = &shared.DestinationPineconeUpdateCohere{
			CohereKey: cohereKey,
		}
	}
	if destinationPineconeUpdateCohere != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			Cohere: destinationPineconeUpdateCohere,
		}
	}
	var destinationPineconeUpdateFake *shared.DestinationPineconeUpdateFake
	if r.Configuration.Embedding.Fake != nil {
		destinationPineconeUpdateFake = &shared.DestinationPineconeUpdateFake{}
	}
	if destinationPineconeUpdateFake != nil {
		embedding = shared.DestinationPineconeUpdateEmbedding{
			Fake: destinationPineconeUpdateFake,
		}
	}
	index := r.Configuration.Indexing.Index.ValueString()
	pineconeEnvironment := r.Configuration.Indexing.PineconeEnvironment.ValueString()
	pineconeKey := r.Configuration.Indexing.PineconeKey.ValueString()
	indexing := shared.DestinationPineconeUpdateIndexing{
		Index:               index,
		PineconeEnvironment: pineconeEnvironment,
		PineconeKey:         pineconeKey,
	}
	chunkOverlap := new(int64)
	if !r.Configuration.Processing.ChunkOverlap.IsUnknown() && !r.Configuration.Processing.ChunkOverlap.IsNull() {
		*chunkOverlap = r.Configuration.Processing.ChunkOverlap.ValueInt64()
	} else {
		chunkOverlap = nil
	}
	chunkSize := r.Configuration.Processing.ChunkSize.ValueInt64()
	var metadataFields []string = nil
	for _, metadataFieldsItem := range r.Configuration.Processing.MetadataFields {
		metadataFields = append(metadataFields, metadataFieldsItem.ValueString())
	}
	var textFields []string = nil
	for _, textFieldsItem := range r.Configuration.Processing.TextFields {
		textFields = append(textFields, textFieldsItem.ValueString())
	}
	processing := shared.DestinationPineconeUpdateProcessingConfigModel{
		ChunkOverlap:   chunkOverlap,
		ChunkSize:      chunkSize,
		MetadataFields: metadataFields,
		TextFields:     textFields,
	}
	configuration := shared.DestinationPineconeUpdate{
		Embedding:  embedding,
		Indexing:   indexing,
		Processing: processing,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPineconePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPineconeResourceModel) ToDeleteSDKType() *shared.DestinationPineconeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPineconeResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationPineconeResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
