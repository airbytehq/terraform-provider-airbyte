// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/airbytehq/terraform-provider-airbyte/internal/provider/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/operations"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationMongodbResourceModel) ToSharedDestinationMongodbCreateRequest(ctx context.Context) (*shared.DestinationMongodbCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	definitionID := new(string)
	if !r.DefinitionID.IsUnknown() && !r.DefinitionID.IsNull() {
		*definitionID = r.DefinitionID.ValueString()
	} else {
		definitionID = nil
	}
	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var instanceType *shared.MongoDbInstanceType
	if r.Configuration.InstanceType != nil {
		var standaloneMongoDbInstance *shared.StandaloneMongoDbInstance
		if r.Configuration.InstanceType.StandaloneMongoDbInstance != nil {
			instance := new(shared.Instance)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.IsNull() {
				*instance = shared.Instance(r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.ValueString())
			} else {
				instance = nil
			}
			var host string
			host = r.Configuration.InstanceType.StandaloneMongoDbInstance.Host.ValueString()

			port := new(int64)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.IsNull() {
				*port = r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.ValueInt64()
			} else {
				port = nil
			}
			tls := new(bool)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.IsNull() {
				*tls = r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.ValueBool()
			} else {
				tls = nil
			}
			standaloneMongoDbInstance = &shared.StandaloneMongoDbInstance{
				Instance: instance,
				Host:     host,
				Port:     port,
				TLS:      tls,
			}
		}
		if standaloneMongoDbInstance != nil {
			instanceType = &shared.MongoDbInstanceType{
				StandaloneMongoDbInstance: standaloneMongoDbInstance,
			}
		}
		var replicaSet *shared.ReplicaSet
		if r.Configuration.InstanceType.ReplicaSet != nil {
			instance1 := new(shared.DestinationMongodbInstance)
			if !r.Configuration.InstanceType.ReplicaSet.Instance.IsUnknown() && !r.Configuration.InstanceType.ReplicaSet.Instance.IsNull() {
				*instance1 = shared.DestinationMongodbInstance(r.Configuration.InstanceType.ReplicaSet.Instance.ValueString())
			} else {
				instance1 = nil
			}
			var serverAddresses string
			serverAddresses = r.Configuration.InstanceType.ReplicaSet.ServerAddresses.ValueString()

			replicaSet1 := new(string)
			if !r.Configuration.InstanceType.ReplicaSet.ReplicaSet.IsUnknown() && !r.Configuration.InstanceType.ReplicaSet.ReplicaSet.IsNull() {
				*replicaSet1 = r.Configuration.InstanceType.ReplicaSet.ReplicaSet.ValueString()
			} else {
				replicaSet1 = nil
			}
			replicaSet = &shared.ReplicaSet{
				Instance:        instance1,
				ServerAddresses: serverAddresses,
				ReplicaSet:      replicaSet1,
			}
		}
		if replicaSet != nil {
			instanceType = &shared.MongoDbInstanceType{
				ReplicaSet: replicaSet,
			}
		}
		var mongoDBAtlas *shared.MongoDBAtlas
		if r.Configuration.InstanceType.MongoDBAtlas != nil {
			instance2 := new(shared.DestinationMongodbSchemasInstance)
			if !r.Configuration.InstanceType.MongoDBAtlas.Instance.IsUnknown() && !r.Configuration.InstanceType.MongoDBAtlas.Instance.IsNull() {
				*instance2 = shared.DestinationMongodbSchemasInstance(r.Configuration.InstanceType.MongoDBAtlas.Instance.ValueString())
			} else {
				instance2 = nil
			}
			var clusterURL string
			clusterURL = r.Configuration.InstanceType.MongoDBAtlas.ClusterURL.ValueString()

			mongoDBAtlas = &shared.MongoDBAtlas{
				Instance:   instance2,
				ClusterURL: clusterURL,
			}
		}
		if mongoDBAtlas != nil {
			instanceType = &shared.MongoDbInstanceType{
				MongoDBAtlas: mongoDBAtlas,
			}
		}
	}
	var database string
	database = r.Configuration.Database.ValueString()

	var authType shared.AuthorizationType
	var destinationMongodbNone *shared.DestinationMongodbNone
	if r.Configuration.AuthType.None != nil {
		destinationMongodbNone = &shared.DestinationMongodbNone{}
	}
	if destinationMongodbNone != nil {
		authType = shared.AuthorizationType{
			DestinationMongodbNone: destinationMongodbNone,
		}
	}
	var loginPassword *shared.LoginPassword
	if r.Configuration.AuthType.LoginPassword != nil {
		var username string
		username = r.Configuration.AuthType.LoginPassword.Username.ValueString()

		var password string
		password = r.Configuration.AuthType.LoginPassword.Password.ValueString()

		loginPassword = &shared.LoginPassword{
			Username: username,
			Password: password,
		}
	}
	if loginPassword != nil {
		authType = shared.AuthorizationType{
			LoginPassword: loginPassword,
		}
	}
	var tunnelMethod *shared.DestinationMongodbSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationMongodbNoTunnel *shared.DestinationMongodbNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationMongodbNoTunnel = &shared.DestinationMongodbNoTunnel{}
		}
		if destinationMongodbNoTunnel != nil {
			tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbNoTunnel: destinationMongodbNoTunnel,
			}
		}
		var destinationMongodbSSHKeyAuthentication *shared.DestinationMongodbSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationMongodbSSHKeyAuthentication = &shared.DestinationMongodbSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationMongodbSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbSSHKeyAuthentication: destinationMongodbSSHKeyAuthentication,
			}
		}
		var destinationMongodbPasswordAuthentication *shared.DestinationMongodbPasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationMongodbPasswordAuthentication = &shared.DestinationMongodbPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationMongodbPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbPasswordAuthentication: destinationMongodbPasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationMongodb{
		InstanceType: instanceType,
		Database:     database,
		AuthType:     authType,
		TunnelMethod: tunnelMethod,
	}
	out := shared.DestinationMongodbCreateRequest{
		Name:          name,
		DefinitionID:  definitionID,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationMongodbResourceModel) ToSharedDestinationMongodbPutRequest(ctx context.Context) (*shared.DestinationMongodbPutRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var workspaceID string
	workspaceID = r.WorkspaceID.ValueString()

	var instanceType *shared.DestinationMongodbUpdateMongoDbInstanceType
	if r.Configuration.InstanceType != nil {
		var destinationMongodbUpdateStandaloneMongoDbInstance *shared.DestinationMongodbUpdateStandaloneMongoDbInstance
		if r.Configuration.InstanceType.StandaloneMongoDbInstance != nil {
			instance := new(shared.DestinationMongodbUpdateInstance)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.IsNull() {
				*instance = shared.DestinationMongodbUpdateInstance(r.Configuration.InstanceType.StandaloneMongoDbInstance.Instance.ValueString())
			} else {
				instance = nil
			}
			var host string
			host = r.Configuration.InstanceType.StandaloneMongoDbInstance.Host.ValueString()

			port := new(int64)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.IsNull() {
				*port = r.Configuration.InstanceType.StandaloneMongoDbInstance.Port.ValueInt64()
			} else {
				port = nil
			}
			tls := new(bool)
			if !r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.IsUnknown() && !r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.IsNull() {
				*tls = r.Configuration.InstanceType.StandaloneMongoDbInstance.TLS.ValueBool()
			} else {
				tls = nil
			}
			destinationMongodbUpdateStandaloneMongoDbInstance = &shared.DestinationMongodbUpdateStandaloneMongoDbInstance{
				Instance: instance,
				Host:     host,
				Port:     port,
				TLS:      tls,
			}
		}
		if destinationMongodbUpdateStandaloneMongoDbInstance != nil {
			instanceType = &shared.DestinationMongodbUpdateMongoDbInstanceType{
				DestinationMongodbUpdateStandaloneMongoDbInstance: destinationMongodbUpdateStandaloneMongoDbInstance,
			}
		}
		var destinationMongodbUpdateReplicaSet *shared.DestinationMongodbUpdateReplicaSet
		if r.Configuration.InstanceType.ReplicaSet != nil {
			instance1 := new(shared.DestinationMongodbUpdateSchemasInstance)
			if !r.Configuration.InstanceType.ReplicaSet.Instance.IsUnknown() && !r.Configuration.InstanceType.ReplicaSet.Instance.IsNull() {
				*instance1 = shared.DestinationMongodbUpdateSchemasInstance(r.Configuration.InstanceType.ReplicaSet.Instance.ValueString())
			} else {
				instance1 = nil
			}
			var serverAddresses string
			serverAddresses = r.Configuration.InstanceType.ReplicaSet.ServerAddresses.ValueString()

			replicaSet := new(string)
			if !r.Configuration.InstanceType.ReplicaSet.ReplicaSet.IsUnknown() && !r.Configuration.InstanceType.ReplicaSet.ReplicaSet.IsNull() {
				*replicaSet = r.Configuration.InstanceType.ReplicaSet.ReplicaSet.ValueString()
			} else {
				replicaSet = nil
			}
			destinationMongodbUpdateReplicaSet = &shared.DestinationMongodbUpdateReplicaSet{
				Instance:        instance1,
				ServerAddresses: serverAddresses,
				ReplicaSet:      replicaSet,
			}
		}
		if destinationMongodbUpdateReplicaSet != nil {
			instanceType = &shared.DestinationMongodbUpdateMongoDbInstanceType{
				DestinationMongodbUpdateReplicaSet: destinationMongodbUpdateReplicaSet,
			}
		}
		var destinationMongodbUpdateMongoDBAtlas *shared.DestinationMongodbUpdateMongoDBAtlas
		if r.Configuration.InstanceType.MongoDBAtlas != nil {
			instance2 := new(shared.DestinationMongodbUpdateSchemasInstanceTypeInstance)
			if !r.Configuration.InstanceType.MongoDBAtlas.Instance.IsUnknown() && !r.Configuration.InstanceType.MongoDBAtlas.Instance.IsNull() {
				*instance2 = shared.DestinationMongodbUpdateSchemasInstanceTypeInstance(r.Configuration.InstanceType.MongoDBAtlas.Instance.ValueString())
			} else {
				instance2 = nil
			}
			var clusterURL string
			clusterURL = r.Configuration.InstanceType.MongoDBAtlas.ClusterURL.ValueString()

			destinationMongodbUpdateMongoDBAtlas = &shared.DestinationMongodbUpdateMongoDBAtlas{
				Instance:   instance2,
				ClusterURL: clusterURL,
			}
		}
		if destinationMongodbUpdateMongoDBAtlas != nil {
			instanceType = &shared.DestinationMongodbUpdateMongoDbInstanceType{
				DestinationMongodbUpdateMongoDBAtlas: destinationMongodbUpdateMongoDBAtlas,
			}
		}
	}
	var database string
	database = r.Configuration.Database.ValueString()

	var authType shared.DestinationMongodbUpdateAuthorizationType
	var destinationMongodbUpdateNone *shared.DestinationMongodbUpdateNone
	if r.Configuration.AuthType.None != nil {
		destinationMongodbUpdateNone = &shared.DestinationMongodbUpdateNone{}
	}
	if destinationMongodbUpdateNone != nil {
		authType = shared.DestinationMongodbUpdateAuthorizationType{
			DestinationMongodbUpdateNone: destinationMongodbUpdateNone,
		}
	}
	var destinationMongodbUpdateLoginPassword *shared.DestinationMongodbUpdateLoginPassword
	if r.Configuration.AuthType.LoginPassword != nil {
		var username string
		username = r.Configuration.AuthType.LoginPassword.Username.ValueString()

		var password string
		password = r.Configuration.AuthType.LoginPassword.Password.ValueString()

		destinationMongodbUpdateLoginPassword = &shared.DestinationMongodbUpdateLoginPassword{
			Username: username,
			Password: password,
		}
	}
	if destinationMongodbUpdateLoginPassword != nil {
		authType = shared.DestinationMongodbUpdateAuthorizationType{
			DestinationMongodbUpdateLoginPassword: destinationMongodbUpdateLoginPassword,
		}
	}
	var tunnelMethod *shared.DestinationMongodbUpdateSSHTunnelMethod
	if r.Configuration.TunnelMethod != nil {
		var destinationMongodbUpdateNoTunnel *shared.DestinationMongodbUpdateNoTunnel
		if r.Configuration.TunnelMethod.NoTunnel != nil {
			destinationMongodbUpdateNoTunnel = &shared.DestinationMongodbUpdateNoTunnel{}
		}
		if destinationMongodbUpdateNoTunnel != nil {
			tunnelMethod = &shared.DestinationMongodbUpdateSSHTunnelMethod{
				DestinationMongodbUpdateNoTunnel: destinationMongodbUpdateNoTunnel,
			}
		}
		var destinationMongodbUpdateSSHKeyAuthentication *shared.DestinationMongodbUpdateSSHKeyAuthentication
		if r.Configuration.TunnelMethod.SSHKeyAuthentication != nil {
			var tunnelHost string
			tunnelHost = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelHost.ValueString()

			tunnelPort := new(int64)
			if !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.IsNull() {
				*tunnelPort = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort = nil
			}
			var tunnelUser string
			tunnelUser = r.Configuration.TunnelMethod.SSHKeyAuthentication.TunnelUser.ValueString()

			var sshKey string
			sshKey = r.Configuration.TunnelMethod.SSHKeyAuthentication.SSHKey.ValueString()

			destinationMongodbUpdateSSHKeyAuthentication = &shared.DestinationMongodbUpdateSSHKeyAuthentication{
				TunnelHost: tunnelHost,
				TunnelPort: tunnelPort,
				TunnelUser: tunnelUser,
				SSHKey:     sshKey,
			}
		}
		if destinationMongodbUpdateSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationMongodbUpdateSSHTunnelMethod{
				DestinationMongodbUpdateSSHKeyAuthentication: destinationMongodbUpdateSSHKeyAuthentication,
			}
		}
		var destinationMongodbUpdatePasswordAuthentication *shared.DestinationMongodbUpdatePasswordAuthentication
		if r.Configuration.TunnelMethod.PasswordAuthentication != nil {
			var tunnelHost1 string
			tunnelHost1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelHost.ValueString()

			tunnelPort1 := new(int64)
			if !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsUnknown() && !r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.IsNull() {
				*tunnelPort1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelPort.ValueInt64()
			} else {
				tunnelPort1 = nil
			}
			var tunnelUser1 string
			tunnelUser1 = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUser.ValueString()

			var tunnelUserPassword string
			tunnelUserPassword = r.Configuration.TunnelMethod.PasswordAuthentication.TunnelUserPassword.ValueString()

			destinationMongodbUpdatePasswordAuthentication = &shared.DestinationMongodbUpdatePasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationMongodbUpdatePasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationMongodbUpdateSSHTunnelMethod{
				DestinationMongodbUpdatePasswordAuthentication: destinationMongodbUpdatePasswordAuthentication,
			}
		}
	}
	configuration := shared.DestinationMongodbUpdate{
		InstanceType: instanceType,
		Database:     database,
		AuthType:     authType,
		TunnelMethod: tunnelMethod,
	}
	out := shared.DestinationMongodbPutRequest{
		Name:          name,
		WorkspaceID:   workspaceID,
		Configuration: configuration,
	}

	return &out, diags
}

func (r *DestinationMongodbResourceModel) ToOperationsPutDestinationMongodbRequest(ctx context.Context) (*operations.PutDestinationMongodbRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	destinationMongodbPutRequest, destinationMongodbPutRequestDiags := r.ToSharedDestinationMongodbPutRequest(ctx)
	diags.Append(destinationMongodbPutRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutDestinationMongodbRequest{
		DestinationID:                destinationID,
		DestinationMongodbPutRequest: destinationMongodbPutRequest,
	}

	return &out, diags
}

func (r *DestinationMongodbResourceModel) ToOperationsGetDestinationMongodbRequest(ctx context.Context) (*operations.GetDestinationMongodbRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.GetDestinationMongodbRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationMongodbResourceModel) ToOperationsDeleteDestinationMongodbRequest(ctx context.Context) (*operations.DeleteDestinationMongodbRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var destinationID string
	destinationID = r.DestinationID.ValueString()

	out := operations.DeleteDestinationMongodbRequest{
		DestinationID: destinationID,
	}

	return &out, diags
}

func (r *DestinationMongodbResourceModel) RefreshFromSharedDestinationResponse(ctx context.Context, resp *shared.DestinationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64Value(resp.CreatedAt)
		r.DefinitionID = types.StringValue(resp.DefinitionID)
		r.DestinationID = types.StringValue(resp.DestinationID)
		r.DestinationType = types.StringValue(resp.DestinationType)
		r.Name = types.StringValue(resp.Name)
		if resp.ResourceAllocation == nil {
			r.ResourceAllocation = nil
		} else {
			r.ResourceAllocation = &tfTypes.ScopedResourceRequirements{}
			if resp.ResourceAllocation.Default == nil {
				r.ResourceAllocation.Default = nil
			} else {
				r.ResourceAllocation.Default = &tfTypes.ResourceRequirements{}
				r.ResourceAllocation.Default.CPULimit = types.StringPointerValue(resp.ResourceAllocation.Default.CPULimit)
				r.ResourceAllocation.Default.CPURequest = types.StringPointerValue(resp.ResourceAllocation.Default.CPURequest)
				r.ResourceAllocation.Default.EphemeralStorageLimit = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageLimit)
				r.ResourceAllocation.Default.EphemeralStorageRequest = types.StringPointerValue(resp.ResourceAllocation.Default.EphemeralStorageRequest)
				r.ResourceAllocation.Default.MemoryLimit = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryLimit)
				r.ResourceAllocation.Default.MemoryRequest = types.StringPointerValue(resp.ResourceAllocation.Default.MemoryRequest)
			}
			r.ResourceAllocation.JobSpecific = []tfTypes.JobTypeResourceLimit{}
			if len(r.ResourceAllocation.JobSpecific) > len(resp.ResourceAllocation.JobSpecific) {
				r.ResourceAllocation.JobSpecific = r.ResourceAllocation.JobSpecific[:len(resp.ResourceAllocation.JobSpecific)]
			}
			for jobSpecificCount, jobSpecificItem := range resp.ResourceAllocation.JobSpecific {
				var jobSpecific tfTypes.JobTypeResourceLimit
				jobSpecific.JobType = types.StringValue(string(jobSpecificItem.JobType))
				jobSpecific.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
				jobSpecific.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
				jobSpecific.ResourceRequirements.EphemeralStorageLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageLimit)
				jobSpecific.ResourceRequirements.EphemeralStorageRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.EphemeralStorageRequest)
				jobSpecific.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
				jobSpecific.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
				if jobSpecificCount+1 > len(r.ResourceAllocation.JobSpecific) {
					r.ResourceAllocation.JobSpecific = append(r.ResourceAllocation.JobSpecific, jobSpecific)
				} else {
					r.ResourceAllocation.JobSpecific[jobSpecificCount].JobType = jobSpecific.JobType
					r.ResourceAllocation.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific.ResourceRequirements
				}
			}
		}
		r.WorkspaceID = types.StringValue(resp.WorkspaceID)
	}

	return diags
}
