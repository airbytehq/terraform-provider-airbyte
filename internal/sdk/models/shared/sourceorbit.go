// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Orbit string

const (
	OrbitOrbit Orbit = "orbit"
)

func (e Orbit) ToPointer() *Orbit {
	return &e
}
func (e *Orbit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "orbit":
		*e = Orbit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Orbit: %v", v)
	}
}

type SourceOrbit struct {
	// Authorizes you to work with Orbit workspaces associated with the token.
	APIToken   string `json:"api_token"`
	sourceType Orbit  `const:"orbit" json:"sourceType"`
	// Date in the format 2022-06-26. Only load members whose last activities are after this date.
	StartDate *string `json:"start_date,omitempty"`
	// The unique name of the workspace that your API token is associated with.
	Workspace string `json:"workspace"`
}

func (s SourceOrbit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOrbit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceOrbit) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceOrbit) GetSourceType() Orbit {
	return OrbitOrbit
}

func (o *SourceOrbit) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceOrbit) GetWorkspace() string {
	if o == nil {
		return ""
	}
	return o.Workspace
}
