// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Rootly string

const (
	RootlyRootly Rootly = "rootly"
)

func (e Rootly) ToPointer() *Rootly {
	return &e
}
func (e *Rootly) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rootly":
		*e = Rootly(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rootly: %v", v)
	}
}

type SourceRootly struct {
	APIKey     string    `json:"api_key"`
	StartDate  time.Time `json:"start_date"`
	sourceType Rootly    `const:"rootly" json:"sourceType"`
}

func (s SourceRootly) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRootly) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceRootly) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceRootly) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceRootly) GetSourceType() Rootly {
	return RootlyRootly
}
