// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

// SourceChameleonUpdateFilter - Filter for using in the `segments_experiences` stream
type SourceChameleonUpdateFilter string

const (
	SourceChameleonUpdateFilterTour     SourceChameleonUpdateFilter = "tour"
	SourceChameleonUpdateFilterSurvey   SourceChameleonUpdateFilter = "survey"
	SourceChameleonUpdateFilterLauncher SourceChameleonUpdateFilter = "launcher"
)

func (e SourceChameleonUpdateFilter) ToPointer() *SourceChameleonUpdateFilter {
	return &e
}
func (e *SourceChameleonUpdateFilter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tour":
		fallthrough
	case "survey":
		fallthrough
	case "launcher":
		*e = SourceChameleonUpdateFilter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceChameleonUpdateFilter: %v", v)
	}
}

type SourceChameleonUpdate struct {
	APIKey    string    `json:"api_key"`
	StartDate time.Time `json:"start_date"`
	// Max records per page limit
	Limit *string `default:"50" json:"limit"`
	// Filter for using in the `segments_experiences` stream
	Filter *SourceChameleonUpdateFilter `default:"tour" json:"filter"`
	// End date for incremental sync
	EndDate *time.Time `json:"end_date,omitempty"`
}

func (s SourceChameleonUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceChameleonUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceChameleonUpdate) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceChameleonUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceChameleonUpdate) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SourceChameleonUpdate) GetFilter() *SourceChameleonUpdateFilter {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *SourceChameleonUpdate) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}
