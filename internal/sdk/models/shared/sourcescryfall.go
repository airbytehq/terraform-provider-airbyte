// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Scryfall string

const (
	ScryfallScryfall Scryfall = "scryfall"
)

func (e Scryfall) ToPointer() *Scryfall {
	return &e
}
func (e *Scryfall) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scryfall":
		*e = Scryfall(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scryfall: %v", v)
	}
}

type SourceScryfall struct {
	sourceType Scryfall `const:"scryfall" json:"sourceType"`
}

func (s SourceScryfall) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceScryfall) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceScryfall) GetSourceType() Scryfall {
	return ScryfallScryfall
}
