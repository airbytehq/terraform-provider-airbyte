// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Openfda string

const (
	OpenfdaOpenfda Openfda = "openfda"
)

func (e Openfda) ToPointer() *Openfda {
	return &e
}
func (e *Openfda) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openfda":
		*e = Openfda(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Openfda: %v", v)
	}
}

type SourceOpenfda struct {
	sourceType Openfda `const:"openfda" json:"sourceType"`
}

func (s SourceOpenfda) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOpenfda) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceOpenfda) GetSourceType() Openfda {
	return OpenfdaOpenfda
}
