// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

// SourceDatadogDataSource - A data source that is powered by the platform.
type SourceDatadogDataSource string

const (
	SourceDatadogDataSourceMetrics   SourceDatadogDataSource = "metrics"
	SourceDatadogDataSourceCloudCost SourceDatadogDataSource = "cloud_cost"
	SourceDatadogDataSourceLogs      SourceDatadogDataSource = "logs"
	SourceDatadogDataSourceRum       SourceDatadogDataSource = "rum"
)

func (e SourceDatadogDataSource) ToPointer() *SourceDatadogDataSource {
	return &e
}
func (e *SourceDatadogDataSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "metrics":
		fallthrough
	case "cloud_cost":
		fallthrough
	case "logs":
		fallthrough
	case "rum":
		*e = SourceDatadogDataSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDatadogDataSource: %v", v)
	}
}

type SourceDatadogQueries struct {
	// A data source that is powered by the platform.
	DataSource SourceDatadogDataSource `json:"data_source"`
	// The variable name for use in queries.
	Name string `json:"name"`
	// A classic query string.
	Query string `json:"query"`
}

func (o *SourceDatadogQueries) GetDataSource() SourceDatadogDataSource {
	if o == nil {
		return SourceDatadogDataSource("")
	}
	return o.DataSource
}

func (o *SourceDatadogQueries) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceDatadogQueries) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

// SourceDatadogSite - The site where Datadog data resides in.
type SourceDatadogSite string

const (
	SourceDatadogSiteDatadoghqCom    SourceDatadogSite = "datadoghq.com"
	SourceDatadogSiteUs3DatadoghqCom SourceDatadogSite = "us3.datadoghq.com"
	SourceDatadogSiteUs5DatadoghqCom SourceDatadogSite = "us5.datadoghq.com"
	SourceDatadogSiteDatadoghqEu     SourceDatadogSite = "datadoghq.eu"
	SourceDatadogSiteDdogGovCom      SourceDatadogSite = "ddog-gov.com"
)

func (e SourceDatadogSite) ToPointer() *SourceDatadogSite {
	return &e
}
func (e *SourceDatadogSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "datadoghq.com":
		fallthrough
	case "us3.datadoghq.com":
		fallthrough
	case "us5.datadoghq.com":
		fallthrough
	case "datadoghq.eu":
		fallthrough
	case "ddog-gov.com":
		*e = SourceDatadogSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDatadogSite: %v", v)
	}
}

type Datadog string

const (
	DatadogDatadog Datadog = "datadog"
)

func (e Datadog) ToPointer() *Datadog {
	return &e
}
func (e *Datadog) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "datadog":
		*e = Datadog(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Datadog: %v", v)
	}
}

type SourceDatadog struct {
	// Datadog API key
	APIKey string `json:"api_key"`
	// Datadog application key
	ApplicationKey string `json:"application_key"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs.
	EndDate *string `default:"2024-01-01T00:00:00Z" json:"end_date"`
	// Maximum number of records to collect per request.
	MaxRecordsPerRequest *int64 `default:"5000" json:"max_records_per_request"`
	// List of queries to be run and used as inputs.
	Queries []SourceDatadogQueries `json:"queries,omitempty"`
	// The search query. This just applies to Incremental syncs. If empty, it'll collect all logs.
	Query *string `json:"query,omitempty"`
	// The site where Datadog data resides in.
	Site       *SourceDatadogSite `default:"datadoghq.com" json:"site"`
	sourceType Datadog            `const:"datadog" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs.
	StartDate *string `default:"2023-12-01T00:00:00Z" json:"start_date"`
}

func (s SourceDatadog) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceDatadog) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceDatadog) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceDatadog) GetApplicationKey() string {
	if o == nil {
		return ""
	}
	return o.ApplicationKey
}

func (o *SourceDatadog) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceDatadog) GetMaxRecordsPerRequest() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRecordsPerRequest
}

func (o *SourceDatadog) GetQueries() []SourceDatadogQueries {
	if o == nil {
		return nil
	}
	return o.Queries
}

func (o *SourceDatadog) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SourceDatadog) GetSite() *SourceDatadogSite {
	if o == nil {
		return nil
	}
	return o.Site
}

func (o *SourceDatadog) GetSourceType() Datadog {
	return DatadogDatadog
}

func (o *SourceDatadog) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}
