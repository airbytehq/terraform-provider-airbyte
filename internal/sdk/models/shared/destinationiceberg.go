// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType string

const (
	DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogTypeGlue DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType = "Glue"
)

func (e DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType) ToPointer() *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType {
	return &e
}
func (e *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Glue":
		*e = DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType: %v", v)
	}
}

// The GlueCatalog connects to a AWS Glue Catalog
type GlueCatalog struct {
	CatalogType *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType `default:"Glue" json:"catalog_type"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Database *string `default:"public" json:"database"`
}

func (g GlueCatalog) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GlueCatalog) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GlueCatalog) GetCatalogType() *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfigCatalogType {
	if o == nil {
		return nil
	}
	return o.CatalogType
}

func (o *GlueCatalog) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

type DestinationIcebergSchemasCatalogConfigCatalogType string

const (
	DestinationIcebergSchemasCatalogConfigCatalogTypeRest DestinationIcebergSchemasCatalogConfigCatalogType = "Rest"
)

func (e DestinationIcebergSchemasCatalogConfigCatalogType) ToPointer() *DestinationIcebergSchemasCatalogConfigCatalogType {
	return &e
}
func (e *DestinationIcebergSchemasCatalogConfigCatalogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Rest":
		*e = DestinationIcebergSchemasCatalogConfigCatalogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergSchemasCatalogConfigCatalogType: %v", v)
	}
}

// The RESTCatalog connects to a REST server at the specified URI
type RESTCatalog struct {
	CatalogType    *DestinationIcebergSchemasCatalogConfigCatalogType `default:"Rest" json:"catalog_type"`
	RestURI        string                                             `json:"rest_uri"`
	RestCredential *string                                            `json:"rest_credential,omitempty"`
	RestToken      *string                                            `json:"rest_token,omitempty"`
}

func (r RESTCatalog) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RESTCatalog) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RESTCatalog) GetCatalogType() *DestinationIcebergSchemasCatalogConfigCatalogType {
	if o == nil {
		return nil
	}
	return o.CatalogType
}

func (o *RESTCatalog) GetRestURI() string {
	if o == nil {
		return ""
	}
	return o.RestURI
}

func (o *RESTCatalog) GetRestCredential() *string {
	if o == nil {
		return nil
	}
	return o.RestCredential
}

func (o *RESTCatalog) GetRestToken() *string {
	if o == nil {
		return nil
	}
	return o.RestToken
}

type DestinationIcebergSchemasCatalogType string

const (
	DestinationIcebergSchemasCatalogTypeJdbc DestinationIcebergSchemasCatalogType = "Jdbc"
)

func (e DestinationIcebergSchemasCatalogType) ToPointer() *DestinationIcebergSchemasCatalogType {
	return &e
}
func (e *DestinationIcebergSchemasCatalogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Jdbc":
		*e = DestinationIcebergSchemasCatalogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergSchemasCatalogType: %v", v)
	}
}

// JdbcCatalogUseRelationalDatabase - Using a table in a relational database to manage Iceberg tables through JDBC. Read more <a href="https://iceberg.apache.org/docs/latest/jdbc/">here</a>. Supporting: PostgreSQL
type JdbcCatalogUseRelationalDatabase struct {
	CatalogType *DestinationIcebergSchemasCatalogType `default:"Jdbc" json:"catalog_type"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Database *string `default:"public" json:"database"`
	JdbcURL  *string `json:"jdbc_url,omitempty"`
	// Username to use to access the database.
	Username *string `json:"username,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// Encrypt data using SSL. When activating SSL, please select one of the connection modes.
	Ssl *bool `default:"false" json:"ssl"`
	// Iceberg catalog metadata tables are written to catalog schema. The usual value for this field is "public".
	CatalogSchema *string `default:"public" json:"catalog_schema"`
}

func (j JdbcCatalogUseRelationalDatabase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JdbcCatalogUseRelationalDatabase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *JdbcCatalogUseRelationalDatabase) GetCatalogType() *DestinationIcebergSchemasCatalogType {
	if o == nil {
		return nil
	}
	return o.CatalogType
}

func (o *JdbcCatalogUseRelationalDatabase) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *JdbcCatalogUseRelationalDatabase) GetJdbcURL() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURL
}

func (o *JdbcCatalogUseRelationalDatabase) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *JdbcCatalogUseRelationalDatabase) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *JdbcCatalogUseRelationalDatabase) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *JdbcCatalogUseRelationalDatabase) GetCatalogSchema() *string {
	if o == nil {
		return nil
	}
	return o.CatalogSchema
}

type DestinationIcebergCatalogType string

const (
	DestinationIcebergCatalogTypeHadoop DestinationIcebergCatalogType = "Hadoop"
)

func (e DestinationIcebergCatalogType) ToPointer() *DestinationIcebergCatalogType {
	return &e
}
func (e *DestinationIcebergCatalogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Hadoop":
		*e = DestinationIcebergCatalogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergCatalogType: %v", v)
	}
}

// HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig - A Hadoop catalog doesnâ€™t need to connect to a Hive MetaStore, but can only be used with HDFS or similar file systems that support atomic rename.
type HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig struct {
	CatalogType *DestinationIcebergCatalogType `default:"Hadoop" json:"catalog_type"`
	// The default database tables are written to if the source does not specify a namespace. The usual value for this field is "default".
	Database *string `default:"default" json:"database"`
}

func (h HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig) GetCatalogType() *DestinationIcebergCatalogType {
	if o == nil {
		return nil
	}
	return o.CatalogType
}

func (o *HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

type DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType string

const (
	DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogTypeHive DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType = "Hive"
)

func (e DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType) ToPointer() *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType {
	return &e
}
func (e *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Hive":
		*e = DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType: %v", v)
	}
}

type HiveCatalogUseApacheHiveMetaStore struct {
	CatalogType *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType `default:"Hive" json:"catalog_type"`
	// Hive MetaStore thrift server uri of iceberg catalog.
	HiveThriftURI string `json:"hive_thrift_uri"`
	// The default database tables are written to if the source does not specify a namespace. The usual value for this field is "default".
	Database *string `default:"default" json:"database"`
}

func (h HiveCatalogUseApacheHiveMetaStore) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HiveCatalogUseApacheHiveMetaStore) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *HiveCatalogUseApacheHiveMetaStore) GetCatalogType() *DestinationIcebergSchemasCatalogConfigIcebergCatalogConfig1CatalogType {
	if o == nil {
		return nil
	}
	return o.CatalogType
}

func (o *HiveCatalogUseApacheHiveMetaStore) GetHiveThriftURI() string {
	if o == nil {
		return ""
	}
	return o.HiveThriftURI
}

func (o *HiveCatalogUseApacheHiveMetaStore) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

type IcebergCatalogConfigType string

const (
	IcebergCatalogConfigTypeHiveCatalogUseApacheHiveMetaStore                            IcebergCatalogConfigType = "HiveCatalog: Use Apache Hive MetaStore"
	IcebergCatalogConfigTypeHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig IcebergCatalogConfigType = "HadoopCatalog: Use hierarchical file systems as same as storage config"
	IcebergCatalogConfigTypeJdbcCatalogUseRelationalDatabase                             IcebergCatalogConfigType = "JdbcCatalog: Use relational database"
	IcebergCatalogConfigTypeRESTCatalog                                                  IcebergCatalogConfigType = "RESTCatalog"
	IcebergCatalogConfigTypeGlueCatalog                                                  IcebergCatalogConfigType = "GlueCatalog"
)

// IcebergCatalogConfig - Catalog config of Iceberg.
type IcebergCatalogConfig struct {
	HiveCatalogUseApacheHiveMetaStore                            *HiveCatalogUseApacheHiveMetaStore                            `queryParam:"inline"`
	HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig *HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig `queryParam:"inline"`
	JdbcCatalogUseRelationalDatabase                             *JdbcCatalogUseRelationalDatabase                             `queryParam:"inline"`
	RESTCatalog                                                  *RESTCatalog                                                  `queryParam:"inline"`
	GlueCatalog                                                  *GlueCatalog                                                  `queryParam:"inline"`

	Type IcebergCatalogConfigType
}

func CreateIcebergCatalogConfigHiveCatalogUseApacheHiveMetaStore(hiveCatalogUseApacheHiveMetaStore HiveCatalogUseApacheHiveMetaStore) IcebergCatalogConfig {
	typ := IcebergCatalogConfigTypeHiveCatalogUseApacheHiveMetaStore

	return IcebergCatalogConfig{
		HiveCatalogUseApacheHiveMetaStore: &hiveCatalogUseApacheHiveMetaStore,
		Type:                              typ,
	}
}

func CreateIcebergCatalogConfigHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig(hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig) IcebergCatalogConfig {
	typ := IcebergCatalogConfigTypeHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig

	return IcebergCatalogConfig{
		HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig: &hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig,
		Type: typ,
	}
}

func CreateIcebergCatalogConfigJdbcCatalogUseRelationalDatabase(jdbcCatalogUseRelationalDatabase JdbcCatalogUseRelationalDatabase) IcebergCatalogConfig {
	typ := IcebergCatalogConfigTypeJdbcCatalogUseRelationalDatabase

	return IcebergCatalogConfig{
		JdbcCatalogUseRelationalDatabase: &jdbcCatalogUseRelationalDatabase,
		Type:                             typ,
	}
}

func CreateIcebergCatalogConfigRESTCatalog(restCatalog RESTCatalog) IcebergCatalogConfig {
	typ := IcebergCatalogConfigTypeRESTCatalog

	return IcebergCatalogConfig{
		RESTCatalog: &restCatalog,
		Type:        typ,
	}
}

func CreateIcebergCatalogConfigGlueCatalog(glueCatalog GlueCatalog) IcebergCatalogConfig {
	typ := IcebergCatalogConfigTypeGlueCatalog

	return IcebergCatalogConfig{
		GlueCatalog: &glueCatalog,
		Type:        typ,
	}
}

func (u *IcebergCatalogConfig) UnmarshalJSON(data []byte) error {

	var hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig{}
	if err := utils.UnmarshalJSON(data, &hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig, "", true, true); err == nil {
		u.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig = &hadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
		u.Type = IcebergCatalogConfigTypeHadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig
		return nil
	}

	var glueCatalog GlueCatalog = GlueCatalog{}
	if err := utils.UnmarshalJSON(data, &glueCatalog, "", true, true); err == nil {
		u.GlueCatalog = &glueCatalog
		u.Type = IcebergCatalogConfigTypeGlueCatalog
		return nil
	}

	var hiveCatalogUseApacheHiveMetaStore HiveCatalogUseApacheHiveMetaStore = HiveCatalogUseApacheHiveMetaStore{}
	if err := utils.UnmarshalJSON(data, &hiveCatalogUseApacheHiveMetaStore, "", true, true); err == nil {
		u.HiveCatalogUseApacheHiveMetaStore = &hiveCatalogUseApacheHiveMetaStore
		u.Type = IcebergCatalogConfigTypeHiveCatalogUseApacheHiveMetaStore
		return nil
	}

	var restCatalog RESTCatalog = RESTCatalog{}
	if err := utils.UnmarshalJSON(data, &restCatalog, "", true, true); err == nil {
		u.RESTCatalog = &restCatalog
		u.Type = IcebergCatalogConfigTypeRESTCatalog
		return nil
	}

	var jdbcCatalogUseRelationalDatabase JdbcCatalogUseRelationalDatabase = JdbcCatalogUseRelationalDatabase{}
	if err := utils.UnmarshalJSON(data, &jdbcCatalogUseRelationalDatabase, "", true, true); err == nil {
		u.JdbcCatalogUseRelationalDatabase = &jdbcCatalogUseRelationalDatabase
		u.Type = IcebergCatalogConfigTypeJdbcCatalogUseRelationalDatabase
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for IcebergCatalogConfig", string(data))
}

func (u IcebergCatalogConfig) MarshalJSON() ([]byte, error) {
	if u.HiveCatalogUseApacheHiveMetaStore != nil {
		return utils.MarshalJSON(u.HiveCatalogUseApacheHiveMetaStore, "", true)
	}

	if u.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig != nil {
		return utils.MarshalJSON(u.HadoopCatalogUseHierarchicalFileSystemsAsSameAsStorageConfig, "", true)
	}

	if u.JdbcCatalogUseRelationalDatabase != nil {
		return utils.MarshalJSON(u.JdbcCatalogUseRelationalDatabase, "", true)
	}

	if u.RESTCatalog != nil {
		return utils.MarshalJSON(u.RESTCatalog, "", true)
	}

	if u.GlueCatalog != nil {
		return utils.MarshalJSON(u.GlueCatalog, "", true)
	}

	return nil, errors.New("could not marshal union type IcebergCatalogConfig: all fields are null")
}

type DestinationIcebergStorageType string

const (
	DestinationIcebergStorageTypeManaged DestinationIcebergStorageType = "MANAGED"
)

func (e DestinationIcebergStorageType) ToPointer() *DestinationIcebergStorageType {
	return &e
}
func (e *DestinationIcebergStorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANAGED":
		*e = DestinationIcebergStorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergStorageType: %v", v)
	}
}

// ServerManaged - Server-managed object storage
type ServerManaged struct {
	StorageType *DestinationIcebergStorageType `default:"MANAGED" json:"storage_type"`
	// The name of the managed warehouse
	ManagedWarehouseName string `json:"managed_warehouse_name"`
}

func (s ServerManaged) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServerManaged) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ServerManaged) GetStorageType() *DestinationIcebergStorageType {
	if o == nil {
		return nil
	}
	return o.StorageType
}

func (o *ServerManaged) GetManagedWarehouseName() string {
	if o == nil {
		return ""
	}
	return o.ManagedWarehouseName
}

type StorageType string

const (
	StorageTypeS3 StorageType = "S3"
)

func (e StorageType) ToPointer() *StorageType {
	return &e
}
func (e *StorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3":
		*e = StorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageType: %v", v)
	}
}

// DestinationIcebergS3BucketRegion - The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes.
type DestinationIcebergS3BucketRegion string

const (
	DestinationIcebergS3BucketRegionUnknown      DestinationIcebergS3BucketRegion = ""
	DestinationIcebergS3BucketRegionAfSouth1     DestinationIcebergS3BucketRegion = "af-south-1"
	DestinationIcebergS3BucketRegionApEast1      DestinationIcebergS3BucketRegion = "ap-east-1"
	DestinationIcebergS3BucketRegionApNortheast1 DestinationIcebergS3BucketRegion = "ap-northeast-1"
	DestinationIcebergS3BucketRegionApNortheast2 DestinationIcebergS3BucketRegion = "ap-northeast-2"
	DestinationIcebergS3BucketRegionApNortheast3 DestinationIcebergS3BucketRegion = "ap-northeast-3"
	DestinationIcebergS3BucketRegionApSouth1     DestinationIcebergS3BucketRegion = "ap-south-1"
	DestinationIcebergS3BucketRegionApSouth2     DestinationIcebergS3BucketRegion = "ap-south-2"
	DestinationIcebergS3BucketRegionApSoutheast1 DestinationIcebergS3BucketRegion = "ap-southeast-1"
	DestinationIcebergS3BucketRegionApSoutheast2 DestinationIcebergS3BucketRegion = "ap-southeast-2"
	DestinationIcebergS3BucketRegionApSoutheast3 DestinationIcebergS3BucketRegion = "ap-southeast-3"
	DestinationIcebergS3BucketRegionApSoutheast4 DestinationIcebergS3BucketRegion = "ap-southeast-4"
	DestinationIcebergS3BucketRegionCaCentral1   DestinationIcebergS3BucketRegion = "ca-central-1"
	DestinationIcebergS3BucketRegionCaWest1      DestinationIcebergS3BucketRegion = "ca-west-1"
	DestinationIcebergS3BucketRegionCnNorth1     DestinationIcebergS3BucketRegion = "cn-north-1"
	DestinationIcebergS3BucketRegionCnNorthwest1 DestinationIcebergS3BucketRegion = "cn-northwest-1"
	DestinationIcebergS3BucketRegionEuCentral1   DestinationIcebergS3BucketRegion = "eu-central-1"
	DestinationIcebergS3BucketRegionEuCentral2   DestinationIcebergS3BucketRegion = "eu-central-2"
	DestinationIcebergS3BucketRegionEuNorth1     DestinationIcebergS3BucketRegion = "eu-north-1"
	DestinationIcebergS3BucketRegionEuSouth1     DestinationIcebergS3BucketRegion = "eu-south-1"
	DestinationIcebergS3BucketRegionEuSouth2     DestinationIcebergS3BucketRegion = "eu-south-2"
	DestinationIcebergS3BucketRegionEuWest1      DestinationIcebergS3BucketRegion = "eu-west-1"
	DestinationIcebergS3BucketRegionEuWest2      DestinationIcebergS3BucketRegion = "eu-west-2"
	DestinationIcebergS3BucketRegionEuWest3      DestinationIcebergS3BucketRegion = "eu-west-3"
	DestinationIcebergS3BucketRegionIlCentral1   DestinationIcebergS3BucketRegion = "il-central-1"
	DestinationIcebergS3BucketRegionMeCentral1   DestinationIcebergS3BucketRegion = "me-central-1"
	DestinationIcebergS3BucketRegionMeSouth1     DestinationIcebergS3BucketRegion = "me-south-1"
	DestinationIcebergS3BucketRegionSaEast1      DestinationIcebergS3BucketRegion = "sa-east-1"
	DestinationIcebergS3BucketRegionUsEast1      DestinationIcebergS3BucketRegion = "us-east-1"
	DestinationIcebergS3BucketRegionUsEast2      DestinationIcebergS3BucketRegion = "us-east-2"
	DestinationIcebergS3BucketRegionUsGovEast1   DestinationIcebergS3BucketRegion = "us-gov-east-1"
	DestinationIcebergS3BucketRegionUsGovWest1   DestinationIcebergS3BucketRegion = "us-gov-west-1"
	DestinationIcebergS3BucketRegionUsWest1      DestinationIcebergS3BucketRegion = "us-west-1"
	DestinationIcebergS3BucketRegionUsWest2      DestinationIcebergS3BucketRegion = "us-west-2"
)

func (e DestinationIcebergS3BucketRegion) ToPointer() *DestinationIcebergS3BucketRegion {
	return &e
}
func (e *DestinationIcebergS3BucketRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-south-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-southeast-3":
		fallthrough
	case "ap-southeast-4":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "ca-west-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-central-2":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-south-2":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "il-central-1":
		fallthrough
	case "me-central-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		*e = DestinationIcebergS3BucketRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationIcebergS3BucketRegion: %v", v)
	}
}

// DestinationIcebergS3 - S3 object storage
type DestinationIcebergS3 struct {
	StorageType *StorageType `default:"S3" json:"storage_type"`
	// The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>.
	AccessKeyID string `json:"access_key_id"`
	// The corresponding secret to the access key ID. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>
	SecretAccessKey string `json:"secret_access_key"`
	// The Warehouse Uri for Iceberg
	S3WarehouseURI string `json:"s3_warehouse_uri"`
	// The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes.
	S3BucketRegion *DestinationIcebergS3BucketRegion `default:"" json:"s3_bucket_region"`
	// Your S3 endpoint url. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use">here</a>
	S3Endpoint *string `default:"" json:"s3_endpoint"`
	// Use path style access
	S3PathStyleAccess *bool `default:"true" json:"s3_path_style_access"`
}

func (d DestinationIcebergS3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationIcebergS3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationIcebergS3) GetStorageType() *StorageType {
	if o == nil {
		return nil
	}
	return o.StorageType
}

func (o *DestinationIcebergS3) GetAccessKeyID() string {
	if o == nil {
		return ""
	}
	return o.AccessKeyID
}

func (o *DestinationIcebergS3) GetSecretAccessKey() string {
	if o == nil {
		return ""
	}
	return o.SecretAccessKey
}

func (o *DestinationIcebergS3) GetS3WarehouseURI() string {
	if o == nil {
		return ""
	}
	return o.S3WarehouseURI
}

func (o *DestinationIcebergS3) GetS3BucketRegion() *DestinationIcebergS3BucketRegion {
	if o == nil {
		return nil
	}
	return o.S3BucketRegion
}

func (o *DestinationIcebergS3) GetS3Endpoint() *string {
	if o == nil {
		return nil
	}
	return o.S3Endpoint
}

func (o *DestinationIcebergS3) GetS3PathStyleAccess() *bool {
	if o == nil {
		return nil
	}
	return o.S3PathStyleAccess
}

type StorageConfigType string

const (
	StorageConfigTypeDestinationIcebergS3 StorageConfigType = "destination-iceberg_S3"
	StorageConfigTypeServerManaged        StorageConfigType = "Server-managed"
)

// StorageConfig - Storage config of Iceberg.
type StorageConfig struct {
	DestinationIcebergS3 *DestinationIcebergS3 `queryParam:"inline"`
	ServerManaged        *ServerManaged        `queryParam:"inline"`

	Type StorageConfigType
}

func CreateStorageConfigDestinationIcebergS3(destinationIcebergS3 DestinationIcebergS3) StorageConfig {
	typ := StorageConfigTypeDestinationIcebergS3

	return StorageConfig{
		DestinationIcebergS3: &destinationIcebergS3,
		Type:                 typ,
	}
}

func CreateStorageConfigServerManaged(serverManaged ServerManaged) StorageConfig {
	typ := StorageConfigTypeServerManaged

	return StorageConfig{
		ServerManaged: &serverManaged,
		Type:          typ,
	}
}

func (u *StorageConfig) UnmarshalJSON(data []byte) error {

	var serverManaged ServerManaged = ServerManaged{}
	if err := utils.UnmarshalJSON(data, &serverManaged, "", true, true); err == nil {
		u.ServerManaged = &serverManaged
		u.Type = StorageConfigTypeServerManaged
		return nil
	}

	var destinationIcebergS3 DestinationIcebergS3 = DestinationIcebergS3{}
	if err := utils.UnmarshalJSON(data, &destinationIcebergS3, "", true, true); err == nil {
		u.DestinationIcebergS3 = &destinationIcebergS3
		u.Type = StorageConfigTypeDestinationIcebergS3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StorageConfig", string(data))
}

func (u StorageConfig) MarshalJSON() ([]byte, error) {
	if u.DestinationIcebergS3 != nil {
		return utils.MarshalJSON(u.DestinationIcebergS3, "", true)
	}

	if u.ServerManaged != nil {
		return utils.MarshalJSON(u.ServerManaged, "", true)
	}

	return nil, errors.New("could not marshal union type StorageConfig: all fields are null")
}

type FileStorageFormat string

const (
	FileStorageFormatParquet FileStorageFormat = "Parquet"
	FileStorageFormatAvro    FileStorageFormat = "Avro"
)

func (e FileStorageFormat) ToPointer() *FileStorageFormat {
	return &e
}
func (e *FileStorageFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Parquet":
		fallthrough
	case "Avro":
		*e = FileStorageFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileStorageFormat: %v", v)
	}
}

// DestinationIcebergFileFormat - File format of Iceberg storage.
type DestinationIcebergFileFormat struct {
	Format *FileStorageFormat `default:"Parquet" json:"format"`
	// Iceberg data file flush batch size. Incoming rows write to cache firstly; When cache size reaches this 'batch size', flush into real Iceberg data file.
	FlushBatchSize *int64 `default:"10000" json:"flush_batch_size"`
	// Auto compact data files when stream close
	AutoCompact *bool `default:"false" json:"auto_compact"`
	// Specify the target size of Iceberg data file when performing a compaction action.
	CompactTargetFileSizeInMb *int64 `default:"100" json:"compact_target_file_size_in_mb"`
}

func (d DestinationIcebergFileFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationIcebergFileFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationIcebergFileFormat) GetFormat() *FileStorageFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *DestinationIcebergFileFormat) GetFlushBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.FlushBatchSize
}

func (o *DestinationIcebergFileFormat) GetAutoCompact() *bool {
	if o == nil {
		return nil
	}
	return o.AutoCompact
}

func (o *DestinationIcebergFileFormat) GetCompactTargetFileSizeInMb() *int64 {
	if o == nil {
		return nil
	}
	return o.CompactTargetFileSizeInMb
}

type Iceberg string

const (
	IcebergIceberg Iceberg = "iceberg"
)

func (e Iceberg) ToPointer() *Iceberg {
	return &e
}
func (e *Iceberg) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "iceberg":
		*e = Iceberg(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Iceberg: %v", v)
	}
}

type DestinationIceberg struct {
	// Catalog config of Iceberg.
	CatalogConfig IcebergCatalogConfig `json:"catalog_config"`
	// Storage config of Iceberg.
	StorageConfig StorageConfig `json:"storage_config"`
	// File format of Iceberg storage.
	FormatConfig    DestinationIcebergFileFormat `json:"format_config"`
	destinationType Iceberg                      `const:"iceberg" json:"destinationType"`
}

func (d DestinationIceberg) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationIceberg) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationIceberg) GetCatalogConfig() IcebergCatalogConfig {
	if o == nil {
		return IcebergCatalogConfig{}
	}
	return o.CatalogConfig
}

func (o *DestinationIceberg) GetStorageConfig() StorageConfig {
	if o == nil {
		return StorageConfig{}
	}
	return o.StorageConfig
}

func (o *DestinationIceberg) GetFormatConfig() DestinationIcebergFileFormat {
	if o == nil {
		return DestinationIcebergFileFormat{}
	}
	return o.FormatConfig
}

func (o *DestinationIceberg) GetDestinationType() Iceberg {
	return IcebergIceberg
}
