// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationMssqlV2SchemasName string

const (
	DestinationMssqlV2SchemasNameEncryptedVerifyCertificate DestinationMssqlV2SchemasName = "encrypted_verify_certificate"
)

func (e DestinationMssqlV2SchemasName) ToPointer() *DestinationMssqlV2SchemasName {
	return &e
}
func (e *DestinationMssqlV2SchemasName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_verify_certificate":
		*e = DestinationMssqlV2SchemasName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2SchemasName: %v", v)
	}
}

// DestinationMssqlV2EncryptedVerifyCertificate - Verify and use the certificate provided by the server.
type DestinationMssqlV2EncryptedVerifyCertificate struct {
	Name *DestinationMssqlV2SchemasName `default:"encrypted_verify_certificate" json:"name"`
	// Specifies the name of the trust store.
	TrustStoreName *string `json:"trustStoreName,omitempty"`
	// Specifies the password of the trust store.
	TrustStorePassword *string `json:"trustStorePassword,omitempty"`
	// Specifies the host name of the server. The value of this property must match the subject property of the certificate.
	HostNameInCertificate *string `json:"hostNameInCertificate,omitempty"`
	AdditionalProperties  any     `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2EncryptedVerifyCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2EncryptedVerifyCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2EncryptedVerifyCertificate) GetName() *DestinationMssqlV2SchemasName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2EncryptedVerifyCertificate) GetTrustStoreName() *string {
	if o == nil {
		return nil
	}
	return o.TrustStoreName
}

func (o *DestinationMssqlV2EncryptedVerifyCertificate) GetTrustStorePassword() *string {
	if o == nil {
		return nil
	}
	return o.TrustStorePassword
}

func (o *DestinationMssqlV2EncryptedVerifyCertificate) GetHostNameInCertificate() *string {
	if o == nil {
		return nil
	}
	return o.HostNameInCertificate
}

func (o *DestinationMssqlV2EncryptedVerifyCertificate) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2Name string

const (
	DestinationMssqlV2NameEncryptedTrustServerCertificate DestinationMssqlV2Name = "encrypted_trust_server_certificate"
)

func (e DestinationMssqlV2Name) ToPointer() *DestinationMssqlV2Name {
	return &e
}
func (e *DestinationMssqlV2Name) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_trust_server_certificate":
		*e = DestinationMssqlV2Name(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2Name: %v", v)
	}
}

// DestinationMssqlV2EncryptedTrustServerCertificate - Use the certificate provided by the server without verification. (For testing purposes only!)
type DestinationMssqlV2EncryptedTrustServerCertificate struct {
	Name                 *DestinationMssqlV2Name `default:"encrypted_trust_server_certificate" json:"name"`
	AdditionalProperties any                     `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2EncryptedTrustServerCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2EncryptedTrustServerCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2EncryptedTrustServerCertificate) GetName() *DestinationMssqlV2Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2EncryptedTrustServerCertificate) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Name string

const (
	NameUnencrypted Name = "unencrypted"
)

func (e Name) ToPointer() *Name {
	return &e
}
func (e *Name) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unencrypted":
		*e = Name(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Name: %v", v)
	}
}

// DestinationMssqlV2Unencrypted - The data transfer will not be encrypted.
type DestinationMssqlV2Unencrypted struct {
	Name                 *Name `default:"unencrypted" json:"name"`
	AdditionalProperties any   `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2Unencrypted) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2Unencrypted) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2Unencrypted) GetName() *Name {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2Unencrypted) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2SSLMethodType string

const (
	DestinationMssqlV2SSLMethodTypeDestinationMssqlV2Unencrypted                     DestinationMssqlV2SSLMethodType = "destination-mssql-v2_Unencrypted"
	DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedTrustServerCertificate DestinationMssqlV2SSLMethodType = "destination-mssql-v2_Encrypted (trust server certificate)"
	DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedVerifyCertificate      DestinationMssqlV2SSLMethodType = "destination-mssql-v2_Encrypted (verify certificate)"
)

// DestinationMssqlV2SSLMethod - The encryption method which is used to communicate with the database.
type DestinationMssqlV2SSLMethod struct {
	DestinationMssqlV2Unencrypted                     *DestinationMssqlV2Unencrypted                     `queryParam:"inline"`
	DestinationMssqlV2EncryptedTrustServerCertificate *DestinationMssqlV2EncryptedTrustServerCertificate `queryParam:"inline"`
	DestinationMssqlV2EncryptedVerifyCertificate      *DestinationMssqlV2EncryptedVerifyCertificate      `queryParam:"inline"`

	Type DestinationMssqlV2SSLMethodType
}

func CreateDestinationMssqlV2SSLMethodDestinationMssqlV2Unencrypted(destinationMssqlV2Unencrypted DestinationMssqlV2Unencrypted) DestinationMssqlV2SSLMethod {
	typ := DestinationMssqlV2SSLMethodTypeDestinationMssqlV2Unencrypted

	return DestinationMssqlV2SSLMethod{
		DestinationMssqlV2Unencrypted: &destinationMssqlV2Unencrypted,
		Type:                          typ,
	}
}

func CreateDestinationMssqlV2SSLMethodDestinationMssqlV2EncryptedTrustServerCertificate(destinationMssqlV2EncryptedTrustServerCertificate DestinationMssqlV2EncryptedTrustServerCertificate) DestinationMssqlV2SSLMethod {
	typ := DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedTrustServerCertificate

	return DestinationMssqlV2SSLMethod{
		DestinationMssqlV2EncryptedTrustServerCertificate: &destinationMssqlV2EncryptedTrustServerCertificate,
		Type: typ,
	}
}

func CreateDestinationMssqlV2SSLMethodDestinationMssqlV2EncryptedVerifyCertificate(destinationMssqlV2EncryptedVerifyCertificate DestinationMssqlV2EncryptedVerifyCertificate) DestinationMssqlV2SSLMethod {
	typ := DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedVerifyCertificate

	return DestinationMssqlV2SSLMethod{
		DestinationMssqlV2EncryptedVerifyCertificate: &destinationMssqlV2EncryptedVerifyCertificate,
		Type: typ,
	}
}

func (u *DestinationMssqlV2SSLMethod) UnmarshalJSON(data []byte) error {

	var destinationMssqlV2Unencrypted DestinationMssqlV2Unencrypted = DestinationMssqlV2Unencrypted{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2Unencrypted, "", true, true); err == nil {
		u.DestinationMssqlV2Unencrypted = &destinationMssqlV2Unencrypted
		u.Type = DestinationMssqlV2SSLMethodTypeDestinationMssqlV2Unencrypted
		return nil
	}

	var destinationMssqlV2EncryptedTrustServerCertificate DestinationMssqlV2EncryptedTrustServerCertificate = DestinationMssqlV2EncryptedTrustServerCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2EncryptedTrustServerCertificate, "", true, true); err == nil {
		u.DestinationMssqlV2EncryptedTrustServerCertificate = &destinationMssqlV2EncryptedTrustServerCertificate
		u.Type = DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedTrustServerCertificate
		return nil
	}

	var destinationMssqlV2EncryptedVerifyCertificate DestinationMssqlV2EncryptedVerifyCertificate = DestinationMssqlV2EncryptedVerifyCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2EncryptedVerifyCertificate, "", true, true); err == nil {
		u.DestinationMssqlV2EncryptedVerifyCertificate = &destinationMssqlV2EncryptedVerifyCertificate
		u.Type = DestinationMssqlV2SSLMethodTypeDestinationMssqlV2EncryptedVerifyCertificate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationMssqlV2SSLMethod", string(data))
}

func (u DestinationMssqlV2SSLMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMssqlV2Unencrypted != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2Unencrypted, "", true)
	}

	if u.DestinationMssqlV2EncryptedTrustServerCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2EncryptedTrustServerCertificate, "", true)
	}

	if u.DestinationMssqlV2EncryptedVerifyCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2EncryptedVerifyCertificate, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationMssqlV2SSLMethod: all fields are null")
}

type MssqlV2 string

const (
	MssqlV2MssqlV2 MssqlV2 = "mssql-v2"
)

func (e MssqlV2) ToPointer() *MssqlV2 {
	return &e
}
func (e *MssqlV2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mssql-v2":
		*e = MssqlV2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MssqlV2: %v", v)
	}
}

type DestinationMssqlV2 struct {
	// The host name of the MSSQL database.
	Host string `json:"host"`
	// The port of the MSSQL database.
	Port int64 `json:"port"`
	// The name of the MSSQL database.
	Database string `json:"database"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Schema *string `default:"public" json:"schema"`
	// The username which is used to access the database.
	User string `json:"user"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The encryption method which is used to communicate with the database.
	SslMethod       DestinationMssqlV2SSLMethod `json:"ssl_method"`
	destinationType MssqlV2                     `const:"mssql-v2" json:"destinationType"`
}

func (d DestinationMssqlV2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMssqlV2) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *DestinationMssqlV2) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationMssqlV2) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *DestinationMssqlV2) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}

func (o *DestinationMssqlV2) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationMssqlV2) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationMssqlV2) GetSslMethod() DestinationMssqlV2SSLMethod {
	if o == nil {
		return DestinationMssqlV2SSLMethod{}
	}
	return o.SslMethod
}

func (o *DestinationMssqlV2) GetDestinationType() MssqlV2 {
	return MssqlV2MssqlV2
}
