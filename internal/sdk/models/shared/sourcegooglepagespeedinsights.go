// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceGooglePagespeedInsightsCategories string

const (
	SourceGooglePagespeedInsightsCategoriesAccessibility SourceGooglePagespeedInsightsCategories = "accessibility"
	SourceGooglePagespeedInsightsCategoriesBestPractices SourceGooglePagespeedInsightsCategories = "best-practices"
	SourceGooglePagespeedInsightsCategoriesPerformance   SourceGooglePagespeedInsightsCategories = "performance"
	SourceGooglePagespeedInsightsCategoriesPwa           SourceGooglePagespeedInsightsCategories = "pwa"
	SourceGooglePagespeedInsightsCategoriesSeo           SourceGooglePagespeedInsightsCategories = "seo"
)

func (e SourceGooglePagespeedInsightsCategories) ToPointer() *SourceGooglePagespeedInsightsCategories {
	return &e
}
func (e *SourceGooglePagespeedInsightsCategories) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accessibility":
		fallthrough
	case "best-practices":
		fallthrough
	case "performance":
		fallthrough
	case "pwa":
		fallthrough
	case "seo":
		*e = SourceGooglePagespeedInsightsCategories(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGooglePagespeedInsightsCategories: %v", v)
	}
}

type GooglePagespeedInsights string

const (
	GooglePagespeedInsightsGooglePagespeedInsights GooglePagespeedInsights = "google-pagespeed-insights"
)

func (e GooglePagespeedInsights) ToPointer() *GooglePagespeedInsights {
	return &e
}
func (e *GooglePagespeedInsights) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-pagespeed-insights":
		*e = GooglePagespeedInsights(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePagespeedInsights: %v", v)
	}
}

type SourceGooglePagespeedInsightsStrategies string

const (
	SourceGooglePagespeedInsightsStrategiesDesktop SourceGooglePagespeedInsightsStrategies = "desktop"
	SourceGooglePagespeedInsightsStrategiesMobile  SourceGooglePagespeedInsightsStrategies = "mobile"
)

func (e SourceGooglePagespeedInsightsStrategies) ToPointer() *SourceGooglePagespeedInsightsStrategies {
	return &e
}
func (e *SourceGooglePagespeedInsightsStrategies) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "desktop":
		fallthrough
	case "mobile":
		*e = SourceGooglePagespeedInsightsStrategies(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGooglePagespeedInsightsStrategies: %v", v)
	}
}

type SourceGooglePagespeedInsights struct {
	// Google PageSpeed API Key. See <a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey">here</a>. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
	APIKey *string `json:"api_key,omitempty"`
	// Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
	Categories []SourceGooglePagespeedInsightsCategories `json:"categories"`
	sourceType GooglePagespeedInsights                   `const:"google-pagespeed-insights" json:"sourceType"`
	// The analyses strategy to use. Either "desktop" or "mobile".
	Strategies []SourceGooglePagespeedInsightsStrategies `json:"strategies"`
	// The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
	Urls []string `json:"urls"`
}

func (s SourceGooglePagespeedInsights) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGooglePagespeedInsights) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGooglePagespeedInsights) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *SourceGooglePagespeedInsights) GetCategories() []SourceGooglePagespeedInsightsCategories {
	if o == nil {
		return []SourceGooglePagespeedInsightsCategories{}
	}
	return o.Categories
}

func (o *SourceGooglePagespeedInsights) GetSourceType() GooglePagespeedInsights {
	return GooglePagespeedInsightsGooglePagespeedInsights
}

func (o *SourceGooglePagespeedInsights) GetStrategies() []SourceGooglePagespeedInsightsStrategies {
	if o == nil {
		return []SourceGooglePagespeedInsightsStrategies{}
	}
	return o.Strategies
}

func (o *SourceGooglePagespeedInsights) GetUrls() []string {
	if o == nil {
		return []string{}
	}
	return o.Urls
}
