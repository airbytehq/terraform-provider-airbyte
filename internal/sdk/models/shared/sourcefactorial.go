// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Factorial string

const (
	FactorialFactorial Factorial = "factorial"
)

func (e Factorial) ToPointer() *Factorial {
	return &e
}
func (e *Factorial) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "factorial":
		*e = Factorial(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Factorial: %v", v)
	}
}

type SourceFactorial struct {
	APIKey string `json:"api_key"`
	// Max records per page limit
	Limit      *string   `default:"50" json:"limit"`
	StartDate  time.Time `json:"start_date"`
	sourceType Factorial `const:"factorial" json:"sourceType"`
}

func (s SourceFactorial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceFactorial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceFactorial) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceFactorial) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SourceFactorial) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceFactorial) GetSourceType() Factorial {
	return FactorialFactorial
}
