// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Signnow string

const (
	SignnowSignnow Signnow = "signnow"
)

func (e Signnow) ToPointer() *Signnow {
	return &e
}
func (e *Signnow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "signnow":
		*e = Signnow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Signnow: %v", v)
	}
}

type SourceSignnow struct {
	// Api key which could be found in API section after enlarging keys section
	APIKeyID string `json:"api_key_id"`
	// The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
	AuthToken string `json:"auth_token"`
	// Name filter for documents stream
	NameFilterForDocuments []any     `json:"name_filter_for_documents,omitempty"`
	StartDate              time.Time `json:"start_date"`
	sourceType             Signnow   `const:"signnow" json:"sourceType"`
}

func (s SourceSignnow) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSignnow) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSignnow) GetAPIKeyID() string {
	if o == nil {
		return ""
	}
	return o.APIKeyID
}

func (o *SourceSignnow) GetAuthToken() string {
	if o == nil {
		return ""
	}
	return o.AuthToken
}

func (o *SourceSignnow) GetNameFilterForDocuments() []any {
	if o == nil {
		return nil
	}
	return o.NameFilterForDocuments
}

func (o *SourceSignnow) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceSignnow) GetSourceType() Signnow {
	return SignnowSignnow
}
