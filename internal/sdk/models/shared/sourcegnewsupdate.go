// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Country - This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
type Country string

const (
	CountryAu Country = "au"
	CountryBr Country = "br"
	CountryCa Country = "ca"
	CountryCn Country = "cn"
	CountryEg Country = "eg"
	CountryFr Country = "fr"
	CountryDe Country = "de"
	CountryGr Country = "gr"
	CountryHk Country = "hk"
	CountryIn Country = "in"
	CountryIe Country = "ie"
	CountryIl Country = "il"
	CountryIt Country = "it"
	CountryJp Country = "jp"
	CountryNl Country = "nl"
	CountryNo Country = "no"
	CountryPk Country = "pk"
	CountryPe Country = "pe"
	CountryPh Country = "ph"
	CountryPt Country = "pt"
	CountryRo Country = "ro"
	CountryRu Country = "ru"
	CountrySg Country = "sg"
	CountryEs Country = "es"
	CountrySe Country = "se"
	CountryCh Country = "ch"
	CountryTw Country = "tw"
	CountryUa Country = "ua"
	CountryGb Country = "gb"
	CountryUs Country = "us"
)

func (e Country) ToPointer() *Country {
	return &e
}
func (e *Country) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "au":
		fallthrough
	case "br":
		fallthrough
	case "ca":
		fallthrough
	case "cn":
		fallthrough
	case "eg":
		fallthrough
	case "fr":
		fallthrough
	case "de":
		fallthrough
	case "gr":
		fallthrough
	case "hk":
		fallthrough
	case "in":
		fallthrough
	case "ie":
		fallthrough
	case "il":
		fallthrough
	case "it":
		fallthrough
	case "jp":
		fallthrough
	case "nl":
		fallthrough
	case "no":
		fallthrough
	case "pk":
		fallthrough
	case "pe":
		fallthrough
	case "ph":
		fallthrough
	case "pt":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sg":
		fallthrough
	case "es":
		fallthrough
	case "se":
		fallthrough
	case "ch":
		fallthrough
	case "tw":
		fallthrough
	case "ua":
		fallthrough
	case "gb":
		fallthrough
	case "us":
		*e = Country(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Country: %v", v)
	}
}

type In string

const (
	InTitle       In = "title"
	InDescription In = "description"
	InContent     In = "content"
)

func (e In) ToPointer() *In {
	return &e
}
func (e *In) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "description":
		fallthrough
	case "content":
		*e = In(v)
		return nil
	default:
		return fmt.Errorf("invalid value for In: %v", v)
	}
}

type Language string

const (
	LanguageAr Language = "ar"
	LanguageZh Language = "zh"
	LanguageNl Language = "nl"
	LanguageEn Language = "en"
	LanguageFr Language = "fr"
	LanguageDe Language = "de"
	LanguageEl Language = "el"
	LanguageHe Language = "he"
	LanguageHi Language = "hi"
	LanguageIt Language = "it"
	LanguageJa Language = "ja"
	LanguageMl Language = "ml"
	LanguageMr Language = "mr"
	LanguageNo Language = "no"
	LanguagePt Language = "pt"
	LanguageRo Language = "ro"
	LanguageRu Language = "ru"
	LanguageEs Language = "es"
	LanguageSv Language = "sv"
	LanguageTa Language = "ta"
	LanguageTe Language = "te"
	LanguageUk Language = "uk"
)

func (e Language) ToPointer() *Language {
	return &e
}
func (e *Language) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ar":
		fallthrough
	case "zh":
		fallthrough
	case "nl":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "he":
		fallthrough
	case "hi":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "ml":
		fallthrough
	case "mr":
		fallthrough
	case "no":
		fallthrough
	case "pt":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "es":
		fallthrough
	case "sv":
		fallthrough
	case "ta":
		fallthrough
	case "te":
		fallthrough
	case "uk":
		*e = Language(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Language: %v", v)
	}
}

type Nullable string

const (
	NullableTitle       Nullable = "title"
	NullableDescription Nullable = "description"
	NullableContent     Nullable = "content"
)

func (e Nullable) ToPointer() *Nullable {
	return &e
}
func (e *Nullable) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "description":
		fallthrough
	case "content":
		*e = Nullable(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nullable: %v", v)
	}
}

// SortBy - This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
//   - publishedAt = sort by publication date, the articles with the most recent publication date are returned first
//   - relevance = sort by best match to keywords, the articles with the best match are returned first
type SortBy string

const (
	SortByPublishedAt SortBy = "publishedAt"
	SortByRelevance   SortBy = "relevance"
)

func (e SortBy) ToPointer() *SortBy {
	return &e
}
func (e *SortBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "publishedAt":
		fallthrough
	case "relevance":
		*e = SortBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortBy: %v", v)
	}
}

// TopHeadlinesTopic - This parameter allows you to change the category for the request.
type TopHeadlinesTopic string

const (
	TopHeadlinesTopicBreakingNews  TopHeadlinesTopic = "breaking-news"
	TopHeadlinesTopicWorld         TopHeadlinesTopic = "world"
	TopHeadlinesTopicNation        TopHeadlinesTopic = "nation"
	TopHeadlinesTopicBusiness      TopHeadlinesTopic = "business"
	TopHeadlinesTopicTechnology    TopHeadlinesTopic = "technology"
	TopHeadlinesTopicEntertainment TopHeadlinesTopic = "entertainment"
	TopHeadlinesTopicSports        TopHeadlinesTopic = "sports"
	TopHeadlinesTopicScience       TopHeadlinesTopic = "science"
	TopHeadlinesTopicHealth        TopHeadlinesTopic = "health"
)

func (e TopHeadlinesTopic) ToPointer() *TopHeadlinesTopic {
	return &e
}
func (e *TopHeadlinesTopic) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "breaking-news":
		fallthrough
	case "world":
		fallthrough
	case "nation":
		fallthrough
	case "business":
		fallthrough
	case "technology":
		fallthrough
	case "entertainment":
		fallthrough
	case "sports":
		fallthrough
	case "science":
		fallthrough
	case "health":
		*e = TopHeadlinesTopic(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TopHeadlinesTopic: %v", v)
	}
}

type SourceGnewsUpdate struct {
	// API Key
	APIKey string `json:"api_key"`
	// This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
	Country *Country `json:"country,omitempty"`
	// This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
	EndDate *string `json:"end_date,omitempty"`
	// This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
	In       []In      `json:"in,omitempty"`
	Language *Language `json:"language,omitempty"`
	// This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
	Nullable []Nullable `json:"nullable,omitempty"`
	// This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by
	//   quotation marks are used to search for articles with the exact same keyword sequence.
	//   For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.
	// - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
	//   search. By default the space character acts as an AND operator, it is possible to replace the space character
	//   by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft
	// - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
	//   It is important to note that this operator has a higher precedence than the AND operator. For example the
	//   query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching
	//   the keyword Microsoft
	// - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
	//   specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.
	//   For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword
	//   iPhone
	Query string `json:"query"`
	// This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
	//   - publishedAt = sort by publication date, the articles with the most recent publication date are returned first
	//   - relevance = sort by best match to keywords, the articles with the best match are returned first
	Sortby *SortBy `json:"sortby,omitempty"`
	// This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
	StartDate *string `json:"start_date,omitempty"`
	// This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by
	//   quotation marks are used to search for articles with the exact same keyword sequence.
	//   For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.
	// - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
	//   search. By default the space character acts as an AND operator, it is possible to replace the space character
	//   by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft
	// - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
	//   It is important to note that this operator has a higher precedence than the AND operator. For example the
	//   query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching
	//   the keyword Microsoft
	// - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
	//   specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.
	//   For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword
	//   iPhone
	TopHeadlinesQuery *string `json:"top_headlines_query,omitempty"`
	// This parameter allows you to change the category for the request.
	TopHeadlinesTopic *TopHeadlinesTopic `json:"top_headlines_topic,omitempty"`
}

func (o *SourceGnewsUpdate) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceGnewsUpdate) GetCountry() *Country {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *SourceGnewsUpdate) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceGnewsUpdate) GetIn() []In {
	if o == nil {
		return nil
	}
	return o.In
}

func (o *SourceGnewsUpdate) GetLanguage() *Language {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *SourceGnewsUpdate) GetNullable() []Nullable {
	if o == nil {
		return nil
	}
	return o.Nullable
}

func (o *SourceGnewsUpdate) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *SourceGnewsUpdate) GetSortby() *SortBy {
	if o == nil {
		return nil
	}
	return o.Sortby
}

func (o *SourceGnewsUpdate) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceGnewsUpdate) GetTopHeadlinesQuery() *string {
	if o == nil {
		return nil
	}
	return o.TopHeadlinesQuery
}

func (o *SourceGnewsUpdate) GetTopHeadlinesTopic() *TopHeadlinesTopic {
	if o == nil {
		return nil
	}
	return o.TopHeadlinesTopic
}
