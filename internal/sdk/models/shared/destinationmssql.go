// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Mssql string

const (
	MssqlMssql Mssql = "mssql"
)

func (e Mssql) ToPointer() *Mssql {
	return &e
}
func (e *Mssql) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mssql":
		*e = Mssql(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mssql: %v", v)
	}
}

type DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod string

const (
	DestinationMssqlSchemasSSLMethodSSLMethodSSLMethodEncryptedVerifyCertificate DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod = "encrypted_verify_certificate"
)

func (e DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod) ToPointer() *DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod {
	return &e
}
func (e *DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_verify_certificate":
		*e = DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod: %v", v)
	}
}

// DestinationMssqlEncryptedVerifyCertificate - Verify and use the certificate provided by the server.
type DestinationMssqlEncryptedVerifyCertificate struct {
	// Specifies the host name of the server. The value of this property must match the subject property of the certificate.
	HostNameInCertificate *string                                             `json:"hostNameInCertificate,omitempty"`
	sslMethod             *DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod `const:"encrypted_verify_certificate" json:"ssl_method"`
}

func (d DestinationMssqlEncryptedVerifyCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlEncryptedVerifyCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlEncryptedVerifyCertificate) GetHostNameInCertificate() *string {
	if o == nil {
		return nil
	}
	return o.HostNameInCertificate
}

func (o *DestinationMssqlEncryptedVerifyCertificate) GetSslMethod() *DestinationMssqlSchemasSSLMethodSSLMethodSSLMethod {
	return DestinationMssqlSchemasSSLMethodSSLMethodSSLMethodEncryptedVerifyCertificate.ToPointer()
}

type DestinationMssqlSchemasSslMethodSslMethod string

const (
	DestinationMssqlSchemasSslMethodSslMethodEncryptedTrustServerCertificate DestinationMssqlSchemasSslMethodSslMethod = "encrypted_trust_server_certificate"
)

func (e DestinationMssqlSchemasSslMethodSslMethod) ToPointer() *DestinationMssqlSchemasSslMethodSslMethod {
	return &e
}
func (e *DestinationMssqlSchemasSslMethodSslMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_trust_server_certificate":
		*e = DestinationMssqlSchemasSslMethodSslMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasSslMethodSslMethod: %v", v)
	}
}

// DestinationMssqlEncryptedTrustServerCertificate - Use the certificate provided by the server without verification. (For testing purposes only!)
type DestinationMssqlEncryptedTrustServerCertificate struct {
	sslMethod *DestinationMssqlSchemasSslMethodSslMethod `const:"encrypted_trust_server_certificate" json:"ssl_method"`
}

func (d DestinationMssqlEncryptedTrustServerCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlEncryptedTrustServerCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlEncryptedTrustServerCertificate) GetSslMethod() *DestinationMssqlSchemasSslMethodSslMethod {
	return DestinationMssqlSchemasSslMethodSslMethodEncryptedTrustServerCertificate.ToPointer()
}

type DestinationMssqlSchemasSslMethod string

const (
	DestinationMssqlSchemasSslMethodUnencrypted DestinationMssqlSchemasSslMethod = "unencrypted"
)

func (e DestinationMssqlSchemasSslMethod) ToPointer() *DestinationMssqlSchemasSslMethod {
	return &e
}
func (e *DestinationMssqlSchemasSslMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unencrypted":
		*e = DestinationMssqlSchemasSslMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasSslMethod: %v", v)
	}
}

// DestinationMssqlUnencrypted - The data transfer will not be encrypted.
type DestinationMssqlUnencrypted struct {
	sslMethod *DestinationMssqlSchemasSslMethod `const:"unencrypted" json:"ssl_method"`
}

func (d DestinationMssqlUnencrypted) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlUnencrypted) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlUnencrypted) GetSslMethod() *DestinationMssqlSchemasSslMethod {
	return DestinationMssqlSchemasSslMethodUnencrypted.ToPointer()
}

type DestinationMssqlSSLMethodType string

const (
	DestinationMssqlSSLMethodTypeDestinationMssqlUnencrypted                     DestinationMssqlSSLMethodType = "destination-mssql_Unencrypted"
	DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedTrustServerCertificate DestinationMssqlSSLMethodType = "destination-mssql_Encrypted (trust server certificate)"
	DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedVerifyCertificate      DestinationMssqlSSLMethodType = "destination-mssql_Encrypted (verify certificate)"
)

// DestinationMssqlSSLMethod - The encryption method which is used to communicate with the database.
type DestinationMssqlSSLMethod struct {
	DestinationMssqlUnencrypted                     *DestinationMssqlUnencrypted
	DestinationMssqlEncryptedTrustServerCertificate *DestinationMssqlEncryptedTrustServerCertificate
	DestinationMssqlEncryptedVerifyCertificate      *DestinationMssqlEncryptedVerifyCertificate

	Type DestinationMssqlSSLMethodType
}

func CreateDestinationMssqlSSLMethodDestinationMssqlUnencrypted(destinationMssqlUnencrypted DestinationMssqlUnencrypted) DestinationMssqlSSLMethod {
	typ := DestinationMssqlSSLMethodTypeDestinationMssqlUnencrypted

	return DestinationMssqlSSLMethod{
		DestinationMssqlUnencrypted: &destinationMssqlUnencrypted,
		Type:                        typ,
	}
}

func CreateDestinationMssqlSSLMethodDestinationMssqlEncryptedTrustServerCertificate(destinationMssqlEncryptedTrustServerCertificate DestinationMssqlEncryptedTrustServerCertificate) DestinationMssqlSSLMethod {
	typ := DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedTrustServerCertificate

	return DestinationMssqlSSLMethod{
		DestinationMssqlEncryptedTrustServerCertificate: &destinationMssqlEncryptedTrustServerCertificate,
		Type: typ,
	}
}

func CreateDestinationMssqlSSLMethodDestinationMssqlEncryptedVerifyCertificate(destinationMssqlEncryptedVerifyCertificate DestinationMssqlEncryptedVerifyCertificate) DestinationMssqlSSLMethod {
	typ := DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedVerifyCertificate

	return DestinationMssqlSSLMethod{
		DestinationMssqlEncryptedVerifyCertificate: &destinationMssqlEncryptedVerifyCertificate,
		Type: typ,
	}
}

func (u *DestinationMssqlSSLMethod) UnmarshalJSON(data []byte) error {

	var destinationMssqlUnencrypted DestinationMssqlUnencrypted = DestinationMssqlUnencrypted{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlUnencrypted, "", true, true); err == nil {
		u.DestinationMssqlUnencrypted = &destinationMssqlUnencrypted
		u.Type = DestinationMssqlSSLMethodTypeDestinationMssqlUnencrypted
		return nil
	}

	var destinationMssqlEncryptedTrustServerCertificate DestinationMssqlEncryptedTrustServerCertificate = DestinationMssqlEncryptedTrustServerCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlEncryptedTrustServerCertificate, "", true, true); err == nil {
		u.DestinationMssqlEncryptedTrustServerCertificate = &destinationMssqlEncryptedTrustServerCertificate
		u.Type = DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedTrustServerCertificate
		return nil
	}

	var destinationMssqlEncryptedVerifyCertificate DestinationMssqlEncryptedVerifyCertificate = DestinationMssqlEncryptedVerifyCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlEncryptedVerifyCertificate, "", true, true); err == nil {
		u.DestinationMssqlEncryptedVerifyCertificate = &destinationMssqlEncryptedVerifyCertificate
		u.Type = DestinationMssqlSSLMethodTypeDestinationMssqlEncryptedVerifyCertificate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationMssqlSSLMethod", string(data))
}

func (u DestinationMssqlSSLMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMssqlUnencrypted != nil {
		return utils.MarshalJSON(u.DestinationMssqlUnencrypted, "", true)
	}

	if u.DestinationMssqlEncryptedTrustServerCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlEncryptedTrustServerCertificate, "", true)
	}

	if u.DestinationMssqlEncryptedVerifyCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlEncryptedVerifyCertificate, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationMssqlSSLMethod: all fields are null")
}

// DestinationMssqlSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationMssqlSchemasTunnelMethodTunnelMethod string

const (
	DestinationMssqlSchemasTunnelMethodTunnelMethodSSHPasswordAuth DestinationMssqlSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationMssqlSchemasTunnelMethodTunnelMethod) ToPointer() *DestinationMssqlSchemasTunnelMethodTunnelMethod {
	return &e
}
func (e *DestinationMssqlSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMssqlSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

type DestinationMssqlPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationMssqlSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationMssqlPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelMethod() DestinationMssqlSchemasTunnelMethodTunnelMethod {
	return DestinationMssqlSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationMssqlSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationMssqlSchemasTunnelMethod string

const (
	DestinationMssqlSchemasTunnelMethodSSHKeyAuth DestinationMssqlSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationMssqlSchemasTunnelMethod) ToPointer() *DestinationMssqlSchemasTunnelMethod {
	return &e
}
func (e *DestinationMssqlSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationMssqlSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasTunnelMethod: %v", v)
	}
}

type DestinationMssqlSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationMssqlSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationMssqlSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelMethod() DestinationMssqlSchemasTunnelMethod {
	return DestinationMssqlSchemasTunnelMethodSSHKeyAuth
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationMssqlTunnelMethod - No ssh tunnel needed to connect to database
type DestinationMssqlTunnelMethod string

const (
	DestinationMssqlTunnelMethodNoTunnel DestinationMssqlTunnelMethod = "NO_TUNNEL"
)

func (e DestinationMssqlTunnelMethod) ToPointer() *DestinationMssqlTunnelMethod {
	return &e
}
func (e *DestinationMssqlTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationMssqlTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlTunnelMethod: %v", v)
	}
}

type DestinationMssqlNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationMssqlTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationMssqlNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlNoTunnel) GetTunnelMethod() DestinationMssqlTunnelMethod {
	return DestinationMssqlTunnelMethodNoTunnel
}

type DestinationMssqlSSHTunnelMethodType string

const (
	DestinationMssqlSSHTunnelMethodTypeDestinationMssqlNoTunnel               DestinationMssqlSSHTunnelMethodType = "destination-mssql_No Tunnel"
	DestinationMssqlSSHTunnelMethodTypeDestinationMssqlSSHKeyAuthentication   DestinationMssqlSSHTunnelMethodType = "destination-mssql_SSH Key Authentication"
	DestinationMssqlSSHTunnelMethodTypeDestinationMssqlPasswordAuthentication DestinationMssqlSSHTunnelMethodType = "destination-mssql_Password Authentication"
)

// DestinationMssqlSSHTunnelMethod - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMssqlSSHTunnelMethod struct {
	DestinationMssqlNoTunnel               *DestinationMssqlNoTunnel
	DestinationMssqlSSHKeyAuthentication   *DestinationMssqlSSHKeyAuthentication
	DestinationMssqlPasswordAuthentication *DestinationMssqlPasswordAuthentication

	Type DestinationMssqlSSHTunnelMethodType
}

func CreateDestinationMssqlSSHTunnelMethodDestinationMssqlNoTunnel(destinationMssqlNoTunnel DestinationMssqlNoTunnel) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypeDestinationMssqlNoTunnel

	return DestinationMssqlSSHTunnelMethod{
		DestinationMssqlNoTunnel: &destinationMssqlNoTunnel,
		Type:                     typ,
	}
}

func CreateDestinationMssqlSSHTunnelMethodDestinationMssqlSSHKeyAuthentication(destinationMssqlSSHKeyAuthentication DestinationMssqlSSHKeyAuthentication) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypeDestinationMssqlSSHKeyAuthentication

	return DestinationMssqlSSHTunnelMethod{
		DestinationMssqlSSHKeyAuthentication: &destinationMssqlSSHKeyAuthentication,
		Type:                                 typ,
	}
}

func CreateDestinationMssqlSSHTunnelMethodDestinationMssqlPasswordAuthentication(destinationMssqlPasswordAuthentication DestinationMssqlPasswordAuthentication) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypeDestinationMssqlPasswordAuthentication

	return DestinationMssqlSSHTunnelMethod{
		DestinationMssqlPasswordAuthentication: &destinationMssqlPasswordAuthentication,
		Type:                                   typ,
	}
}

func (u *DestinationMssqlSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	var destinationMssqlNoTunnel DestinationMssqlNoTunnel = DestinationMssqlNoTunnel{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlNoTunnel, "", true, true); err == nil {
		u.DestinationMssqlNoTunnel = &destinationMssqlNoTunnel
		u.Type = DestinationMssqlSSHTunnelMethodTypeDestinationMssqlNoTunnel
		return nil
	}

	var destinationMssqlSSHKeyAuthentication DestinationMssqlSSHKeyAuthentication = DestinationMssqlSSHKeyAuthentication{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlSSHKeyAuthentication, "", true, true); err == nil {
		u.DestinationMssqlSSHKeyAuthentication = &destinationMssqlSSHKeyAuthentication
		u.Type = DestinationMssqlSSHTunnelMethodTypeDestinationMssqlSSHKeyAuthentication
		return nil
	}

	var destinationMssqlPasswordAuthentication DestinationMssqlPasswordAuthentication = DestinationMssqlPasswordAuthentication{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlPasswordAuthentication, "", true, true); err == nil {
		u.DestinationMssqlPasswordAuthentication = &destinationMssqlPasswordAuthentication
		u.Type = DestinationMssqlSSHTunnelMethodTypeDestinationMssqlPasswordAuthentication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationMssqlSSHTunnelMethod", string(data))
}

func (u DestinationMssqlSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMssqlNoTunnel != nil {
		return utils.MarshalJSON(u.DestinationMssqlNoTunnel, "", true)
	}

	if u.DestinationMssqlSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.DestinationMssqlSSHKeyAuthentication, "", true)
	}

	if u.DestinationMssqlPasswordAuthentication != nil {
		return utils.MarshalJSON(u.DestinationMssqlPasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationMssqlSSHTunnelMethod: all fields are null")
}

type DestinationMssql struct {
	// The name of the MSSQL database.
	Database        string `json:"database"`
	destinationType Mssql  `const:"mssql" json:"destinationType"`
	// The host name of the MSSQL database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the MSSQL database.
	Port *int64 `default:"1433" json:"port"`
	// The schema to write raw tables into (default: airbyte_internal)
	RawDataSchema *string `json:"raw_data_schema,omitempty"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Schema *string `default:"public" json:"schema"`
	// The encryption method which is used to communicate with the database.
	SslMethod *DestinationMssqlSSLMethod `json:"ssl_method,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMssqlSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}

func (d DestinationMssql) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssql) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssql) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationMssql) GetDestinationType() Mssql {
	return MssqlMssql
}

func (o *DestinationMssql) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMssql) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationMssql) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationMssql) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationMssql) GetRawDataSchema() *string {
	if o == nil {
		return nil
	}
	return o.RawDataSchema
}

func (o *DestinationMssql) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *DestinationMssql) GetSslMethod() *DestinationMssqlSSLMethod {
	if o == nil {
		return nil
	}
	return o.SslMethod
}

func (o *DestinationMssql) GetTunnelMethod() *DestinationMssqlSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *DestinationMssql) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
