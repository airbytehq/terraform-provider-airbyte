// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceZohoAnalyticsMetadataAPIDataCenter string

const (
	SourceZohoAnalyticsMetadataAPIDataCenterCom   SourceZohoAnalyticsMetadataAPIDataCenter = "com"
	SourceZohoAnalyticsMetadataAPIDataCenterEu    SourceZohoAnalyticsMetadataAPIDataCenter = "eu"
	SourceZohoAnalyticsMetadataAPIDataCenterIn    SourceZohoAnalyticsMetadataAPIDataCenter = "in"
	SourceZohoAnalyticsMetadataAPIDataCenterComAu SourceZohoAnalyticsMetadataAPIDataCenter = "com.au"
	SourceZohoAnalyticsMetadataAPIDataCenterComCn SourceZohoAnalyticsMetadataAPIDataCenter = "com.cn"
	SourceZohoAnalyticsMetadataAPIDataCenterJp    SourceZohoAnalyticsMetadataAPIDataCenter = "jp"
)

func (e SourceZohoAnalyticsMetadataAPIDataCenter) ToPointer() *SourceZohoAnalyticsMetadataAPIDataCenter {
	return &e
}
func (e *SourceZohoAnalyticsMetadataAPIDataCenter) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com":
		fallthrough
	case "eu":
		fallthrough
	case "in":
		fallthrough
	case "com.au":
		fallthrough
	case "com.cn":
		fallthrough
	case "jp":
		*e = SourceZohoAnalyticsMetadataAPIDataCenter(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZohoAnalyticsMetadataAPIDataCenter: %v", v)
	}
}

type ZohoAnalyticsMetadataAPI string

const (
	ZohoAnalyticsMetadataAPIZohoAnalyticsMetadataAPI ZohoAnalyticsMetadataAPI = "zoho-analytics-metadata-api"
)

func (e ZohoAnalyticsMetadataAPI) ToPointer() *ZohoAnalyticsMetadataAPI {
	return &e
}
func (e *ZohoAnalyticsMetadataAPI) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zoho-analytics-metadata-api":
		*e = ZohoAnalyticsMetadataAPI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZohoAnalyticsMetadataAPI: %v", v)
	}
}

type SourceZohoAnalyticsMetadataAPI struct {
	ClientID     string                                    `json:"client_id"`
	ClientSecret string                                    `json:"client_secret"`
	DataCenter   *SourceZohoAnalyticsMetadataAPIDataCenter `default:"com" json:"data_center"`
	OrgID        float64                                   `json:"org_id"`
	RefreshToken string                                    `json:"refresh_token"`
	sourceType   ZohoAnalyticsMetadataAPI                  `const:"zoho-analytics-metadata-api" json:"sourceType"`
}

func (s SourceZohoAnalyticsMetadataAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZohoAnalyticsMetadataAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZohoAnalyticsMetadataAPI) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceZohoAnalyticsMetadataAPI) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceZohoAnalyticsMetadataAPI) GetDataCenter() *SourceZohoAnalyticsMetadataAPIDataCenter {
	if o == nil {
		return nil
	}
	return o.DataCenter
}

func (o *SourceZohoAnalyticsMetadataAPI) GetOrgID() float64 {
	if o == nil {
		return 0.0
	}
	return o.OrgID
}

func (o *SourceZohoAnalyticsMetadataAPI) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceZohoAnalyticsMetadataAPI) GetSourceType() ZohoAnalyticsMetadataAPI {
	return ZohoAnalyticsMetadataAPIZohoAnalyticsMetadataAPI
}
