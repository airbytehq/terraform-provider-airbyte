// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Persona string

const (
	PersonaPersona Persona = "persona"
)

func (e Persona) ToPointer() *Persona {
	return &e
}
func (e *Persona) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "persona":
		*e = Persona(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Persona: %v", v)
	}
}

type SourcePersona struct {
	// API key or access token
	APIKey     string  `json:"api_key"`
	sourceType Persona `const:"persona" json:"sourceType"`
}

func (s SourcePersona) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePersona) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePersona) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourcePersona) GetSourceType() Persona {
	return PersonaPersona
}
