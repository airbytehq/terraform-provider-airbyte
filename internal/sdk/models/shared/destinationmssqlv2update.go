// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationMssqlV2UpdateSchemasLoadType string

const (
	DestinationMssqlV2UpdateSchemasLoadTypeBulk DestinationMssqlV2UpdateSchemasLoadType = "BULK"
)

func (e DestinationMssqlV2UpdateSchemasLoadType) ToPointer() *DestinationMssqlV2UpdateSchemasLoadType {
	return &e
}
func (e *DestinationMssqlV2UpdateSchemasLoadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BULK":
		*e = DestinationMssqlV2UpdateSchemasLoadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2UpdateSchemasLoadType: %v", v)
	}
}

// DestinationMssqlV2UpdateBulkLoad - Configuration details for using the BULK loading mechanism.
type DestinationMssqlV2UpdateBulkLoad struct {
	// The name of the Azure Blob Storage account. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#storage-accounts
	AzureBlobStorageAccountName string `json:"azure_blob_storage_account_name"`
	// The name of the Azure Blob Storage container. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#containers
	AzureBlobStorageContainerName string `json:"azure_blob_storage_container_name"`
	// Specifies the external data source name configured in MSSQL, which references the Azure Blob container. See: https://learn.microsoft.com/sql/t-sql/statements/bulk-insert-transact-sql
	BulkLoadDataSource string `json:"bulk_load_data_source"`
	// When enabled, Airbyte will validate all values before loading them into the destination table. This provides stronger data integrity guarantees but may significantly impact performance.
	BulkLoadValidateValuesPreLoad *bool                                    `default:"false" json:"bulk_load_validate_values_pre_load"`
	LoadType                      *DestinationMssqlV2UpdateSchemasLoadType `default:"BULK" json:"load_type"`
	// A shared access signature (SAS) provides secure delegated access to resources in your storage account. See: https://learn.microsoft.com/azure/storage/common/storage-sas-overview
	SharedAccessSignature string `json:"shared_access_signature"`
	AdditionalProperties  any    `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2UpdateBulkLoad) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2UpdateBulkLoad) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetAzureBlobStorageAccountName() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageAccountName
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetAzureBlobStorageContainerName() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageContainerName
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetBulkLoadDataSource() string {
	if o == nil {
		return ""
	}
	return o.BulkLoadDataSource
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetBulkLoadValidateValuesPreLoad() *bool {
	if o == nil {
		return nil
	}
	return o.BulkLoadValidateValuesPreLoad
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetLoadType() *DestinationMssqlV2UpdateSchemasLoadType {
	if o == nil {
		return nil
	}
	return o.LoadType
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetSharedAccessSignature() string {
	if o == nil {
		return ""
	}
	return o.SharedAccessSignature
}

func (o *DestinationMssqlV2UpdateBulkLoad) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2UpdateSchemasLoadTypeLoadType string

const (
	DestinationMssqlV2UpdateSchemasLoadTypeLoadTypeInsert DestinationMssqlV2UpdateSchemasLoadTypeLoadType = "INSERT"
)

func (e DestinationMssqlV2UpdateSchemasLoadTypeLoadType) ToPointer() *DestinationMssqlV2UpdateSchemasLoadTypeLoadType {
	return &e
}
func (e *DestinationMssqlV2UpdateSchemasLoadTypeLoadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INSERT":
		*e = DestinationMssqlV2UpdateSchemasLoadTypeLoadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2UpdateSchemasLoadTypeLoadType: %v", v)
	}
}

// DestinationMssqlV2UpdateInsertLoad - Configuration details for using the INSERT loading mechanism.
type DestinationMssqlV2UpdateInsertLoad struct {
	LoadType             *DestinationMssqlV2UpdateSchemasLoadTypeLoadType `default:"INSERT" json:"load_type"`
	AdditionalProperties any                                              `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2UpdateInsertLoad) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2UpdateInsertLoad) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2UpdateInsertLoad) GetLoadType() *DestinationMssqlV2UpdateSchemasLoadTypeLoadType {
	if o == nil {
		return nil
	}
	return o.LoadType
}

func (o *DestinationMssqlV2UpdateInsertLoad) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2UpdateLoadTypeType string

const (
	DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateInsertLoad DestinationMssqlV2UpdateLoadTypeType = "destination-mssql-v2-update_Insert Load"
	DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateBulkLoad   DestinationMssqlV2UpdateLoadTypeType = "destination-mssql-v2-update_Bulk Load"
)

// DestinationMssqlV2UpdateLoadType - Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
type DestinationMssqlV2UpdateLoadType struct {
	DestinationMssqlV2UpdateInsertLoad *DestinationMssqlV2UpdateInsertLoad `queryParam:"inline"`
	DestinationMssqlV2UpdateBulkLoad   *DestinationMssqlV2UpdateBulkLoad   `queryParam:"inline"`

	Type DestinationMssqlV2UpdateLoadTypeType
}

func CreateDestinationMssqlV2UpdateLoadTypeDestinationMssqlV2UpdateInsertLoad(destinationMssqlV2UpdateInsertLoad DestinationMssqlV2UpdateInsertLoad) DestinationMssqlV2UpdateLoadType {
	typ := DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateInsertLoad

	return DestinationMssqlV2UpdateLoadType{
		DestinationMssqlV2UpdateInsertLoad: &destinationMssqlV2UpdateInsertLoad,
		Type:                               typ,
	}
}

func CreateDestinationMssqlV2UpdateLoadTypeDestinationMssqlV2UpdateBulkLoad(destinationMssqlV2UpdateBulkLoad DestinationMssqlV2UpdateBulkLoad) DestinationMssqlV2UpdateLoadType {
	typ := DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateBulkLoad

	return DestinationMssqlV2UpdateLoadType{
		DestinationMssqlV2UpdateBulkLoad: &destinationMssqlV2UpdateBulkLoad,
		Type:                             typ,
	}
}

func (u *DestinationMssqlV2UpdateLoadType) UnmarshalJSON(data []byte) error {

	var destinationMssqlV2UpdateInsertLoad DestinationMssqlV2UpdateInsertLoad = DestinationMssqlV2UpdateInsertLoad{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2UpdateInsertLoad, "", true, true); err == nil {
		u.DestinationMssqlV2UpdateInsertLoad = &destinationMssqlV2UpdateInsertLoad
		u.Type = DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateInsertLoad
		return nil
	}

	var destinationMssqlV2UpdateBulkLoad DestinationMssqlV2UpdateBulkLoad = DestinationMssqlV2UpdateBulkLoad{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2UpdateBulkLoad, "", true, true); err == nil {
		u.DestinationMssqlV2UpdateBulkLoad = &destinationMssqlV2UpdateBulkLoad
		u.Type = DestinationMssqlV2UpdateLoadTypeTypeDestinationMssqlV2UpdateBulkLoad
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationMssqlV2UpdateLoadType", string(data))
}

func (u DestinationMssqlV2UpdateLoadType) MarshalJSON() ([]byte, error) {
	if u.DestinationMssqlV2UpdateInsertLoad != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2UpdateInsertLoad, "", true)
	}

	if u.DestinationMssqlV2UpdateBulkLoad != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2UpdateBulkLoad, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationMssqlV2UpdateLoadType: all fields are null")
}

type DestinationMssqlV2UpdateSchemasSslMethodName string

const (
	DestinationMssqlV2UpdateSchemasSslMethodNameEncryptedVerifyCertificate DestinationMssqlV2UpdateSchemasSslMethodName = "encrypted_verify_certificate"
)

func (e DestinationMssqlV2UpdateSchemasSslMethodName) ToPointer() *DestinationMssqlV2UpdateSchemasSslMethodName {
	return &e
}
func (e *DestinationMssqlV2UpdateSchemasSslMethodName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_verify_certificate":
		*e = DestinationMssqlV2UpdateSchemasSslMethodName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2UpdateSchemasSslMethodName: %v", v)
	}
}

// DestinationMssqlV2UpdateEncryptedVerifyCertificate - Verify and use the certificate provided by the server.
type DestinationMssqlV2UpdateEncryptedVerifyCertificate struct {
	// Specifies the host name of the server. The value of this property must match the subject property of the certificate.
	HostNameInCertificate *string                                       `json:"hostNameInCertificate,omitempty"`
	Name                  *DestinationMssqlV2UpdateSchemasSslMethodName `default:"encrypted_verify_certificate" json:"name"`
	// Specifies the name of the trust store.
	TrustStoreName *string `json:"trustStoreName,omitempty"`
	// Specifies the password of the trust store.
	TrustStorePassword   *string `json:"trustStorePassword,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2UpdateEncryptedVerifyCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2UpdateEncryptedVerifyCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2UpdateEncryptedVerifyCertificate) GetHostNameInCertificate() *string {
	if o == nil {
		return nil
	}
	return o.HostNameInCertificate
}

func (o *DestinationMssqlV2UpdateEncryptedVerifyCertificate) GetName() *DestinationMssqlV2UpdateSchemasSslMethodName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2UpdateEncryptedVerifyCertificate) GetTrustStoreName() *string {
	if o == nil {
		return nil
	}
	return o.TrustStoreName
}

func (o *DestinationMssqlV2UpdateEncryptedVerifyCertificate) GetTrustStorePassword() *string {
	if o == nil {
		return nil
	}
	return o.TrustStorePassword
}

func (o *DestinationMssqlV2UpdateEncryptedVerifyCertificate) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2UpdateSchemasName string

const (
	DestinationMssqlV2UpdateSchemasNameEncryptedTrustServerCertificate DestinationMssqlV2UpdateSchemasName = "encrypted_trust_server_certificate"
)

func (e DestinationMssqlV2UpdateSchemasName) ToPointer() *DestinationMssqlV2UpdateSchemasName {
	return &e
}
func (e *DestinationMssqlV2UpdateSchemasName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_trust_server_certificate":
		*e = DestinationMssqlV2UpdateSchemasName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2UpdateSchemasName: %v", v)
	}
}

// DestinationMssqlV2UpdateEncryptedTrustServerCertificate - Use the certificate provided by the server without verification. (For testing purposes only!)
type DestinationMssqlV2UpdateEncryptedTrustServerCertificate struct {
	Name                 *DestinationMssqlV2UpdateSchemasName `default:"encrypted_trust_server_certificate" json:"name"`
	AdditionalProperties any                                  `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2UpdateEncryptedTrustServerCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2UpdateEncryptedTrustServerCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2UpdateEncryptedTrustServerCertificate) GetName() *DestinationMssqlV2UpdateSchemasName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2UpdateEncryptedTrustServerCertificate) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2UpdateName string

const (
	DestinationMssqlV2UpdateNameUnencrypted DestinationMssqlV2UpdateName = "unencrypted"
)

func (e DestinationMssqlV2UpdateName) ToPointer() *DestinationMssqlV2UpdateName {
	return &e
}
func (e *DestinationMssqlV2UpdateName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unencrypted":
		*e = DestinationMssqlV2UpdateName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlV2UpdateName: %v", v)
	}
}

// DestinationMssqlV2UpdateUnencrypted - The data transfer will not be encrypted.
type DestinationMssqlV2UpdateUnencrypted struct {
	Name                 *DestinationMssqlV2UpdateName `default:"unencrypted" json:"name"`
	AdditionalProperties any                           `additionalProperties:"true" json:"-"`
}

func (d DestinationMssqlV2UpdateUnencrypted) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2UpdateUnencrypted) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2UpdateUnencrypted) GetName() *DestinationMssqlV2UpdateName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationMssqlV2UpdateUnencrypted) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type DestinationMssqlV2UpdateSSLMethodType string

const (
	DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateUnencrypted                     DestinationMssqlV2UpdateSSLMethodType = "destination-mssql-v2-update_Unencrypted"
	DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedTrustServerCertificate DestinationMssqlV2UpdateSSLMethodType = "destination-mssql-v2-update_Encrypted (trust server certificate)"
	DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedVerifyCertificate      DestinationMssqlV2UpdateSSLMethodType = "destination-mssql-v2-update_Encrypted (verify certificate)"
)

// DestinationMssqlV2UpdateSSLMethod - The encryption method which is used to communicate with the database.
type DestinationMssqlV2UpdateSSLMethod struct {
	DestinationMssqlV2UpdateUnencrypted                     *DestinationMssqlV2UpdateUnencrypted                     `queryParam:"inline"`
	DestinationMssqlV2UpdateEncryptedTrustServerCertificate *DestinationMssqlV2UpdateEncryptedTrustServerCertificate `queryParam:"inline"`
	DestinationMssqlV2UpdateEncryptedVerifyCertificate      *DestinationMssqlV2UpdateEncryptedVerifyCertificate      `queryParam:"inline"`

	Type DestinationMssqlV2UpdateSSLMethodType
}

func CreateDestinationMssqlV2UpdateSSLMethodDestinationMssqlV2UpdateUnencrypted(destinationMssqlV2UpdateUnencrypted DestinationMssqlV2UpdateUnencrypted) DestinationMssqlV2UpdateSSLMethod {
	typ := DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateUnencrypted

	return DestinationMssqlV2UpdateSSLMethod{
		DestinationMssqlV2UpdateUnencrypted: &destinationMssqlV2UpdateUnencrypted,
		Type:                                typ,
	}
}

func CreateDestinationMssqlV2UpdateSSLMethodDestinationMssqlV2UpdateEncryptedTrustServerCertificate(destinationMssqlV2UpdateEncryptedTrustServerCertificate DestinationMssqlV2UpdateEncryptedTrustServerCertificate) DestinationMssqlV2UpdateSSLMethod {
	typ := DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedTrustServerCertificate

	return DestinationMssqlV2UpdateSSLMethod{
		DestinationMssqlV2UpdateEncryptedTrustServerCertificate: &destinationMssqlV2UpdateEncryptedTrustServerCertificate,
		Type: typ,
	}
}

func CreateDestinationMssqlV2UpdateSSLMethodDestinationMssqlV2UpdateEncryptedVerifyCertificate(destinationMssqlV2UpdateEncryptedVerifyCertificate DestinationMssqlV2UpdateEncryptedVerifyCertificate) DestinationMssqlV2UpdateSSLMethod {
	typ := DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedVerifyCertificate

	return DestinationMssqlV2UpdateSSLMethod{
		DestinationMssqlV2UpdateEncryptedVerifyCertificate: &destinationMssqlV2UpdateEncryptedVerifyCertificate,
		Type: typ,
	}
}

func (u *DestinationMssqlV2UpdateSSLMethod) UnmarshalJSON(data []byte) error {

	var destinationMssqlV2UpdateUnencrypted DestinationMssqlV2UpdateUnencrypted = DestinationMssqlV2UpdateUnencrypted{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2UpdateUnencrypted, "", true, true); err == nil {
		u.DestinationMssqlV2UpdateUnencrypted = &destinationMssqlV2UpdateUnencrypted
		u.Type = DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateUnencrypted
		return nil
	}

	var destinationMssqlV2UpdateEncryptedTrustServerCertificate DestinationMssqlV2UpdateEncryptedTrustServerCertificate = DestinationMssqlV2UpdateEncryptedTrustServerCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2UpdateEncryptedTrustServerCertificate, "", true, true); err == nil {
		u.DestinationMssqlV2UpdateEncryptedTrustServerCertificate = &destinationMssqlV2UpdateEncryptedTrustServerCertificate
		u.Type = DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedTrustServerCertificate
		return nil
	}

	var destinationMssqlV2UpdateEncryptedVerifyCertificate DestinationMssqlV2UpdateEncryptedVerifyCertificate = DestinationMssqlV2UpdateEncryptedVerifyCertificate{}
	if err := utils.UnmarshalJSON(data, &destinationMssqlV2UpdateEncryptedVerifyCertificate, "", true, true); err == nil {
		u.DestinationMssqlV2UpdateEncryptedVerifyCertificate = &destinationMssqlV2UpdateEncryptedVerifyCertificate
		u.Type = DestinationMssqlV2UpdateSSLMethodTypeDestinationMssqlV2UpdateEncryptedVerifyCertificate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationMssqlV2UpdateSSLMethod", string(data))
}

func (u DestinationMssqlV2UpdateSSLMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMssqlV2UpdateUnencrypted != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2UpdateUnencrypted, "", true)
	}

	if u.DestinationMssqlV2UpdateEncryptedTrustServerCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2UpdateEncryptedTrustServerCertificate, "", true)
	}

	if u.DestinationMssqlV2UpdateEncryptedVerifyCertificate != nil {
		return utils.MarshalJSON(u.DestinationMssqlV2UpdateEncryptedVerifyCertificate, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationMssqlV2UpdateSSLMethod: all fields are null")
}

type DestinationMssqlV2Update struct {
	// The name of the MSSQL database.
	Database string `json:"database"`
	// The host name of the MSSQL database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
	LoadType DestinationMssqlV2UpdateLoadType `json:"load_type"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the MSSQL database.
	Port int64 `json:"port"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Schema *string `default:"public" json:"schema"`
	// The encryption method which is used to communicate with the database.
	SslMethod DestinationMssqlV2UpdateSSLMethod `json:"ssl_method"`
	// The username which is used to access the database.
	User string `json:"user"`
}

func (d DestinationMssqlV2Update) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlV2Update) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlV2Update) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationMssqlV2Update) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMssqlV2Update) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationMssqlV2Update) GetLoadType() DestinationMssqlV2UpdateLoadType {
	if o == nil {
		return DestinationMssqlV2UpdateLoadType{}
	}
	return o.LoadType
}

func (o *DestinationMssqlV2Update) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationMssqlV2Update) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *DestinationMssqlV2Update) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *DestinationMssqlV2Update) GetSslMethod() DestinationMssqlV2UpdateSSLMethod {
	if o == nil {
		return DestinationMssqlV2UpdateSSLMethod{}
	}
	return o.SslMethod
}

func (o *DestinationMssqlV2Update) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}
