// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type SourceHarvestUpdateSchemasAuthType string

const (
	SourceHarvestUpdateSchemasAuthTypeToken SourceHarvestUpdateSchemasAuthType = "Token"
)

func (e SourceHarvestUpdateSchemasAuthType) ToPointer() *SourceHarvestUpdateSchemasAuthType {
	return &e
}
func (e *SourceHarvestUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceHarvestUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestUpdateSchemasAuthType: %v", v)
	}
}

type SourceHarvestUpdateAuthenticateWithPersonalAccessToken struct {
	AdditionalProperties any `additionalProperties:"true" json:"-"`
	// Log into Harvest and then create new <a href="https://id.getharvest.com/developers"> personal access token</a>.
	APIToken string                              `json:"api_token"`
	authType *SourceHarvestUpdateSchemasAuthType `const:"Token" json:"auth_type,omitempty"`
}

func (s SourceHarvestUpdateAuthenticateWithPersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestUpdateAuthenticateWithPersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestUpdateAuthenticateWithPersonalAccessToken) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceHarvestUpdateAuthenticateWithPersonalAccessToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceHarvestUpdateAuthenticateWithPersonalAccessToken) GetAuthType() *SourceHarvestUpdateSchemasAuthType {
	return SourceHarvestUpdateSchemasAuthTypeToken.ToPointer()
}

type SourceHarvestUpdateAuthType string

const (
	SourceHarvestUpdateAuthTypeClient SourceHarvestUpdateAuthType = "Client"
)

func (e SourceHarvestUpdateAuthType) ToPointer() *SourceHarvestUpdateAuthType {
	return &e
}
func (e *SourceHarvestUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceHarvestUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestUpdateAuthType: %v", v)
	}
}

type AuthenticateViaHarvestOAuth struct {
	AdditionalProperties any                          `additionalProperties:"true" json:"-"`
	authType             *SourceHarvestUpdateAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Harvest developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Harvest developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string `json:"refresh_token"`
}

func (a AuthenticateViaHarvestOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthenticateViaHarvestOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AuthenticateViaHarvestOAuth) GetAdditionalProperties() any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *AuthenticateViaHarvestOAuth) GetAuthType() *SourceHarvestUpdateAuthType {
	return SourceHarvestUpdateAuthTypeClient.ToPointer()
}

func (o *AuthenticateViaHarvestOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *AuthenticateViaHarvestOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *AuthenticateViaHarvestOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceHarvestUpdateAuthenticationMechanismType string

const (
	SourceHarvestUpdateAuthenticationMechanismTypeAuthenticateViaHarvestOAuth                            SourceHarvestUpdateAuthenticationMechanismType = "Authenticate via Harvest (OAuth)"
	SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticateWithPersonalAccessToken SourceHarvestUpdateAuthenticationMechanismType = "source-harvest-update_Authenticate with Personal Access Token"
)

// SourceHarvestUpdateAuthenticationMechanism - Choose how to authenticate to Harvest.
type SourceHarvestUpdateAuthenticationMechanism struct {
	AuthenticateViaHarvestOAuth                            *AuthenticateViaHarvestOAuth
	SourceHarvestUpdateAuthenticateWithPersonalAccessToken *SourceHarvestUpdateAuthenticateWithPersonalAccessToken

	Type SourceHarvestUpdateAuthenticationMechanismType
}

func CreateSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth(authenticateViaHarvestOAuth AuthenticateViaHarvestOAuth) SourceHarvestUpdateAuthenticationMechanism {
	typ := SourceHarvestUpdateAuthenticationMechanismTypeAuthenticateViaHarvestOAuth

	return SourceHarvestUpdateAuthenticationMechanism{
		AuthenticateViaHarvestOAuth: &authenticateViaHarvestOAuth,
		Type:                        typ,
	}
}

func CreateSourceHarvestUpdateAuthenticationMechanismSourceHarvestUpdateAuthenticateWithPersonalAccessToken(sourceHarvestUpdateAuthenticateWithPersonalAccessToken SourceHarvestUpdateAuthenticateWithPersonalAccessToken) SourceHarvestUpdateAuthenticationMechanism {
	typ := SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticateWithPersonalAccessToken

	return SourceHarvestUpdateAuthenticationMechanism{
		SourceHarvestUpdateAuthenticateWithPersonalAccessToken: &sourceHarvestUpdateAuthenticateWithPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceHarvestUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	var sourceHarvestUpdateAuthenticateWithPersonalAccessToken SourceHarvestUpdateAuthenticateWithPersonalAccessToken = SourceHarvestUpdateAuthenticateWithPersonalAccessToken{}
	if err := utils.UnmarshalJSON(data, &sourceHarvestUpdateAuthenticateWithPersonalAccessToken, "", true, true); err == nil {
		u.SourceHarvestUpdateAuthenticateWithPersonalAccessToken = &sourceHarvestUpdateAuthenticateWithPersonalAccessToken
		u.Type = SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticateWithPersonalAccessToken
		return nil
	}

	var authenticateViaHarvestOAuth AuthenticateViaHarvestOAuth = AuthenticateViaHarvestOAuth{}
	if err := utils.UnmarshalJSON(data, &authenticateViaHarvestOAuth, "", true, true); err == nil {
		u.AuthenticateViaHarvestOAuth = &authenticateViaHarvestOAuth
		u.Type = SourceHarvestUpdateAuthenticationMechanismTypeAuthenticateViaHarvestOAuth
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceHarvestUpdateAuthenticationMechanism", string(data))
}

func (u SourceHarvestUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.AuthenticateViaHarvestOAuth != nil {
		return utils.MarshalJSON(u.AuthenticateViaHarvestOAuth, "", true)
	}

	if u.SourceHarvestUpdateAuthenticateWithPersonalAccessToken != nil {
		return utils.MarshalJSON(u.SourceHarvestUpdateAuthenticateWithPersonalAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type SourceHarvestUpdateAuthenticationMechanism: all fields are null")
}

type SourceHarvestUpdate struct {
	// Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
	AccountID string `json:"account_id"`
	// Choose how to authenticate to Harvest.
	Credentials *SourceHarvestUpdateAuthenticationMechanism `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	ReplicationStartDate time.Time `json:"replication_start_date"`
}

func (s SourceHarvestUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestUpdate) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *SourceHarvestUpdate) GetCredentials() *SourceHarvestUpdateAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceHarvestUpdate) GetReplicationStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ReplicationStartDate
}
