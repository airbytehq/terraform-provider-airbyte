// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type SourceSurveymonkeyAuthMethod string

const (
	SourceSurveymonkeyAuthMethodOauth20 SourceSurveymonkeyAuthMethod = "oauth2.0"
)

func (e SourceSurveymonkeyAuthMethod) ToPointer() *SourceSurveymonkeyAuthMethod {
	return &e
}
func (e *SourceSurveymonkeyAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceSurveymonkeyAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveymonkeyAuthMethod: %v", v)
	}
}

// SourceSurveymonkeySurveyMonkeyAuthorizationMethod - The authorization method to use to retrieve data from SurveyMonkey
type SourceSurveymonkeySurveyMonkeyAuthorizationMethod struct {
	// Access Token for making authenticated requests. See the <a href="https://docs.airbyte.io/integrations/sources/surveymonkey">docs</a> for information on how to generate this key.
	AccessToken string                       `json:"access_token"`
	authMethod  SourceSurveymonkeyAuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of the SurveyMonkey developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of the SurveyMonkey developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceSurveymonkeySurveyMonkeyAuthorizationMethod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveymonkeySurveyMonkeyAuthorizationMethod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveymonkeySurveyMonkeyAuthorizationMethod) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSurveymonkeySurveyMonkeyAuthorizationMethod) GetAuthMethod() SourceSurveymonkeyAuthMethod {
	return SourceSurveymonkeyAuthMethodOauth20
}

func (o *SourceSurveymonkeySurveyMonkeyAuthorizationMethod) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceSurveymonkeySurveyMonkeyAuthorizationMethod) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

// SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount - Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
type SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount string

const (
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountUsa    SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "USA"
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountEurope SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "Europe"
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountCanada SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "Canada"
)

func (e SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount) ToPointer() *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount {
	return &e
}
func (e *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USA":
		fallthrough
	case "Europe":
		fallthrough
	case "Canada":
		*e = SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount: %v", v)
	}
}

type Surveymonkey string

const (
	SurveymonkeySurveymonkey Surveymonkey = "surveymonkey"
)

func (e Surveymonkey) ToPointer() *Surveymonkey {
	return &e
}
func (e *Surveymonkey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "surveymonkey":
		*e = Surveymonkey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Surveymonkey: %v", v)
	}
}

type SourceSurveymonkey struct {
	// The authorization method to use to retrieve data from SurveyMonkey
	Credentials SourceSurveymonkeySurveyMonkeyAuthorizationMethod `json:"credentials"`
	// Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
	Origin     *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount `default:"USA" json:"origin"`
	sourceType Surveymonkey                                                `const:"surveymonkey" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
	// IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
	SurveyIds []string `json:"survey_ids,omitempty"`
}

func (s SourceSurveymonkey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveymonkey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveymonkey) GetCredentials() SourceSurveymonkeySurveyMonkeyAuthorizationMethod {
	if o == nil {
		return SourceSurveymonkeySurveyMonkeyAuthorizationMethod{}
	}
	return o.Credentials
}

func (o *SourceSurveymonkey) GetOrigin() *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *SourceSurveymonkey) GetSourceType() Surveymonkey {
	return SurveymonkeySurveymonkey
}

func (o *SourceSurveymonkey) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceSurveymonkey) GetSurveyIds() []string {
	if o == nil {
		return nil
	}
	return o.SurveyIds
}
