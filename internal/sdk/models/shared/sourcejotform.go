// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type SourceJotformSchemasAPIEndpointAPIEndpoint string

const (
	SourceJotformSchemasAPIEndpointAPIEndpointEnterprise SourceJotformSchemasAPIEndpointAPIEndpoint = "enterprise"
)

func (e SourceJotformSchemasAPIEndpointAPIEndpoint) ToPointer() *SourceJotformSchemasAPIEndpointAPIEndpoint {
	return &e
}
func (e *SourceJotformSchemasAPIEndpointAPIEndpoint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise":
		*e = SourceJotformSchemasAPIEndpointAPIEndpoint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceJotformSchemasAPIEndpointAPIEndpoint: %v", v)
	}
}

type SourceJotformEnterprise struct {
	apiEndpoint *SourceJotformSchemasAPIEndpointAPIEndpoint `const:"enterprise" json:"api_endpoint,omitempty"`
	// Upgrade to Enterprise to make your API url your-domain.com/API or subdomain.jotform.com/API instead of api.jotform.com
	EnterpriseURL string `json:"enterprise_url"`
}

func (s SourceJotformEnterprise) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceJotformEnterprise) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceJotformEnterprise) GetAPIEndpoint() *SourceJotformSchemasAPIEndpointAPIEndpoint {
	return SourceJotformSchemasAPIEndpointAPIEndpointEnterprise.ToPointer()
}

func (o *SourceJotformEnterprise) GetEnterpriseURL() string {
	if o == nil {
		return ""
	}
	return o.EnterpriseURL
}

type SourceJotformSchemasAPIEndpoint string

const (
	SourceJotformSchemasAPIEndpointBasic SourceJotformSchemasAPIEndpoint = "basic"
)

func (e SourceJotformSchemasAPIEndpoint) ToPointer() *SourceJotformSchemasAPIEndpoint {
	return &e
}
func (e *SourceJotformSchemasAPIEndpoint) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = SourceJotformSchemasAPIEndpoint(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceJotformSchemasAPIEndpoint: %v", v)
	}
}

// SourceJotformBaseURLPrefix - You can access our API through the following URLs - Standard API Usage (Use the default API URL - https://api.jotform.com), For EU (Use the EU API URL - https://eu-api.jotform.com), For HIPAA (Use the HIPAA API URL - https://hipaa-api.jotform.com)
type SourceJotformBaseURLPrefix string

const (
	SourceJotformBaseURLPrefixStandard SourceJotformBaseURLPrefix = "Standard"
	SourceJotformBaseURLPrefixEu       SourceJotformBaseURLPrefix = "EU"
	SourceJotformBaseURLPrefixHipaa    SourceJotformBaseURLPrefix = "HIPAA"
)

func (e SourceJotformBaseURLPrefix) ToPointer() *SourceJotformBaseURLPrefix {
	return &e
}
func (e *SourceJotformBaseURLPrefix) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		fallthrough
	case "EU":
		fallthrough
	case "HIPAA":
		*e = SourceJotformBaseURLPrefix(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceJotformBaseURLPrefix: %v", v)
	}
}

type SourceJotformBasic struct {
	apiEndpoint *SourceJotformSchemasAPIEndpoint `const:"basic" json:"api_endpoint,omitempty"`
	// You can access our API through the following URLs - Standard API Usage (Use the default API URL - https://api.jotform.com), For EU (Use the EU API URL - https://eu-api.jotform.com), For HIPAA (Use the HIPAA API URL - https://hipaa-api.jotform.com)
	URLPrefix *SourceJotformBaseURLPrefix `default:"Standard" json:"url_prefix"`
}

func (s SourceJotformBasic) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceJotformBasic) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceJotformBasic) GetAPIEndpoint() *SourceJotformSchemasAPIEndpoint {
	return SourceJotformSchemasAPIEndpointBasic.ToPointer()
}

func (o *SourceJotformBasic) GetURLPrefix() *SourceJotformBaseURLPrefix {
	if o == nil {
		return nil
	}
	return o.URLPrefix
}

type SourceJotformAPIEndpointType string

const (
	SourceJotformAPIEndpointTypeSourceJotformBasic      SourceJotformAPIEndpointType = "source-jotform_Basic"
	SourceJotformAPIEndpointTypeSourceJotformEnterprise SourceJotformAPIEndpointType = "source-jotform_Enterprise"
)

type SourceJotformAPIEndpoint struct {
	SourceJotformBasic      *SourceJotformBasic
	SourceJotformEnterprise *SourceJotformEnterprise

	Type SourceJotformAPIEndpointType
}

func CreateSourceJotformAPIEndpointSourceJotformBasic(sourceJotformBasic SourceJotformBasic) SourceJotformAPIEndpoint {
	typ := SourceJotformAPIEndpointTypeSourceJotformBasic

	return SourceJotformAPIEndpoint{
		SourceJotformBasic: &sourceJotformBasic,
		Type:               typ,
	}
}

func CreateSourceJotformAPIEndpointSourceJotformEnterprise(sourceJotformEnterprise SourceJotformEnterprise) SourceJotformAPIEndpoint {
	typ := SourceJotformAPIEndpointTypeSourceJotformEnterprise

	return SourceJotformAPIEndpoint{
		SourceJotformEnterprise: &sourceJotformEnterprise,
		Type:                    typ,
	}
}

func (u *SourceJotformAPIEndpoint) UnmarshalJSON(data []byte) error {

	var sourceJotformBasic SourceJotformBasic = SourceJotformBasic{}
	if err := utils.UnmarshalJSON(data, &sourceJotformBasic, "", true, true); err == nil {
		u.SourceJotformBasic = &sourceJotformBasic
		u.Type = SourceJotformAPIEndpointTypeSourceJotformBasic
		return nil
	}

	var sourceJotformEnterprise SourceJotformEnterprise = SourceJotformEnterprise{}
	if err := utils.UnmarshalJSON(data, &sourceJotformEnterprise, "", true, true); err == nil {
		u.SourceJotformEnterprise = &sourceJotformEnterprise
		u.Type = SourceJotformAPIEndpointTypeSourceJotformEnterprise
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceJotformAPIEndpoint", string(data))
}

func (u SourceJotformAPIEndpoint) MarshalJSON() ([]byte, error) {
	if u.SourceJotformBasic != nil {
		return utils.MarshalJSON(u.SourceJotformBasic, "", true)
	}

	if u.SourceJotformEnterprise != nil {
		return utils.MarshalJSON(u.SourceJotformEnterprise, "", true)
	}

	return nil, errors.New("could not marshal union type SourceJotformAPIEndpoint: all fields are null")
}

type Jotform string

const (
	JotformJotform Jotform = "jotform"
)

func (e Jotform) ToPointer() *Jotform {
	return &e
}
func (e *Jotform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jotform":
		*e = Jotform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Jotform: %v", v)
	}
}

type SourceJotform struct {
	APIEndpoint SourceJotformAPIEndpoint `json:"api_endpoint"`
	APIKey      string                   `json:"api_key"`
	EndDate     time.Time                `json:"end_date"`
	sourceType  Jotform                  `const:"jotform" json:"sourceType"`
	StartDate   time.Time                `json:"start_date"`
}

func (s SourceJotform) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceJotform) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceJotform) GetAPIEndpoint() SourceJotformAPIEndpoint {
	if o == nil {
		return SourceJotformAPIEndpoint{}
	}
	return o.APIEndpoint
}

func (o *SourceJotform) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceJotform) GetEndDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndDate
}

func (o *SourceJotform) GetSourceType() Jotform {
	return JotformJotform
}

func (o *SourceJotform) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
