// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
)

// SourceSnapchatMarketingUpdateActionReportTime - Specifies the principle for conversion reporting.
type SourceSnapchatMarketingUpdateActionReportTime string

const (
	SourceSnapchatMarketingUpdateActionReportTimeConversion SourceSnapchatMarketingUpdateActionReportTime = "conversion"
	SourceSnapchatMarketingUpdateActionReportTimeImpression SourceSnapchatMarketingUpdateActionReportTime = "impression"
)

func (e SourceSnapchatMarketingUpdateActionReportTime) ToPointer() *SourceSnapchatMarketingUpdateActionReportTime {
	return &e
}
func (e *SourceSnapchatMarketingUpdateActionReportTime) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "conversion":
		fallthrough
	case "impression":
		*e = SourceSnapchatMarketingUpdateActionReportTime(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingUpdateActionReportTime: %v", v)
	}
}

// SourceSnapchatMarketingUpdateSwipeUpAttributionWindow - Attribution window for swipe ups.
type SourceSnapchatMarketingUpdateSwipeUpAttributionWindow string

const (
	SourceSnapchatMarketingUpdateSwipeUpAttributionWindowOneDay         SourceSnapchatMarketingUpdateSwipeUpAttributionWindow = "1_DAY"
	SourceSnapchatMarketingUpdateSwipeUpAttributionWindowSevenDay       SourceSnapchatMarketingUpdateSwipeUpAttributionWindow = "7_DAY"
	SourceSnapchatMarketingUpdateSwipeUpAttributionWindowTwentyEightDay SourceSnapchatMarketingUpdateSwipeUpAttributionWindow = "28_DAY"
)

func (e SourceSnapchatMarketingUpdateSwipeUpAttributionWindow) ToPointer() *SourceSnapchatMarketingUpdateSwipeUpAttributionWindow {
	return &e
}
func (e *SourceSnapchatMarketingUpdateSwipeUpAttributionWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1_DAY":
		fallthrough
	case "7_DAY":
		fallthrough
	case "28_DAY":
		*e = SourceSnapchatMarketingUpdateSwipeUpAttributionWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingUpdateSwipeUpAttributionWindow: %v", v)
	}
}

// SourceSnapchatMarketingUpdateViewAttributionWindow - Attribution window for views.
type SourceSnapchatMarketingUpdateViewAttributionWindow string

const (
	SourceSnapchatMarketingUpdateViewAttributionWindowOneHour   SourceSnapchatMarketingUpdateViewAttributionWindow = "1_HOUR"
	SourceSnapchatMarketingUpdateViewAttributionWindowThreeHour SourceSnapchatMarketingUpdateViewAttributionWindow = "3_HOUR"
	SourceSnapchatMarketingUpdateViewAttributionWindowSixHour   SourceSnapchatMarketingUpdateViewAttributionWindow = "6_HOUR"
	SourceSnapchatMarketingUpdateViewAttributionWindowOneDay    SourceSnapchatMarketingUpdateViewAttributionWindow = "1_DAY"
	SourceSnapchatMarketingUpdateViewAttributionWindowSevenDay  SourceSnapchatMarketingUpdateViewAttributionWindow = "7_DAY"
)

func (e SourceSnapchatMarketingUpdateViewAttributionWindow) ToPointer() *SourceSnapchatMarketingUpdateViewAttributionWindow {
	return &e
}
func (e *SourceSnapchatMarketingUpdateViewAttributionWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1_HOUR":
		fallthrough
	case "3_HOUR":
		fallthrough
	case "6_HOUR":
		fallthrough
	case "1_DAY":
		fallthrough
	case "7_DAY":
		*e = SourceSnapchatMarketingUpdateViewAttributionWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingUpdateViewAttributionWindow: %v", v)
	}
}

type SourceSnapchatMarketingUpdate struct {
	// The Client ID of your Snapchat developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Snapchat developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string `json:"refresh_token"`
	// Date in the format 2022-01-01. Any data before this date will not be replicated.
	StartDate *types.Date `default:"2022-01-01" json:"start_date"`
	// Date in the format 2017-01-25. Any data after this date will not be replicated.
	EndDate *types.Date `json:"end_date,omitempty"`
	// Specifies the principle for conversion reporting.
	ActionReportTime *SourceSnapchatMarketingUpdateActionReportTime `default:"conversion" json:"action_report_time"`
	// Attribution window for swipe ups.
	SwipeUpAttributionWindow *SourceSnapchatMarketingUpdateSwipeUpAttributionWindow `default:"28_DAY" json:"swipe_up_attribution_window"`
	// Attribution window for views.
	ViewAttributionWindow *SourceSnapchatMarketingUpdateViewAttributionWindow `default:"1_DAY" json:"view_attribution_window"`
	// The IDs of the organizations to retrieve
	OrganizationIds []any `json:"organization_ids,omitempty"`
	// Ad Account IDs of the ad accounts to retrieve
	AdAccountIds []any `json:"ad_account_ids,omitempty"`
}

func (s SourceSnapchatMarketingUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnapchatMarketingUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnapchatMarketingUpdate) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSnapchatMarketingUpdate) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSnapchatMarketingUpdate) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceSnapchatMarketingUpdate) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceSnapchatMarketingUpdate) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceSnapchatMarketingUpdate) GetActionReportTime() *SourceSnapchatMarketingUpdateActionReportTime {
	if o == nil {
		return nil
	}
	return o.ActionReportTime
}

func (o *SourceSnapchatMarketingUpdate) GetSwipeUpAttributionWindow() *SourceSnapchatMarketingUpdateSwipeUpAttributionWindow {
	if o == nil {
		return nil
	}
	return o.SwipeUpAttributionWindow
}

func (o *SourceSnapchatMarketingUpdate) GetViewAttributionWindow() *SourceSnapchatMarketingUpdateViewAttributionWindow {
	if o == nil {
		return nil
	}
	return o.ViewAttributionWindow
}

func (o *SourceSnapchatMarketingUpdate) GetOrganizationIds() []any {
	if o == nil {
		return nil
	}
	return o.OrganizationIds
}

func (o *SourceSnapchatMarketingUpdate) GetAdAccountIds() []any {
	if o == nil {
		return nil
	}
	return o.AdAccountIds
}
