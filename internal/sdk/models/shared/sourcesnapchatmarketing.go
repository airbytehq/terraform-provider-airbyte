// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
)

// SourceSnapchatMarketingActionReportTime - Specifies the principle for conversion reporting.
type SourceSnapchatMarketingActionReportTime string

const (
	SourceSnapchatMarketingActionReportTimeConversion SourceSnapchatMarketingActionReportTime = "conversion"
	SourceSnapchatMarketingActionReportTimeImpression SourceSnapchatMarketingActionReportTime = "impression"
)

func (e SourceSnapchatMarketingActionReportTime) ToPointer() *SourceSnapchatMarketingActionReportTime {
	return &e
}
func (e *SourceSnapchatMarketingActionReportTime) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "conversion":
		fallthrough
	case "impression":
		*e = SourceSnapchatMarketingActionReportTime(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingActionReportTime: %v", v)
	}
}

type SnapchatMarketing string

const (
	SnapchatMarketingSnapchatMarketing SnapchatMarketing = "snapchat-marketing"
)

func (e SnapchatMarketing) ToPointer() *SnapchatMarketing {
	return &e
}
func (e *SnapchatMarketing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snapchat-marketing":
		*e = SnapchatMarketing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SnapchatMarketing: %v", v)
	}
}

// SourceSnapchatMarketingSwipeUpAttributionWindow - Attribution window for swipe ups.
type SourceSnapchatMarketingSwipeUpAttributionWindow string

const (
	SourceSnapchatMarketingSwipeUpAttributionWindowOneDay         SourceSnapchatMarketingSwipeUpAttributionWindow = "1_DAY"
	SourceSnapchatMarketingSwipeUpAttributionWindowSevenDay       SourceSnapchatMarketingSwipeUpAttributionWindow = "7_DAY"
	SourceSnapchatMarketingSwipeUpAttributionWindowTwentyEightDay SourceSnapchatMarketingSwipeUpAttributionWindow = "28_DAY"
)

func (e SourceSnapchatMarketingSwipeUpAttributionWindow) ToPointer() *SourceSnapchatMarketingSwipeUpAttributionWindow {
	return &e
}
func (e *SourceSnapchatMarketingSwipeUpAttributionWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1_DAY":
		fallthrough
	case "7_DAY":
		fallthrough
	case "28_DAY":
		*e = SourceSnapchatMarketingSwipeUpAttributionWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingSwipeUpAttributionWindow: %v", v)
	}
}

// SourceSnapchatMarketingViewAttributionWindow - Attribution window for views.
type SourceSnapchatMarketingViewAttributionWindow string

const (
	SourceSnapchatMarketingViewAttributionWindowOneHour   SourceSnapchatMarketingViewAttributionWindow = "1_HOUR"
	SourceSnapchatMarketingViewAttributionWindowThreeHour SourceSnapchatMarketingViewAttributionWindow = "3_HOUR"
	SourceSnapchatMarketingViewAttributionWindowSixHour   SourceSnapchatMarketingViewAttributionWindow = "6_HOUR"
	SourceSnapchatMarketingViewAttributionWindowOneDay    SourceSnapchatMarketingViewAttributionWindow = "1_DAY"
	SourceSnapchatMarketingViewAttributionWindowSevenDay  SourceSnapchatMarketingViewAttributionWindow = "7_DAY"
)

func (e SourceSnapchatMarketingViewAttributionWindow) ToPointer() *SourceSnapchatMarketingViewAttributionWindow {
	return &e
}
func (e *SourceSnapchatMarketingViewAttributionWindow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1_HOUR":
		fallthrough
	case "3_HOUR":
		fallthrough
	case "6_HOUR":
		fallthrough
	case "1_DAY":
		fallthrough
	case "7_DAY":
		*e = SourceSnapchatMarketingViewAttributionWindow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnapchatMarketingViewAttributionWindow: %v", v)
	}
}

type SourceSnapchatMarketing struct {
	// Specifies the principle for conversion reporting.
	ActionReportTime *SourceSnapchatMarketingActionReportTime `default:"conversion" json:"action_report_time"`
	// The Client ID of your Snapchat developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Snapchat developer application.
	ClientSecret string `json:"client_secret"`
	// Date in the format 2017-01-25. Any data after this date will not be replicated.
	EndDate *types.Date `json:"end_date,omitempty"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string            `json:"refresh_token"`
	sourceType   SnapchatMarketing `const:"snapchat-marketing" json:"sourceType"`
	// Date in the format 2022-01-01. Any data before this date will not be replicated.
	StartDate *types.Date `default:"2022-01-01" json:"start_date"`
	// Attribution window for swipe ups.
	SwipeUpAttributionWindow *SourceSnapchatMarketingSwipeUpAttributionWindow `default:"28_DAY" json:"swipe_up_attribution_window"`
	// Attribution window for views.
	ViewAttributionWindow *SourceSnapchatMarketingViewAttributionWindow `default:"1_DAY" json:"view_attribution_window"`
}

func (s SourceSnapchatMarketing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnapchatMarketing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnapchatMarketing) GetActionReportTime() *SourceSnapchatMarketingActionReportTime {
	if o == nil {
		return nil
	}
	return o.ActionReportTime
}

func (o *SourceSnapchatMarketing) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSnapchatMarketing) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSnapchatMarketing) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceSnapchatMarketing) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceSnapchatMarketing) GetSourceType() SnapchatMarketing {
	return SnapchatMarketingSnapchatMarketing
}

func (o *SourceSnapchatMarketing) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceSnapchatMarketing) GetSwipeUpAttributionWindow() *SourceSnapchatMarketingSwipeUpAttributionWindow {
	if o == nil {
		return nil
	}
	return o.SwipeUpAttributionWindow
}

func (o *SourceSnapchatMarketing) GetViewAttributionWindow() *SourceSnapchatMarketingViewAttributionWindow {
	if o == nil {
		return nil
	}
	return o.ViewAttributionWindow
}
