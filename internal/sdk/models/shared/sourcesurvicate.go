// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Survicate string

const (
	SurvicateSurvicate Survicate = "survicate"
)

func (e Survicate) ToPointer() *Survicate {
	return &e
}
func (e *Survicate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "survicate":
		*e = Survicate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Survicate: %v", v)
	}
}

type SourceSurvicate struct {
	APIKey     string    `json:"api_key"`
	sourceType Survicate `const:"survicate" json:"sourceType"`
	StartDate  time.Time `json:"start_date"`
}

func (s SourceSurvicate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurvicate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurvicate) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSurvicate) GetSourceType() Survicate {
	return SurvicateSurvicate
}

func (o *SourceSurvicate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
