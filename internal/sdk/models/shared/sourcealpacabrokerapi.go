// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

// SourceAlpacaBrokerAPIEnvironment - The trading environment, either 'live', 'paper' or 'broker-api.sandbox'.
type SourceAlpacaBrokerAPIEnvironment string

const (
	SourceAlpacaBrokerAPIEnvironmentAPI              SourceAlpacaBrokerAPIEnvironment = "api"
	SourceAlpacaBrokerAPIEnvironmentPaperAPI         SourceAlpacaBrokerAPIEnvironment = "paper-api"
	SourceAlpacaBrokerAPIEnvironmentBrokerAPISandbox SourceAlpacaBrokerAPIEnvironment = "broker-api.sandbox"
)

func (e SourceAlpacaBrokerAPIEnvironment) ToPointer() *SourceAlpacaBrokerAPIEnvironment {
	return &e
}
func (e *SourceAlpacaBrokerAPIEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api":
		fallthrough
	case "paper-api":
		fallthrough
	case "broker-api.sandbox":
		*e = SourceAlpacaBrokerAPIEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlpacaBrokerAPIEnvironment: %v", v)
	}
}

type AlpacaBrokerAPI string

const (
	AlpacaBrokerAPIAlpacaBrokerAPI AlpacaBrokerAPI = "alpaca-broker-api"
)

func (e AlpacaBrokerAPI) ToPointer() *AlpacaBrokerAPI {
	return &e
}
func (e *AlpacaBrokerAPI) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alpaca-broker-api":
		*e = AlpacaBrokerAPI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AlpacaBrokerAPI: %v", v)
	}
}

type SourceAlpacaBrokerAPI struct {
	// The trading environment, either 'live', 'paper' or 'broker-api.sandbox'.
	Environment *SourceAlpacaBrokerAPIEnvironment `default:"broker-api.sandbox" json:"environment"`
	// API Key ID for the alpaca market
	Username string `json:"username"`
	// Your Alpaca API Secret Key. You can find this in the Alpaca developer web console under your account settings.
	Password  *string   `json:"password,omitempty"`
	StartDate time.Time `json:"start_date"`
	// Limit for each response objects
	Limit      *string         `default:"20" json:"limit"`
	sourceType AlpacaBrokerAPI `const:"alpaca-broker-api" json:"sourceType"`
}

func (s SourceAlpacaBrokerAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAlpacaBrokerAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAlpacaBrokerAPI) GetEnvironment() *SourceAlpacaBrokerAPIEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SourceAlpacaBrokerAPI) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *SourceAlpacaBrokerAPI) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceAlpacaBrokerAPI) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceAlpacaBrokerAPI) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SourceAlpacaBrokerAPI) GetSourceType() AlpacaBrokerAPI {
	return AlpacaBrokerAPIAlpacaBrokerAPI
}
