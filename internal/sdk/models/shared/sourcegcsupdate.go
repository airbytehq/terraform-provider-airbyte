// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type SourceGcsUpdateFiletype string

const (
	SourceGcsUpdateFiletypeCsv SourceGcsUpdateFiletype = "csv"
)

func (e SourceGcsUpdateFiletype) ToPointer() *SourceGcsUpdateFiletype {
	return &e
}
func (e *SourceGcsUpdateFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceGcsUpdateFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateFiletype: %v", v)
	}
}

type SourceGcsUpdateSchemasStreamsHeaderDefinitionType string

const (
	SourceGcsUpdateSchemasStreamsHeaderDefinitionTypeUserProvided SourceGcsUpdateSchemasStreamsHeaderDefinitionType = "User Provided"
)

func (e SourceGcsUpdateSchemasStreamsHeaderDefinitionType) ToPointer() *SourceGcsUpdateSchemasStreamsHeaderDefinitionType {
	return &e
}
func (e *SourceGcsUpdateSchemasStreamsHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User Provided":
		*e = SourceGcsUpdateSchemasStreamsHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateSchemasStreamsHeaderDefinitionType: %v", v)
	}
}

type SourceGcsUpdateUserProvided struct {
	// The column names that will be used while emitting the CSV records
	ColumnNames          []string                                           `json:"column_names"`
	headerDefinitionType *SourceGcsUpdateSchemasStreamsHeaderDefinitionType `const:"User Provided" json:"header_definition_type"`
}

func (s SourceGcsUpdateUserProvided) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUpdateUserProvided) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUpdateUserProvided) GetColumnNames() []string {
	if o == nil {
		return []string{}
	}
	return o.ColumnNames
}

func (o *SourceGcsUpdateUserProvided) GetHeaderDefinitionType() *SourceGcsUpdateSchemasStreamsHeaderDefinitionType {
	return SourceGcsUpdateSchemasStreamsHeaderDefinitionTypeUserProvided.ToPointer()
}

type SourceGcsUpdateSchemasHeaderDefinitionType string

const (
	SourceGcsUpdateSchemasHeaderDefinitionTypeAutogenerated SourceGcsUpdateSchemasHeaderDefinitionType = "Autogenerated"
)

func (e SourceGcsUpdateSchemasHeaderDefinitionType) ToPointer() *SourceGcsUpdateSchemasHeaderDefinitionType {
	return &e
}
func (e *SourceGcsUpdateSchemasHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Autogenerated":
		*e = SourceGcsUpdateSchemasHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateSchemasHeaderDefinitionType: %v", v)
	}
}

type SourceGcsUpdateAutogenerated struct {
	headerDefinitionType *SourceGcsUpdateSchemasHeaderDefinitionType `const:"Autogenerated" json:"header_definition_type"`
}

func (s SourceGcsUpdateAutogenerated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUpdateAutogenerated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUpdateAutogenerated) GetHeaderDefinitionType() *SourceGcsUpdateSchemasHeaderDefinitionType {
	return SourceGcsUpdateSchemasHeaderDefinitionTypeAutogenerated.ToPointer()
}

type SourceGcsUpdateHeaderDefinitionType string

const (
	SourceGcsUpdateHeaderDefinitionTypeFromCsv SourceGcsUpdateHeaderDefinitionType = "From CSV"
)

func (e SourceGcsUpdateHeaderDefinitionType) ToPointer() *SourceGcsUpdateHeaderDefinitionType {
	return &e
}
func (e *SourceGcsUpdateHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "From CSV":
		*e = SourceGcsUpdateHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateHeaderDefinitionType: %v", v)
	}
}

type SourceGcsUpdateFromCSV struct {
	headerDefinitionType *SourceGcsUpdateHeaderDefinitionType `const:"From CSV" json:"header_definition_type"`
}

func (s SourceGcsUpdateFromCSV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUpdateFromCSV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUpdateFromCSV) GetHeaderDefinitionType() *SourceGcsUpdateHeaderDefinitionType {
	return SourceGcsUpdateHeaderDefinitionTypeFromCsv.ToPointer()
}

type SourceGcsUpdateCSVHeaderDefinitionType string

const (
	SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateFromCSV       SourceGcsUpdateCSVHeaderDefinitionType = "source-gcs-update_From CSV"
	SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateAutogenerated SourceGcsUpdateCSVHeaderDefinitionType = "source-gcs-update_Autogenerated"
	SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateUserProvided  SourceGcsUpdateCSVHeaderDefinitionType = "source-gcs-update_User Provided"
)

// SourceGcsUpdateCSVHeaderDefinition - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceGcsUpdateCSVHeaderDefinition struct {
	SourceGcsUpdateFromCSV       *SourceGcsUpdateFromCSV
	SourceGcsUpdateAutogenerated *SourceGcsUpdateAutogenerated
	SourceGcsUpdateUserProvided  *SourceGcsUpdateUserProvided

	Type SourceGcsUpdateCSVHeaderDefinitionType
}

func CreateSourceGcsUpdateCSVHeaderDefinitionSourceGcsUpdateFromCSV(sourceGcsUpdateFromCSV SourceGcsUpdateFromCSV) SourceGcsUpdateCSVHeaderDefinition {
	typ := SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateFromCSV

	return SourceGcsUpdateCSVHeaderDefinition{
		SourceGcsUpdateFromCSV: &sourceGcsUpdateFromCSV,
		Type:                   typ,
	}
}

func CreateSourceGcsUpdateCSVHeaderDefinitionSourceGcsUpdateAutogenerated(sourceGcsUpdateAutogenerated SourceGcsUpdateAutogenerated) SourceGcsUpdateCSVHeaderDefinition {
	typ := SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateAutogenerated

	return SourceGcsUpdateCSVHeaderDefinition{
		SourceGcsUpdateAutogenerated: &sourceGcsUpdateAutogenerated,
		Type:                         typ,
	}
}

func CreateSourceGcsUpdateCSVHeaderDefinitionSourceGcsUpdateUserProvided(sourceGcsUpdateUserProvided SourceGcsUpdateUserProvided) SourceGcsUpdateCSVHeaderDefinition {
	typ := SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateUserProvided

	return SourceGcsUpdateCSVHeaderDefinition{
		SourceGcsUpdateUserProvided: &sourceGcsUpdateUserProvided,
		Type:                        typ,
	}
}

func (u *SourceGcsUpdateCSVHeaderDefinition) UnmarshalJSON(data []byte) error {

	var sourceGcsUpdateFromCSV SourceGcsUpdateFromCSV = SourceGcsUpdateFromCSV{}
	if err := utils.UnmarshalJSON(data, &sourceGcsUpdateFromCSV, "", true, true); err == nil {
		u.SourceGcsUpdateFromCSV = &sourceGcsUpdateFromCSV
		u.Type = SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateFromCSV
		return nil
	}

	var sourceGcsUpdateAutogenerated SourceGcsUpdateAutogenerated = SourceGcsUpdateAutogenerated{}
	if err := utils.UnmarshalJSON(data, &sourceGcsUpdateAutogenerated, "", true, true); err == nil {
		u.SourceGcsUpdateAutogenerated = &sourceGcsUpdateAutogenerated
		u.Type = SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateAutogenerated
		return nil
	}

	var sourceGcsUpdateUserProvided SourceGcsUpdateUserProvided = SourceGcsUpdateUserProvided{}
	if err := utils.UnmarshalJSON(data, &sourceGcsUpdateUserProvided, "", true, true); err == nil {
		u.SourceGcsUpdateUserProvided = &sourceGcsUpdateUserProvided
		u.Type = SourceGcsUpdateCSVHeaderDefinitionTypeSourceGcsUpdateUserProvided
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGcsUpdateCSVHeaderDefinition) MarshalJSON() ([]byte, error) {
	if u.SourceGcsUpdateFromCSV != nil {
		return utils.MarshalJSON(u.SourceGcsUpdateFromCSV, "", true)
	}

	if u.SourceGcsUpdateAutogenerated != nil {
		return utils.MarshalJSON(u.SourceGcsUpdateAutogenerated, "", true)
	}

	if u.SourceGcsUpdateUserProvided != nil {
		return utils.MarshalJSON(u.SourceGcsUpdateUserProvided, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceGcsUpdateInferenceType - How to infer the types of the columns. If none, inference default to strings.
type SourceGcsUpdateInferenceType string

const (
	SourceGcsUpdateInferenceTypeNone               SourceGcsUpdateInferenceType = "None"
	SourceGcsUpdateInferenceTypePrimitiveTypesOnly SourceGcsUpdateInferenceType = "Primitive Types Only"
)

func (e SourceGcsUpdateInferenceType) ToPointer() *SourceGcsUpdateInferenceType {
	return &e
}
func (e *SourceGcsUpdateInferenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Primitive Types Only":
		*e = SourceGcsUpdateInferenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateInferenceType: %v", v)
	}
}

type SourceGcsUpdateCSVFormat struct {
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `default:"," json:"delimiter"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `default:"true" json:"double_quote"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `default:"utf8" json:"encoding"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string `json:"escape_char,omitempty"`
	// A set of case-sensitive strings that should be interpreted as false values.
	FalseValues []string                 `json:"false_values,omitempty"`
	filetype    *SourceGcsUpdateFiletype `const:"csv" json:"filetype"`
	// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
	HeaderDefinition *SourceGcsUpdateCSVHeaderDefinition `json:"header_definition,omitempty"`
	// Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema.
	IgnoreErrorsOnFieldsMismatch *bool `default:"false" json:"ignore_errors_on_fields_mismatch"`
	// How to infer the types of the columns. If none, inference default to strings.
	InferenceType *SourceGcsUpdateInferenceType `default:"None" json:"inference_type"`
	// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
	NullValues []string `json:"null_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `default:"\"" json:"quote_char"`
	// The number of rows to skip after the header row.
	SkipRowsAfterHeader *int64 `default:"0" json:"skip_rows_after_header"`
	// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
	SkipRowsBeforeHeader *int64 `default:"0" json:"skip_rows_before_header"`
	// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
	StringsCanBeNull *bool `default:"true" json:"strings_can_be_null"`
	// A set of case-sensitive strings that should be interpreted as true values.
	TrueValues []string `json:"true_values,omitempty"`
}

func (s SourceGcsUpdateCSVFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUpdateCSVFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUpdateCSVFormat) GetDelimiter() *string {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *SourceGcsUpdateCSVFormat) GetDoubleQuote() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleQuote
}

func (o *SourceGcsUpdateCSVFormat) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *SourceGcsUpdateCSVFormat) GetEscapeChar() *string {
	if o == nil {
		return nil
	}
	return o.EscapeChar
}

func (o *SourceGcsUpdateCSVFormat) GetFalseValues() []string {
	if o == nil {
		return nil
	}
	return o.FalseValues
}

func (o *SourceGcsUpdateCSVFormat) GetFiletype() *SourceGcsUpdateFiletype {
	return SourceGcsUpdateFiletypeCsv.ToPointer()
}

func (o *SourceGcsUpdateCSVFormat) GetHeaderDefinition() *SourceGcsUpdateCSVHeaderDefinition {
	if o == nil {
		return nil
	}
	return o.HeaderDefinition
}

func (o *SourceGcsUpdateCSVFormat) GetIgnoreErrorsOnFieldsMismatch() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreErrorsOnFieldsMismatch
}

func (o *SourceGcsUpdateCSVFormat) GetInferenceType() *SourceGcsUpdateInferenceType {
	if o == nil {
		return nil
	}
	return o.InferenceType
}

func (o *SourceGcsUpdateCSVFormat) GetNullValues() []string {
	if o == nil {
		return nil
	}
	return o.NullValues
}

func (o *SourceGcsUpdateCSVFormat) GetQuoteChar() *string {
	if o == nil {
		return nil
	}
	return o.QuoteChar
}

func (o *SourceGcsUpdateCSVFormat) GetSkipRowsAfterHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsAfterHeader
}

func (o *SourceGcsUpdateCSVFormat) GetSkipRowsBeforeHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsBeforeHeader
}

func (o *SourceGcsUpdateCSVFormat) GetStringsCanBeNull() *bool {
	if o == nil {
		return nil
	}
	return o.StringsCanBeNull
}

func (o *SourceGcsUpdateCSVFormat) GetTrueValues() []string {
	if o == nil {
		return nil
	}
	return o.TrueValues
}

type SourceGcsUpdateFormatType string

const (
	SourceGcsUpdateFormatTypeSourceGcsUpdateCSVFormat SourceGcsUpdateFormatType = "source-gcs-update_CSV Format"
)

// SourceGcsUpdateFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceGcsUpdateFormat struct {
	SourceGcsUpdateCSVFormat *SourceGcsUpdateCSVFormat

	Type SourceGcsUpdateFormatType
}

func CreateSourceGcsUpdateFormatSourceGcsUpdateCSVFormat(sourceGcsUpdateCSVFormat SourceGcsUpdateCSVFormat) SourceGcsUpdateFormat {
	typ := SourceGcsUpdateFormatTypeSourceGcsUpdateCSVFormat

	return SourceGcsUpdateFormat{
		SourceGcsUpdateCSVFormat: &sourceGcsUpdateCSVFormat,
		Type:                     typ,
	}
}

func (u *SourceGcsUpdateFormat) UnmarshalJSON(data []byte) error {

	var sourceGcsUpdateCSVFormat SourceGcsUpdateCSVFormat = SourceGcsUpdateCSVFormat{}
	if err := utils.UnmarshalJSON(data, &sourceGcsUpdateCSVFormat, "", true, true); err == nil {
		u.SourceGcsUpdateCSVFormat = &sourceGcsUpdateCSVFormat
		u.Type = SourceGcsUpdateFormatTypeSourceGcsUpdateCSVFormat
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGcsUpdateFormat) MarshalJSON() ([]byte, error) {
	if u.SourceGcsUpdateCSVFormat != nil {
		return utils.MarshalJSON(u.SourceGcsUpdateCSVFormat, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceGcsUpdateValidationPolicy - The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
type SourceGcsUpdateValidationPolicy string

const (
	SourceGcsUpdateValidationPolicyEmitRecord      SourceGcsUpdateValidationPolicy = "Emit Record"
	SourceGcsUpdateValidationPolicySkipRecord      SourceGcsUpdateValidationPolicy = "Skip Record"
	SourceGcsUpdateValidationPolicyWaitForDiscover SourceGcsUpdateValidationPolicy = "Wait for Discover"
)

func (e SourceGcsUpdateValidationPolicy) ToPointer() *SourceGcsUpdateValidationPolicy {
	return &e
}
func (e *SourceGcsUpdateValidationPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Emit Record":
		fallthrough
	case "Skip Record":
		fallthrough
	case "Wait for Discover":
		*e = SourceGcsUpdateValidationPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsUpdateValidationPolicy: %v", v)
	}
}

type SourceGCSStreamConfig struct {
	// When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.
	DaysToSyncIfHistoryIsFull *int64 `default:"3" json:"days_to_sync_if_history_is_full"`
	// The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
	Format SourceGcsUpdateFormat `json:"format"`
	// The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
	Globs []string `json:"globs,omitempty"`
	// The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
	InputSchema *string `json:"input_schema,omitempty"`
	// The path prefix configured in previous versions of the GCS connector. This option is deprecated in favor of a single glob.
	LegacyPrefix *string `json:"legacy_prefix,omitempty"`
	// The name of the stream.
	Name string `json:"name"`
	// The column or columns (for a composite key) that serves as the unique identifier of a record. If empty, the primary key will default to the parser's default primary key.
	PrimaryKey *string `json:"primary_key,omitempty"`
	// When enabled, syncs will not validate or structure records against the stream's schema.
	Schemaless *bool `default:"false" json:"schemaless"`
	// The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
	ValidationPolicy *SourceGcsUpdateValidationPolicy `default:"Emit Record" json:"validation_policy"`
}

func (s SourceGCSStreamConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGCSStreamConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGCSStreamConfig) GetDaysToSyncIfHistoryIsFull() *int64 {
	if o == nil {
		return nil
	}
	return o.DaysToSyncIfHistoryIsFull
}

func (o *SourceGCSStreamConfig) GetFormat() SourceGcsUpdateFormat {
	if o == nil {
		return SourceGcsUpdateFormat{}
	}
	return o.Format
}

func (o *SourceGCSStreamConfig) GetGlobs() []string {
	if o == nil {
		return nil
	}
	return o.Globs
}

func (o *SourceGCSStreamConfig) GetInputSchema() *string {
	if o == nil {
		return nil
	}
	return o.InputSchema
}

func (o *SourceGCSStreamConfig) GetLegacyPrefix() *string {
	if o == nil {
		return nil
	}
	return o.LegacyPrefix
}

func (o *SourceGCSStreamConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceGCSStreamConfig) GetPrimaryKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *SourceGCSStreamConfig) GetSchemaless() *bool {
	if o == nil {
		return nil
	}
	return o.Schemaless
}

func (o *SourceGCSStreamConfig) GetValidationPolicy() *SourceGcsUpdateValidationPolicy {
	if o == nil {
		return nil
	}
	return o.ValidationPolicy
}

// SourceGcsUpdate - NOTE: When this Spec is changed, legacy_config_transformer.py must also be
// modified to uptake the changes because it is responsible for converting
// legacy GCS configs into file based configs using the File-Based CDK.
type SourceGcsUpdate struct {
	// Name of the GCS bucket where the file(s) exist.
	Bucket string `json:"bucket"`
	// Enter your Google Cloud <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">service account key</a> in JSON format
	ServiceAccount string `json:"service_account"`
	// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// Each instance of this configuration defines a <a href=https://docs.airbyte.com/cloud/core-concepts#stream>stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
	Streams []SourceGCSStreamConfig `json:"streams"`
}

func (s SourceGcsUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUpdate) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *SourceGcsUpdate) GetServiceAccount() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccount
}

func (o *SourceGcsUpdate) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceGcsUpdate) GetStreams() []SourceGCSStreamConfig {
	if o == nil {
		return []SourceGCSStreamConfig{}
	}
	return o.Streams
}
