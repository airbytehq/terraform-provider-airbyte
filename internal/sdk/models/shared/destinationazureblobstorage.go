// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationAzureBlobStorageFormatType string

const (
	DestinationAzureBlobStorageFormatTypeJsonl DestinationAzureBlobStorageFormatType = "JSONL"
)

func (e DestinationAzureBlobStorageFormatType) ToPointer() *DestinationAzureBlobStorageFormatType {
	return &e
}
func (e *DestinationAzureBlobStorageFormatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSONL":
		*e = DestinationAzureBlobStorageFormatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAzureBlobStorageFormatType: %v", v)
	}
}

type DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON struct {
	formatType DestinationAzureBlobStorageFormatType `const:"JSONL" json:"format_type"`
	// Add file extensions to the output file.
	FileExtension *bool `default:"false" json:"file_extension"`
}

func (d DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) GetFormatType() DestinationAzureBlobStorageFormatType {
	return DestinationAzureBlobStorageFormatTypeJsonl
}

func (o *DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) GetFileExtension() *bool {
	if o == nil {
		return nil
	}
	return o.FileExtension
}

type FormatType string

const (
	FormatTypeCsv FormatType = "CSV"
)

func (e FormatType) ToPointer() *FormatType {
	return &e
}
func (e *FormatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CSV":
		*e = FormatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FormatType: %v", v)
	}
}

// NormalizationFlattening - Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
type NormalizationFlattening string

const (
	NormalizationFlatteningNoFlattening        NormalizationFlattening = "No flattening"
	NormalizationFlatteningRootLevelFlattening NormalizationFlattening = "Root level flattening"
)

func (e NormalizationFlattening) ToPointer() *NormalizationFlattening {
	return &e
}
func (e *NormalizationFlattening) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No flattening":
		fallthrough
	case "Root level flattening":
		*e = NormalizationFlattening(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NormalizationFlattening: %v", v)
	}
}

type CSVCommaSeparatedValues struct {
	formatType FormatType `const:"CSV" json:"format_type"`
	// Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
	Flattening *NormalizationFlattening `default:"No flattening" json:"flattening"`
	// Add file extensions to the output file.
	FileExtension *bool `default:"false" json:"file_extension"`
}

func (c CSVCommaSeparatedValues) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CSVCommaSeparatedValues) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CSVCommaSeparatedValues) GetFormatType() FormatType {
	return FormatTypeCsv
}

func (o *CSVCommaSeparatedValues) GetFlattening() *NormalizationFlattening {
	if o == nil {
		return nil
	}
	return o.Flattening
}

func (o *CSVCommaSeparatedValues) GetFileExtension() *bool {
	if o == nil {
		return nil
	}
	return o.FileExtension
}

type OutputFormatType string

const (
	OutputFormatTypeCSVCommaSeparatedValues                                  OutputFormatType = "CSV: Comma-Separated Values"
	OutputFormatTypeDestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON OutputFormatType = "destination-azure-blob-storage_JSON Lines: newline-delimited JSON"
)

// OutputFormat - Output data format
type OutputFormat struct {
	CSVCommaSeparatedValues                                  *CSVCommaSeparatedValues                                  `queryParam:"inline"`
	DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON *DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON `queryParam:"inline"`

	Type OutputFormatType
}

func CreateOutputFormatCSVCommaSeparatedValues(csvCommaSeparatedValues CSVCommaSeparatedValues) OutputFormat {
	typ := OutputFormatTypeCSVCommaSeparatedValues

	return OutputFormat{
		CSVCommaSeparatedValues: &csvCommaSeparatedValues,
		Type:                    typ,
	}
}

func CreateOutputFormatDestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON(destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON) OutputFormat {
	typ := OutputFormatTypeDestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON

	return OutputFormat{
		DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON: &destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON,
		Type: typ,
	}
}

func (u *OutputFormat) UnmarshalJSON(data []byte) error {

	var destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON = DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON{}
	if err := utils.UnmarshalJSON(data, &destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON, "", true, true); err == nil {
		u.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON = &destinationAzureBlobStorageJSONLinesNewlineDelimitedJSON
		u.Type = OutputFormatTypeDestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON
		return nil
	}

	var csvCommaSeparatedValues CSVCommaSeparatedValues = CSVCommaSeparatedValues{}
	if err := utils.UnmarshalJSON(data, &csvCommaSeparatedValues, "", true, true); err == nil {
		u.CSVCommaSeparatedValues = &csvCommaSeparatedValues
		u.Type = OutputFormatTypeCSVCommaSeparatedValues
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OutputFormat", string(data))
}

func (u OutputFormat) MarshalJSON() ([]byte, error) {
	if u.CSVCommaSeparatedValues != nil {
		return utils.MarshalJSON(u.CSVCommaSeparatedValues, "", true)
	}

	if u.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON != nil {
		return utils.MarshalJSON(u.DestinationAzureBlobStorageJSONLinesNewlineDelimitedJSON, "", true)
	}

	return nil, errors.New("could not marshal union type OutputFormat: all fields are null")
}

type DestinationAzureBlobStorageAzureBlobStorage string

const (
	DestinationAzureBlobStorageAzureBlobStorageAzureBlobStorage DestinationAzureBlobStorageAzureBlobStorage = "azure-blob-storage"
)

func (e DestinationAzureBlobStorageAzureBlobStorage) ToPointer() *DestinationAzureBlobStorageAzureBlobStorage {
	return &e
}
func (e *DestinationAzureBlobStorageAzureBlobStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure-blob-storage":
		*e = DestinationAzureBlobStorageAzureBlobStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAzureBlobStorageAzureBlobStorage: %v", v)
	}
}

type DestinationAzureBlobStorage struct {
	// This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.
	AzureBlobStorageEndpointDomainName *string `default:"blob.core.windows.net" json:"azure_blob_storage_endpoint_domain_name"`
	// The name of the Azure blob storage container. If not exists - will be created automatically. May be empty, then will be created automatically airbytecontainer+timestamp
	AzureBlobStorageContainerName *string `json:"azure_blob_storage_container_name,omitempty"`
	// The account's name of the Azure Blob Storage.
	AzureBlobStorageAccountName string `json:"azure_blob_storage_account_name"`
	// The Azure blob storage account key.
	AzureBlobStorageAccountKey string `json:"azure_blob_storage_account_key"`
	// The amount of megabytes to buffer for the output stream to Azure. This will impact memory footprint on workers, but may need adjustment for performance and appropriate block size in Azure.
	AzureBlobStorageOutputBufferSize *int64 `default:"5" json:"azure_blob_storage_output_buffer_size"`
	// The amount of megabytes after which the connector should spill the records in a new blob object. Make sure to configure size greater than individual records. Enter 0 if not applicable
	AzureBlobStorageSpillSize *int64 `default:"500" json:"azure_blob_storage_spill_size"`
	// Output data format
	Format          OutputFormat                                `json:"format"`
	destinationType DestinationAzureBlobStorageAzureBlobStorage `const:"azure-blob-storage" json:"destinationType"`
}

func (d DestinationAzureBlobStorage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationAzureBlobStorage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageEndpointDomainName() *string {
	if o == nil {
		return nil
	}
	return o.AzureBlobStorageEndpointDomainName
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageContainerName() *string {
	if o == nil {
		return nil
	}
	return o.AzureBlobStorageContainerName
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageAccountName() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageAccountName
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageAccountKey() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageAccountKey
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageOutputBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.AzureBlobStorageOutputBufferSize
}

func (o *DestinationAzureBlobStorage) GetAzureBlobStorageSpillSize() *int64 {
	if o == nil {
		return nil
	}
	return o.AzureBlobStorageSpillSize
}

func (o *DestinationAzureBlobStorage) GetFormat() OutputFormat {
	if o == nil {
		return OutputFormat{}
	}
	return o.Format
}

func (o *DestinationAzureBlobStorage) GetDestinationType() DestinationAzureBlobStorageAzureBlobStorage {
	return DestinationAzureBlobStorageAzureBlobStorageAzureBlobStorage
}
