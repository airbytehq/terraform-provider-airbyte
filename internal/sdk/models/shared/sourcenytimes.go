// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

// SourceNytimesPeriodUsedForMostPopularStreams - Period of time (in days)
type SourceNytimesPeriodUsedForMostPopularStreams int64

const (
	SourceNytimesPeriodUsedForMostPopularStreamsOne    SourceNytimesPeriodUsedForMostPopularStreams = 1
	SourceNytimesPeriodUsedForMostPopularStreamsSeven  SourceNytimesPeriodUsedForMostPopularStreams = 7
	SourceNytimesPeriodUsedForMostPopularStreamsThirty SourceNytimesPeriodUsedForMostPopularStreams = 30
)

func (e SourceNytimesPeriodUsedForMostPopularStreams) ToPointer() *SourceNytimesPeriodUsedForMostPopularStreams {
	return &e
}
func (e *SourceNytimesPeriodUsedForMostPopularStreams) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 7:
		fallthrough
	case 30:
		*e = SourceNytimesPeriodUsedForMostPopularStreams(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNytimesPeriodUsedForMostPopularStreams: %v", v)
	}
}

// SourceNytimesShareTypeUsedForMostPopularSharedStream - Share Type
type SourceNytimesShareTypeUsedForMostPopularSharedStream string

const (
	SourceNytimesShareTypeUsedForMostPopularSharedStreamFacebook SourceNytimesShareTypeUsedForMostPopularSharedStream = "facebook"
)

func (e SourceNytimesShareTypeUsedForMostPopularSharedStream) ToPointer() *SourceNytimesShareTypeUsedForMostPopularSharedStream {
	return &e
}
func (e *SourceNytimesShareTypeUsedForMostPopularSharedStream) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "facebook":
		*e = SourceNytimesShareTypeUsedForMostPopularSharedStream(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNytimesShareTypeUsedForMostPopularSharedStream: %v", v)
	}
}

type Nytimes string

const (
	NytimesNytimes Nytimes = "nytimes"
)

func (e Nytimes) ToPointer() *Nytimes {
	return &e
}
func (e *Nytimes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "nytimes":
		*e = Nytimes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nytimes: %v", v)
	}
}

type SourceNytimes struct {
	// API Key
	APIKey string `json:"api_key"`
	// End date to stop the article retrieval (format YYYY-MM)
	EndDate *string `json:"end_date,omitempty"`
	// Period of time (in days)
	Period SourceNytimesPeriodUsedForMostPopularStreams `json:"period"`
	// Share Type
	ShareType  *SourceNytimesShareTypeUsedForMostPopularSharedStream `json:"share_type,omitempty"`
	sourceType Nytimes                                               `const:"nytimes" json:"sourceType"`
	// Start date to begin the article retrieval (format YYYY-MM)
	StartDate string `json:"start_date"`
}

func (s SourceNytimes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNytimes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceNytimes) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceNytimes) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceNytimes) GetPeriod() SourceNytimesPeriodUsedForMostPopularStreams {
	if o == nil {
		return SourceNytimesPeriodUsedForMostPopularStreams(0)
	}
	return o.Period
}

func (o *SourceNytimes) GetShareType() *SourceNytimesShareTypeUsedForMostPopularSharedStream {
	if o == nil {
		return nil
	}
	return o.ShareType
}

func (o *SourceNytimes) GetSourceType() Nytimes {
	return NytimesNytimes
}

func (o *SourceNytimes) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
