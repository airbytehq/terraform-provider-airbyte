// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/types"
)

type SourceAmazonAdsAuthType string

const (
	SourceAmazonAdsAuthTypeOauth20 SourceAmazonAdsAuthType = "oauth2.0"
)

func (e SourceAmazonAdsAuthType) ToPointer() *SourceAmazonAdsAuthType {
	return &e
}
func (e *SourceAmazonAdsAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceAmazonAdsAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonAdsAuthType: %v", v)
	}
}

// Region to pull data from (EU/NA/FE). See <a href="https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints">docs</a> for more details.
type Region string

const (
	RegionNa Region = "NA"
	RegionEu Region = "EU"
	RegionFe Region = "FE"
)

func (e Region) ToPointer() *Region {
	return &e
}
func (e *Region) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NA":
		fallthrough
	case "EU":
		fallthrough
	case "FE":
		*e = Region(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Region: %v", v)
	}
}

type AmazonAds string

const (
	AmazonAdsAmazonAds AmazonAds = "amazon-ads"
)

func (e AmazonAds) ToPointer() *AmazonAds {
	return &e
}
func (e *AmazonAds) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-ads":
		*e = AmazonAds(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmazonAds: %v", v)
	}
}

type SourceAmazonAds struct {
	authType *SourceAmazonAdsAuthType `const:"oauth2.0" json:"auth_type"`
	// The client ID of your Amazon Ads developer application. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens#retrieve-your-client-id-and-client-secret">docs</a> for more information.
	ClientID string `json:"client_id"`
	// The client secret of your Amazon Ads developer application. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens#retrieve-your-client-id-and-client-secret">docs</a> for more information.
	ClientSecret string `json:"client_secret"`
	// The amount of days to go back in time to get the updated data from Amazon Ads
	LookBackWindow *int64 `default:"3" json:"look_back_window"`
	// Marketplace IDs you want to fetch data for. Note: If Profile IDs are also selected, profiles will be selected if they match the Profile ID OR the Marketplace ID.
	MarketplaceIds []string `json:"marketplace_ids,omitempty"`
	// Profile IDs you want to fetch data for. The Amazon Ads source connector supports only profiles with seller and vendor type, profiles with agency type will be ignored. See <a href="https://advertising.amazon.com/API/docs/en-us/concepts/authorization/profiles">docs</a> for more details. Note: If Marketplace IDs are also selected, profiles will be selected if they match the Profile ID OR the Marketplace ID.
	Profiles []int64 `json:"profiles,omitempty"`
	// Amazon Ads refresh token. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens">docs</a> for more information on how to obtain this token.
	RefreshToken string `json:"refresh_token"`
	// Region to pull data from (EU/NA/FE). See <a href="https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints">docs</a> for more details.
	Region *Region `default:"NA" json:"region"`
	// The Start date for collecting reports, should not be more than 60 days in the past. In YYYY-MM-DD format
	StartDate  *types.Date `json:"start_date,omitempty"`
	sourceType AmazonAds   `const:"amazon-ads" json:"sourceType"`
}

func (s SourceAmazonAds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAmazonAds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAmazonAds) GetAuthType() *SourceAmazonAdsAuthType {
	return SourceAmazonAdsAuthTypeOauth20.ToPointer()
}

func (o *SourceAmazonAds) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceAmazonAds) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceAmazonAds) GetLookBackWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.LookBackWindow
}

func (o *SourceAmazonAds) GetMarketplaceIds() []string {
	if o == nil {
		return nil
	}
	return o.MarketplaceIds
}

func (o *SourceAmazonAds) GetProfiles() []int64 {
	if o == nil {
		return nil
	}
	return o.Profiles
}

func (o *SourceAmazonAds) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceAmazonAds) GetRegion() *Region {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceAmazonAds) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceAmazonAds) GetSourceType() AmazonAds {
	return AmazonAdsAmazonAds
}
