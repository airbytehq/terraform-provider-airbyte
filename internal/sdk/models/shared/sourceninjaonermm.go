// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type NinjaoneRmm string

const (
	NinjaoneRmmNinjaoneRmm NinjaoneRmm = "ninjaone-rmm"
)

func (e NinjaoneRmm) ToPointer() *NinjaoneRmm {
	return &e
}
func (e *NinjaoneRmm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ninjaone-rmm":
		*e = NinjaoneRmm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NinjaoneRmm: %v", v)
	}
}

type SourceNinjaoneRmm struct {
	// Token could be generated natively by authorize section of NinjaOne swagger documentation `https://app.ninjarmm.com/apidocs/?links.active=authorization`
	APIKey     string      `json:"api_key"`
	StartDate  time.Time   `json:"start_date"`
	sourceType NinjaoneRmm `const:"ninjaone-rmm" json:"sourceType"`
}

func (s SourceNinjaoneRmm) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNinjaoneRmm) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceNinjaoneRmm) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceNinjaoneRmm) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceNinjaoneRmm) GetSourceType() NinjaoneRmm {
	return NinjaoneRmmNinjaoneRmm
}
