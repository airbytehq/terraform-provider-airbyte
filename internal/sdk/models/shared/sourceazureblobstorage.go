// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type SourceAzureBlobStorageSchemasAuthType string

const (
	SourceAzureBlobStorageSchemasAuthTypeStorageAccountKey SourceAzureBlobStorageSchemasAuthType = "storage_account_key"
)

func (e SourceAzureBlobStorageSchemasAuthType) ToPointer() *SourceAzureBlobStorageSchemasAuthType {
	return &e
}
func (e *SourceAzureBlobStorageSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "storage_account_key":
		*e = SourceAzureBlobStorageSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasAuthType: %v", v)
	}
}

type SourceAzureBlobStorageAuthenticateViaStorageAccountKey struct {
	authType *SourceAzureBlobStorageSchemasAuthType `const:"storage_account_key" json:"auth_type"`
	// The Azure blob storage account key.
	AzureBlobStorageAccountKey string `json:"azure_blob_storage_account_key"`
}

func (s SourceAzureBlobStorageAuthenticateViaStorageAccountKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageAuthenticateViaStorageAccountKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageAuthenticateViaStorageAccountKey) GetAuthType() *SourceAzureBlobStorageSchemasAuthType {
	return SourceAzureBlobStorageSchemasAuthTypeStorageAccountKey.ToPointer()
}

func (o *SourceAzureBlobStorageAuthenticateViaStorageAccountKey) GetAzureBlobStorageAccountKey() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageAccountKey
}

type SourceAzureBlobStorageAuthType string

const (
	SourceAzureBlobStorageAuthTypeOauth2 SourceAzureBlobStorageAuthType = "oauth2"
)

func (e SourceAzureBlobStorageAuthType) ToPointer() *SourceAzureBlobStorageAuthType {
	return &e
}
func (e *SourceAzureBlobStorageAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2":
		*e = SourceAzureBlobStorageAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageAuthType: %v", v)
	}
}

type SourceAzureBlobStorageAuthenticateViaOauth2 struct {
	authType *SourceAzureBlobStorageAuthType `const:"oauth2" json:"auth_type"`
	// Client ID of your Microsoft developer application
	ClientID string `json:"client_id"`
	// Client Secret of your Microsoft developer application
	ClientSecret string `json:"client_secret"`
	// Refresh Token of your Microsoft developer application
	RefreshToken string `json:"refresh_token"`
	// Tenant ID of the Microsoft Azure Application user
	TenantID string `json:"tenant_id"`
}

func (s SourceAzureBlobStorageAuthenticateViaOauth2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageAuthenticateViaOauth2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageAuthenticateViaOauth2) GetAuthType() *SourceAzureBlobStorageAuthType {
	return SourceAzureBlobStorageAuthTypeOauth2.ToPointer()
}

func (o *SourceAzureBlobStorageAuthenticateViaOauth2) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceAzureBlobStorageAuthenticateViaOauth2) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceAzureBlobStorageAuthenticateViaOauth2) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceAzureBlobStorageAuthenticateViaOauth2) GetTenantID() string {
	if o == nil {
		return ""
	}
	return o.TenantID
}

type SourceAzureBlobStorageAuthenticationType string

const (
	SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaOauth2            SourceAzureBlobStorageAuthenticationType = "source-azure-blob-storage_Authenticate via Oauth2"
	SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaStorageAccountKey SourceAzureBlobStorageAuthenticationType = "source-azure-blob-storage_Authenticate via Storage Account Key"
)

// SourceAzureBlobStorageAuthentication - Credentials for connecting to the Azure Blob Storage
type SourceAzureBlobStorageAuthentication struct {
	SourceAzureBlobStorageAuthenticateViaOauth2            *SourceAzureBlobStorageAuthenticateViaOauth2
	SourceAzureBlobStorageAuthenticateViaStorageAccountKey *SourceAzureBlobStorageAuthenticateViaStorageAccountKey

	Type SourceAzureBlobStorageAuthenticationType
}

func CreateSourceAzureBlobStorageAuthenticationSourceAzureBlobStorageAuthenticateViaOauth2(sourceAzureBlobStorageAuthenticateViaOauth2 SourceAzureBlobStorageAuthenticateViaOauth2) SourceAzureBlobStorageAuthentication {
	typ := SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaOauth2

	return SourceAzureBlobStorageAuthentication{
		SourceAzureBlobStorageAuthenticateViaOauth2: &sourceAzureBlobStorageAuthenticateViaOauth2,
		Type: typ,
	}
}

func CreateSourceAzureBlobStorageAuthenticationSourceAzureBlobStorageAuthenticateViaStorageAccountKey(sourceAzureBlobStorageAuthenticateViaStorageAccountKey SourceAzureBlobStorageAuthenticateViaStorageAccountKey) SourceAzureBlobStorageAuthentication {
	typ := SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaStorageAccountKey

	return SourceAzureBlobStorageAuthentication{
		SourceAzureBlobStorageAuthenticateViaStorageAccountKey: &sourceAzureBlobStorageAuthenticateViaStorageAccountKey,
		Type: typ,
	}
}

func (u *SourceAzureBlobStorageAuthentication) UnmarshalJSON(data []byte) error {

	var sourceAzureBlobStorageAuthenticateViaStorageAccountKey SourceAzureBlobStorageAuthenticateViaStorageAccountKey = SourceAzureBlobStorageAuthenticateViaStorageAccountKey{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageAuthenticateViaStorageAccountKey, "", true, true); err == nil {
		u.SourceAzureBlobStorageAuthenticateViaStorageAccountKey = &sourceAzureBlobStorageAuthenticateViaStorageAccountKey
		u.Type = SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaStorageAccountKey
		return nil
	}

	var sourceAzureBlobStorageAuthenticateViaOauth2 SourceAzureBlobStorageAuthenticateViaOauth2 = SourceAzureBlobStorageAuthenticateViaOauth2{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageAuthenticateViaOauth2, "", true, true); err == nil {
		u.SourceAzureBlobStorageAuthenticateViaOauth2 = &sourceAzureBlobStorageAuthenticateViaOauth2
		u.Type = SourceAzureBlobStorageAuthenticationTypeSourceAzureBlobStorageAuthenticateViaOauth2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceAzureBlobStorageAuthentication", string(data))
}

func (u SourceAzureBlobStorageAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceAzureBlobStorageAuthenticateViaOauth2 != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageAuthenticateViaOauth2, "", true)
	}

	if u.SourceAzureBlobStorageAuthenticateViaStorageAccountKey != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageAuthenticateViaStorageAccountKey, "", true)
	}

	return nil, errors.New("could not marshal union type SourceAzureBlobStorageAuthentication: all fields are null")
}

type SourceAzureBlobStorageAzureBlobStorage string

const (
	SourceAzureBlobStorageAzureBlobStorageAzureBlobStorage SourceAzureBlobStorageAzureBlobStorage = "azure-blob-storage"
)

func (e SourceAzureBlobStorageAzureBlobStorage) ToPointer() *SourceAzureBlobStorageAzureBlobStorage {
	return &e
}
func (e *SourceAzureBlobStorageAzureBlobStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure-blob-storage":
		*e = SourceAzureBlobStorageAzureBlobStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageAzureBlobStorage: %v", v)
	}
}

type SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype string

const (
	SourceAzureBlobStorageSchemasStreamsFormatFormatFiletypeUnstructured SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype = "unstructured"
)

func (e SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype) ToPointer() *SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype {
	return &e
}
func (e *SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unstructured":
		*e = SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype: %v", v)
	}
}

type SourceAzureBlobStorageMode string

const (
	SourceAzureBlobStorageModeLocal SourceAzureBlobStorageMode = "local"
)

func (e SourceAzureBlobStorageMode) ToPointer() *SourceAzureBlobStorageMode {
	return &e
}
func (e *SourceAzureBlobStorageMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		*e = SourceAzureBlobStorageMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageMode: %v", v)
	}
}

// SourceAzureBlobStorageLocal - Process files locally, supporting `fast` and `ocr` modes. This is the default option.
type SourceAzureBlobStorageLocal struct {
	mode *SourceAzureBlobStorageMode `const:"local" json:"mode"`
}

func (s SourceAzureBlobStorageLocal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageLocal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageLocal) GetMode() *SourceAzureBlobStorageMode {
	return SourceAzureBlobStorageModeLocal.ToPointer()
}

type SourceAzureBlobStorageProcessingType string

const (
	SourceAzureBlobStorageProcessingTypeSourceAzureBlobStorageLocal SourceAzureBlobStorageProcessingType = "source-azure-blob-storage_Local"
)

// SourceAzureBlobStorageProcessing - Processing configuration
type SourceAzureBlobStorageProcessing struct {
	SourceAzureBlobStorageLocal *SourceAzureBlobStorageLocal

	Type SourceAzureBlobStorageProcessingType
}

func CreateSourceAzureBlobStorageProcessingSourceAzureBlobStorageLocal(sourceAzureBlobStorageLocal SourceAzureBlobStorageLocal) SourceAzureBlobStorageProcessing {
	typ := SourceAzureBlobStorageProcessingTypeSourceAzureBlobStorageLocal

	return SourceAzureBlobStorageProcessing{
		SourceAzureBlobStorageLocal: &sourceAzureBlobStorageLocal,
		Type:                        typ,
	}
}

func (u *SourceAzureBlobStorageProcessing) UnmarshalJSON(data []byte) error {

	var sourceAzureBlobStorageLocal SourceAzureBlobStorageLocal = SourceAzureBlobStorageLocal{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageLocal, "", true, true); err == nil {
		u.SourceAzureBlobStorageLocal = &sourceAzureBlobStorageLocal
		u.Type = SourceAzureBlobStorageProcessingTypeSourceAzureBlobStorageLocal
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceAzureBlobStorageProcessing", string(data))
}

func (u SourceAzureBlobStorageProcessing) MarshalJSON() ([]byte, error) {
	if u.SourceAzureBlobStorageLocal != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageLocal, "", true)
	}

	return nil, errors.New("could not marshal union type SourceAzureBlobStorageProcessing: all fields are null")
}

// SourceAzureBlobStorageParsingStrategy - The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
type SourceAzureBlobStorageParsingStrategy string

const (
	SourceAzureBlobStorageParsingStrategyAuto    SourceAzureBlobStorageParsingStrategy = "auto"
	SourceAzureBlobStorageParsingStrategyFast    SourceAzureBlobStorageParsingStrategy = "fast"
	SourceAzureBlobStorageParsingStrategyOcrOnly SourceAzureBlobStorageParsingStrategy = "ocr_only"
	SourceAzureBlobStorageParsingStrategyHiRes   SourceAzureBlobStorageParsingStrategy = "hi_res"
)

func (e SourceAzureBlobStorageParsingStrategy) ToPointer() *SourceAzureBlobStorageParsingStrategy {
	return &e
}
func (e *SourceAzureBlobStorageParsingStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "fast":
		fallthrough
	case "ocr_only":
		fallthrough
	case "hi_res":
		*e = SourceAzureBlobStorageParsingStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageParsingStrategy: %v", v)
	}
}

// SourceAzureBlobStorageDocumentFileTypeFormatExperimental - Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
type SourceAzureBlobStorageDocumentFileTypeFormatExperimental struct {
	filetype *SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype `const:"unstructured" json:"filetype"`
	// Processing configuration
	Processing *SourceAzureBlobStorageProcessing `json:"processing,omitempty"`
	// If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync.
	SkipUnprocessableFiles *bool `default:"true" json:"skip_unprocessable_files"`
	// The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf
	Strategy *SourceAzureBlobStorageParsingStrategy `default:"auto" json:"strategy"`
}

func (s SourceAzureBlobStorageDocumentFileTypeFormatExperimental) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageDocumentFileTypeFormatExperimental) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageDocumentFileTypeFormatExperimental) GetFiletype() *SourceAzureBlobStorageSchemasStreamsFormatFormatFiletype {
	return SourceAzureBlobStorageSchemasStreamsFormatFormatFiletypeUnstructured.ToPointer()
}

func (o *SourceAzureBlobStorageDocumentFileTypeFormatExperimental) GetProcessing() *SourceAzureBlobStorageProcessing {
	if o == nil {
		return nil
	}
	return o.Processing
}

func (o *SourceAzureBlobStorageDocumentFileTypeFormatExperimental) GetSkipUnprocessableFiles() *bool {
	if o == nil {
		return nil
	}
	return o.SkipUnprocessableFiles
}

func (o *SourceAzureBlobStorageDocumentFileTypeFormatExperimental) GetStrategy() *SourceAzureBlobStorageParsingStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

type SourceAzureBlobStorageSchemasStreamsFormatFiletype string

const (
	SourceAzureBlobStorageSchemasStreamsFormatFiletypeParquet SourceAzureBlobStorageSchemasStreamsFormatFiletype = "parquet"
)

func (e SourceAzureBlobStorageSchemasStreamsFormatFiletype) ToPointer() *SourceAzureBlobStorageSchemasStreamsFormatFiletype {
	return &e
}
func (e *SourceAzureBlobStorageSchemasStreamsFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceAzureBlobStorageSchemasStreamsFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasStreamsFormatFiletype: %v", v)
	}
}

type SourceAzureBlobStorageParquetFormat struct {
	// Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended.
	DecimalAsFloat *bool                                               `default:"false" json:"decimal_as_float"`
	filetype       *SourceAzureBlobStorageSchemasStreamsFormatFiletype `const:"parquet" json:"filetype"`
}

func (s SourceAzureBlobStorageParquetFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageParquetFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageParquetFormat) GetDecimalAsFloat() *bool {
	if o == nil {
		return nil
	}
	return o.DecimalAsFloat
}

func (o *SourceAzureBlobStorageParquetFormat) GetFiletype() *SourceAzureBlobStorageSchemasStreamsFormatFiletype {
	return SourceAzureBlobStorageSchemasStreamsFormatFiletypeParquet.ToPointer()
}

type SourceAzureBlobStorageSchemasStreamsFiletype string

const (
	SourceAzureBlobStorageSchemasStreamsFiletypeJsonl SourceAzureBlobStorageSchemasStreamsFiletype = "jsonl"
)

func (e SourceAzureBlobStorageSchemasStreamsFiletype) ToPointer() *SourceAzureBlobStorageSchemasStreamsFiletype {
	return &e
}
func (e *SourceAzureBlobStorageSchemasStreamsFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceAzureBlobStorageSchemasStreamsFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasStreamsFiletype: %v", v)
	}
}

type SourceAzureBlobStorageJsonlFormat struct {
	filetype *SourceAzureBlobStorageSchemasStreamsFiletype `const:"jsonl" json:"filetype"`
}

func (s SourceAzureBlobStorageJsonlFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageJsonlFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageJsonlFormat) GetFiletype() *SourceAzureBlobStorageSchemasStreamsFiletype {
	return SourceAzureBlobStorageSchemasStreamsFiletypeJsonl.ToPointer()
}

type SourceAzureBlobStorageSchemasFiletype string

const (
	SourceAzureBlobStorageSchemasFiletypeCsv SourceAzureBlobStorageSchemasFiletype = "csv"
)

func (e SourceAzureBlobStorageSchemasFiletype) ToPointer() *SourceAzureBlobStorageSchemasFiletype {
	return &e
}
func (e *SourceAzureBlobStorageSchemasFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceAzureBlobStorageSchemasFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasFiletype: %v", v)
	}
}

type SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType string

const (
	SourceAzureBlobStorageSchemasStreamsHeaderDefinitionTypeUserProvided SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType = "User Provided"
)

func (e SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType) ToPointer() *SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType {
	return &e
}
func (e *SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User Provided":
		*e = SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType: %v", v)
	}
}

type SourceAzureBlobStorageUserProvided struct {
	// The column names that will be used while emitting the CSV records
	ColumnNames          []string                                                  `json:"column_names"`
	headerDefinitionType *SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType `const:"User Provided" json:"header_definition_type"`
}

func (s SourceAzureBlobStorageUserProvided) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageUserProvided) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageUserProvided) GetColumnNames() []string {
	if o == nil {
		return []string{}
	}
	return o.ColumnNames
}

func (o *SourceAzureBlobStorageUserProvided) GetHeaderDefinitionType() *SourceAzureBlobStorageSchemasStreamsHeaderDefinitionType {
	return SourceAzureBlobStorageSchemasStreamsHeaderDefinitionTypeUserProvided.ToPointer()
}

type SourceAzureBlobStorageSchemasHeaderDefinitionType string

const (
	SourceAzureBlobStorageSchemasHeaderDefinitionTypeAutogenerated SourceAzureBlobStorageSchemasHeaderDefinitionType = "Autogenerated"
)

func (e SourceAzureBlobStorageSchemasHeaderDefinitionType) ToPointer() *SourceAzureBlobStorageSchemasHeaderDefinitionType {
	return &e
}
func (e *SourceAzureBlobStorageSchemasHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Autogenerated":
		*e = SourceAzureBlobStorageSchemasHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageSchemasHeaderDefinitionType: %v", v)
	}
}

type SourceAzureBlobStorageAutogenerated struct {
	headerDefinitionType *SourceAzureBlobStorageSchemasHeaderDefinitionType `const:"Autogenerated" json:"header_definition_type"`
}

func (s SourceAzureBlobStorageAutogenerated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageAutogenerated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageAutogenerated) GetHeaderDefinitionType() *SourceAzureBlobStorageSchemasHeaderDefinitionType {
	return SourceAzureBlobStorageSchemasHeaderDefinitionTypeAutogenerated.ToPointer()
}

type SourceAzureBlobStorageHeaderDefinitionType string

const (
	SourceAzureBlobStorageHeaderDefinitionTypeFromCsv SourceAzureBlobStorageHeaderDefinitionType = "From CSV"
)

func (e SourceAzureBlobStorageHeaderDefinitionType) ToPointer() *SourceAzureBlobStorageHeaderDefinitionType {
	return &e
}
func (e *SourceAzureBlobStorageHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "From CSV":
		*e = SourceAzureBlobStorageHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageHeaderDefinitionType: %v", v)
	}
}

type SourceAzureBlobStorageFromCSV struct {
	headerDefinitionType *SourceAzureBlobStorageHeaderDefinitionType `const:"From CSV" json:"header_definition_type"`
}

func (s SourceAzureBlobStorageFromCSV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageFromCSV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageFromCSV) GetHeaderDefinitionType() *SourceAzureBlobStorageHeaderDefinitionType {
	return SourceAzureBlobStorageHeaderDefinitionTypeFromCsv.ToPointer()
}

type SourceAzureBlobStorageCSVHeaderDefinitionType string

const (
	SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageFromCSV       SourceAzureBlobStorageCSVHeaderDefinitionType = "source-azure-blob-storage_From CSV"
	SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageAutogenerated SourceAzureBlobStorageCSVHeaderDefinitionType = "source-azure-blob-storage_Autogenerated"
	SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageUserProvided  SourceAzureBlobStorageCSVHeaderDefinitionType = "source-azure-blob-storage_User Provided"
)

// SourceAzureBlobStorageCSVHeaderDefinition - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceAzureBlobStorageCSVHeaderDefinition struct {
	SourceAzureBlobStorageFromCSV       *SourceAzureBlobStorageFromCSV
	SourceAzureBlobStorageAutogenerated *SourceAzureBlobStorageAutogenerated
	SourceAzureBlobStorageUserProvided  *SourceAzureBlobStorageUserProvided

	Type SourceAzureBlobStorageCSVHeaderDefinitionType
}

func CreateSourceAzureBlobStorageCSVHeaderDefinitionSourceAzureBlobStorageFromCSV(sourceAzureBlobStorageFromCSV SourceAzureBlobStorageFromCSV) SourceAzureBlobStorageCSVHeaderDefinition {
	typ := SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageFromCSV

	return SourceAzureBlobStorageCSVHeaderDefinition{
		SourceAzureBlobStorageFromCSV: &sourceAzureBlobStorageFromCSV,
		Type:                          typ,
	}
}

func CreateSourceAzureBlobStorageCSVHeaderDefinitionSourceAzureBlobStorageAutogenerated(sourceAzureBlobStorageAutogenerated SourceAzureBlobStorageAutogenerated) SourceAzureBlobStorageCSVHeaderDefinition {
	typ := SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageAutogenerated

	return SourceAzureBlobStorageCSVHeaderDefinition{
		SourceAzureBlobStorageAutogenerated: &sourceAzureBlobStorageAutogenerated,
		Type:                                typ,
	}
}

func CreateSourceAzureBlobStorageCSVHeaderDefinitionSourceAzureBlobStorageUserProvided(sourceAzureBlobStorageUserProvided SourceAzureBlobStorageUserProvided) SourceAzureBlobStorageCSVHeaderDefinition {
	typ := SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageUserProvided

	return SourceAzureBlobStorageCSVHeaderDefinition{
		SourceAzureBlobStorageUserProvided: &sourceAzureBlobStorageUserProvided,
		Type:                               typ,
	}
}

func (u *SourceAzureBlobStorageCSVHeaderDefinition) UnmarshalJSON(data []byte) error {

	var sourceAzureBlobStorageFromCSV SourceAzureBlobStorageFromCSV = SourceAzureBlobStorageFromCSV{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageFromCSV, "", true, true); err == nil {
		u.SourceAzureBlobStorageFromCSV = &sourceAzureBlobStorageFromCSV
		u.Type = SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageFromCSV
		return nil
	}

	var sourceAzureBlobStorageAutogenerated SourceAzureBlobStorageAutogenerated = SourceAzureBlobStorageAutogenerated{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageAutogenerated, "", true, true); err == nil {
		u.SourceAzureBlobStorageAutogenerated = &sourceAzureBlobStorageAutogenerated
		u.Type = SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageAutogenerated
		return nil
	}

	var sourceAzureBlobStorageUserProvided SourceAzureBlobStorageUserProvided = SourceAzureBlobStorageUserProvided{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageUserProvided, "", true, true); err == nil {
		u.SourceAzureBlobStorageUserProvided = &sourceAzureBlobStorageUserProvided
		u.Type = SourceAzureBlobStorageCSVHeaderDefinitionTypeSourceAzureBlobStorageUserProvided
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceAzureBlobStorageCSVHeaderDefinition", string(data))
}

func (u SourceAzureBlobStorageCSVHeaderDefinition) MarshalJSON() ([]byte, error) {
	if u.SourceAzureBlobStorageFromCSV != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageFromCSV, "", true)
	}

	if u.SourceAzureBlobStorageAutogenerated != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageAutogenerated, "", true)
	}

	if u.SourceAzureBlobStorageUserProvided != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageUserProvided, "", true)
	}

	return nil, errors.New("could not marshal union type SourceAzureBlobStorageCSVHeaderDefinition: all fields are null")
}

type SourceAzureBlobStorageCSVFormat struct {
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `default:"," json:"delimiter"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `default:"true" json:"double_quote"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `default:"utf8" json:"encoding"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string `json:"escape_char,omitempty"`
	// A set of case-sensitive strings that should be interpreted as false values.
	FalseValues []string                               `json:"false_values,omitempty"`
	filetype    *SourceAzureBlobStorageSchemasFiletype `const:"csv" json:"filetype"`
	// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
	HeaderDefinition *SourceAzureBlobStorageCSVHeaderDefinition `json:"header_definition,omitempty"`
	// Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema.
	IgnoreErrorsOnFieldsMismatch *bool `default:"false" json:"ignore_errors_on_fields_mismatch"`
	// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
	NullValues []string `json:"null_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `default:"\"" json:"quote_char"`
	// The number of rows to skip after the header row.
	SkipRowsAfterHeader *int64 `default:"0" json:"skip_rows_after_header"`
	// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
	SkipRowsBeforeHeader *int64 `default:"0" json:"skip_rows_before_header"`
	// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
	StringsCanBeNull *bool `default:"true" json:"strings_can_be_null"`
	// A set of case-sensitive strings that should be interpreted as true values.
	TrueValues []string `json:"true_values,omitempty"`
}

func (s SourceAzureBlobStorageCSVFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageCSVFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageCSVFormat) GetDelimiter() *string {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *SourceAzureBlobStorageCSVFormat) GetDoubleQuote() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleQuote
}

func (o *SourceAzureBlobStorageCSVFormat) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *SourceAzureBlobStorageCSVFormat) GetEscapeChar() *string {
	if o == nil {
		return nil
	}
	return o.EscapeChar
}

func (o *SourceAzureBlobStorageCSVFormat) GetFalseValues() []string {
	if o == nil {
		return nil
	}
	return o.FalseValues
}

func (o *SourceAzureBlobStorageCSVFormat) GetFiletype() *SourceAzureBlobStorageSchemasFiletype {
	return SourceAzureBlobStorageSchemasFiletypeCsv.ToPointer()
}

func (o *SourceAzureBlobStorageCSVFormat) GetHeaderDefinition() *SourceAzureBlobStorageCSVHeaderDefinition {
	if o == nil {
		return nil
	}
	return o.HeaderDefinition
}

func (o *SourceAzureBlobStorageCSVFormat) GetIgnoreErrorsOnFieldsMismatch() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreErrorsOnFieldsMismatch
}

func (o *SourceAzureBlobStorageCSVFormat) GetNullValues() []string {
	if o == nil {
		return nil
	}
	return o.NullValues
}

func (o *SourceAzureBlobStorageCSVFormat) GetQuoteChar() *string {
	if o == nil {
		return nil
	}
	return o.QuoteChar
}

func (o *SourceAzureBlobStorageCSVFormat) GetSkipRowsAfterHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsAfterHeader
}

func (o *SourceAzureBlobStorageCSVFormat) GetSkipRowsBeforeHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsBeforeHeader
}

func (o *SourceAzureBlobStorageCSVFormat) GetStringsCanBeNull() *bool {
	if o == nil {
		return nil
	}
	return o.StringsCanBeNull
}

func (o *SourceAzureBlobStorageCSVFormat) GetTrueValues() []string {
	if o == nil {
		return nil
	}
	return o.TrueValues
}

type SourceAzureBlobStorageFiletype string

const (
	SourceAzureBlobStorageFiletypeAvro SourceAzureBlobStorageFiletype = "avro"
)

func (e SourceAzureBlobStorageFiletype) ToPointer() *SourceAzureBlobStorageFiletype {
	return &e
}
func (e *SourceAzureBlobStorageFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceAzureBlobStorageFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageFiletype: %v", v)
	}
}

type SourceAzureBlobStorageAvroFormat struct {
	// Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers.
	DoubleAsString *bool                           `default:"false" json:"double_as_string"`
	filetype       *SourceAzureBlobStorageFiletype `const:"avro" json:"filetype"`
}

func (s SourceAzureBlobStorageAvroFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageAvroFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageAvroFormat) GetDoubleAsString() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleAsString
}

func (o *SourceAzureBlobStorageAvroFormat) GetFiletype() *SourceAzureBlobStorageFiletype {
	return SourceAzureBlobStorageFiletypeAvro.ToPointer()
}

type SourceAzureBlobStorageFormatType string

const (
	SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageAvroFormat                         SourceAzureBlobStorageFormatType = "source-azure-blob-storage_Avro Format"
	SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageCSVFormat                          SourceAzureBlobStorageFormatType = "source-azure-blob-storage_CSV Format"
	SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageJsonlFormat                        SourceAzureBlobStorageFormatType = "source-azure-blob-storage_Jsonl Format"
	SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageParquetFormat                      SourceAzureBlobStorageFormatType = "source-azure-blob-storage_Parquet Format"
	SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageDocumentFileTypeFormatExperimental SourceAzureBlobStorageFormatType = "source-azure-blob-storage_Document File Type Format (Experimental)"
)

// SourceAzureBlobStorageFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceAzureBlobStorageFormat struct {
	SourceAzureBlobStorageAvroFormat                         *SourceAzureBlobStorageAvroFormat
	SourceAzureBlobStorageCSVFormat                          *SourceAzureBlobStorageCSVFormat
	SourceAzureBlobStorageJsonlFormat                        *SourceAzureBlobStorageJsonlFormat
	SourceAzureBlobStorageParquetFormat                      *SourceAzureBlobStorageParquetFormat
	SourceAzureBlobStorageDocumentFileTypeFormatExperimental *SourceAzureBlobStorageDocumentFileTypeFormatExperimental

	Type SourceAzureBlobStorageFormatType
}

func CreateSourceAzureBlobStorageFormatSourceAzureBlobStorageAvroFormat(sourceAzureBlobStorageAvroFormat SourceAzureBlobStorageAvroFormat) SourceAzureBlobStorageFormat {
	typ := SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageAvroFormat

	return SourceAzureBlobStorageFormat{
		SourceAzureBlobStorageAvroFormat: &sourceAzureBlobStorageAvroFormat,
		Type:                             typ,
	}
}

func CreateSourceAzureBlobStorageFormatSourceAzureBlobStorageCSVFormat(sourceAzureBlobStorageCSVFormat SourceAzureBlobStorageCSVFormat) SourceAzureBlobStorageFormat {
	typ := SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageCSVFormat

	return SourceAzureBlobStorageFormat{
		SourceAzureBlobStorageCSVFormat: &sourceAzureBlobStorageCSVFormat,
		Type:                            typ,
	}
}

func CreateSourceAzureBlobStorageFormatSourceAzureBlobStorageJsonlFormat(sourceAzureBlobStorageJsonlFormat SourceAzureBlobStorageJsonlFormat) SourceAzureBlobStorageFormat {
	typ := SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageJsonlFormat

	return SourceAzureBlobStorageFormat{
		SourceAzureBlobStorageJsonlFormat: &sourceAzureBlobStorageJsonlFormat,
		Type:                              typ,
	}
}

func CreateSourceAzureBlobStorageFormatSourceAzureBlobStorageParquetFormat(sourceAzureBlobStorageParquetFormat SourceAzureBlobStorageParquetFormat) SourceAzureBlobStorageFormat {
	typ := SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageParquetFormat

	return SourceAzureBlobStorageFormat{
		SourceAzureBlobStorageParquetFormat: &sourceAzureBlobStorageParquetFormat,
		Type:                                typ,
	}
}

func CreateSourceAzureBlobStorageFormatSourceAzureBlobStorageDocumentFileTypeFormatExperimental(sourceAzureBlobStorageDocumentFileTypeFormatExperimental SourceAzureBlobStorageDocumentFileTypeFormatExperimental) SourceAzureBlobStorageFormat {
	typ := SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageDocumentFileTypeFormatExperimental

	return SourceAzureBlobStorageFormat{
		SourceAzureBlobStorageDocumentFileTypeFormatExperimental: &sourceAzureBlobStorageDocumentFileTypeFormatExperimental,
		Type: typ,
	}
}

func (u *SourceAzureBlobStorageFormat) UnmarshalJSON(data []byte) error {

	var sourceAzureBlobStorageJsonlFormat SourceAzureBlobStorageJsonlFormat = SourceAzureBlobStorageJsonlFormat{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageJsonlFormat, "", true, true); err == nil {
		u.SourceAzureBlobStorageJsonlFormat = &sourceAzureBlobStorageJsonlFormat
		u.Type = SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageJsonlFormat
		return nil
	}

	var sourceAzureBlobStorageAvroFormat SourceAzureBlobStorageAvroFormat = SourceAzureBlobStorageAvroFormat{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageAvroFormat, "", true, true); err == nil {
		u.SourceAzureBlobStorageAvroFormat = &sourceAzureBlobStorageAvroFormat
		u.Type = SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageAvroFormat
		return nil
	}

	var sourceAzureBlobStorageParquetFormat SourceAzureBlobStorageParquetFormat = SourceAzureBlobStorageParquetFormat{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageParquetFormat, "", true, true); err == nil {
		u.SourceAzureBlobStorageParquetFormat = &sourceAzureBlobStorageParquetFormat
		u.Type = SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageParquetFormat
		return nil
	}

	var sourceAzureBlobStorageDocumentFileTypeFormatExperimental SourceAzureBlobStorageDocumentFileTypeFormatExperimental = SourceAzureBlobStorageDocumentFileTypeFormatExperimental{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageDocumentFileTypeFormatExperimental, "", true, true); err == nil {
		u.SourceAzureBlobStorageDocumentFileTypeFormatExperimental = &sourceAzureBlobStorageDocumentFileTypeFormatExperimental
		u.Type = SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageDocumentFileTypeFormatExperimental
		return nil
	}

	var sourceAzureBlobStorageCSVFormat SourceAzureBlobStorageCSVFormat = SourceAzureBlobStorageCSVFormat{}
	if err := utils.UnmarshalJSON(data, &sourceAzureBlobStorageCSVFormat, "", true, true); err == nil {
		u.SourceAzureBlobStorageCSVFormat = &sourceAzureBlobStorageCSVFormat
		u.Type = SourceAzureBlobStorageFormatTypeSourceAzureBlobStorageCSVFormat
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceAzureBlobStorageFormat", string(data))
}

func (u SourceAzureBlobStorageFormat) MarshalJSON() ([]byte, error) {
	if u.SourceAzureBlobStorageAvroFormat != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageAvroFormat, "", true)
	}

	if u.SourceAzureBlobStorageCSVFormat != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageCSVFormat, "", true)
	}

	if u.SourceAzureBlobStorageJsonlFormat != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageJsonlFormat, "", true)
	}

	if u.SourceAzureBlobStorageParquetFormat != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageParquetFormat, "", true)
	}

	if u.SourceAzureBlobStorageDocumentFileTypeFormatExperimental != nil {
		return utils.MarshalJSON(u.SourceAzureBlobStorageDocumentFileTypeFormatExperimental, "", true)
	}

	return nil, errors.New("could not marshal union type SourceAzureBlobStorageFormat: all fields are null")
}

// SourceAzureBlobStorageValidationPolicy - The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
type SourceAzureBlobStorageValidationPolicy string

const (
	SourceAzureBlobStorageValidationPolicyEmitRecord      SourceAzureBlobStorageValidationPolicy = "Emit Record"
	SourceAzureBlobStorageValidationPolicySkipRecord      SourceAzureBlobStorageValidationPolicy = "Skip Record"
	SourceAzureBlobStorageValidationPolicyWaitForDiscover SourceAzureBlobStorageValidationPolicy = "Wait for Discover"
)

func (e SourceAzureBlobStorageValidationPolicy) ToPointer() *SourceAzureBlobStorageValidationPolicy {
	return &e
}
func (e *SourceAzureBlobStorageValidationPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Emit Record":
		fallthrough
	case "Skip Record":
		fallthrough
	case "Wait for Discover":
		*e = SourceAzureBlobStorageValidationPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAzureBlobStorageValidationPolicy: %v", v)
	}
}

type SourceAzureBlobStorageFileBasedStreamConfig struct {
	// When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.
	DaysToSyncIfHistoryIsFull *int64 `default:"3" json:"days_to_sync_if_history_is_full"`
	// The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
	Format SourceAzureBlobStorageFormat `json:"format"`
	// The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
	Globs []string `json:"globs,omitempty"`
	// The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
	InputSchema *string `json:"input_schema,omitempty"`
	// The name of the stream.
	Name string `json:"name"`
	// When enabled, syncs will not validate or structure records against the stream's schema.
	Schemaless *bool `default:"false" json:"schemaless"`
	// The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
	ValidationPolicy *SourceAzureBlobStorageValidationPolicy `default:"Emit Record" json:"validation_policy"`
}

func (s SourceAzureBlobStorageFileBasedStreamConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorageFileBasedStreamConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetDaysToSyncIfHistoryIsFull() *int64 {
	if o == nil {
		return nil
	}
	return o.DaysToSyncIfHistoryIsFull
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetFormat() SourceAzureBlobStorageFormat {
	if o == nil {
		return SourceAzureBlobStorageFormat{}
	}
	return o.Format
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetGlobs() []string {
	if o == nil {
		return nil
	}
	return o.Globs
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetInputSchema() *string {
	if o == nil {
		return nil
	}
	return o.InputSchema
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetSchemaless() *bool {
	if o == nil {
		return nil
	}
	return o.Schemaless
}

func (o *SourceAzureBlobStorageFileBasedStreamConfig) GetValidationPolicy() *SourceAzureBlobStorageValidationPolicy {
	if o == nil {
		return nil
	}
	return o.ValidationPolicy
}

// SourceAzureBlobStorage - NOTE: When this Spec is changed, legacy_config_transformer.py must also be modified to uptake the changes
// because it is responsible for converting legacy Azure Blob Storage v0 configs into v1 configs using the File-Based CDK.
type SourceAzureBlobStorage struct {
	// The account's name of the Azure Blob Storage.
	AzureBlobStorageAccountName string `json:"azure_blob_storage_account_name"`
	// The name of the Azure blob storage container.
	AzureBlobStorageContainerName string `json:"azure_blob_storage_container_name"`
	// This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.
	AzureBlobStorageEndpoint *string `json:"azure_blob_storage_endpoint,omitempty"`
	// Credentials for connecting to the Azure Blob Storage
	Credentials SourceAzureBlobStorageAuthentication   `json:"credentials"`
	sourceType  SourceAzureBlobStorageAzureBlobStorage `const:"azure-blob-storage" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
	Streams []SourceAzureBlobStorageFileBasedStreamConfig `json:"streams"`
}

func (s SourceAzureBlobStorage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAzureBlobStorage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAzureBlobStorage) GetAzureBlobStorageAccountName() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageAccountName
}

func (o *SourceAzureBlobStorage) GetAzureBlobStorageContainerName() string {
	if o == nil {
		return ""
	}
	return o.AzureBlobStorageContainerName
}

func (o *SourceAzureBlobStorage) GetAzureBlobStorageEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.AzureBlobStorageEndpoint
}

func (o *SourceAzureBlobStorage) GetCredentials() SourceAzureBlobStorageAuthentication {
	if o == nil {
		return SourceAzureBlobStorageAuthentication{}
	}
	return o.Credentials
}

func (o *SourceAzureBlobStorage) GetSourceType() SourceAzureBlobStorageAzureBlobStorage {
	return SourceAzureBlobStorageAzureBlobStorageAzureBlobStorage
}

func (o *SourceAzureBlobStorage) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceAzureBlobStorage) GetStreams() []SourceAzureBlobStorageFileBasedStreamConfig {
	if o == nil {
		return []SourceAzureBlobStorageFileBasedStreamConfig{}
	}
	return o.Streams
}
