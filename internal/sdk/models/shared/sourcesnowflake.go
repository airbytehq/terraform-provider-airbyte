// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceSnowflakeSchemasAuthType string

const (
	SourceSnowflakeSchemasAuthTypeUsernamePassword SourceSnowflakeSchemasAuthType = "username/password"
)

func (e SourceSnowflakeSchemasAuthType) ToPointer() *SourceSnowflakeSchemasAuthType {
	return &e
}
func (e *SourceSnowflakeSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username/password":
		*e = SourceSnowflakeSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeSchemasAuthType: %v", v)
	}
}

type SourceSnowflakeUsernameAndPassword struct {
	authType SourceSnowflakeSchemasAuthType `const:"username/password" json:"auth_type"`
	// The password associated with the username.
	Password string `json:"password"`
	// The username you created to allow Airbyte to access the database.
	Username string `json:"username"`
}

func (s SourceSnowflakeUsernameAndPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflakeUsernameAndPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflakeUsernameAndPassword) GetAuthType() SourceSnowflakeSchemasAuthType {
	return SourceSnowflakeSchemasAuthTypeUsernamePassword
}

func (o *SourceSnowflakeUsernameAndPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *SourceSnowflakeUsernameAndPassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type SourceSnowflakeAuthType string

const (
	SourceSnowflakeAuthTypeOAuth SourceSnowflakeAuthType = "OAuth"
)

func (e SourceSnowflakeAuthType) ToPointer() *SourceSnowflakeAuthType {
	return &e
}
func (e *SourceSnowflakeAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSnowflakeAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeAuthType: %v", v)
	}
}

type SourceSnowflakeOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken *string                 `json:"access_token,omitempty"`
	authType    SourceSnowflakeAuthType `const:"OAuth" json:"auth_type"`
	// The Client ID of your Snowflake developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Snowflake developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token for making authenticated requests.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

func (s SourceSnowflakeOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflakeOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflakeOAuth20) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceSnowflakeOAuth20) GetAuthType() SourceSnowflakeAuthType {
	return SourceSnowflakeAuthTypeOAuth
}

func (o *SourceSnowflakeOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSnowflakeOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSnowflakeOAuth20) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

type SourceSnowflakeAuthorizationMethodType string

const (
	SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeOAuth20             SourceSnowflakeAuthorizationMethodType = "source-snowflake_OAuth2.0"
	SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeUsernameAndPassword SourceSnowflakeAuthorizationMethodType = "source-snowflake_Username and Password"
)

type SourceSnowflakeAuthorizationMethod struct {
	SourceSnowflakeOAuth20             *SourceSnowflakeOAuth20
	SourceSnowflakeUsernameAndPassword *SourceSnowflakeUsernameAndPassword

	Type SourceSnowflakeAuthorizationMethodType
}

func CreateSourceSnowflakeAuthorizationMethodSourceSnowflakeOAuth20(sourceSnowflakeOAuth20 SourceSnowflakeOAuth20) SourceSnowflakeAuthorizationMethod {
	typ := SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeOAuth20

	return SourceSnowflakeAuthorizationMethod{
		SourceSnowflakeOAuth20: &sourceSnowflakeOAuth20,
		Type:                   typ,
	}
}

func CreateSourceSnowflakeAuthorizationMethodSourceSnowflakeUsernameAndPassword(sourceSnowflakeUsernameAndPassword SourceSnowflakeUsernameAndPassword) SourceSnowflakeAuthorizationMethod {
	typ := SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeUsernameAndPassword

	return SourceSnowflakeAuthorizationMethod{
		SourceSnowflakeUsernameAndPassword: &sourceSnowflakeUsernameAndPassword,
		Type:                               typ,
	}
}

func (u *SourceSnowflakeAuthorizationMethod) UnmarshalJSON(data []byte) error {

	var sourceSnowflakeUsernameAndPassword SourceSnowflakeUsernameAndPassword = SourceSnowflakeUsernameAndPassword{}
	if err := utils.UnmarshalJSON(data, &sourceSnowflakeUsernameAndPassword, "", true, true); err == nil {
		u.SourceSnowflakeUsernameAndPassword = &sourceSnowflakeUsernameAndPassword
		u.Type = SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeUsernameAndPassword
		return nil
	}

	var sourceSnowflakeOAuth20 SourceSnowflakeOAuth20 = SourceSnowflakeOAuth20{}
	if err := utils.UnmarshalJSON(data, &sourceSnowflakeOAuth20, "", true, true); err == nil {
		u.SourceSnowflakeOAuth20 = &sourceSnowflakeOAuth20
		u.Type = SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSnowflakeAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceSnowflakeOAuth20 != nil {
		return utils.MarshalJSON(u.SourceSnowflakeOAuth20, "", true)
	}

	if u.SourceSnowflakeUsernameAndPassword != nil {
		return utils.MarshalJSON(u.SourceSnowflakeUsernameAndPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSnowflakeSnowflake string

const (
	SourceSnowflakeSnowflakeSnowflake SourceSnowflakeSnowflake = "snowflake"
)

func (e SourceSnowflakeSnowflake) ToPointer() *SourceSnowflakeSnowflake {
	return &e
}
func (e *SourceSnowflakeSnowflake) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snowflake":
		*e = SourceSnowflakeSnowflake(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeSnowflake: %v", v)
	}
}

type SourceSnowflake struct {
	Credentials *SourceSnowflakeAuthorizationMethod `json:"credentials,omitempty"`
	// The database you created for Airbyte to access data.
	Database string `json:"database"`
	// The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The role you created for Airbyte to access Snowflake.
	Role string `json:"role"`
	// The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
	Schema     *string                  `json:"schema,omitempty"`
	sourceType SourceSnowflakeSnowflake `const:"snowflake" json:"sourceType"`
	// The warehouse you created for Airbyte to access data.
	Warehouse string `json:"warehouse"`
}

func (s SourceSnowflake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflake) GetCredentials() *SourceSnowflakeAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSnowflake) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceSnowflake) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceSnowflake) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *SourceSnowflake) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *SourceSnowflake) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *SourceSnowflake) GetSourceType() SourceSnowflakeSnowflake {
	return SourceSnowflakeSnowflakeSnowflake
}

func (o *SourceSnowflake) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}
