// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Leadfeeder string

const (
	LeadfeederLeadfeeder Leadfeeder = "leadfeeder"
)

func (e Leadfeeder) ToPointer() *Leadfeeder {
	return &e
}
func (e *Leadfeeder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "leadfeeder":
		*e = Leadfeeder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Leadfeeder: %v", v)
	}
}

type SourceLeadfeeder struct {
	APIToken   string     `json:"api_token"`
	sourceType Leadfeeder `const:"leadfeeder" json:"sourceType"`
	StartDate  time.Time  `json:"start_date"`
}

func (s SourceLeadfeeder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeadfeeder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeadfeeder) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceLeadfeeder) GetSourceType() Leadfeeder {
	return LeadfeederLeadfeeder
}

func (o *SourceLeadfeeder) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
