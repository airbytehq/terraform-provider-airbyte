// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Resolution string

const (
	ResolutionHour Resolution = "hour"
	ResolutionDay  Resolution = "day"
	ResolutionWeek Resolution = "week"
)

func (e Resolution) ToPointer() *Resolution {
	return &e
}
func (e *Resolution) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		fallthrough
	case "week":
		*e = Resolution(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Resolution: %v", v)
	}
}

type Pingdom string

const (
	PingdomPingdom Pingdom = "pingdom"
)

func (e Pingdom) ToPointer() *Pingdom {
	return &e
}
func (e *Pingdom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pingdom":
		*e = Pingdom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pingdom: %v", v)
	}
}

type SourcePingdom struct {
	Probes     *string     `json:"probes,omitempty"`
	APIKey     string      `json:"api_key"`
	Resolution *Resolution `default:"hour" json:"resolution"`
	StartDate  time.Time   `json:"start_date"`
	sourceType Pingdom     `const:"pingdom" json:"sourceType"`
}

func (s SourcePingdom) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePingdom) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePingdom) GetProbes() *string {
	if o == nil {
		return nil
	}
	return o.Probes
}

func (o *SourcePingdom) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourcePingdom) GetResolution() *Resolution {
	if o == nil {
		return nil
	}
	return o.Resolution
}

func (o *SourcePingdom) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourcePingdom) GetSourceType() Pingdom {
	return PingdomPingdom
}
