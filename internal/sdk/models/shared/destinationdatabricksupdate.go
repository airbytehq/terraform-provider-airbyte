// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationDatabricksUpdateAuthType string

const (
	DestinationDatabricksUpdateAuthTypeBasic DestinationDatabricksUpdateAuthType = "BASIC"
)

func (e DestinationDatabricksUpdateAuthType) ToPointer() *DestinationDatabricksUpdateAuthType {
	return &e
}
func (e *DestinationDatabricksUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		*e = DestinationDatabricksUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationDatabricksUpdateAuthType: %v", v)
	}
}

type PersonalAccessToken struct {
	authType            DestinationDatabricksUpdateAuthType `const:"BASIC" json:"auth_type"`
	PersonalAccessToken string                              `json:"personal_access_token"`
}

func (p PersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PersonalAccessToken) GetAuthType() DestinationDatabricksUpdateAuthType {
	return DestinationDatabricksUpdateAuthTypeBasic
}

func (o *PersonalAccessToken) GetPersonalAccessToken() string {
	if o == nil {
		return ""
	}
	return o.PersonalAccessToken
}

type DestinationDatabricksUpdateSchemasAuthType string

const (
	DestinationDatabricksUpdateSchemasAuthTypeOauth DestinationDatabricksUpdateSchemasAuthType = "OAUTH"
)

func (e DestinationDatabricksUpdateSchemasAuthType) ToPointer() *DestinationDatabricksUpdateSchemasAuthType {
	return &e
}
func (e *DestinationDatabricksUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAUTH":
		*e = DestinationDatabricksUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationDatabricksUpdateSchemasAuthType: %v", v)
	}
}

type OAuth2Recommended struct {
	authType DestinationDatabricksUpdateSchemasAuthType `const:"OAUTH" json:"auth_type"`
	ClientID string                                     `json:"client_id"`
	Secret   string                                     `json:"secret"`
}

func (o OAuth2Recommended) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OAuth2Recommended) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OAuth2Recommended) GetAuthType() DestinationDatabricksUpdateSchemasAuthType {
	return DestinationDatabricksUpdateSchemasAuthTypeOauth
}

func (o *OAuth2Recommended) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OAuth2Recommended) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type AuthenticationUnionType string

const (
	AuthenticationUnionTypeOAuth2Recommended   AuthenticationUnionType = "OAuth2 (Recommended)"
	AuthenticationUnionTypePersonalAccessToken AuthenticationUnionType = "Personal Access Token"
)

// Authentication mechanism for Staging files and running queries
type Authentication struct {
	OAuth2Recommended   *OAuth2Recommended
	PersonalAccessToken *PersonalAccessToken

	Type AuthenticationUnionType
}

func CreateAuthenticationOAuth2Recommended(oAuth2Recommended OAuth2Recommended) Authentication {
	typ := AuthenticationUnionTypeOAuth2Recommended

	return Authentication{
		OAuth2Recommended: &oAuth2Recommended,
		Type:              typ,
	}
}

func CreateAuthenticationPersonalAccessToken(personalAccessToken PersonalAccessToken) Authentication {
	typ := AuthenticationUnionTypePersonalAccessToken

	return Authentication{
		PersonalAccessToken: &personalAccessToken,
		Type:                typ,
	}
}

func (u *Authentication) UnmarshalJSON(data []byte) error {

	var personalAccessToken PersonalAccessToken = PersonalAccessToken{}
	if err := utils.UnmarshalJSON(data, &personalAccessToken, "", true, true); err == nil {
		u.PersonalAccessToken = &personalAccessToken
		u.Type = AuthenticationUnionTypePersonalAccessToken
		return nil
	}

	var oAuth2Recommended OAuth2Recommended = OAuth2Recommended{}
	if err := utils.UnmarshalJSON(data, &oAuth2Recommended, "", true, true); err == nil {
		u.OAuth2Recommended = &oAuth2Recommended
		u.Type = AuthenticationUnionTypeOAuth2Recommended
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Authentication", string(data))
}

func (u Authentication) MarshalJSON() ([]byte, error) {
	if u.OAuth2Recommended != nil {
		return utils.MarshalJSON(u.OAuth2Recommended, "", true)
	}

	if u.PersonalAccessToken != nil {
		return utils.MarshalJSON(u.PersonalAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type Authentication: all fields are null")
}

type DestinationDatabricksUpdate struct {
	// You must agree to the Databricks JDBC Driver <a href="https://databricks.com/jdbc-odbc-driver-license">Terms & Conditions</a> to use this connector.
	AcceptTerms *bool `default:"false" json:"accept_terms"`
	// Authentication mechanism for Staging files and running queries
	Authentication Authentication `json:"authentication"`
	// The name of the unity catalog for the database
	Database string `json:"database"`
	// Databricks Cluster Server Hostname.
	Hostname string `json:"hostname"`
	// Databricks Cluster HTTP Path.
	HTTPPath string `json:"http_path"`
	// Databricks Cluster Port.
	Port *string `default:"443" json:"port"`
	// Default to 'true'. Switch it to 'false' for debugging purpose.
	PurgeStagingData *bool `default:"true" json:"purge_staging_data"`
	// The schema to write raw tables into (default: airbyte_internal)
	RawSchemaOverride *string `default:"airbyte_internal" json:"raw_schema_override"`
	// The default schema tables are written. If not specified otherwise, the "default" will be used.
	Schema *string `default:"default" json:"schema"`
}

func (d DestinationDatabricksUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationDatabricksUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationDatabricksUpdate) GetAcceptTerms() *bool {
	if o == nil {
		return nil
	}
	return o.AcceptTerms
}

func (o *DestinationDatabricksUpdate) GetAuthentication() Authentication {
	if o == nil {
		return Authentication{}
	}
	return o.Authentication
}

func (o *DestinationDatabricksUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationDatabricksUpdate) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *DestinationDatabricksUpdate) GetHTTPPath() string {
	if o == nil {
		return ""
	}
	return o.HTTPPath
}

func (o *DestinationDatabricksUpdate) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationDatabricksUpdate) GetPurgeStagingData() *bool {
	if o == nil {
		return nil
	}
	return o.PurgeStagingData
}

func (o *DestinationDatabricksUpdate) GetRawSchemaOverride() *string {
	if o == nil {
		return nil
	}
	return o.RawSchemaOverride
}

func (o *DestinationDatabricksUpdate) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}
