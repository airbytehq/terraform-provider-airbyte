// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type GoogleTasks string

const (
	GoogleTasksGoogleTasks GoogleTasks = "google-tasks"
)

func (e GoogleTasks) ToPointer() *GoogleTasks {
	return &e
}
func (e *GoogleTasks) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-tasks":
		*e = GoogleTasks(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleTasks: %v", v)
	}
}

type SourceGoogleTasks struct {
	APIKey string `json:"api_key"`
	// The maximum number of records to be returned per request
	RecordsLimit *string     `default:"50" json:"records_limit"`
	sourceType   GoogleTasks `const:"google-tasks" json:"sourceType"`
	StartDate    time.Time   `json:"start_date"`
}

func (s SourceGoogleTasks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleTasks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleTasks) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceGoogleTasks) GetRecordsLimit() *string {
	if o == nil {
		return nil
	}
	return o.RecordsLimit
}

func (o *SourceGoogleTasks) GetSourceType() GoogleTasks {
	return GoogleTasksGoogleTasks
}

func (o *SourceGoogleTasks) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
