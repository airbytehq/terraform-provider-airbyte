// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Brevo string

const (
	BrevoBrevo Brevo = "brevo"
)

func (e Brevo) ToPointer() *Brevo {
	return &e
}
func (e *Brevo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "brevo":
		*e = Brevo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Brevo: %v", v)
	}
}

type SourceBrevo struct {
	APIKey     string    `json:"api_key"`
	sourceType Brevo     `const:"brevo" json:"sourceType"`
	StartDate  time.Time `json:"start_date"`
}

func (s SourceBrevo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceBrevo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceBrevo) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceBrevo) GetSourceType() Brevo {
	return BrevoBrevo
}

func (o *SourceBrevo) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
