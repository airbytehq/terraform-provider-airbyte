// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

// SourceAmazonSellerPartnerAWSSellerPartnerAccountType - Type of the Account you're going to authorize the Airbyte application by
type SourceAmazonSellerPartnerAWSSellerPartnerAccountType string

const (
	SourceAmazonSellerPartnerAWSSellerPartnerAccountTypeSeller SourceAmazonSellerPartnerAWSSellerPartnerAccountType = "Seller"
	SourceAmazonSellerPartnerAWSSellerPartnerAccountTypeVendor SourceAmazonSellerPartnerAWSSellerPartnerAccountType = "Vendor"
)

func (e SourceAmazonSellerPartnerAWSSellerPartnerAccountType) ToPointer() *SourceAmazonSellerPartnerAWSSellerPartnerAccountType {
	return &e
}
func (e *SourceAmazonSellerPartnerAWSSellerPartnerAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Seller":
		fallthrough
	case "Vendor":
		*e = SourceAmazonSellerPartnerAWSSellerPartnerAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAWSSellerPartnerAccountType: %v", v)
	}
}

type SourceAmazonSellerPartnerAuthType string

const (
	SourceAmazonSellerPartnerAuthTypeOauth20 SourceAmazonSellerPartnerAuthType = "oauth2.0"
)

func (e SourceAmazonSellerPartnerAuthType) ToPointer() *SourceAmazonSellerPartnerAuthType {
	return &e
}
func (e *SourceAmazonSellerPartnerAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceAmazonSellerPartnerAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAuthType: %v", v)
	}
}

// SourceAmazonSellerPartnerAWSEnvironment - Select the AWS Environment.
type SourceAmazonSellerPartnerAWSEnvironment string

const (
	SourceAmazonSellerPartnerAWSEnvironmentProduction SourceAmazonSellerPartnerAWSEnvironment = "PRODUCTION"
	SourceAmazonSellerPartnerAWSEnvironmentSandbox    SourceAmazonSellerPartnerAWSEnvironment = "SANDBOX"
)

func (e SourceAmazonSellerPartnerAWSEnvironment) ToPointer() *SourceAmazonSellerPartnerAWSEnvironment {
	return &e
}
func (e *SourceAmazonSellerPartnerAWSEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRODUCTION":
		fallthrough
	case "SANDBOX":
		*e = SourceAmazonSellerPartnerAWSEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAWSEnvironment: %v", v)
	}
}

// SourceAmazonSellerPartnerAWSRegion - Select the AWS Region.
type SourceAmazonSellerPartnerAWSRegion string

const (
	SourceAmazonSellerPartnerAWSRegionAe SourceAmazonSellerPartnerAWSRegion = "AE"
	SourceAmazonSellerPartnerAWSRegionAu SourceAmazonSellerPartnerAWSRegion = "AU"
	SourceAmazonSellerPartnerAWSRegionBe SourceAmazonSellerPartnerAWSRegion = "BE"
	SourceAmazonSellerPartnerAWSRegionBr SourceAmazonSellerPartnerAWSRegion = "BR"
	SourceAmazonSellerPartnerAWSRegionCa SourceAmazonSellerPartnerAWSRegion = "CA"
	SourceAmazonSellerPartnerAWSRegionDe SourceAmazonSellerPartnerAWSRegion = "DE"
	SourceAmazonSellerPartnerAWSRegionEg SourceAmazonSellerPartnerAWSRegion = "EG"
	SourceAmazonSellerPartnerAWSRegionEs SourceAmazonSellerPartnerAWSRegion = "ES"
	SourceAmazonSellerPartnerAWSRegionFr SourceAmazonSellerPartnerAWSRegion = "FR"
	SourceAmazonSellerPartnerAWSRegionGb SourceAmazonSellerPartnerAWSRegion = "GB"
	SourceAmazonSellerPartnerAWSRegionIn SourceAmazonSellerPartnerAWSRegion = "IN"
	SourceAmazonSellerPartnerAWSRegionIt SourceAmazonSellerPartnerAWSRegion = "IT"
	SourceAmazonSellerPartnerAWSRegionJp SourceAmazonSellerPartnerAWSRegion = "JP"
	SourceAmazonSellerPartnerAWSRegionMx SourceAmazonSellerPartnerAWSRegion = "MX"
	SourceAmazonSellerPartnerAWSRegionNl SourceAmazonSellerPartnerAWSRegion = "NL"
	SourceAmazonSellerPartnerAWSRegionPl SourceAmazonSellerPartnerAWSRegion = "PL"
	SourceAmazonSellerPartnerAWSRegionSa SourceAmazonSellerPartnerAWSRegion = "SA"
	SourceAmazonSellerPartnerAWSRegionSe SourceAmazonSellerPartnerAWSRegion = "SE"
	SourceAmazonSellerPartnerAWSRegionSg SourceAmazonSellerPartnerAWSRegion = "SG"
	SourceAmazonSellerPartnerAWSRegionTr SourceAmazonSellerPartnerAWSRegion = "TR"
	SourceAmazonSellerPartnerAWSRegionUk SourceAmazonSellerPartnerAWSRegion = "UK"
	SourceAmazonSellerPartnerAWSRegionUs SourceAmazonSellerPartnerAWSRegion = "US"
)

func (e SourceAmazonSellerPartnerAWSRegion) ToPointer() *SourceAmazonSellerPartnerAWSRegion {
	return &e
}
func (e *SourceAmazonSellerPartnerAWSRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AE":
		fallthrough
	case "AU":
		fallthrough
	case "BE":
		fallthrough
	case "BR":
		fallthrough
	case "CA":
		fallthrough
	case "DE":
		fallthrough
	case "EG":
		fallthrough
	case "ES":
		fallthrough
	case "FR":
		fallthrough
	case "GB":
		fallthrough
	case "IN":
		fallthrough
	case "IT":
		fallthrough
	case "JP":
		fallthrough
	case "MX":
		fallthrough
	case "NL":
		fallthrough
	case "PL":
		fallthrough
	case "SA":
		fallthrough
	case "SE":
		fallthrough
	case "SG":
		fallthrough
	case "TR":
		fallthrough
	case "UK":
		fallthrough
	case "US":
		*e = SourceAmazonSellerPartnerAWSRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAWSRegion: %v", v)
	}
}

type SourceAmazonSellerPartnerOptionsList struct {
	OptionName  string `json:"option_name"`
	OptionValue string `json:"option_value"`
}

func (o *SourceAmazonSellerPartnerOptionsList) GetOptionName() string {
	if o == nil {
		return ""
	}
	return o.OptionName
}

func (o *SourceAmazonSellerPartnerOptionsList) GetOptionValue() string {
	if o == nil {
		return ""
	}
	return o.OptionValue
}

type SourceAmazonSellerPartnerReportName string

const (
	SourceAmazonSellerPartnerReportNameGetAfnInventoryData                              SourceAmazonSellerPartnerReportName = "GET_AFN_INVENTORY_DATA"
	SourceAmazonSellerPartnerReportNameGetAfnInventoryDataByCountry                     SourceAmazonSellerPartnerReportName = "GET_AFN_INVENTORY_DATA_BY_COUNTRY"
	SourceAmazonSellerPartnerReportNameGetAmazonFulfilledShipmentsDataGeneral           SourceAmazonSellerPartnerReportName = "GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL"
	SourceAmazonSellerPartnerReportNameGetFbaEstimatedFbaFeesTxtData                    SourceAmazonSellerPartnerReportName = "GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaFulfillmentCustomerReturnsData             SourceAmazonSellerPartnerReportName = "GET_FBA_FULFILLMENT_CUSTOMER_RETURNS_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaFulfillmentCustomerShipmentPromotionData   SourceAmazonSellerPartnerReportName = "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_PROMOTION_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaFulfillmentCustomerShipmentReplacementData SourceAmazonSellerPartnerReportName = "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_REPLACEMENT_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaFulfillmentRemovalOrderDetailData          SourceAmazonSellerPartnerReportName = "GET_FBA_FULFILLMENT_REMOVAL_ORDER_DETAIL_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaFulfillmentRemovalShipmentDetailData       SourceAmazonSellerPartnerReportName = "GET_FBA_FULFILLMENT_REMOVAL_SHIPMENT_DETAIL_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaInventoryPlanningData                      SourceAmazonSellerPartnerReportName = "GET_FBA_INVENTORY_PLANNING_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaMyiUnsuppressedInventoryData               SourceAmazonSellerPartnerReportName = "GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaReimbursementsData                         SourceAmazonSellerPartnerReportName = "GET_FBA_REIMBURSEMENTS_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaSnsForecastData                            SourceAmazonSellerPartnerReportName = "GET_FBA_SNS_FORECAST_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaSnsPerformanceData                         SourceAmazonSellerPartnerReportName = "GET_FBA_SNS_PERFORMANCE_DATA"
	SourceAmazonSellerPartnerReportNameGetFbaStorageFeeChargesData                      SourceAmazonSellerPartnerReportName = "GET_FBA_STORAGE_FEE_CHARGES_DATA"
	SourceAmazonSellerPartnerReportNameGetFlatFileActionableOrderDataShipping           SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING"
	SourceAmazonSellerPartnerReportNameGetFlatFileAllOrdersDataByLastUpdateGeneral      SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL"
	SourceAmazonSellerPartnerReportNameGetFlatFileAllOrdersDataByOrderDateGeneral       SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL"
	SourceAmazonSellerPartnerReportNameGetFlatFileArchivedOrdersDataByOrderDate         SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE"
	SourceAmazonSellerPartnerReportNameGetFlatFileOpenListingsData                      SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_OPEN_LISTINGS_DATA"
	SourceAmazonSellerPartnerReportNameGetFlatFileReturnsDataByReturnDate               SourceAmazonSellerPartnerReportName = "GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE"
	SourceAmazonSellerPartnerReportNameGetLedgerDetailViewData                          SourceAmazonSellerPartnerReportName = "GET_LEDGER_DETAIL_VIEW_DATA"
	SourceAmazonSellerPartnerReportNameGetLedgerSummaryViewData                         SourceAmazonSellerPartnerReportName = "GET_LEDGER_SUMMARY_VIEW_DATA"
	SourceAmazonSellerPartnerReportNameGetMerchantCancelledListingsData                 SourceAmazonSellerPartnerReportName = "GET_MERCHANT_CANCELLED_LISTINGS_DATA"
	SourceAmazonSellerPartnerReportNameGetMerchantListingsAllData                       SourceAmazonSellerPartnerReportName = "GET_MERCHANT_LISTINGS_ALL_DATA"
	SourceAmazonSellerPartnerReportNameGetMerchantListingsData                          SourceAmazonSellerPartnerReportName = "GET_MERCHANT_LISTINGS_DATA"
	SourceAmazonSellerPartnerReportNameGetMerchantListingsDataBackCompat                SourceAmazonSellerPartnerReportName = "GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT"
	SourceAmazonSellerPartnerReportNameGetMerchantListingsInactiveData                  SourceAmazonSellerPartnerReportName = "GET_MERCHANT_LISTINGS_INACTIVE_DATA"
	SourceAmazonSellerPartnerReportNameGetMerchantsListingsFypReport                    SourceAmazonSellerPartnerReportName = "GET_MERCHANTS_LISTINGS_FYP_REPORT"
	SourceAmazonSellerPartnerReportNameGetOrderReportDataShipping                       SourceAmazonSellerPartnerReportName = "GET_ORDER_REPORT_DATA_SHIPPING"
	SourceAmazonSellerPartnerReportNameGetRestockInventoryRecommendationsReport         SourceAmazonSellerPartnerReportName = "GET_RESTOCK_INVENTORY_RECOMMENDATIONS_REPORT"
	SourceAmazonSellerPartnerReportNameGetSellerFeedbackData                            SourceAmazonSellerPartnerReportName = "GET_SELLER_FEEDBACK_DATA"
	SourceAmazonSellerPartnerReportNameGetStrandedInventoryUIData                       SourceAmazonSellerPartnerReportName = "GET_STRANDED_INVENTORY_UI_DATA"
	SourceAmazonSellerPartnerReportNameGetV2SettlementReportDataFlatFile                SourceAmazonSellerPartnerReportName = "GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE"
	SourceAmazonSellerPartnerReportNameGetXMLAllOrdersDataByOrderDateGeneral            SourceAmazonSellerPartnerReportName = "GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL"
	SourceAmazonSellerPartnerReportNameGetXMLBrowseTreeData                             SourceAmazonSellerPartnerReportName = "GET_XML_BROWSE_TREE_DATA"
	SourceAmazonSellerPartnerReportNameGetVendorRealTimeInventoryReport                 SourceAmazonSellerPartnerReportName = "GET_VENDOR_REAL_TIME_INVENTORY_REPORT"
	SourceAmazonSellerPartnerReportNameGetBrandAnalyticsMarketBasketReport              SourceAmazonSellerPartnerReportName = "GET_BRAND_ANALYTICS_MARKET_BASKET_REPORT"
	SourceAmazonSellerPartnerReportNameGetBrandAnalyticsSearchTermsReport               SourceAmazonSellerPartnerReportName = "GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT"
	SourceAmazonSellerPartnerReportNameGetBrandAnalyticsRepeatPurchaseReport            SourceAmazonSellerPartnerReportName = "GET_BRAND_ANALYTICS_REPEAT_PURCHASE_REPORT"
	SourceAmazonSellerPartnerReportNameGetSalesAndTrafficReport                         SourceAmazonSellerPartnerReportName = "GET_SALES_AND_TRAFFIC_REPORT"
	SourceAmazonSellerPartnerReportNameGetVendorSalesReport                             SourceAmazonSellerPartnerReportName = "GET_VENDOR_SALES_REPORT"
	SourceAmazonSellerPartnerReportNameGetVendorInventoryReport                         SourceAmazonSellerPartnerReportName = "GET_VENDOR_INVENTORY_REPORT"
	SourceAmazonSellerPartnerReportNameGetVendorNetPureProductMarginReport              SourceAmazonSellerPartnerReportName = "GET_VENDOR_NET_PURE_PRODUCT_MARGIN_REPORT"
	SourceAmazonSellerPartnerReportNameGetVendorTrafficReport                           SourceAmazonSellerPartnerReportName = "GET_VENDOR_TRAFFIC_REPORT"
)

func (e SourceAmazonSellerPartnerReportName) ToPointer() *SourceAmazonSellerPartnerReportName {
	return &e
}
func (e *SourceAmazonSellerPartnerReportName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET_AFN_INVENTORY_DATA":
		fallthrough
	case "GET_AFN_INVENTORY_DATA_BY_COUNTRY":
		fallthrough
	case "GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL":
		fallthrough
	case "GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_RETURNS_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_PROMOTION_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_REPLACEMENT_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_REMOVAL_ORDER_DETAIL_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_REMOVAL_SHIPMENT_DETAIL_DATA":
		fallthrough
	case "GET_FBA_INVENTORY_PLANNING_DATA":
		fallthrough
	case "GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA":
		fallthrough
	case "GET_FBA_REIMBURSEMENTS_DATA":
		fallthrough
	case "GET_FBA_SNS_FORECAST_DATA":
		fallthrough
	case "GET_FBA_SNS_PERFORMANCE_DATA":
		fallthrough
	case "GET_FBA_STORAGE_FEE_CHARGES_DATA":
		fallthrough
	case "GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING":
		fallthrough
	case "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL":
		fallthrough
	case "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL":
		fallthrough
	case "GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE":
		fallthrough
	case "GET_FLAT_FILE_OPEN_LISTINGS_DATA":
		fallthrough
	case "GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE":
		fallthrough
	case "GET_LEDGER_DETAIL_VIEW_DATA":
		fallthrough
	case "GET_LEDGER_SUMMARY_VIEW_DATA":
		fallthrough
	case "GET_MERCHANT_CANCELLED_LISTINGS_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_ALL_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT":
		fallthrough
	case "GET_MERCHANT_LISTINGS_INACTIVE_DATA":
		fallthrough
	case "GET_MERCHANTS_LISTINGS_FYP_REPORT":
		fallthrough
	case "GET_ORDER_REPORT_DATA_SHIPPING":
		fallthrough
	case "GET_RESTOCK_INVENTORY_RECOMMENDATIONS_REPORT":
		fallthrough
	case "GET_SELLER_FEEDBACK_DATA":
		fallthrough
	case "GET_STRANDED_INVENTORY_UI_DATA":
		fallthrough
	case "GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE":
		fallthrough
	case "GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL":
		fallthrough
	case "GET_XML_BROWSE_TREE_DATA":
		fallthrough
	case "GET_VENDOR_REAL_TIME_INVENTORY_REPORT":
		fallthrough
	case "GET_BRAND_ANALYTICS_MARKET_BASKET_REPORT":
		fallthrough
	case "GET_BRAND_ANALYTICS_SEARCH_TERMS_REPORT":
		fallthrough
	case "GET_BRAND_ANALYTICS_REPEAT_PURCHASE_REPORT":
		fallthrough
	case "GET_SALES_AND_TRAFFIC_REPORT":
		fallthrough
	case "GET_VENDOR_SALES_REPORT":
		fallthrough
	case "GET_VENDOR_INVENTORY_REPORT":
		fallthrough
	case "GET_VENDOR_NET_PURE_PRODUCT_MARGIN_REPORT":
		fallthrough
	case "GET_VENDOR_TRAFFIC_REPORT":
		*e = SourceAmazonSellerPartnerReportName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerReportName: %v", v)
	}
}

type SourceAmazonSellerPartnerReportOptions struct {
	// List of options
	OptionsList []SourceAmazonSellerPartnerOptionsList `json:"options_list"`
	ReportName  SourceAmazonSellerPartnerReportName    `json:"report_name"`
	StreamName  string                                 `json:"stream_name"`
}

func (o *SourceAmazonSellerPartnerReportOptions) GetOptionsList() []SourceAmazonSellerPartnerOptionsList {
	if o == nil {
		return []SourceAmazonSellerPartnerOptionsList{}
	}
	return o.OptionsList
}

func (o *SourceAmazonSellerPartnerReportOptions) GetReportName() SourceAmazonSellerPartnerReportName {
	if o == nil {
		return SourceAmazonSellerPartnerReportName("")
	}
	return o.ReportName
}

func (o *SourceAmazonSellerPartnerReportOptions) GetStreamName() string {
	if o == nil {
		return ""
	}
	return o.StreamName
}

type AmazonSellerPartner string

const (
	AmazonSellerPartnerAmazonSellerPartner AmazonSellerPartner = "amazon-seller-partner"
)

func (e AmazonSellerPartner) ToPointer() *AmazonSellerPartner {
	return &e
}
func (e *AmazonSellerPartner) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-seller-partner":
		*e = AmazonSellerPartner(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AmazonSellerPartner: %v", v)
	}
}

type SourceAmazonSellerPartner struct {
	// Type of the Account you're going to authorize the Airbyte application by
	AccountType *SourceAmazonSellerPartnerAWSSellerPartnerAccountType `default:"Seller" json:"account_type"`
	authType    *SourceAmazonSellerPartnerAuthType                    `const:"oauth2.0" json:"auth_type,omitempty"`
	// Select the AWS Environment.
	AwsEnvironment *SourceAmazonSellerPartnerAWSEnvironment `default:"PRODUCTION" json:"aws_environment"`
	// Your Login with Amazon Client ID.
	LwaAppID string `json:"lwa_app_id"`
	// Your Login with Amazon Client Secret.
	LwaClientSecret string `json:"lwa_client_secret"`
	// For syncs spanning a large date range, this option is used to request data in a smaller fixed window to improve sync reliability. This time window can be configured granularly by day.
	PeriodInDays *int64 `default:"90" json:"period_in_days"`
	// The Refresh Token obtained via OAuth flow authorization.
	RefreshToken string `json:"refresh_token"`
	// Select the AWS Region.
	Region *SourceAmazonSellerPartnerAWSRegion `default:"US" json:"region"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *time.Time `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. If start date is not provided or older than 2 years ago from today, the date 2 years ago from today will be used.
	ReplicationStartDate *time.Time `json:"replication_start_date,omitempty"`
	// Additional information passed to reports. This varies by report type.
	ReportOptionsList []SourceAmazonSellerPartnerReportOptions `json:"report_options_list,omitempty"`
	sourceType        AmazonSellerPartner                      `const:"amazon-seller-partner" json:"sourceType"`
	// For report based streams with known amount of requests per time period, this option will use waiting time between requests to avoid fatal statuses in reports. See <a href="https://docs.airbyte.com/integrations/sources/amazon-seller-partner#limitations--troubleshooting" target="_blank">Troubleshooting</a> section for more details
	WaitToAvoidFatalErrors *bool `default:"false" json:"wait_to_avoid_fatal_errors"`
}

func (s SourceAmazonSellerPartner) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAmazonSellerPartner) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAmazonSellerPartner) GetAccountType() *SourceAmazonSellerPartnerAWSSellerPartnerAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *SourceAmazonSellerPartner) GetAuthType() *SourceAmazonSellerPartnerAuthType {
	return SourceAmazonSellerPartnerAuthTypeOauth20.ToPointer()
}

func (o *SourceAmazonSellerPartner) GetAwsEnvironment() *SourceAmazonSellerPartnerAWSEnvironment {
	if o == nil {
		return nil
	}
	return o.AwsEnvironment
}

func (o *SourceAmazonSellerPartner) GetLwaAppID() string {
	if o == nil {
		return ""
	}
	return o.LwaAppID
}

func (o *SourceAmazonSellerPartner) GetLwaClientSecret() string {
	if o == nil {
		return ""
	}
	return o.LwaClientSecret
}

func (o *SourceAmazonSellerPartner) GetPeriodInDays() *int64 {
	if o == nil {
		return nil
	}
	return o.PeriodInDays
}

func (o *SourceAmazonSellerPartner) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceAmazonSellerPartner) GetRegion() *SourceAmazonSellerPartnerAWSRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceAmazonSellerPartner) GetReplicationEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationEndDate
}

func (o *SourceAmazonSellerPartner) GetReplicationStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationStartDate
}

func (o *SourceAmazonSellerPartner) GetReportOptionsList() []SourceAmazonSellerPartnerReportOptions {
	if o == nil {
		return nil
	}
	return o.ReportOptionsList
}

func (o *SourceAmazonSellerPartner) GetSourceType() AmazonSellerPartner {
	return AmazonSellerPartnerAmazonSellerPartner
}

func (o *SourceAmazonSellerPartner) GetWaitToAvoidFatalErrors() *bool {
	if o == nil {
		return nil
	}
	return o.WaitToAvoidFatalErrors
}
