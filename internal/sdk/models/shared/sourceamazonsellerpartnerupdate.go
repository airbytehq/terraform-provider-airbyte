// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

// AWSSellerPartnerAccountType - Type of the Account you're going to authorize the Airbyte application by
type AWSSellerPartnerAccountType string

const (
	AWSSellerPartnerAccountTypeSeller AWSSellerPartnerAccountType = "Seller"
	AWSSellerPartnerAccountTypeVendor AWSSellerPartnerAccountType = "Vendor"
)

func (e AWSSellerPartnerAccountType) ToPointer() *AWSSellerPartnerAccountType {
	return &e
}
func (e *AWSSellerPartnerAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Seller":
		fallthrough
	case "Vendor":
		*e = AWSSellerPartnerAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSSellerPartnerAccountType: %v", v)
	}
}

type SourceAmazonSellerPartnerUpdateAuthType string

const (
	SourceAmazonSellerPartnerUpdateAuthTypeOauth20 SourceAmazonSellerPartnerUpdateAuthType = "oauth2.0"
)

func (e SourceAmazonSellerPartnerUpdateAuthType) ToPointer() *SourceAmazonSellerPartnerUpdateAuthType {
	return &e
}
func (e *SourceAmazonSellerPartnerUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceAmazonSellerPartnerUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerUpdateAuthType: %v", v)
	}
}

// AWSEnvironment - Select the AWS Environment.
type AWSEnvironment string

const (
	AWSEnvironmentProduction AWSEnvironment = "PRODUCTION"
	AWSEnvironmentSandbox    AWSEnvironment = "SANDBOX"
)

func (e AWSEnvironment) ToPointer() *AWSEnvironment {
	return &e
}
func (e *AWSEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRODUCTION":
		fallthrough
	case "SANDBOX":
		*e = AWSEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSEnvironment: %v", v)
	}
}

// AWSRegion - Select the AWS Region.
type AWSRegion string

const (
	AWSRegionAe AWSRegion = "AE"
	AWSRegionAu AWSRegion = "AU"
	AWSRegionBe AWSRegion = "BE"
	AWSRegionBr AWSRegion = "BR"
	AWSRegionCa AWSRegion = "CA"
	AWSRegionDe AWSRegion = "DE"
	AWSRegionEg AWSRegion = "EG"
	AWSRegionEs AWSRegion = "ES"
	AWSRegionFr AWSRegion = "FR"
	AWSRegionGb AWSRegion = "GB"
	AWSRegionIn AWSRegion = "IN"
	AWSRegionIt AWSRegion = "IT"
	AWSRegionJp AWSRegion = "JP"
	AWSRegionMx AWSRegion = "MX"
	AWSRegionNl AWSRegion = "NL"
	AWSRegionPl AWSRegion = "PL"
	AWSRegionSa AWSRegion = "SA"
	AWSRegionSe AWSRegion = "SE"
	AWSRegionSg AWSRegion = "SG"
	AWSRegionTr AWSRegion = "TR"
	AWSRegionUk AWSRegion = "UK"
	AWSRegionUs AWSRegion = "US"
)

func (e AWSRegion) ToPointer() *AWSRegion {
	return &e
}
func (e *AWSRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AE":
		fallthrough
	case "AU":
		fallthrough
	case "BE":
		fallthrough
	case "BR":
		fallthrough
	case "CA":
		fallthrough
	case "DE":
		fallthrough
	case "EG":
		fallthrough
	case "ES":
		fallthrough
	case "FR":
		fallthrough
	case "GB":
		fallthrough
	case "IN":
		fallthrough
	case "IT":
		fallthrough
	case "JP":
		fallthrough
	case "MX":
		fallthrough
	case "NL":
		fallthrough
	case "PL":
		fallthrough
	case "SA":
		fallthrough
	case "SE":
		fallthrough
	case "SG":
		fallthrough
	case "TR":
		fallthrough
	case "UK":
		fallthrough
	case "US":
		*e = AWSRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSRegion: %v", v)
	}
}

type OptionsList struct {
	OptionName  string `json:"option_name"`
	OptionValue string `json:"option_value"`
}

func (o *OptionsList) GetOptionName() string {
	if o == nil {
		return ""
	}
	return o.OptionName
}

func (o *OptionsList) GetOptionValue() string {
	if o == nil {
		return ""
	}
	return o.OptionValue
}

type StreamName string

const (
	StreamNameGetAfnInventoryData                              StreamName = "GET_AFN_INVENTORY_DATA"
	StreamNameGetAfnInventoryDataByCountry                     StreamName = "GET_AFN_INVENTORY_DATA_BY_COUNTRY"
	StreamNameGetAmazonFulfilledShipmentsDataGeneral           StreamName = "GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL"
	StreamNameGetFbaEstimatedFbaFeesTxtData                    StreamName = "GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA"
	StreamNameGetFbaFulfillmentCustomerReturnsData             StreamName = "GET_FBA_FULFILLMENT_CUSTOMER_RETURNS_DATA"
	StreamNameGetFbaFulfillmentCustomerShipmentPromotionData   StreamName = "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_PROMOTION_DATA"
	StreamNameGetFbaFulfillmentCustomerShipmentReplacementData StreamName = "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_REPLACEMENT_DATA"
	StreamNameGetFbaFulfillmentRemovalOrderDetailData          StreamName = "GET_FBA_FULFILLMENT_REMOVAL_ORDER_DETAIL_DATA"
	StreamNameGetFbaFulfillmentRemovalShipmentDetailData       StreamName = "GET_FBA_FULFILLMENT_REMOVAL_SHIPMENT_DETAIL_DATA"
	StreamNameGetFbaInventoryPlanningData                      StreamName = "GET_FBA_INVENTORY_PLANNING_DATA"
	StreamNameGetFbaMyiUnsuppressedInventoryData               StreamName = "GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA"
	StreamNameGetFbaReimbursementsData                         StreamName = "GET_FBA_REIMBURSEMENTS_DATA"
	StreamNameGetFbaSnsForecastData                            StreamName = "GET_FBA_SNS_FORECAST_DATA"
	StreamNameGetFbaSnsPerformanceData                         StreamName = "GET_FBA_SNS_PERFORMANCE_DATA"
	StreamNameGetFbaStorageFeeChargesData                      StreamName = "GET_FBA_STORAGE_FEE_CHARGES_DATA"
	StreamNameGetFlatFileActionableOrderDataShipping           StreamName = "GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING"
	StreamNameGetFlatFileAllOrdersDataByLastUpdateGeneral      StreamName = "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL"
	StreamNameGetFlatFileAllOrdersDataByOrderDateGeneral       StreamName = "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL"
	StreamNameGetFlatFileArchivedOrdersDataByOrderDate         StreamName = "GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE"
	StreamNameGetFlatFileOpenListingsData                      StreamName = "GET_FLAT_FILE_OPEN_LISTINGS_DATA"
	StreamNameGetFlatFileReturnsDataByReturnDate               StreamName = "GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE"
	StreamNameGetLedgerDetailViewData                          StreamName = "GET_LEDGER_DETAIL_VIEW_DATA"
	StreamNameGetLedgerSummaryViewData                         StreamName = "GET_LEDGER_SUMMARY_VIEW_DATA"
	StreamNameGetMerchantCancelledListingsData                 StreamName = "GET_MERCHANT_CANCELLED_LISTINGS_DATA"
	StreamNameGetMerchantListingsAllData                       StreamName = "GET_MERCHANT_LISTINGS_ALL_DATA"
	StreamNameGetMerchantListingsData                          StreamName = "GET_MERCHANT_LISTINGS_DATA"
	StreamNameGetMerchantListingsDataBackCompat                StreamName = "GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT"
	StreamNameGetMerchantListingsInactiveData                  StreamName = "GET_MERCHANT_LISTINGS_INACTIVE_DATA"
	StreamNameGetMerchantsListingsFypReport                    StreamName = "GET_MERCHANTS_LISTINGS_FYP_REPORT"
	StreamNameGetOrderReportDataShipping                       StreamName = "GET_ORDER_REPORT_DATA_SHIPPING"
	StreamNameGetRestockInventoryRecommendationsReport         StreamName = "GET_RESTOCK_INVENTORY_RECOMMENDATIONS_REPORT"
	StreamNameGetSellerFeedbackData                            StreamName = "GET_SELLER_FEEDBACK_DATA"
	StreamNameGetStrandedInventoryUIData                       StreamName = "GET_STRANDED_INVENTORY_UI_DATA"
	StreamNameGetV2SettlementReportDataFlatFile                StreamName = "GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE"
	StreamNameGetXMLAllOrdersDataByOrderDateGeneral            StreamName = "GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL"
	StreamNameGetXMLBrowseTreeData                             StreamName = "GET_XML_BROWSE_TREE_DATA"
)

func (e StreamName) ToPointer() *StreamName {
	return &e
}
func (e *StreamName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET_AFN_INVENTORY_DATA":
		fallthrough
	case "GET_AFN_INVENTORY_DATA_BY_COUNTRY":
		fallthrough
	case "GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL":
		fallthrough
	case "GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_RETURNS_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_PROMOTION_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_REPLACEMENT_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_REMOVAL_ORDER_DETAIL_DATA":
		fallthrough
	case "GET_FBA_FULFILLMENT_REMOVAL_SHIPMENT_DETAIL_DATA":
		fallthrough
	case "GET_FBA_INVENTORY_PLANNING_DATA":
		fallthrough
	case "GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA":
		fallthrough
	case "GET_FBA_REIMBURSEMENTS_DATA":
		fallthrough
	case "GET_FBA_SNS_FORECAST_DATA":
		fallthrough
	case "GET_FBA_SNS_PERFORMANCE_DATA":
		fallthrough
	case "GET_FBA_STORAGE_FEE_CHARGES_DATA":
		fallthrough
	case "GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING":
		fallthrough
	case "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL":
		fallthrough
	case "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL":
		fallthrough
	case "GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE":
		fallthrough
	case "GET_FLAT_FILE_OPEN_LISTINGS_DATA":
		fallthrough
	case "GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE":
		fallthrough
	case "GET_LEDGER_DETAIL_VIEW_DATA":
		fallthrough
	case "GET_LEDGER_SUMMARY_VIEW_DATA":
		fallthrough
	case "GET_MERCHANT_CANCELLED_LISTINGS_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_ALL_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_DATA":
		fallthrough
	case "GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT":
		fallthrough
	case "GET_MERCHANT_LISTINGS_INACTIVE_DATA":
		fallthrough
	case "GET_MERCHANTS_LISTINGS_FYP_REPORT":
		fallthrough
	case "GET_ORDER_REPORT_DATA_SHIPPING":
		fallthrough
	case "GET_RESTOCK_INVENTORY_RECOMMENDATIONS_REPORT":
		fallthrough
	case "GET_SELLER_FEEDBACK_DATA":
		fallthrough
	case "GET_STRANDED_INVENTORY_UI_DATA":
		fallthrough
	case "GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE":
		fallthrough
	case "GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL":
		fallthrough
	case "GET_XML_BROWSE_TREE_DATA":
		*e = StreamName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamName: %v", v)
	}
}

type ReportOptions struct {
	// List of options
	OptionsList []OptionsList `json:"options_list"`
	StreamName  StreamName    `json:"stream_name"`
}

func (o *ReportOptions) GetOptionsList() []OptionsList {
	if o == nil {
		return []OptionsList{}
	}
	return o.OptionsList
}

func (o *ReportOptions) GetStreamName() StreamName {
	if o == nil {
		return StreamName("")
	}
	return o.StreamName
}

type SourceAmazonSellerPartnerUpdate struct {
	// Type of the Account you're going to authorize the Airbyte application by
	AccountType *AWSSellerPartnerAccountType             `default:"Seller" json:"account_type"`
	authType    *SourceAmazonSellerPartnerUpdateAuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// Select the AWS Environment.
	AwsEnvironment *AWSEnvironment `default:"PRODUCTION" json:"aws_environment"`
	// Your Login with Amazon Client ID.
	LwaAppID string `json:"lwa_app_id"`
	// Your Login with Amazon Client Secret.
	LwaClientSecret string `json:"lwa_client_secret"`
	// For syncs spanning a large date range, this option is used to request data in a smaller fixed window to improve sync reliability. This time window can be configured granularly by day.
	PeriodInDays *int64 `default:"90" json:"period_in_days"`
	// The Refresh Token obtained via OAuth flow authorization.
	RefreshToken string `json:"refresh_token"`
	// Select the AWS Region.
	Region *AWSRegion `default:"US" json:"region"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *time.Time `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. If start date is not provided, the date 2 years ago from today will be used.
	ReplicationStartDate *time.Time `json:"replication_start_date,omitempty"`
	// Additional information passed to reports. This varies by report type.
	ReportOptionsList []ReportOptions `json:"report_options_list,omitempty"`
}

func (s SourceAmazonSellerPartnerUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAmazonSellerPartnerUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAmazonSellerPartnerUpdate) GetAccountType() *AWSSellerPartnerAccountType {
	if o == nil {
		return nil
	}
	return o.AccountType
}

func (o *SourceAmazonSellerPartnerUpdate) GetAuthType() *SourceAmazonSellerPartnerUpdateAuthType {
	return SourceAmazonSellerPartnerUpdateAuthTypeOauth20.ToPointer()
}

func (o *SourceAmazonSellerPartnerUpdate) GetAwsEnvironment() *AWSEnvironment {
	if o == nil {
		return nil
	}
	return o.AwsEnvironment
}

func (o *SourceAmazonSellerPartnerUpdate) GetLwaAppID() string {
	if o == nil {
		return ""
	}
	return o.LwaAppID
}

func (o *SourceAmazonSellerPartnerUpdate) GetLwaClientSecret() string {
	if o == nil {
		return ""
	}
	return o.LwaClientSecret
}

func (o *SourceAmazonSellerPartnerUpdate) GetPeriodInDays() *int64 {
	if o == nil {
		return nil
	}
	return o.PeriodInDays
}

func (o *SourceAmazonSellerPartnerUpdate) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceAmazonSellerPartnerUpdate) GetRegion() *AWSRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceAmazonSellerPartnerUpdate) GetReplicationEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationEndDate
}

func (o *SourceAmazonSellerPartnerUpdate) GetReplicationStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationStartDate
}

func (o *SourceAmazonSellerPartnerUpdate) GetReportOptionsList() []ReportOptions {
	if o == nil {
		return nil
	}
	return o.ReportOptionsList
}
