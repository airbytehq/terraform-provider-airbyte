// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
	"time"
)

type Reddit string

const (
	RedditReddit Reddit = "reddit"
)

func (e Reddit) ToPointer() *Reddit {
	return &e
}
func (e *Reddit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reddit":
		*e = Reddit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Reddit: %v", v)
	}
}

type SourceReddit struct {
	APIKey string `json:"api_key"`
	// Specifies exact keyword and reduces distractions
	Exact *bool `json:"exact,omitempty"`
	// Includes mature content
	IncludeOver18 *bool `default:"false" json:"include_over_18"`
	// Max records per page limit
	Limit *float64 `default:"1000" json:"limit"`
	// Specifies the query for searching in reddits and subreddits
	Query      *string   `default:"airbyte" json:"query"`
	sourceType Reddit    `const:"reddit" json:"sourceType"`
	StartDate  time.Time `json:"start_date"`
	// Subreddits for exploration
	Subreddits []any `json:"subreddits,omitempty"`
}

func (s SourceReddit) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceReddit) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceReddit) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceReddit) GetExact() *bool {
	if o == nil {
		return nil
	}
	return o.Exact
}

func (o *SourceReddit) GetIncludeOver18() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeOver18
}

func (o *SourceReddit) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SourceReddit) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SourceReddit) GetSourceType() Reddit {
	return RedditReddit
}

func (o *SourceReddit) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceReddit) GetSubreddits() []any {
	if o == nil {
		return nil
	}
	return o.Subreddits
}
