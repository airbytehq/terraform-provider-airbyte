// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceMysqlUpdateSchemasMethod string

const (
	SourceMysqlUpdateSchemasMethodStandard SourceMysqlUpdateSchemasMethod = "STANDARD"
)

func (e SourceMysqlUpdateSchemasMethod) ToPointer() *SourceMysqlUpdateSchemasMethod {
	return &e
}
func (e *SourceMysqlUpdateSchemasMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STANDARD":
		*e = SourceMysqlUpdateSchemasMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasMethod: %v", v)
	}
}

// SourceMysqlUpdateScanChangesWithUserDefinedCursor - Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
type SourceMysqlUpdateScanChangesWithUserDefinedCursor struct {
	method SourceMysqlUpdateSchemasMethod `const:"STANDARD" json:"method"`
}

func (s SourceMysqlUpdateScanChangesWithUserDefinedCursor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdateScanChangesWithUserDefinedCursor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdateScanChangesWithUserDefinedCursor) GetMethod() SourceMysqlUpdateSchemasMethod {
	return SourceMysqlUpdateSchemasMethodStandard
}

// SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced - Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
type SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced string

const (
	SourceMysqlUpdateInvalidCDCPositionBehaviorAdvancedFailSync   SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced = "Fail sync"
	SourceMysqlUpdateInvalidCDCPositionBehaviorAdvancedReSyncData SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced = "Re-sync data"
)

func (e SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced) ToPointer() *SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced {
	return &e
}
func (e *SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Fail sync":
		fallthrough
	case "Re-sync data":
		*e = SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced: %v", v)
	}
}

type SourceMysqlUpdateSchemasReplicationMethodMethod string

const (
	SourceMysqlUpdateSchemasReplicationMethodMethodCdc SourceMysqlUpdateSchemasReplicationMethodMethod = "CDC"
)

func (e SourceMysqlUpdateSchemasReplicationMethodMethod) ToPointer() *SourceMysqlUpdateSchemasReplicationMethodMethod {
	return &e
}
func (e *SourceMysqlUpdateSchemasReplicationMethodMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CDC":
		*e = SourceMysqlUpdateSchemasReplicationMethodMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasReplicationMethodMethod: %v", v)
	}
}

// ReadChangesUsingBinaryLogCDC - <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the MySQL <a href="https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc">binary log</a>. This must be enabled on your database.
type ReadChangesUsingBinaryLogCDC struct {
	// The amount of time an initial load is allowed to continue for before catching up on CDC logs.
	InitialLoadTimeoutHours *int64 `default:"8" json:"initial_load_timeout_hours"`
	// The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc">initial waiting time</a>.
	InitialWaitingSeconds *int64 `default:"300" json:"initial_waiting_seconds"`
	// Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.
	InvalidCdcCursorPositionBehavior *SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced `default:"Fail sync" json:"invalid_cdc_cursor_position_behavior"`
	method                           SourceMysqlUpdateSchemasReplicationMethodMethod      `const:"CDC" json:"method"`
	// Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
	ServerTimeZone *string `json:"server_time_zone,omitempty"`
}

func (r ReadChangesUsingBinaryLogCDC) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReadChangesUsingBinaryLogCDC) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ReadChangesUsingBinaryLogCDC) GetInitialLoadTimeoutHours() *int64 {
	if o == nil {
		return nil
	}
	return o.InitialLoadTimeoutHours
}

func (o *ReadChangesUsingBinaryLogCDC) GetInitialWaitingSeconds() *int64 {
	if o == nil {
		return nil
	}
	return o.InitialWaitingSeconds
}

func (o *ReadChangesUsingBinaryLogCDC) GetInvalidCdcCursorPositionBehavior() *SourceMysqlUpdateInvalidCDCPositionBehaviorAdvanced {
	if o == nil {
		return nil
	}
	return o.InvalidCdcCursorPositionBehavior
}

func (o *ReadChangesUsingBinaryLogCDC) GetMethod() SourceMysqlUpdateSchemasReplicationMethodMethod {
	return SourceMysqlUpdateSchemasReplicationMethodMethodCdc
}

func (o *ReadChangesUsingBinaryLogCDC) GetServerTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.ServerTimeZone
}

type SourceMysqlUpdateUpdateMethodType string

const (
	SourceMysqlUpdateUpdateMethodTypeReadChangesUsingBinaryLogCDC                      SourceMysqlUpdateUpdateMethodType = "Read Changes using Binary Log (CDC)"
	SourceMysqlUpdateUpdateMethodTypeSourceMysqlUpdateScanChangesWithUserDefinedCursor SourceMysqlUpdateUpdateMethodType = "source-mysql-update_Scan Changes with User Defined Cursor"
)

// SourceMysqlUpdateUpdateMethod - Configures how data is extracted from the database.
type SourceMysqlUpdateUpdateMethod struct {
	ReadChangesUsingBinaryLogCDC                      *ReadChangesUsingBinaryLogCDC
	SourceMysqlUpdateScanChangesWithUserDefinedCursor *SourceMysqlUpdateScanChangesWithUserDefinedCursor

	Type SourceMysqlUpdateUpdateMethodType
}

func CreateSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCDC(readChangesUsingBinaryLogCDC ReadChangesUsingBinaryLogCDC) SourceMysqlUpdateUpdateMethod {
	typ := SourceMysqlUpdateUpdateMethodTypeReadChangesUsingBinaryLogCDC

	return SourceMysqlUpdateUpdateMethod{
		ReadChangesUsingBinaryLogCDC: &readChangesUsingBinaryLogCDC,
		Type:                         typ,
	}
}

func CreateSourceMysqlUpdateUpdateMethodSourceMysqlUpdateScanChangesWithUserDefinedCursor(sourceMysqlUpdateScanChangesWithUserDefinedCursor SourceMysqlUpdateScanChangesWithUserDefinedCursor) SourceMysqlUpdateUpdateMethod {
	typ := SourceMysqlUpdateUpdateMethodTypeSourceMysqlUpdateScanChangesWithUserDefinedCursor

	return SourceMysqlUpdateUpdateMethod{
		SourceMysqlUpdateScanChangesWithUserDefinedCursor: &sourceMysqlUpdateScanChangesWithUserDefinedCursor,
		Type: typ,
	}
}

func (u *SourceMysqlUpdateUpdateMethod) UnmarshalJSON(data []byte) error {

	var sourceMysqlUpdateScanChangesWithUserDefinedCursor SourceMysqlUpdateScanChangesWithUserDefinedCursor = SourceMysqlUpdateScanChangesWithUserDefinedCursor{}
	if err := utils.UnmarshalJSON(data, &sourceMysqlUpdateScanChangesWithUserDefinedCursor, "", true, true); err == nil {
		u.SourceMysqlUpdateScanChangesWithUserDefinedCursor = &sourceMysqlUpdateScanChangesWithUserDefinedCursor
		u.Type = SourceMysqlUpdateUpdateMethodTypeSourceMysqlUpdateScanChangesWithUserDefinedCursor
		return nil
	}

	var readChangesUsingBinaryLogCDC ReadChangesUsingBinaryLogCDC = ReadChangesUsingBinaryLogCDC{}
	if err := utils.UnmarshalJSON(data, &readChangesUsingBinaryLogCDC, "", true, true); err == nil {
		u.ReadChangesUsingBinaryLogCDC = &readChangesUsingBinaryLogCDC
		u.Type = SourceMysqlUpdateUpdateMethodTypeReadChangesUsingBinaryLogCDC
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceMysqlUpdateUpdateMethod", string(data))
}

func (u SourceMysqlUpdateUpdateMethod) MarshalJSON() ([]byte, error) {
	if u.ReadChangesUsingBinaryLogCDC != nil {
		return utils.MarshalJSON(u.ReadChangesUsingBinaryLogCDC, "", true)
	}

	if u.SourceMysqlUpdateScanChangesWithUserDefinedCursor != nil {
		return utils.MarshalJSON(u.SourceMysqlUpdateScanChangesWithUserDefinedCursor, "", true)
	}

	return nil, errors.New("could not marshal union type SourceMysqlUpdateUpdateMethod: all fields are null")
}

type SourceMysqlUpdateSchemasSSLModeSSLModesMode string

const (
	SourceMysqlUpdateSchemasSSLModeSSLModesModeVerifyIdentity SourceMysqlUpdateSchemasSSLModeSSLModesMode = "verify_identity"
)

func (e SourceMysqlUpdateSchemasSSLModeSSLModesMode) ToPointer() *SourceMysqlUpdateSchemasSSLModeSSLModesMode {
	return &e
}
func (e *SourceMysqlUpdateSchemasSSLModeSSLModesMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify_identity":
		*e = SourceMysqlUpdateSchemasSSLModeSSLModesMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasSSLModeSSLModesMode: %v", v)
	}
}

// VerifyIdentity - Always connect with SSL. Verify both CA and Hostname.
type VerifyIdentity struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate (this is not a required field, but if you want to use it, you will need to add the <b>Client key</b> as well)
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key (this is not a required field, but if you want to use it, you will need to add the <b>Client certificate</b> as well)
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                     `json:"client_key_password,omitempty"`
	mode              SourceMysqlUpdateSchemasSSLModeSSLModesMode `const:"verify_identity" json:"mode"`
}

func (v VerifyIdentity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VerifyIdentity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *VerifyIdentity) GetCaCertificate() string {
	if o == nil {
		return ""
	}
	return o.CaCertificate
}

func (o *VerifyIdentity) GetClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertificate
}

func (o *VerifyIdentity) GetClientKey() *string {
	if o == nil {
		return nil
	}
	return o.ClientKey
}

func (o *VerifyIdentity) GetClientKeyPassword() *string {
	if o == nil {
		return nil
	}
	return o.ClientKeyPassword
}

func (o *VerifyIdentity) GetMode() SourceMysqlUpdateSchemasSSLModeSSLModesMode {
	return SourceMysqlUpdateSchemasSSLModeSSLModesModeVerifyIdentity
}

type SourceMysqlUpdateSchemasSslModeMode string

const (
	SourceMysqlUpdateSchemasSslModeModeVerifyCa SourceMysqlUpdateSchemasSslModeMode = "verify_ca"
)

func (e SourceMysqlUpdateSchemasSslModeMode) ToPointer() *SourceMysqlUpdateSchemasSslModeMode {
	return &e
}
func (e *SourceMysqlUpdateSchemasSslModeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify_ca":
		*e = SourceMysqlUpdateSchemasSslModeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasSslModeMode: %v", v)
	}
}

// SourceMysqlUpdateVerifyCA - Always connect with SSL. Verifies CA, but allows connection even if Hostname does not match.
type SourceMysqlUpdateVerifyCA struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate (this is not a required field, but if you want to use it, you will need to add the <b>Client key</b> as well)
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key (this is not a required field, but if you want to use it, you will need to add the <b>Client certificate</b> as well)
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                             `json:"client_key_password,omitempty"`
	mode              SourceMysqlUpdateSchemasSslModeMode `const:"verify_ca" json:"mode"`
}

func (s SourceMysqlUpdateVerifyCA) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdateVerifyCA) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdateVerifyCA) GetCaCertificate() string {
	if o == nil {
		return ""
	}
	return o.CaCertificate
}

func (o *SourceMysqlUpdateVerifyCA) GetClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertificate
}

func (o *SourceMysqlUpdateVerifyCA) GetClientKey() *string {
	if o == nil {
		return nil
	}
	return o.ClientKey
}

func (o *SourceMysqlUpdateVerifyCA) GetClientKeyPassword() *string {
	if o == nil {
		return nil
	}
	return o.ClientKeyPassword
}

func (o *SourceMysqlUpdateVerifyCA) GetMode() SourceMysqlUpdateSchemasSslModeMode {
	return SourceMysqlUpdateSchemasSslModeModeVerifyCa
}

type SourceMysqlUpdateSchemasMode string

const (
	SourceMysqlUpdateSchemasModeRequired SourceMysqlUpdateSchemasMode = "required"
)

func (e SourceMysqlUpdateSchemasMode) ToPointer() *SourceMysqlUpdateSchemasMode {
	return &e
}
func (e *SourceMysqlUpdateSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "required":
		*e = SourceMysqlUpdateSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasMode: %v", v)
	}
}

// Required - Always connect with SSL. If the MySQL server doesn’t support SSL, the connection will not be established. Certificate Authority (CA) and Hostname are not verified.
type Required struct {
	mode SourceMysqlUpdateSchemasMode `const:"required" json:"mode"`
}

func (r Required) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Required) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Required) GetMode() SourceMysqlUpdateSchemasMode {
	return SourceMysqlUpdateSchemasModeRequired
}

type SourceMysqlUpdateMode string

const (
	SourceMysqlUpdateModePreferred SourceMysqlUpdateMode = "preferred"
)

func (e SourceMysqlUpdateMode) ToPointer() *SourceMysqlUpdateMode {
	return &e
}
func (e *SourceMysqlUpdateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preferred":
		*e = SourceMysqlUpdateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateMode: %v", v)
	}
}

// Preferred - Automatically attempt SSL connection. If the MySQL server does not support SSL, continue with a regular connection.
type Preferred struct {
	mode SourceMysqlUpdateMode `const:"preferred" json:"mode"`
}

func (p Preferred) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Preferred) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Preferred) GetMode() SourceMysqlUpdateMode {
	return SourceMysqlUpdateModePreferred
}

type SourceMysqlUpdateSSLModesType string

const (
	SourceMysqlUpdateSSLModesTypePreferred                 SourceMysqlUpdateSSLModesType = "preferred"
	SourceMysqlUpdateSSLModesTypeRequired                  SourceMysqlUpdateSSLModesType = "required"
	SourceMysqlUpdateSSLModesTypeSourceMysqlUpdateVerifyCA SourceMysqlUpdateSSLModesType = "source-mysql-update_Verify CA"
	SourceMysqlUpdateSSLModesTypeVerifyIdentity            SourceMysqlUpdateSSLModesType = "Verify Identity"
)

// SourceMysqlUpdateSSLModes - SSL connection modes. Read more <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-using-ssl.html"> in the docs</a>.
type SourceMysqlUpdateSSLModes struct {
	Preferred                 *Preferred
	Required                  *Required
	SourceMysqlUpdateVerifyCA *SourceMysqlUpdateVerifyCA
	VerifyIdentity            *VerifyIdentity

	Type SourceMysqlUpdateSSLModesType
}

func CreateSourceMysqlUpdateSSLModesPreferred(preferred Preferred) SourceMysqlUpdateSSLModes {
	typ := SourceMysqlUpdateSSLModesTypePreferred

	return SourceMysqlUpdateSSLModes{
		Preferred: &preferred,
		Type:      typ,
	}
}

func CreateSourceMysqlUpdateSSLModesRequired(required Required) SourceMysqlUpdateSSLModes {
	typ := SourceMysqlUpdateSSLModesTypeRequired

	return SourceMysqlUpdateSSLModes{
		Required: &required,
		Type:     typ,
	}
}

func CreateSourceMysqlUpdateSSLModesSourceMysqlUpdateVerifyCA(sourceMysqlUpdateVerifyCA SourceMysqlUpdateVerifyCA) SourceMysqlUpdateSSLModes {
	typ := SourceMysqlUpdateSSLModesTypeSourceMysqlUpdateVerifyCA

	return SourceMysqlUpdateSSLModes{
		SourceMysqlUpdateVerifyCA: &sourceMysqlUpdateVerifyCA,
		Type:                      typ,
	}
}

func CreateSourceMysqlUpdateSSLModesVerifyIdentity(verifyIdentity VerifyIdentity) SourceMysqlUpdateSSLModes {
	typ := SourceMysqlUpdateSSLModesTypeVerifyIdentity

	return SourceMysqlUpdateSSLModes{
		VerifyIdentity: &verifyIdentity,
		Type:           typ,
	}
}

func (u *SourceMysqlUpdateSSLModes) UnmarshalJSON(data []byte) error {

	var preferred Preferred = Preferred{}
	if err := utils.UnmarshalJSON(data, &preferred, "", true, true); err == nil {
		u.Preferred = &preferred
		u.Type = SourceMysqlUpdateSSLModesTypePreferred
		return nil
	}

	var required Required = Required{}
	if err := utils.UnmarshalJSON(data, &required, "", true, true); err == nil {
		u.Required = &required
		u.Type = SourceMysqlUpdateSSLModesTypeRequired
		return nil
	}

	var sourceMysqlUpdateVerifyCA SourceMysqlUpdateVerifyCA = SourceMysqlUpdateVerifyCA{}
	if err := utils.UnmarshalJSON(data, &sourceMysqlUpdateVerifyCA, "", true, true); err == nil {
		u.SourceMysqlUpdateVerifyCA = &sourceMysqlUpdateVerifyCA
		u.Type = SourceMysqlUpdateSSLModesTypeSourceMysqlUpdateVerifyCA
		return nil
	}

	var verifyIdentity VerifyIdentity = VerifyIdentity{}
	if err := utils.UnmarshalJSON(data, &verifyIdentity, "", true, true); err == nil {
		u.VerifyIdentity = &verifyIdentity
		u.Type = SourceMysqlUpdateSSLModesTypeVerifyIdentity
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceMysqlUpdateSSLModes", string(data))
}

func (u SourceMysqlUpdateSSLModes) MarshalJSON() ([]byte, error) {
	if u.Preferred != nil {
		return utils.MarshalJSON(u.Preferred, "", true)
	}

	if u.Required != nil {
		return utils.MarshalJSON(u.Required, "", true)
	}

	if u.SourceMysqlUpdateVerifyCA != nil {
		return utils.MarshalJSON(u.SourceMysqlUpdateVerifyCA, "", true)
	}

	if u.VerifyIdentity != nil {
		return utils.MarshalJSON(u.VerifyIdentity, "", true)
	}

	return nil, errors.New("could not marshal union type SourceMysqlUpdateSSLModes: all fields are null")
}

// SourceMysqlUpdateSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceMysqlUpdateSchemasTunnelMethodTunnelMethod string

const (
	SourceMysqlUpdateSchemasTunnelMethodTunnelMethodSSHPasswordAuth SourceMysqlUpdateSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceMysqlUpdateSchemasTunnelMethodTunnelMethod) ToPointer() *SourceMysqlUpdateSchemasTunnelMethodTunnelMethod {
	return &e
}
func (e *SourceMysqlUpdateSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceMysqlUpdateSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

type SourceMysqlUpdatePasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod SourceMysqlUpdateSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (s SourceMysqlUpdatePasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdatePasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdatePasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceMysqlUpdatePasswordAuthentication) GetTunnelMethod() SourceMysqlUpdateSchemasTunnelMethodTunnelMethod {
	return SourceMysqlUpdateSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *SourceMysqlUpdatePasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceMysqlUpdatePasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *SourceMysqlUpdatePasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// SourceMysqlUpdateSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceMysqlUpdateSchemasTunnelMethod string

const (
	SourceMysqlUpdateSchemasTunnelMethodSSHKeyAuth SourceMysqlUpdateSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceMysqlUpdateSchemasTunnelMethod) ToPointer() *SourceMysqlUpdateSchemasTunnelMethod {
	return &e
}
func (e *SourceMysqlUpdateSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceMysqlUpdateSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateSchemasTunnelMethod: %v", v)
	}
}

type SourceMysqlUpdateSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod SourceMysqlUpdateSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (s SourceMysqlUpdateSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdateSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdateSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *SourceMysqlUpdateSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceMysqlUpdateSSHKeyAuthentication) GetTunnelMethod() SourceMysqlUpdateSchemasTunnelMethod {
	return SourceMysqlUpdateSchemasTunnelMethodSSHKeyAuth
}

func (o *SourceMysqlUpdateSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceMysqlUpdateSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// SourceMysqlUpdateTunnelMethod - No ssh tunnel needed to connect to database
type SourceMysqlUpdateTunnelMethod string

const (
	SourceMysqlUpdateTunnelMethodNoTunnel SourceMysqlUpdateTunnelMethod = "NO_TUNNEL"
)

func (e SourceMysqlUpdateTunnelMethod) ToPointer() *SourceMysqlUpdateTunnelMethod {
	return &e
}
func (e *SourceMysqlUpdateTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceMysqlUpdateTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMysqlUpdateTunnelMethod: %v", v)
	}
}

type SourceMysqlUpdateNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod SourceMysqlUpdateTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (s SourceMysqlUpdateNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdateNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdateNoTunnel) GetTunnelMethod() SourceMysqlUpdateTunnelMethod {
	return SourceMysqlUpdateTunnelMethodNoTunnel
}

type SourceMysqlUpdateSSHTunnelMethodType string

const (
	SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateNoTunnel               SourceMysqlUpdateSSHTunnelMethodType = "source-mysql-update_No Tunnel"
	SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateSSHKeyAuthentication   SourceMysqlUpdateSSHTunnelMethodType = "source-mysql-update_SSH Key Authentication"
	SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdatePasswordAuthentication SourceMysqlUpdateSSHTunnelMethodType = "source-mysql-update_Password Authentication"
)

// SourceMysqlUpdateSSHTunnelMethod - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceMysqlUpdateSSHTunnelMethod struct {
	SourceMysqlUpdateNoTunnel               *SourceMysqlUpdateNoTunnel
	SourceMysqlUpdateSSHKeyAuthentication   *SourceMysqlUpdateSSHKeyAuthentication
	SourceMysqlUpdatePasswordAuthentication *SourceMysqlUpdatePasswordAuthentication

	Type SourceMysqlUpdateSSHTunnelMethodType
}

func CreateSourceMysqlUpdateSSHTunnelMethodSourceMysqlUpdateNoTunnel(sourceMysqlUpdateNoTunnel SourceMysqlUpdateNoTunnel) SourceMysqlUpdateSSHTunnelMethod {
	typ := SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateNoTunnel

	return SourceMysqlUpdateSSHTunnelMethod{
		SourceMysqlUpdateNoTunnel: &sourceMysqlUpdateNoTunnel,
		Type:                      typ,
	}
}

func CreateSourceMysqlUpdateSSHTunnelMethodSourceMysqlUpdateSSHKeyAuthentication(sourceMysqlUpdateSSHKeyAuthentication SourceMysqlUpdateSSHKeyAuthentication) SourceMysqlUpdateSSHTunnelMethod {
	typ := SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateSSHKeyAuthentication

	return SourceMysqlUpdateSSHTunnelMethod{
		SourceMysqlUpdateSSHKeyAuthentication: &sourceMysqlUpdateSSHKeyAuthentication,
		Type:                                  typ,
	}
}

func CreateSourceMysqlUpdateSSHTunnelMethodSourceMysqlUpdatePasswordAuthentication(sourceMysqlUpdatePasswordAuthentication SourceMysqlUpdatePasswordAuthentication) SourceMysqlUpdateSSHTunnelMethod {
	typ := SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdatePasswordAuthentication

	return SourceMysqlUpdateSSHTunnelMethod{
		SourceMysqlUpdatePasswordAuthentication: &sourceMysqlUpdatePasswordAuthentication,
		Type:                                    typ,
	}
}

func (u *SourceMysqlUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	var sourceMysqlUpdateNoTunnel SourceMysqlUpdateNoTunnel = SourceMysqlUpdateNoTunnel{}
	if err := utils.UnmarshalJSON(data, &sourceMysqlUpdateNoTunnel, "", true, true); err == nil {
		u.SourceMysqlUpdateNoTunnel = &sourceMysqlUpdateNoTunnel
		u.Type = SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateNoTunnel
		return nil
	}

	var sourceMysqlUpdateSSHKeyAuthentication SourceMysqlUpdateSSHKeyAuthentication = SourceMysqlUpdateSSHKeyAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceMysqlUpdateSSHKeyAuthentication, "", true, true); err == nil {
		u.SourceMysqlUpdateSSHKeyAuthentication = &sourceMysqlUpdateSSHKeyAuthentication
		u.Type = SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdateSSHKeyAuthentication
		return nil
	}

	var sourceMysqlUpdatePasswordAuthentication SourceMysqlUpdatePasswordAuthentication = SourceMysqlUpdatePasswordAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceMysqlUpdatePasswordAuthentication, "", true, true); err == nil {
		u.SourceMysqlUpdatePasswordAuthentication = &sourceMysqlUpdatePasswordAuthentication
		u.Type = SourceMysqlUpdateSSHTunnelMethodTypeSourceMysqlUpdatePasswordAuthentication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceMysqlUpdateSSHTunnelMethod", string(data))
}

func (u SourceMysqlUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceMysqlUpdateNoTunnel != nil {
		return utils.MarshalJSON(u.SourceMysqlUpdateNoTunnel, "", true)
	}

	if u.SourceMysqlUpdateSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceMysqlUpdateSSHKeyAuthentication, "", true)
	}

	if u.SourceMysqlUpdatePasswordAuthentication != nil {
		return utils.MarshalJSON(u.SourceMysqlUpdatePasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type SourceMysqlUpdateSSHTunnelMethod: all fields are null")
}

type SourceMysqlUpdate struct {
	// The database name.
	Database string `json:"database"`
	// The host name of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3). For more information read about <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-jdbc-url-format.html">JDBC URL parameters</a>.
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with the username.
	Password *string `json:"password,omitempty"`
	// The port to connect to.
	Port *int64 `default:"3306" json:"port"`
	// Configures how data is extracted from the database.
	ReplicationMethod SourceMysqlUpdateUpdateMethod `json:"replication_method"`
	// Encrypt data using SSL.
	Ssl *bool `default:"true" json:"ssl"`
	// SSL connection modes. Read more <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-using-ssl.html"> in the docs</a>.
	SslMode *SourceMysqlUpdateSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceMysqlUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}

func (s SourceMysqlUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMysqlUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMysqlUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceMysqlUpdate) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceMysqlUpdate) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *SourceMysqlUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceMysqlUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceMysqlUpdate) GetReplicationMethod() SourceMysqlUpdateUpdateMethod {
	if o == nil {
		return SourceMysqlUpdateUpdateMethod{}
	}
	return o.ReplicationMethod
}

func (o *SourceMysqlUpdate) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *SourceMysqlUpdate) GetSslMode() *SourceMysqlUpdateSSLModes {
	if o == nil {
		return nil
	}
	return o.SslMode
}

func (o *SourceMysqlUpdate) GetTunnelMethod() *SourceMysqlUpdateSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *SourceMysqlUpdate) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
