// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceClickhouseClickhouse string

const (
	SourceClickhouseClickhouseClickhouse SourceClickhouseClickhouse = "clickhouse"
)

func (e SourceClickhouseClickhouse) ToPointer() *SourceClickhouseClickhouse {
	return &e
}
func (e *SourceClickhouseClickhouse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = SourceClickhouseClickhouse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseClickhouse: %v", v)
	}
}

// SourceClickhouseSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceClickhouseSchemasTunnelMethodTunnelMethod string

const (
	SourceClickhouseSchemasTunnelMethodTunnelMethodSSHPasswordAuth SourceClickhouseSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceClickhouseSchemasTunnelMethodTunnelMethod) ToPointer() *SourceClickhouseSchemasTunnelMethodTunnelMethod {
	return &e
}
func (e *SourceClickhouseSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceClickhouseSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

type SourceClickhousePasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod SourceClickhouseSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (s SourceClickhousePasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceClickhousePasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceClickhousePasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceClickhousePasswordAuthentication) GetTunnelMethod() SourceClickhouseSchemasTunnelMethodTunnelMethod {
	return SourceClickhouseSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *SourceClickhousePasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceClickhousePasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *SourceClickhousePasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// SourceClickhouseSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceClickhouseSchemasTunnelMethod string

const (
	SourceClickhouseSchemasTunnelMethodSSHKeyAuth SourceClickhouseSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceClickhouseSchemasTunnelMethod) ToPointer() *SourceClickhouseSchemasTunnelMethod {
	return &e
}
func (e *SourceClickhouseSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceClickhouseSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseSchemasTunnelMethod: %v", v)
	}
}

type SourceClickhouseSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod SourceClickhouseSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (s SourceClickhouseSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceClickhouseSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceClickhouseSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *SourceClickhouseSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceClickhouseSSHKeyAuthentication) GetTunnelMethod() SourceClickhouseSchemasTunnelMethod {
	return SourceClickhouseSchemasTunnelMethodSSHKeyAuth
}

func (o *SourceClickhouseSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceClickhouseSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// SourceClickhouseTunnelMethod - No ssh tunnel needed to connect to database
type SourceClickhouseTunnelMethod string

const (
	SourceClickhouseTunnelMethodNoTunnel SourceClickhouseTunnelMethod = "NO_TUNNEL"
)

func (e SourceClickhouseTunnelMethod) ToPointer() *SourceClickhouseTunnelMethod {
	return &e
}
func (e *SourceClickhouseTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceClickhouseTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseTunnelMethod: %v", v)
	}
}

type SourceClickhouseNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod SourceClickhouseTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (s SourceClickhouseNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceClickhouseNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceClickhouseNoTunnel) GetTunnelMethod() SourceClickhouseTunnelMethod {
	return SourceClickhouseTunnelMethodNoTunnel
}

type SourceClickhouseSSHTunnelMethodType string

const (
	SourceClickhouseSSHTunnelMethodTypeSourceClickhouseNoTunnel               SourceClickhouseSSHTunnelMethodType = "source-clickhouse_No Tunnel"
	SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHKeyAuthentication   SourceClickhouseSSHTunnelMethodType = "source-clickhouse_SSH Key Authentication"
	SourceClickhouseSSHTunnelMethodTypeSourceClickhousePasswordAuthentication SourceClickhouseSSHTunnelMethodType = "source-clickhouse_Password Authentication"
)

// SourceClickhouseSSHTunnelMethod - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseSSHTunnelMethod struct {
	SourceClickhouseNoTunnel               *SourceClickhouseNoTunnel
	SourceClickhouseSSHKeyAuthentication   *SourceClickhouseSSHKeyAuthentication
	SourceClickhousePasswordAuthentication *SourceClickhousePasswordAuthentication

	Type SourceClickhouseSSHTunnelMethodType
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhouseNoTunnel(sourceClickhouseNoTunnel SourceClickhouseNoTunnel) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhouseNoTunnel

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhouseNoTunnel: &sourceClickhouseNoTunnel,
		Type:                     typ,
	}
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhouseSSHKeyAuthentication(sourceClickhouseSSHKeyAuthentication SourceClickhouseSSHKeyAuthentication) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHKeyAuthentication

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhouseSSHKeyAuthentication: &sourceClickhouseSSHKeyAuthentication,
		Type:                                 typ,
	}
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhousePasswordAuthentication(sourceClickhousePasswordAuthentication SourceClickhousePasswordAuthentication) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhousePasswordAuthentication

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhousePasswordAuthentication: &sourceClickhousePasswordAuthentication,
		Type:                                   typ,
	}
}

func (u *SourceClickhouseSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	var sourceClickhouseNoTunnel SourceClickhouseNoTunnel = SourceClickhouseNoTunnel{}
	if err := utils.UnmarshalJSON(data, &sourceClickhouseNoTunnel, "", true, true); err == nil {
		u.SourceClickhouseNoTunnel = &sourceClickhouseNoTunnel
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhouseNoTunnel
		return nil
	}

	var sourceClickhouseSSHKeyAuthentication SourceClickhouseSSHKeyAuthentication = SourceClickhouseSSHKeyAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceClickhouseSSHKeyAuthentication, "", true, true); err == nil {
		u.SourceClickhouseSSHKeyAuthentication = &sourceClickhouseSSHKeyAuthentication
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHKeyAuthentication
		return nil
	}

	var sourceClickhousePasswordAuthentication SourceClickhousePasswordAuthentication = SourceClickhousePasswordAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceClickhousePasswordAuthentication, "", true, true); err == nil {
		u.SourceClickhousePasswordAuthentication = &sourceClickhousePasswordAuthentication
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhousePasswordAuthentication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceClickhouseSSHTunnelMethod", string(data))
}

func (u SourceClickhouseSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceClickhouseNoTunnel != nil {
		return utils.MarshalJSON(u.SourceClickhouseNoTunnel, "", true)
	}

	if u.SourceClickhouseSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceClickhouseSSHKeyAuthentication, "", true)
	}

	if u.SourceClickhousePasswordAuthentication != nil {
		return utils.MarshalJSON(u.SourceClickhousePasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type SourceClickhouseSSHTunnelMethod: all fields are null")
}

type SourceClickhouse struct {
	// The name of the database.
	Database string `json:"database"`
	// The host endpoint of the Clickhouse cluster.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the database.
	Port       *int64                     `default:"8123" json:"port"`
	sourceType SourceClickhouseClickhouse `const:"clickhouse" json:"sourceType"`
	// Encrypt data using SSL.
	Ssl *bool `default:"true" json:"ssl"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceClickhouseSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}

func (s SourceClickhouse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceClickhouse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceClickhouse) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceClickhouse) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceClickhouse) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *SourceClickhouse) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceClickhouse) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceClickhouse) GetSourceType() SourceClickhouseClickhouse {
	return SourceClickhouseClickhouseClickhouse
}

func (o *SourceClickhouse) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *SourceClickhouse) GetTunnelMethod() *SourceClickhouseSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *SourceClickhouse) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
