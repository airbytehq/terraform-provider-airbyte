// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Productive string

const (
	ProductiveProductive Productive = "productive"
)

func (e Productive) ToPointer() *Productive {
	return &e
}
func (e *Productive) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "productive":
		*e = Productive(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Productive: %v", v)
	}
}

type SourceProductive struct {
	APIKey string `json:"api_key"`
	// The organization ID which could be seen from `https://app.productive.io/xxxx-xxxx/settings/api-integrations` page
	OrganizationID string     `json:"organization_id"`
	sourceType     Productive `const:"productive" json:"sourceType"`
}

func (s SourceProductive) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceProductive) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceProductive) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceProductive) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *SourceProductive) GetSourceType() Productive {
	return ProductiveProductive
}
