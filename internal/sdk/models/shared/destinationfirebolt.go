// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type Firebolt string

const (
	FireboltFirebolt Firebolt = "firebolt"
)

func (e Firebolt) ToPointer() *Firebolt {
	return &e
}
func (e *Firebolt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firebolt":
		*e = Firebolt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Firebolt: %v", v)
	}
}

type DestinationFireboltSchemasMethod string

const (
	DestinationFireboltSchemasMethodS3 DestinationFireboltSchemasMethod = "S3"
)

func (e DestinationFireboltSchemasMethod) ToPointer() *DestinationFireboltSchemasMethod {
	return &e
}
func (e *DestinationFireboltSchemasMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3":
		*e = DestinationFireboltSchemasMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationFireboltSchemasMethod: %v", v)
	}
}

type DestinationFireboltExternalTableViaS3 struct {
	// AWS access key granting read and write access to S3.
	AwsKeyID string `json:"aws_key_id"`
	// Corresponding secret part of the AWS Key
	AwsKeySecret string                           `json:"aws_key_secret"`
	method       DestinationFireboltSchemasMethod `const:"S3" json:"method"`
	// The name of the S3 bucket.
	S3Bucket string `json:"s3_bucket"`
	// Region name of the S3 bucket.
	S3Region string `json:"s3_region"`
}

func (d DestinationFireboltExternalTableViaS3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationFireboltExternalTableViaS3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationFireboltExternalTableViaS3) GetAwsKeyID() string {
	if o == nil {
		return ""
	}
	return o.AwsKeyID
}

func (o *DestinationFireboltExternalTableViaS3) GetAwsKeySecret() string {
	if o == nil {
		return ""
	}
	return o.AwsKeySecret
}

func (o *DestinationFireboltExternalTableViaS3) GetMethod() DestinationFireboltSchemasMethod {
	return DestinationFireboltSchemasMethodS3
}

func (o *DestinationFireboltExternalTableViaS3) GetS3Bucket() string {
	if o == nil {
		return ""
	}
	return o.S3Bucket
}

func (o *DestinationFireboltExternalTableViaS3) GetS3Region() string {
	if o == nil {
		return ""
	}
	return o.S3Region
}

type DestinationFireboltMethod string

const (
	DestinationFireboltMethodSQL DestinationFireboltMethod = "SQL"
)

func (e DestinationFireboltMethod) ToPointer() *DestinationFireboltMethod {
	return &e
}
func (e *DestinationFireboltMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SQL":
		*e = DestinationFireboltMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationFireboltMethod: %v", v)
	}
}

type DestinationFireboltSQLInserts struct {
	method DestinationFireboltMethod `const:"SQL" json:"method"`
}

func (d DestinationFireboltSQLInserts) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationFireboltSQLInserts) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationFireboltSQLInserts) GetMethod() DestinationFireboltMethod {
	return DestinationFireboltMethodSQL
}

type DestinationFireboltLoadingMethodType string

const (
	DestinationFireboltLoadingMethodTypeDestinationFireboltSQLInserts         DestinationFireboltLoadingMethodType = "destination-firebolt_SQL Inserts"
	DestinationFireboltLoadingMethodTypeDestinationFireboltExternalTableViaS3 DestinationFireboltLoadingMethodType = "destination-firebolt_External Table via S3"
)

// DestinationFireboltLoadingMethod - Loading method used to select the way data will be uploaded to Firebolt
type DestinationFireboltLoadingMethod struct {
	DestinationFireboltSQLInserts         *DestinationFireboltSQLInserts
	DestinationFireboltExternalTableViaS3 *DestinationFireboltExternalTableViaS3

	Type DestinationFireboltLoadingMethodType
}

func CreateDestinationFireboltLoadingMethodDestinationFireboltSQLInserts(destinationFireboltSQLInserts DestinationFireboltSQLInserts) DestinationFireboltLoadingMethod {
	typ := DestinationFireboltLoadingMethodTypeDestinationFireboltSQLInserts

	return DestinationFireboltLoadingMethod{
		DestinationFireboltSQLInserts: &destinationFireboltSQLInserts,
		Type:                          typ,
	}
}

func CreateDestinationFireboltLoadingMethodDestinationFireboltExternalTableViaS3(destinationFireboltExternalTableViaS3 DestinationFireboltExternalTableViaS3) DestinationFireboltLoadingMethod {
	typ := DestinationFireboltLoadingMethodTypeDestinationFireboltExternalTableViaS3

	return DestinationFireboltLoadingMethod{
		DestinationFireboltExternalTableViaS3: &destinationFireboltExternalTableViaS3,
		Type:                                  typ,
	}
}

func (u *DestinationFireboltLoadingMethod) UnmarshalJSON(data []byte) error {

	var destinationFireboltSQLInserts DestinationFireboltSQLInserts = DestinationFireboltSQLInserts{}
	if err := utils.UnmarshalJSON(data, &destinationFireboltSQLInserts, "", true, true); err == nil {
		u.DestinationFireboltSQLInserts = &destinationFireboltSQLInserts
		u.Type = DestinationFireboltLoadingMethodTypeDestinationFireboltSQLInserts
		return nil
	}

	var destinationFireboltExternalTableViaS3 DestinationFireboltExternalTableViaS3 = DestinationFireboltExternalTableViaS3{}
	if err := utils.UnmarshalJSON(data, &destinationFireboltExternalTableViaS3, "", true, true); err == nil {
		u.DestinationFireboltExternalTableViaS3 = &destinationFireboltExternalTableViaS3
		u.Type = DestinationFireboltLoadingMethodTypeDestinationFireboltExternalTableViaS3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DestinationFireboltLoadingMethod", string(data))
}

func (u DestinationFireboltLoadingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationFireboltSQLInserts != nil {
		return utils.MarshalJSON(u.DestinationFireboltSQLInserts, "", true)
	}

	if u.DestinationFireboltExternalTableViaS3 != nil {
		return utils.MarshalJSON(u.DestinationFireboltExternalTableViaS3, "", true)
	}

	return nil, errors.New("could not marshal union type DestinationFireboltLoadingMethod: all fields are null")
}

type DestinationFirebolt struct {
	// Firebolt account to login.
	Account string `json:"account"`
	// Firebolt service account ID.
	ClientID string `json:"client_id"`
	// Firebolt secret, corresponding to the service account ID.
	ClientSecret string `json:"client_secret"`
	// The database to connect to.
	Database        string   `json:"database"`
	destinationType Firebolt `const:"firebolt" json:"destinationType"`
	// Engine name to connect to.
	Engine string `json:"engine"`
	// The host name of your Firebolt database.
	Host *string `json:"host,omitempty"`
	// Loading method used to select the way data will be uploaded to Firebolt
	LoadingMethod *DestinationFireboltLoadingMethod `json:"loading_method,omitempty"`
}

func (d DestinationFirebolt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationFirebolt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationFirebolt) GetAccount() string {
	if o == nil {
		return ""
	}
	return o.Account
}

func (o *DestinationFirebolt) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *DestinationFirebolt) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *DestinationFirebolt) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationFirebolt) GetDestinationType() Firebolt {
	return FireboltFirebolt
}

func (o *DestinationFirebolt) GetEngine() string {
	if o == nil {
		return ""
	}
	return o.Engine
}

func (o *DestinationFirebolt) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *DestinationFirebolt) GetLoadingMethod() *DestinationFireboltLoadingMethod {
	if o == nil {
		return nil
	}
	return o.LoadingMethod
}
