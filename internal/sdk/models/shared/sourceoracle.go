// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceOracleSchemasConnectionType string

const (
	SourceOracleSchemasConnectionTypeSid SourceOracleSchemasConnectionType = "sid"
)

func (e SourceOracleSchemasConnectionType) ToPointer() *SourceOracleSchemasConnectionType {
	return &e
}
func (e *SourceOracleSchemasConnectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sid":
		*e = SourceOracleSchemasConnectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleSchemasConnectionType: %v", v)
	}
}

// SourceOracleSystemIDSID - Use SID (Oracle System Identifier)
type SourceOracleSystemIDSID struct {
	connectionType *SourceOracleSchemasConnectionType `const:"sid" json:"connection_type,omitempty"`
	Sid            string                             `json:"sid"`
}

func (s SourceOracleSystemIDSID) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleSystemIDSID) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleSystemIDSID) GetConnectionType() *SourceOracleSchemasConnectionType {
	return SourceOracleSchemasConnectionTypeSid.ToPointer()
}

func (o *SourceOracleSystemIDSID) GetSid() string {
	if o == nil {
		return ""
	}
	return o.Sid
}

type SourceOracleConnectionType string

const (
	SourceOracleConnectionTypeServiceName SourceOracleConnectionType = "service_name"
)

func (e SourceOracleConnectionType) ToPointer() *SourceOracleConnectionType {
	return &e
}
func (e *SourceOracleConnectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_name":
		*e = SourceOracleConnectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleConnectionType: %v", v)
	}
}

// SourceOracleServiceName - Use service name
type SourceOracleServiceName struct {
	connectionType *SourceOracleConnectionType `const:"service_name" json:"connection_type,omitempty"`
	ServiceName    string                      `json:"service_name"`
}

func (s SourceOracleServiceName) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleServiceName) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleServiceName) GetConnectionType() *SourceOracleConnectionType {
	return SourceOracleConnectionTypeServiceName.ToPointer()
}

func (o *SourceOracleServiceName) GetServiceName() string {
	if o == nil {
		return ""
	}
	return o.ServiceName
}

type SourceOracleConnectByType string

const (
	SourceOracleConnectByTypeSourceOracleServiceName SourceOracleConnectByType = "source-oracle_Service name"
	SourceOracleConnectByTypeSourceOracleSystemIDSID SourceOracleConnectByType = "source-oracle_System ID (SID)"
)

// SourceOracleConnectBy - Connect data that will be used for DB connection
type SourceOracleConnectBy struct {
	SourceOracleServiceName *SourceOracleServiceName
	SourceOracleSystemIDSID *SourceOracleSystemIDSID

	Type SourceOracleConnectByType
}

func CreateSourceOracleConnectBySourceOracleServiceName(sourceOracleServiceName SourceOracleServiceName) SourceOracleConnectBy {
	typ := SourceOracleConnectByTypeSourceOracleServiceName

	return SourceOracleConnectBy{
		SourceOracleServiceName: &sourceOracleServiceName,
		Type:                    typ,
	}
}

func CreateSourceOracleConnectBySourceOracleSystemIDSID(sourceOracleSystemIDSID SourceOracleSystemIDSID) SourceOracleConnectBy {
	typ := SourceOracleConnectByTypeSourceOracleSystemIDSID

	return SourceOracleConnectBy{
		SourceOracleSystemIDSID: &sourceOracleSystemIDSID,
		Type:                    typ,
	}
}

func (u *SourceOracleConnectBy) UnmarshalJSON(data []byte) error {

	var sourceOracleServiceName SourceOracleServiceName = SourceOracleServiceName{}
	if err := utils.UnmarshalJSON(data, &sourceOracleServiceName, "", true, true); err == nil {
		u.SourceOracleServiceName = &sourceOracleServiceName
		u.Type = SourceOracleConnectByTypeSourceOracleServiceName
		return nil
	}

	var sourceOracleSystemIDSID SourceOracleSystemIDSID = SourceOracleSystemIDSID{}
	if err := utils.UnmarshalJSON(data, &sourceOracleSystemIDSID, "", true, true); err == nil {
		u.SourceOracleSystemIDSID = &sourceOracleSystemIDSID
		u.Type = SourceOracleConnectByTypeSourceOracleSystemIDSID
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceOracleConnectBy", string(data))
}

func (u SourceOracleConnectBy) MarshalJSON() ([]byte, error) {
	if u.SourceOracleServiceName != nil {
		return utils.MarshalJSON(u.SourceOracleServiceName, "", true)
	}

	if u.SourceOracleSystemIDSID != nil {
		return utils.MarshalJSON(u.SourceOracleSystemIDSID, "", true)
	}

	return nil, errors.New("could not marshal union type SourceOracleConnectBy: all fields are null")
}

type SourceOracleSchemasEncryptionEncryptionMethod string

const (
	SourceOracleSchemasEncryptionEncryptionMethodEncryptedVerifyCertificate SourceOracleSchemasEncryptionEncryptionMethod = "encrypted_verify_certificate"
)

func (e SourceOracleSchemasEncryptionEncryptionMethod) ToPointer() *SourceOracleSchemasEncryptionEncryptionMethod {
	return &e
}
func (e *SourceOracleSchemasEncryptionEncryptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_verify_certificate":
		*e = SourceOracleSchemasEncryptionEncryptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleSchemasEncryptionEncryptionMethod: %v", v)
	}
}

// SourceOracleTLSEncryptedVerifyCertificate - Verify and use the certificate provided by the server.
type SourceOracleTLSEncryptedVerifyCertificate struct {
	encryptionMethod SourceOracleSchemasEncryptionEncryptionMethod `const:"encrypted_verify_certificate" json:"encryption_method"`
	// Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations.
	SslCertificate string `json:"ssl_certificate"`
}

func (s SourceOracleTLSEncryptedVerifyCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleTLSEncryptedVerifyCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleTLSEncryptedVerifyCertificate) GetEncryptionMethod() SourceOracleSchemasEncryptionEncryptionMethod {
	return SourceOracleSchemasEncryptionEncryptionMethodEncryptedVerifyCertificate
}

func (o *SourceOracleTLSEncryptedVerifyCertificate) GetSslCertificate() string {
	if o == nil {
		return ""
	}
	return o.SslCertificate
}

// SourceOracleEncryptionAlgorithm - This parameter defines what encryption algorithm is used.
type SourceOracleEncryptionAlgorithm string

const (
	SourceOracleEncryptionAlgorithmAes256      SourceOracleEncryptionAlgorithm = "AES256"
	SourceOracleEncryptionAlgorithmRc456       SourceOracleEncryptionAlgorithm = "RC4_56"
	SourceOracleEncryptionAlgorithmThreeDes168 SourceOracleEncryptionAlgorithm = "3DES168"
)

func (e SourceOracleEncryptionAlgorithm) ToPointer() *SourceOracleEncryptionAlgorithm {
	return &e
}
func (e *SourceOracleEncryptionAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AES256":
		fallthrough
	case "RC4_56":
		fallthrough
	case "3DES168":
		*e = SourceOracleEncryptionAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleEncryptionAlgorithm: %v", v)
	}
}

type SourceOracleSchemasEncryptionMethod string

const (
	SourceOracleSchemasEncryptionMethodClientNne SourceOracleSchemasEncryptionMethod = "client_nne"
)

func (e SourceOracleSchemasEncryptionMethod) ToPointer() *SourceOracleSchemasEncryptionMethod {
	return &e
}
func (e *SourceOracleSchemasEncryptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_nne":
		*e = SourceOracleSchemasEncryptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleSchemasEncryptionMethod: %v", v)
	}
}

// SourceOracleNativeNetworkEncryptionNNE - The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
type SourceOracleNativeNetworkEncryptionNNE struct {
	// This parameter defines what encryption algorithm is used.
	EncryptionAlgorithm *SourceOracleEncryptionAlgorithm    `default:"AES256" json:"encryption_algorithm"`
	encryptionMethod    SourceOracleSchemasEncryptionMethod `const:"client_nne" json:"encryption_method"`
}

func (s SourceOracleNativeNetworkEncryptionNNE) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleNativeNetworkEncryptionNNE) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleNativeNetworkEncryptionNNE) GetEncryptionAlgorithm() *SourceOracleEncryptionAlgorithm {
	if o == nil {
		return nil
	}
	return o.EncryptionAlgorithm
}

func (o *SourceOracleNativeNetworkEncryptionNNE) GetEncryptionMethod() SourceOracleSchemasEncryptionMethod {
	return SourceOracleSchemasEncryptionMethodClientNne
}

type SourceOracleEncryptionMethod string

const (
	SourceOracleEncryptionMethodUnencrypted SourceOracleEncryptionMethod = "unencrypted"
)

func (e SourceOracleEncryptionMethod) ToPointer() *SourceOracleEncryptionMethod {
	return &e
}
func (e *SourceOracleEncryptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unencrypted":
		*e = SourceOracleEncryptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleEncryptionMethod: %v", v)
	}
}

// SourceOracleUnencrypted - Data transfer will not be encrypted.
type SourceOracleUnencrypted struct {
	encryptionMethod SourceOracleEncryptionMethod `const:"unencrypted" json:"encryption_method"`
}

func (s SourceOracleUnencrypted) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleUnencrypted) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleUnencrypted) GetEncryptionMethod() SourceOracleEncryptionMethod {
	return SourceOracleEncryptionMethodUnencrypted
}

type SourceOracleEncryptionType string

const (
	SourceOracleEncryptionTypeSourceOracleUnencrypted                   SourceOracleEncryptionType = "source-oracle_Unencrypted"
	SourceOracleEncryptionTypeSourceOracleNativeNetworkEncryptionNNE    SourceOracleEncryptionType = "source-oracle_Native Network Encryption (NNE)"
	SourceOracleEncryptionTypeSourceOracleTLSEncryptedVerifyCertificate SourceOracleEncryptionType = "source-oracle_TLS Encrypted (verify certificate)"
)

// SourceOracleEncryption - The encryption method with is used when communicating with the database.
type SourceOracleEncryption struct {
	SourceOracleUnencrypted                   *SourceOracleUnencrypted
	SourceOracleNativeNetworkEncryptionNNE    *SourceOracleNativeNetworkEncryptionNNE
	SourceOracleTLSEncryptedVerifyCertificate *SourceOracleTLSEncryptedVerifyCertificate

	Type SourceOracleEncryptionType
}

func CreateSourceOracleEncryptionSourceOracleUnencrypted(sourceOracleUnencrypted SourceOracleUnencrypted) SourceOracleEncryption {
	typ := SourceOracleEncryptionTypeSourceOracleUnencrypted

	return SourceOracleEncryption{
		SourceOracleUnencrypted: &sourceOracleUnencrypted,
		Type:                    typ,
	}
}

func CreateSourceOracleEncryptionSourceOracleNativeNetworkEncryptionNNE(sourceOracleNativeNetworkEncryptionNNE SourceOracleNativeNetworkEncryptionNNE) SourceOracleEncryption {
	typ := SourceOracleEncryptionTypeSourceOracleNativeNetworkEncryptionNNE

	return SourceOracleEncryption{
		SourceOracleNativeNetworkEncryptionNNE: &sourceOracleNativeNetworkEncryptionNNE,
		Type:                                   typ,
	}
}

func CreateSourceOracleEncryptionSourceOracleTLSEncryptedVerifyCertificate(sourceOracleTLSEncryptedVerifyCertificate SourceOracleTLSEncryptedVerifyCertificate) SourceOracleEncryption {
	typ := SourceOracleEncryptionTypeSourceOracleTLSEncryptedVerifyCertificate

	return SourceOracleEncryption{
		SourceOracleTLSEncryptedVerifyCertificate: &sourceOracleTLSEncryptedVerifyCertificate,
		Type: typ,
	}
}

func (u *SourceOracleEncryption) UnmarshalJSON(data []byte) error {

	var sourceOracleUnencrypted SourceOracleUnencrypted = SourceOracleUnencrypted{}
	if err := utils.UnmarshalJSON(data, &sourceOracleUnencrypted, "", true, true); err == nil {
		u.SourceOracleUnencrypted = &sourceOracleUnencrypted
		u.Type = SourceOracleEncryptionTypeSourceOracleUnencrypted
		return nil
	}

	var sourceOracleNativeNetworkEncryptionNNE SourceOracleNativeNetworkEncryptionNNE = SourceOracleNativeNetworkEncryptionNNE{}
	if err := utils.UnmarshalJSON(data, &sourceOracleNativeNetworkEncryptionNNE, "", true, true); err == nil {
		u.SourceOracleNativeNetworkEncryptionNNE = &sourceOracleNativeNetworkEncryptionNNE
		u.Type = SourceOracleEncryptionTypeSourceOracleNativeNetworkEncryptionNNE
		return nil
	}

	var sourceOracleTLSEncryptedVerifyCertificate SourceOracleTLSEncryptedVerifyCertificate = SourceOracleTLSEncryptedVerifyCertificate{}
	if err := utils.UnmarshalJSON(data, &sourceOracleTLSEncryptedVerifyCertificate, "", true, true); err == nil {
		u.SourceOracleTLSEncryptedVerifyCertificate = &sourceOracleTLSEncryptedVerifyCertificate
		u.Type = SourceOracleEncryptionTypeSourceOracleTLSEncryptedVerifyCertificate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceOracleEncryption", string(data))
}

func (u SourceOracleEncryption) MarshalJSON() ([]byte, error) {
	if u.SourceOracleUnencrypted != nil {
		return utils.MarshalJSON(u.SourceOracleUnencrypted, "", true)
	}

	if u.SourceOracleNativeNetworkEncryptionNNE != nil {
		return utils.MarshalJSON(u.SourceOracleNativeNetworkEncryptionNNE, "", true)
	}

	if u.SourceOracleTLSEncryptedVerifyCertificate != nil {
		return utils.MarshalJSON(u.SourceOracleTLSEncryptedVerifyCertificate, "", true)
	}

	return nil, errors.New("could not marshal union type SourceOracleEncryption: all fields are null")
}

type SourceOracleOracle string

const (
	SourceOracleOracleOracle SourceOracleOracle = "oracle"
)

func (e SourceOracleOracle) ToPointer() *SourceOracleOracle {
	return &e
}
func (e *SourceOracleOracle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oracle":
		*e = SourceOracleOracle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleOracle: %v", v)
	}
}

// SourceOracleSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceOracleSchemasTunnelMethodTunnelMethod string

const (
	SourceOracleSchemasTunnelMethodTunnelMethodSSHPasswordAuth SourceOracleSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceOracleSchemasTunnelMethodTunnelMethod) ToPointer() *SourceOracleSchemasTunnelMethodTunnelMethod {
	return &e
}
func (e *SourceOracleSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceOracleSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

type SourceOraclePasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod SourceOracleSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (s SourceOraclePasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOraclePasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOraclePasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceOraclePasswordAuthentication) GetTunnelMethod() SourceOracleSchemasTunnelMethodTunnelMethod {
	return SourceOracleSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *SourceOraclePasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceOraclePasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *SourceOraclePasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// SourceOracleSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceOracleSchemasTunnelMethod string

const (
	SourceOracleSchemasTunnelMethodSSHKeyAuth SourceOracleSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceOracleSchemasTunnelMethod) ToPointer() *SourceOracleSchemasTunnelMethod {
	return &e
}
func (e *SourceOracleSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceOracleSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleSchemasTunnelMethod: %v", v)
	}
}

type SourceOracleSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod SourceOracleSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (s SourceOracleSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *SourceOracleSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *SourceOracleSSHKeyAuthentication) GetTunnelMethod() SourceOracleSchemasTunnelMethod {
	return SourceOracleSchemasTunnelMethodSSHKeyAuth
}

func (o *SourceOracleSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *SourceOracleSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// SourceOracleTunnelMethod - No ssh tunnel needed to connect to database
type SourceOracleTunnelMethod string

const (
	SourceOracleTunnelMethodNoTunnel SourceOracleTunnelMethod = "NO_TUNNEL"
)

func (e SourceOracleTunnelMethod) ToPointer() *SourceOracleTunnelMethod {
	return &e
}
func (e *SourceOracleTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceOracleTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOracleTunnelMethod: %v", v)
	}
}

type SourceOracleNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod SourceOracleTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (s SourceOracleNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracleNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracleNoTunnel) GetTunnelMethod() SourceOracleTunnelMethod {
	return SourceOracleTunnelMethodNoTunnel
}

type SourceOracleSSHTunnelMethodType string

const (
	SourceOracleSSHTunnelMethodTypeSourceOracleNoTunnel               SourceOracleSSHTunnelMethodType = "source-oracle_No Tunnel"
	SourceOracleSSHTunnelMethodTypeSourceOracleSSHKeyAuthentication   SourceOracleSSHTunnelMethodType = "source-oracle_SSH Key Authentication"
	SourceOracleSSHTunnelMethodTypeSourceOraclePasswordAuthentication SourceOracleSSHTunnelMethodType = "source-oracle_Password Authentication"
)

// SourceOracleSSHTunnelMethod - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceOracleSSHTunnelMethod struct {
	SourceOracleNoTunnel               *SourceOracleNoTunnel
	SourceOracleSSHKeyAuthentication   *SourceOracleSSHKeyAuthentication
	SourceOraclePasswordAuthentication *SourceOraclePasswordAuthentication

	Type SourceOracleSSHTunnelMethodType
}

func CreateSourceOracleSSHTunnelMethodSourceOracleNoTunnel(sourceOracleNoTunnel SourceOracleNoTunnel) SourceOracleSSHTunnelMethod {
	typ := SourceOracleSSHTunnelMethodTypeSourceOracleNoTunnel

	return SourceOracleSSHTunnelMethod{
		SourceOracleNoTunnel: &sourceOracleNoTunnel,
		Type:                 typ,
	}
}

func CreateSourceOracleSSHTunnelMethodSourceOracleSSHKeyAuthentication(sourceOracleSSHKeyAuthentication SourceOracleSSHKeyAuthentication) SourceOracleSSHTunnelMethod {
	typ := SourceOracleSSHTunnelMethodTypeSourceOracleSSHKeyAuthentication

	return SourceOracleSSHTunnelMethod{
		SourceOracleSSHKeyAuthentication: &sourceOracleSSHKeyAuthentication,
		Type:                             typ,
	}
}

func CreateSourceOracleSSHTunnelMethodSourceOraclePasswordAuthentication(sourceOraclePasswordAuthentication SourceOraclePasswordAuthentication) SourceOracleSSHTunnelMethod {
	typ := SourceOracleSSHTunnelMethodTypeSourceOraclePasswordAuthentication

	return SourceOracleSSHTunnelMethod{
		SourceOraclePasswordAuthentication: &sourceOraclePasswordAuthentication,
		Type:                               typ,
	}
}

func (u *SourceOracleSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	var sourceOracleNoTunnel SourceOracleNoTunnel = SourceOracleNoTunnel{}
	if err := utils.UnmarshalJSON(data, &sourceOracleNoTunnel, "", true, true); err == nil {
		u.SourceOracleNoTunnel = &sourceOracleNoTunnel
		u.Type = SourceOracleSSHTunnelMethodTypeSourceOracleNoTunnel
		return nil
	}

	var sourceOracleSSHKeyAuthentication SourceOracleSSHKeyAuthentication = SourceOracleSSHKeyAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceOracleSSHKeyAuthentication, "", true, true); err == nil {
		u.SourceOracleSSHKeyAuthentication = &sourceOracleSSHKeyAuthentication
		u.Type = SourceOracleSSHTunnelMethodTypeSourceOracleSSHKeyAuthentication
		return nil
	}

	var sourceOraclePasswordAuthentication SourceOraclePasswordAuthentication = SourceOraclePasswordAuthentication{}
	if err := utils.UnmarshalJSON(data, &sourceOraclePasswordAuthentication, "", true, true); err == nil {
		u.SourceOraclePasswordAuthentication = &sourceOraclePasswordAuthentication
		u.Type = SourceOracleSSHTunnelMethodTypeSourceOraclePasswordAuthentication
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SourceOracleSSHTunnelMethod", string(data))
}

func (u SourceOracleSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceOracleNoTunnel != nil {
		return utils.MarshalJSON(u.SourceOracleNoTunnel, "", true)
	}

	if u.SourceOracleSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceOracleSSHKeyAuthentication, "", true)
	}

	if u.SourceOraclePasswordAuthentication != nil {
		return utils.MarshalJSON(u.SourceOraclePasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type SourceOracleSSHTunnelMethod: all fields are null")
}

type SourceOracle struct {
	// Connect data that will be used for DB connection
	ConnectionData *SourceOracleConnectBy `json:"connection_data,omitempty"`
	// The encryption method with is used when communicating with the database.
	Encryption *SourceOracleEncryption `json:"encryption,omitempty"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with the username.
	Password *string `json:"password,omitempty"`
	// Port of the database.
	// Oracle Corporations recommends the following port numbers:
	// 1521 - Default listening port for client connections to the listener.
	// 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL
	Port *int64 `default:"1521" json:"port"`
	// The list of schemas to sync from. Defaults to user. Case sensitive.
	Schemas    []string           `json:"schemas,omitempty"`
	sourceType SourceOracleOracle `const:"oracle" json:"sourceType"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceOracleSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}

func (s SourceOracle) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOracle) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceOracle) GetConnectionData() *SourceOracleConnectBy {
	if o == nil {
		return nil
	}
	return o.ConnectionData
}

func (o *SourceOracle) GetEncryption() *SourceOracleEncryption {
	if o == nil {
		return nil
	}
	return o.Encryption
}

func (o *SourceOracle) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceOracle) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *SourceOracle) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceOracle) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceOracle) GetSchemas() []string {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *SourceOracle) GetSourceType() SourceOracleOracle {
	return SourceOracleOracleOracle
}

func (o *SourceOracle) GetTunnelMethod() *SourceOracleSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *SourceOracle) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
