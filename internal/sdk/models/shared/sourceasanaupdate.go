// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

// SourceAsanaUpdateSchemasCredentialsTitle - PAT Credentials
type SourceAsanaUpdateSchemasCredentialsTitle string

const (
	SourceAsanaUpdateSchemasCredentialsTitlePatCredentials SourceAsanaUpdateSchemasCredentialsTitle = "PAT Credentials"
)

func (e SourceAsanaUpdateSchemasCredentialsTitle) ToPointer() *SourceAsanaUpdateSchemasCredentialsTitle {
	return &e
}
func (e *SourceAsanaUpdateSchemasCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAT Credentials":
		*e = SourceAsanaUpdateSchemasCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAsanaUpdateSchemasCredentialsTitle: %v", v)
	}
}

type AuthenticateWithPersonalAccessToken struct {
	// PAT Credentials
	optionTitle *SourceAsanaUpdateSchemasCredentialsTitle `const:"PAT Credentials" json:"option_title,omitempty"`
	// Asana Personal Access Token (generate yours <a href="https://app.asana.com/0/developer-console">here</a>).
	PersonalAccessToken string `json:"personal_access_token"`
}

func (a AuthenticateWithPersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthenticateWithPersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AuthenticateWithPersonalAccessToken) GetOptionTitle() *SourceAsanaUpdateSchemasCredentialsTitle {
	return SourceAsanaUpdateSchemasCredentialsTitlePatCredentials.ToPointer()
}

func (o *AuthenticateWithPersonalAccessToken) GetPersonalAccessToken() string {
	if o == nil {
		return ""
	}
	return o.PersonalAccessToken
}

// SourceAsanaUpdateCredentialsTitle - OAuth Credentials
type SourceAsanaUpdateCredentialsTitle string

const (
	SourceAsanaUpdateCredentialsTitleOAuthCredentials SourceAsanaUpdateCredentialsTitle = "OAuth Credentials"
)

func (e SourceAsanaUpdateCredentialsTitle) ToPointer() *SourceAsanaUpdateCredentialsTitle {
	return &e
}
func (e *SourceAsanaUpdateCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth Credentials":
		*e = SourceAsanaUpdateCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAsanaUpdateCredentialsTitle: %v", v)
	}
}

type AuthenticateViaAsanaOauth struct {
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	// OAuth Credentials
	optionTitle  *SourceAsanaUpdateCredentialsTitle `const:"OAuth Credentials" json:"option_title,omitempty"`
	RefreshToken string                             `json:"refresh_token"`
}

func (a AuthenticateViaAsanaOauth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthenticateViaAsanaOauth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AuthenticateViaAsanaOauth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *AuthenticateViaAsanaOauth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *AuthenticateViaAsanaOauth) GetOptionTitle() *SourceAsanaUpdateCredentialsTitle {
	return SourceAsanaUpdateCredentialsTitleOAuthCredentials.ToPointer()
}

func (o *AuthenticateViaAsanaOauth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type AuthenticationMechanismType string

const (
	AuthenticationMechanismTypeAuthenticateViaAsanaOauth           AuthenticationMechanismType = "Authenticate via Asana (Oauth)"
	AuthenticationMechanismTypeAuthenticateWithPersonalAccessToken AuthenticationMechanismType = "Authenticate with Personal Access Token"
)

// AuthenticationMechanism - Choose how to authenticate to Github
type AuthenticationMechanism struct {
	AuthenticateViaAsanaOauth           *AuthenticateViaAsanaOauth
	AuthenticateWithPersonalAccessToken *AuthenticateWithPersonalAccessToken

	Type AuthenticationMechanismType
}

func CreateAuthenticationMechanismAuthenticateViaAsanaOauth(authenticateViaAsanaOauth AuthenticateViaAsanaOauth) AuthenticationMechanism {
	typ := AuthenticationMechanismTypeAuthenticateViaAsanaOauth

	return AuthenticationMechanism{
		AuthenticateViaAsanaOauth: &authenticateViaAsanaOauth,
		Type:                      typ,
	}
}

func CreateAuthenticationMechanismAuthenticateWithPersonalAccessToken(authenticateWithPersonalAccessToken AuthenticateWithPersonalAccessToken) AuthenticationMechanism {
	typ := AuthenticationMechanismTypeAuthenticateWithPersonalAccessToken

	return AuthenticationMechanism{
		AuthenticateWithPersonalAccessToken: &authenticateWithPersonalAccessToken,
		Type:                                typ,
	}
}

func (u *AuthenticationMechanism) UnmarshalJSON(data []byte) error {

	var authenticateWithPersonalAccessToken AuthenticateWithPersonalAccessToken = AuthenticateWithPersonalAccessToken{}
	if err := utils.UnmarshalJSON(data, &authenticateWithPersonalAccessToken, "", true, true); err == nil {
		u.AuthenticateWithPersonalAccessToken = &authenticateWithPersonalAccessToken
		u.Type = AuthenticationMechanismTypeAuthenticateWithPersonalAccessToken
		return nil
	}

	var authenticateViaAsanaOauth AuthenticateViaAsanaOauth = AuthenticateViaAsanaOauth{}
	if err := utils.UnmarshalJSON(data, &authenticateViaAsanaOauth, "", true, true); err == nil {
		u.AuthenticateViaAsanaOauth = &authenticateViaAsanaOauth
		u.Type = AuthenticationMechanismTypeAuthenticateViaAsanaOauth
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AuthenticationMechanism", string(data))
}

func (u AuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.AuthenticateViaAsanaOauth != nil {
		return utils.MarshalJSON(u.AuthenticateViaAsanaOauth, "", true)
	}

	if u.AuthenticateWithPersonalAccessToken != nil {
		return utils.MarshalJSON(u.AuthenticateWithPersonalAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type AuthenticationMechanism: all fields are null")
}

type SourceAsanaUpdate struct {
	// Choose how to authenticate to Github
	Credentials *AuthenticationMechanism `json:"credentials,omitempty"`
	// Globally unique identifiers for the organization exports
	OrganizationExportIds []any `json:"organization_export_ids,omitempty"`
}

func (o *SourceAsanaUpdate) GetCredentials() *AuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceAsanaUpdate) GetOrganizationExportIds() []any {
	if o == nil {
		return nil
	}
	return o.OrganizationExportIds
}
