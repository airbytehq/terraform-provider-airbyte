// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type DestinationCobraAuthType string

const (
	DestinationCobraAuthTypeClient DestinationCobraAuthType = "Client"
)

func (e DestinationCobraAuthType) ToPointer() *DestinationCobraAuthType {
	return &e
}
func (e *DestinationCobraAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = DestinationCobraAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationCobraAuthType: %v", v)
	}
}

// UpdateMode - How to update the data in the destination.
type UpdateMode string

const (
	UpdateModeInsert UpdateMode = "INSERT"
	UpdateModeUpdate UpdateMode = "UPDATE"
	UpdateModeUpsert UpdateMode = "UPSERT"
	UpdateModeDelete UpdateMode = "DELETE"
)

func (e UpdateMode) ToPointer() *UpdateMode {
	return &e
}
func (e *UpdateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INSERT":
		fallthrough
	case "UPDATE":
		fallthrough
	case "UPSERT":
		fallthrough
	case "DELETE":
		*e = UpdateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMode: %v", v)
	}
}

// StreamMapping - Describes the relationship between a source stream and a destination table and how to update the information.
type StreamMapping struct {
	// The name for the table to update the data in the destination.
	DestinationTable string `json:"destination_table"`
	// The name for the input stream.
	SourceStream string `json:"source_stream"`
	// How to update the data in the destination.
	UpdateMode UpdateMode `json:"update_mode"`
	// Given the operation is an upsert, a field representing an external ID needs to be provided
	UpsertKey *string `json:"upsert_key,omitempty"`
}

func (o *StreamMapping) GetDestinationTable() string {
	if o == nil {
		return ""
	}
	return o.DestinationTable
}

func (o *StreamMapping) GetSourceStream() string {
	if o == nil {
		return ""
	}
	return o.SourceStream
}

func (o *StreamMapping) GetUpdateMode() UpdateMode {
	if o == nil {
		return UpdateMode("")
	}
	return o.UpdateMode
}

func (o *StreamMapping) GetUpsertKey() *string {
	if o == nil {
		return nil
	}
	return o.UpsertKey
}

type Cobra string

const (
	CobraCobra Cobra = "cobra"
)

func (e Cobra) ToPointer() *Cobra {
	return &e
}
func (e *Cobra) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cobra":
		*e = Cobra(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cobra: %v", v)
	}
}

type DestinationCobra struct {
	authType *DestinationCobraAuthType `const:"Client" json:"auth_type,omitempty"`
	// Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client ID</a>
	ClientID string `json:"client_id"`
	// Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client secret</a>
	ClientSecret string `json:"client_secret"`
	// Toggle if you're using a <a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&type=5">Salesforce Sandbox</a>
	IsSandbox *bool `default:"false" json:"is_sandbox"`
	// If enabled, the records content will be printed as part of the log in case of failure which allows for easier debugging.
	PrintRecordContentOnError *bool `default:"false" json:"print_record_content_on_error"`
	// Enter your application's <a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm">Salesforce Refresh Token</a> used for Airbyte to access your Salesforce account.
	RefreshToken   string          `json:"refresh_token"`
	StreamMappings []StreamMapping `json:"stream_mappings,omitempty"`
	// The order in which the streams should be synced. Streams are synced in the order they are listed. Only those streams will be synced so make sure all the input streams are configured here.
	StreamOrder     []string `json:"stream_order,omitempty"`
	destinationType Cobra    `const:"cobra" json:"destinationType"`
}

func (d DestinationCobra) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationCobra) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationCobra) GetAuthType() *DestinationCobraAuthType {
	return DestinationCobraAuthTypeClient.ToPointer()
}

func (o *DestinationCobra) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *DestinationCobra) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *DestinationCobra) GetIsSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.IsSandbox
}

func (o *DestinationCobra) GetPrintRecordContentOnError() *bool {
	if o == nil {
		return nil
	}
	return o.PrintRecordContentOnError
}

func (o *DestinationCobra) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *DestinationCobra) GetStreamMappings() []StreamMapping {
	if o == nil {
		return nil
	}
	return o.StreamMappings
}

func (o *DestinationCobra) GetStreamOrder() []string {
	if o == nil {
		return nil
	}
	return o.StreamOrder
}

func (o *DestinationCobra) GetDestinationType() Cobra {
	return CobraCobra
}
