// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/internal/utils"
)

type SourceCartSchemasAuthType string

const (
	SourceCartSchemasAuthTypeSingleStoreAccessToken SourceCartSchemasAuthType = "SINGLE_STORE_ACCESS_TOKEN"
)

func (e SourceCartSchemasAuthType) ToPointer() *SourceCartSchemasAuthType {
	return &e
}
func (e *SourceCartSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SINGLE_STORE_ACCESS_TOKEN":
		*e = SourceCartSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceCartSchemasAuthType: %v", v)
	}
}

type SourceCartSingleStoreAccessToken struct {
	// Access Token for making authenticated requests.
	AccessToken string                    `json:"access_token"`
	authType    SourceCartSchemasAuthType `const:"SINGLE_STORE_ACCESS_TOKEN" json:"auth_type"`
	// The name of Cart.com Online Store. All API URLs start with https://[mystorename.com]/api/v1/, where [mystorename.com] is the domain name of your store.
	StoreName string `json:"store_name"`
}

func (s SourceCartSingleStoreAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceCartSingleStoreAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceCartSingleStoreAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceCartSingleStoreAccessToken) GetAuthType() SourceCartSchemasAuthType {
	return SourceCartSchemasAuthTypeSingleStoreAccessToken
}

func (o *SourceCartSingleStoreAccessToken) GetStoreName() string {
	if o == nil {
		return ""
	}
	return o.StoreName
}

type SourceCartAuthType string

const (
	SourceCartAuthTypeCentralAPIRouter SourceCartAuthType = "CENTRAL_API_ROUTER"
)

func (e SourceCartAuthType) ToPointer() *SourceCartAuthType {
	return &e
}
func (e *SourceCartAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CENTRAL_API_ROUTER":
		*e = SourceCartAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceCartAuthType: %v", v)
	}
}

type SourceCartCentralAPIRouter struct {
	authType SourceCartAuthType `const:"CENTRAL_API_ROUTER" json:"auth_type"`
	// You can determine a site provisioning site Id by hitting https://site.com/store/sitemonitor.aspx and reading the response param PSID
	SiteID string `json:"site_id"`
	// Enter your application's User Name
	UserName string `json:"user_name"`
	// Enter your application's User Secret
	UserSecret string `json:"user_secret"`
}

func (s SourceCartCentralAPIRouter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceCartCentralAPIRouter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceCartCentralAPIRouter) GetAuthType() SourceCartAuthType {
	return SourceCartAuthTypeCentralAPIRouter
}

func (o *SourceCartCentralAPIRouter) GetSiteID() string {
	if o == nil {
		return ""
	}
	return o.SiteID
}

func (o *SourceCartCentralAPIRouter) GetUserName() string {
	if o == nil {
		return ""
	}
	return o.UserName
}

func (o *SourceCartCentralAPIRouter) GetUserSecret() string {
	if o == nil {
		return ""
	}
	return o.UserSecret
}

type SourceCartAuthorizationMethodType string

const (
	SourceCartAuthorizationMethodTypeSourceCartCentralAPIRouter       SourceCartAuthorizationMethodType = "source-cart_Central API Router"
	SourceCartAuthorizationMethodTypeSourceCartSingleStoreAccessToken SourceCartAuthorizationMethodType = "source-cart_Single Store Access Token"
)

type SourceCartAuthorizationMethod struct {
	SourceCartCentralAPIRouter       *SourceCartCentralAPIRouter
	SourceCartSingleStoreAccessToken *SourceCartSingleStoreAccessToken

	Type SourceCartAuthorizationMethodType
}

func CreateSourceCartAuthorizationMethodSourceCartCentralAPIRouter(sourceCartCentralAPIRouter SourceCartCentralAPIRouter) SourceCartAuthorizationMethod {
	typ := SourceCartAuthorizationMethodTypeSourceCartCentralAPIRouter

	return SourceCartAuthorizationMethod{
		SourceCartCentralAPIRouter: &sourceCartCentralAPIRouter,
		Type:                       typ,
	}
}

func CreateSourceCartAuthorizationMethodSourceCartSingleStoreAccessToken(sourceCartSingleStoreAccessToken SourceCartSingleStoreAccessToken) SourceCartAuthorizationMethod {
	typ := SourceCartAuthorizationMethodTypeSourceCartSingleStoreAccessToken

	return SourceCartAuthorizationMethod{
		SourceCartSingleStoreAccessToken: &sourceCartSingleStoreAccessToken,
		Type:                             typ,
	}
}

func (u *SourceCartAuthorizationMethod) UnmarshalJSON(data []byte) error {

	var sourceCartSingleStoreAccessToken SourceCartSingleStoreAccessToken = SourceCartSingleStoreAccessToken{}
	if err := utils.UnmarshalJSON(data, &sourceCartSingleStoreAccessToken, "", true, true); err == nil {
		u.SourceCartSingleStoreAccessToken = &sourceCartSingleStoreAccessToken
		u.Type = SourceCartAuthorizationMethodTypeSourceCartSingleStoreAccessToken
		return nil
	}

	var sourceCartCentralAPIRouter SourceCartCentralAPIRouter = SourceCartCentralAPIRouter{}
	if err := utils.UnmarshalJSON(data, &sourceCartCentralAPIRouter, "", true, true); err == nil {
		u.SourceCartCentralAPIRouter = &sourceCartCentralAPIRouter
		u.Type = SourceCartAuthorizationMethodTypeSourceCartCentralAPIRouter
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceCartAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceCartCentralAPIRouter != nil {
		return utils.MarshalJSON(u.SourceCartCentralAPIRouter, "", true)
	}

	if u.SourceCartSingleStoreAccessToken != nil {
		return utils.MarshalJSON(u.SourceCartSingleStoreAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Cart string

const (
	CartCart Cart = "cart"
)

func (e Cart) ToPointer() *Cart {
	return &e
}
func (e *Cart) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cart":
		*e = Cart(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cart: %v", v)
	}
}

type SourceCart struct {
	Credentials *SourceCartAuthorizationMethod `json:"credentials,omitempty"`
	sourceType  Cart                           `const:"cart" json:"sourceType"`
	// The date from which you'd like to replicate the data
	StartDate string `json:"start_date"`
}

func (s SourceCart) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceCart) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceCart) GetCredentials() *SourceCartAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceCart) GetSourceType() Cart {
	return CartCart
}

func (o *SourceCart) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
