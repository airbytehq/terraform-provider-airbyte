// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceRailzRailz string

const (
	SourceRailzRailzRailz SourceRailzRailz = "railz"
)

func (e SourceRailzRailz) ToPointer() *SourceRailzRailz {
	return &e
}

func (e *SourceRailzRailz) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "railz":
		*e = SourceRailzRailz(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRailzRailz: %v", v)
	}
}

type SourceRailz struct {
	// Client ID (client_id)
	ClientID string `json:"client_id"`
	// Secret key (secret_key)
	SecretKey  string           `json:"secret_key"`
	sourceType SourceRailzRailz `const:"railz" json:"sourceType"`
	// Start date
	StartDate string `json:"start_date"`
}

func (s SourceRailz) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRailz) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceRailz) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceRailz) GetSecretKey() string {
	if o == nil {
		return ""
	}
	return o.SecretKey
}

func (o *SourceRailz) GetSourceType() SourceRailzRailz {
	return SourceRailzRailzRailz
}

func (o *SourceRailz) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
