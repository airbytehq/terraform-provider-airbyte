// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceYoutubeAnalyticsAuthenticateViaOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The Client ID of your developer application
	ClientID string `json:"client_id"`
	// The client secret of your developer application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`
}

func (s SourceYoutubeAnalyticsAuthenticateViaOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceYoutubeAnalyticsAuthenticateViaOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceYoutubeAnalyticsAuthenticateViaOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceYoutubeAnalyticsAuthenticateViaOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceYoutubeAnalyticsAuthenticateViaOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceYoutubeAnalyticsAuthenticateViaOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceYoutubeAnalyticsYoutubeAnalytics string

const (
	SourceYoutubeAnalyticsYoutubeAnalyticsYoutubeAnalytics SourceYoutubeAnalyticsYoutubeAnalytics = "youtube-analytics"
)

func (e SourceYoutubeAnalyticsYoutubeAnalytics) ToPointer() *SourceYoutubeAnalyticsYoutubeAnalytics {
	return &e
}

func (e *SourceYoutubeAnalyticsYoutubeAnalytics) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "youtube-analytics":
		*e = SourceYoutubeAnalyticsYoutubeAnalytics(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceYoutubeAnalyticsYoutubeAnalytics: %v", v)
	}
}

type SourceYoutubeAnalytics struct {
	Credentials SourceYoutubeAnalyticsAuthenticateViaOAuth20 `json:"credentials"`
	sourceType  SourceYoutubeAnalyticsYoutubeAnalytics       `const:"youtube-analytics" json:"sourceType"`
}

func (s SourceYoutubeAnalytics) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceYoutubeAnalytics) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceYoutubeAnalytics) GetCredentials() SourceYoutubeAnalyticsAuthenticateViaOAuth20 {
	if o == nil {
		return SourceYoutubeAnalyticsAuthenticateViaOAuth20{}
	}
	return o.Credentials
}

func (o *SourceYoutubeAnalytics) GetSourceType() SourceYoutubeAnalyticsYoutubeAnalytics {
	return SourceYoutubeAnalyticsYoutubeAnalyticsYoutubeAnalytics
}
