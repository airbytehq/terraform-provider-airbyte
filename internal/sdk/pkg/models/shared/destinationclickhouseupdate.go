// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) GetTunnelMethod() DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) GetTunnelMethod() DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationClickhouseUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationClickhouseUpdateSSHTunnelMethodNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseUpdateSSHTunnelMethodNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseUpdateSSHTunnelMethodNoTunnel) GetTunnelMethod() DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return DestinationClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel
}

type DestinationClickhouseUpdateSSHTunnelMethodType string

const (
	DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodNoTunnel               DestinationClickhouseUpdateSSHTunnelMethodType = "destination-clickhouse-update_SSH Tunnel Method_No Tunnel"
	DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication   DestinationClickhouseUpdateSSHTunnelMethodType = "destination-clickhouse-update_SSH Tunnel Method_SSH Key Authentication"
	DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication DestinationClickhouseUpdateSSHTunnelMethodType = "destination-clickhouse-update_SSH Tunnel Method_Password Authentication"
)

type DestinationClickhouseUpdateSSHTunnelMethod struct {
	DestinationClickhouseUpdateSSHTunnelMethodNoTunnel               *DestinationClickhouseUpdateSSHTunnelMethodNoTunnel
	DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication   *DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
	DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication *DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication

	Type DestinationClickhouseUpdateSSHTunnelMethodType
}

func CreateDestinationClickhouseUpdateSSHTunnelMethodDestinationClickhouseUpdateSSHTunnelMethodNoTunnel(destinationClickhouseUpdateSSHTunnelMethodNoTunnel DestinationClickhouseUpdateSSHTunnelMethodNoTunnel) DestinationClickhouseUpdateSSHTunnelMethod {
	typ := DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodNoTunnel

	return DestinationClickhouseUpdateSSHTunnelMethod{
		DestinationClickhouseUpdateSSHTunnelMethodNoTunnel: &destinationClickhouseUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateDestinationClickhouseUpdateSSHTunnelMethodDestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication(destinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) DestinationClickhouseUpdateSSHTunnelMethod {
	typ := DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication

	return DestinationClickhouseUpdateSSHTunnelMethod{
		DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication: &destinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationClickhouseUpdateSSHTunnelMethodDestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication(destinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication) DestinationClickhouseUpdateSSHTunnelMethod {
	typ := DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication

	return DestinationClickhouseUpdateSSHTunnelMethod{
		DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication: &destinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationClickhouseUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	destinationClickhouseUpdateSSHTunnelMethodNoTunnel := new(DestinationClickhouseUpdateSSHTunnelMethodNoTunnel)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseUpdateSSHTunnelMethodNoTunnel, "", true, true); err == nil {
		u.DestinationClickhouseUpdateSSHTunnelMethodNoTunnel = destinationClickhouseUpdateSSHTunnelMethodNoTunnel
		u.Type = DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	destinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication := new(DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication, "", true, true); err == nil {
		u.DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication = destinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication := new(DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication, "", true, true); err == nil {
		u.DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication = destinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationClickhouseUpdateSSHTunnelMethodTypeDestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationClickhouseUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationClickhouseUpdateSSHTunnelMethodNoTunnel != nil {
		return utils.MarshalJSON(u.DestinationClickhouseUpdateSSHTunnelMethodNoTunnel, "", true)
	}

	if u.DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.DestinationClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication, "", true)
	}

	if u.DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return utils.MarshalJSON(u.DestinationClickhouseUpdateSSHTunnelMethodPasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationClickhouseUpdate struct {
	// Name of the database.
	Database string `json:"database"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// HTTP port of the database.
	Port *int64 `default:"8123" json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationClickhouseUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to use to access the database.
	Username string `json:"username"`
}

func (d DestinationClickhouseUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationClickhouseUpdate) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationClickhouseUpdate) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationClickhouseUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationClickhouseUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationClickhouseUpdate) GetTunnelMethod() *DestinationClickhouseUpdateSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *DestinationClickhouseUpdate) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
