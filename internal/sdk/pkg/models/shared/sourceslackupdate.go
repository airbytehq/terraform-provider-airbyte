// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle string

const (
	SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitleAPITokenCredentials SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle = "API Token Credentials"
)

func (e SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle) ToPointer() *SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle {
	return &e
}

func (e *SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Token Credentials":
		*e = SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle: %v", v)
	}
}

// SourceSlackUpdateAuthenticationMechanismAPIToken - Choose how to authenticate into Slack
type SourceSlackUpdateAuthenticationMechanismAPIToken struct {
	// A Slack bot token. See the <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> for instructions on how to generate it.
	APIToken    string                                                      `json:"api_token"`
	OptionTitle SourceSlackUpdateAuthenticationMechanismAPITokenOptionTitle `json:"option_title"`
}

type SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle string

const (
	SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitleDefaultOAuth20Authorization SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle = "Default OAuth2.0 authorization"
)

func (e SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle) ToPointer() *SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle {
	return &e
}

func (e *SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Default OAuth2.0 authorization":
		*e = SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle: %v", v)
	}
}

// SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth - Choose how to authenticate into Slack
type SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth struct {
	// Slack access_token. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help generating the token.
	AccessToken string `json:"access_token"`
	// Slack client_id. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this id.
	ClientID string `json:"client_id"`
	// Slack client_secret. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this secret.
	ClientSecret string                                                                 `json:"client_secret"`
	OptionTitle  SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthOptionTitle `json:"option_title"`
}

type SourceSlackUpdateAuthenticationMechanismType string

const (
	SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth SourceSlackUpdateAuthenticationMechanismType = "source-slack-update_Authentication mechanism_Sign in via Slack (OAuth)"
	SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismAPIToken            SourceSlackUpdateAuthenticationMechanismType = "source-slack-update_Authentication mechanism_API Token"
)

type SourceSlackUpdateAuthenticationMechanism struct {
	SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth *SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth
	SourceSlackUpdateAuthenticationMechanismAPIToken            *SourceSlackUpdateAuthenticationMechanismAPIToken

	Type SourceSlackUpdateAuthenticationMechanismType
}

func CreateSourceSlackUpdateAuthenticationMechanismSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth(sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth) SourceSlackUpdateAuthenticationMechanism {
	typ := SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth

	return SourceSlackUpdateAuthenticationMechanism{
		SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth: &sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth,
		Type: typ,
	}
}

func CreateSourceSlackUpdateAuthenticationMechanismSourceSlackUpdateAuthenticationMechanismAPIToken(sourceSlackUpdateAuthenticationMechanismAPIToken SourceSlackUpdateAuthenticationMechanismAPIToken) SourceSlackUpdateAuthenticationMechanism {
	typ := SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismAPIToken

	return SourceSlackUpdateAuthenticationMechanism{
		SourceSlackUpdateAuthenticationMechanismAPIToken: &sourceSlackUpdateAuthenticationMechanismAPIToken,
		Type: typ,
	}
}

func (u *SourceSlackUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSlackUpdateAuthenticationMechanismAPIToken := new(SourceSlackUpdateAuthenticationMechanismAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSlackUpdateAuthenticationMechanismAPIToken); err == nil {
		u.SourceSlackUpdateAuthenticationMechanismAPIToken = sourceSlackUpdateAuthenticationMechanismAPIToken
		u.Type = SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismAPIToken
		return nil
	}

	sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth := new(SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth); err == nil {
		u.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth = sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth
		u.Type = SourceSlackUpdateAuthenticationMechanismTypeSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSlackUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceSlackUpdateAuthenticationMechanismAPIToken != nil {
		return json.Marshal(u.SourceSlackUpdateAuthenticationMechanismAPIToken)
	}

	if u.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth != nil {
		return json.Marshal(u.SourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth)
	}

	return nil, nil
}

type SourceSlackUpdate struct {
	// A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.
	ChannelFilter []string `json:"channel_filter,omitempty"`
	// Choose how to authenticate into Slack
	Credentials *SourceSlackUpdateAuthenticationMechanism `json:"credentials,omitempty"`
	// Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages.
	JoinChannels bool `json:"join_channels"`
	// How far into the past to look for messages in threads, default is 0 days
	LookbackWindow int64 `json:"lookback_window"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}
