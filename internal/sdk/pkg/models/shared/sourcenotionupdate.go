// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceNotionUpdateAuthenticateUsingAccessTokenAuthType string

const (
	SourceNotionUpdateAuthenticateUsingAccessTokenAuthTypeToken SourceNotionUpdateAuthenticateUsingAccessTokenAuthType = "token"
)

func (e SourceNotionUpdateAuthenticateUsingAccessTokenAuthType) ToPointer() *SourceNotionUpdateAuthenticateUsingAccessTokenAuthType {
	return &e
}

func (e *SourceNotionUpdateAuthenticateUsingAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = SourceNotionUpdateAuthenticateUsingAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionUpdateAuthenticateUsingAccessTokenAuthType: %v", v)
	}
}

// SourceNotionUpdateAuthenticateUsingAccessToken - Pick an authentication method.
type SourceNotionUpdateAuthenticateUsingAccessToken struct {
	authType SourceNotionUpdateAuthenticateUsingAccessTokenAuthType `const:"token" json:"auth_type"`
	// Notion API access token, see the <a href="https://developers.notion.com/docs/authorization">docs</a> for more information on how to obtain this token.
	Token string `json:"token"`
}

func (s SourceNotionUpdateAuthenticateUsingAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdateAuthenticateUsingAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdateAuthenticateUsingAccessToken) GetAuthType() SourceNotionUpdateAuthenticateUsingAccessTokenAuthType {
	return SourceNotionUpdateAuthenticateUsingAccessTokenAuthTypeToken
}

func (o *SourceNotionUpdateAuthenticateUsingAccessToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type SourceNotionUpdateAuthenticateUsingOAuth20AuthType string

const (
	SourceNotionUpdateAuthenticateUsingOAuth20AuthTypeOAuth20 SourceNotionUpdateAuthenticateUsingOAuth20AuthType = "OAuth2.0"
)

func (e SourceNotionUpdateAuthenticateUsingOAuth20AuthType) ToPointer() *SourceNotionUpdateAuthenticateUsingOAuth20AuthType {
	return &e
}

func (e *SourceNotionUpdateAuthenticateUsingOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = SourceNotionUpdateAuthenticateUsingOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionUpdateAuthenticateUsingOAuth20AuthType: %v", v)
	}
}

// SourceNotionUpdateAuthenticateUsingOAuth20 - Pick an authentication method.
type SourceNotionUpdateAuthenticateUsingOAuth20 struct {
	// Access Token is a token you received by complete the OauthWebFlow of Notion.
	AccessToken string                                             `json:"access_token"`
	authType    SourceNotionUpdateAuthenticateUsingOAuth20AuthType `const:"OAuth2.0" json:"auth_type"`
	// The ClientID of your Notion integration.
	ClientID string `json:"client_id"`
	// The ClientSecret of your Notion integration.
	ClientSecret string `json:"client_secret"`
}

func (s SourceNotionUpdateAuthenticateUsingOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdateAuthenticateUsingOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdateAuthenticateUsingOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceNotionUpdateAuthenticateUsingOAuth20) GetAuthType() SourceNotionUpdateAuthenticateUsingOAuth20AuthType {
	return SourceNotionUpdateAuthenticateUsingOAuth20AuthTypeOAuth20
}

func (o *SourceNotionUpdateAuthenticateUsingOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceNotionUpdateAuthenticateUsingOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

type SourceNotionUpdateAuthenticateUsingType string

const (
	SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingOAuth20     SourceNotionUpdateAuthenticateUsingType = "source-notion-update_Authenticate using_OAuth2.0"
	SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingAccessToken SourceNotionUpdateAuthenticateUsingType = "source-notion-update_Authenticate using_Access Token"
)

type SourceNotionUpdateAuthenticateUsing struct {
	SourceNotionUpdateAuthenticateUsingOAuth20     *SourceNotionUpdateAuthenticateUsingOAuth20
	SourceNotionUpdateAuthenticateUsingAccessToken *SourceNotionUpdateAuthenticateUsingAccessToken

	Type SourceNotionUpdateAuthenticateUsingType
}

func CreateSourceNotionUpdateAuthenticateUsingSourceNotionUpdateAuthenticateUsingOAuth20(sourceNotionUpdateAuthenticateUsingOAuth20 SourceNotionUpdateAuthenticateUsingOAuth20) SourceNotionUpdateAuthenticateUsing {
	typ := SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingOAuth20

	return SourceNotionUpdateAuthenticateUsing{
		SourceNotionUpdateAuthenticateUsingOAuth20: &sourceNotionUpdateAuthenticateUsingOAuth20,
		Type: typ,
	}
}

func CreateSourceNotionUpdateAuthenticateUsingSourceNotionUpdateAuthenticateUsingAccessToken(sourceNotionUpdateAuthenticateUsingAccessToken SourceNotionUpdateAuthenticateUsingAccessToken) SourceNotionUpdateAuthenticateUsing {
	typ := SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingAccessToken

	return SourceNotionUpdateAuthenticateUsing{
		SourceNotionUpdateAuthenticateUsingAccessToken: &sourceNotionUpdateAuthenticateUsingAccessToken,
		Type: typ,
	}
}

func (u *SourceNotionUpdateAuthenticateUsing) UnmarshalJSON(data []byte) error {

	sourceNotionUpdateAuthenticateUsingAccessToken := new(SourceNotionUpdateAuthenticateUsingAccessToken)
	if err := utils.UnmarshalJSON(data, &sourceNotionUpdateAuthenticateUsingAccessToken, "", true, true); err == nil {
		u.SourceNotionUpdateAuthenticateUsingAccessToken = sourceNotionUpdateAuthenticateUsingAccessToken
		u.Type = SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingAccessToken
		return nil
	}

	sourceNotionUpdateAuthenticateUsingOAuth20 := new(SourceNotionUpdateAuthenticateUsingOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceNotionUpdateAuthenticateUsingOAuth20, "", true, true); err == nil {
		u.SourceNotionUpdateAuthenticateUsingOAuth20 = sourceNotionUpdateAuthenticateUsingOAuth20
		u.Type = SourceNotionUpdateAuthenticateUsingTypeSourceNotionUpdateAuthenticateUsingOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceNotionUpdateAuthenticateUsing) MarshalJSON() ([]byte, error) {
	if u.SourceNotionUpdateAuthenticateUsingOAuth20 != nil {
		return utils.MarshalJSON(u.SourceNotionUpdateAuthenticateUsingOAuth20, "", true)
	}

	if u.SourceNotionUpdateAuthenticateUsingAccessToken != nil {
		return utils.MarshalJSON(u.SourceNotionUpdateAuthenticateUsingAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceNotionUpdate struct {
	// Pick an authentication method.
	Credentials *SourceNotionUpdateAuthenticateUsing `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceNotionUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdate) GetCredentials() *SourceNotionUpdateAuthenticateUsing {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceNotionUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
