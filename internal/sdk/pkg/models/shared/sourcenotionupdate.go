// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceNotionUpdateSchemasAuthType string

const (
	SourceNotionUpdateSchemasAuthTypeToken SourceNotionUpdateSchemasAuthType = "token"
)

func (e SourceNotionUpdateSchemasAuthType) ToPointer() *SourceNotionUpdateSchemasAuthType {
	return &e
}

func (e *SourceNotionUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = SourceNotionUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionUpdateSchemasAuthType: %v", v)
	}
}

// SourceNotionUpdateAccessToken - Pick an authentication method.
type SourceNotionUpdateAccessToken struct {
	authType SourceNotionUpdateSchemasAuthType `const:"token" json:"auth_type"`
	// Notion API access token, see the <a href="https://developers.notion.com/docs/authorization">docs</a> for more information on how to obtain this token.
	Token string `json:"token"`
}

func (s SourceNotionUpdateAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdateAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdateAccessToken) GetAuthType() SourceNotionUpdateSchemasAuthType {
	return SourceNotionUpdateSchemasAuthTypeToken
}

func (o *SourceNotionUpdateAccessToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type SourceNotionUpdateAuthType string

const (
	SourceNotionUpdateAuthTypeOAuth20 SourceNotionUpdateAuthType = "OAuth2.0"
)

func (e SourceNotionUpdateAuthType) ToPointer() *SourceNotionUpdateAuthType {
	return &e
}

func (e *SourceNotionUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = SourceNotionUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionUpdateAuthType: %v", v)
	}
}

// SourceNotionUpdateOAuth20 - Pick an authentication method.
type SourceNotionUpdateOAuth20 struct {
	// Access Token is a token you received by complete the OauthWebFlow of Notion.
	AccessToken string                     `json:"access_token"`
	authType    SourceNotionUpdateAuthType `const:"OAuth2.0" json:"auth_type"`
	// The ClientID of your Notion integration.
	ClientID string `json:"client_id"`
	// The ClientSecret of your Notion integration.
	ClientSecret string `json:"client_secret"`
}

func (s SourceNotionUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdateOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceNotionUpdateOAuth20) GetAuthType() SourceNotionUpdateAuthType {
	return SourceNotionUpdateAuthTypeOAuth20
}

func (o *SourceNotionUpdateOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceNotionUpdateOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

type AuthenticateUsingType string

const (
	AuthenticateUsingTypeSourceNotionUpdateOAuth20     AuthenticateUsingType = "source-notion-update_OAuth2.0"
	AuthenticateUsingTypeSourceNotionUpdateAccessToken AuthenticateUsingType = "source-notion-update_Access Token"
)

type AuthenticateUsing struct {
	SourceNotionUpdateOAuth20     *SourceNotionUpdateOAuth20
	SourceNotionUpdateAccessToken *SourceNotionUpdateAccessToken

	Type AuthenticateUsingType
}

func CreateAuthenticateUsingSourceNotionUpdateOAuth20(sourceNotionUpdateOAuth20 SourceNotionUpdateOAuth20) AuthenticateUsing {
	typ := AuthenticateUsingTypeSourceNotionUpdateOAuth20

	return AuthenticateUsing{
		SourceNotionUpdateOAuth20: &sourceNotionUpdateOAuth20,
		Type:                      typ,
	}
}

func CreateAuthenticateUsingSourceNotionUpdateAccessToken(sourceNotionUpdateAccessToken SourceNotionUpdateAccessToken) AuthenticateUsing {
	typ := AuthenticateUsingTypeSourceNotionUpdateAccessToken

	return AuthenticateUsing{
		SourceNotionUpdateAccessToken: &sourceNotionUpdateAccessToken,
		Type:                          typ,
	}
}

func (u *AuthenticateUsing) UnmarshalJSON(data []byte) error {

	sourceNotionUpdateAccessToken := new(SourceNotionUpdateAccessToken)
	if err := utils.UnmarshalJSON(data, &sourceNotionUpdateAccessToken, "", true, true); err == nil {
		u.SourceNotionUpdateAccessToken = sourceNotionUpdateAccessToken
		u.Type = AuthenticateUsingTypeSourceNotionUpdateAccessToken
		return nil
	}

	sourceNotionUpdateOAuth20 := new(SourceNotionUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceNotionUpdateOAuth20, "", true, true); err == nil {
		u.SourceNotionUpdateOAuth20 = sourceNotionUpdateOAuth20
		u.Type = AuthenticateUsingTypeSourceNotionUpdateOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthenticateUsing) MarshalJSON() ([]byte, error) {
	if u.SourceNotionUpdateOAuth20 != nil {
		return utils.MarshalJSON(u.SourceNotionUpdateOAuth20, "", true)
	}

	if u.SourceNotionUpdateAccessToken != nil {
		return utils.MarshalJSON(u.SourceNotionUpdateAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceNotionUpdate struct {
	// Pick an authentication method.
	Credentials *AuthenticateUsing `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceNotionUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceNotionUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceNotionUpdate) GetCredentials() *AuthenticateUsing {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceNotionUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
