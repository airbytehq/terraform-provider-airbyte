// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceSalesloftSchemasAuthType string

const (
	SourceSalesloftSchemasAuthTypeAPIKey SourceSalesloftSchemasAuthType = "api_key"
)

func (e SourceSalesloftSchemasAuthType) ToPointer() *SourceSalesloftSchemasAuthType {
	return &e
}

func (e *SourceSalesloftSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_key":
		*e = SourceSalesloftSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSalesloftSchemasAuthType: %v", v)
	}
}

type SourceSalesloftAuthenticateViaAPIKey struct {
	// API Key for making authenticated requests. More instruction on how to find this value in our <a href="https://docs.airbyte.com/integrations/sources/salesloft#setup-guide">docs</a>
	APIKey   string                         `json:"api_key"`
	authType SourceSalesloftSchemasAuthType `const:"api_key" json:"auth_type"`
}

func (s SourceSalesloftAuthenticateViaAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloftAuthenticateViaAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloftAuthenticateViaAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSalesloftAuthenticateViaAPIKey) GetAuthType() SourceSalesloftSchemasAuthType {
	return SourceSalesloftSchemasAuthTypeAPIKey
}

type SourceSalesloftAuthType string

const (
	SourceSalesloftAuthTypeOauth20 SourceSalesloftAuthType = "oauth2.0"
)

func (e SourceSalesloftAuthType) ToPointer() *SourceSalesloftAuthType {
	return &e
}

func (e *SourceSalesloftAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceSalesloftAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSalesloftAuthType: %v", v)
	}
}

type SourceSalesloftAuthenticateViaOAuth struct {
	// Access Token for making authenticated requests.
	AccessToken string                  `json:"access_token"`
	authType    SourceSalesloftAuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your Salesloft developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Salesloft developer application.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceSalesloftAuthenticateViaOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloftAuthenticateViaOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetAuthType() SourceSalesloftAuthType {
	return SourceSalesloftAuthTypeOauth20
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceSalesloftAuthenticateViaOAuth) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceSalesloftCredentialsType string

const (
	SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaOAuth  SourceSalesloftCredentialsType = "source-salesloft_Authenticate via OAuth"
	SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaAPIKey SourceSalesloftCredentialsType = "source-salesloft_Authenticate via API Key"
)

type SourceSalesloftCredentials struct {
	SourceSalesloftAuthenticateViaOAuth  *SourceSalesloftAuthenticateViaOAuth
	SourceSalesloftAuthenticateViaAPIKey *SourceSalesloftAuthenticateViaAPIKey

	Type SourceSalesloftCredentialsType
}

func CreateSourceSalesloftCredentialsSourceSalesloftAuthenticateViaOAuth(sourceSalesloftAuthenticateViaOAuth SourceSalesloftAuthenticateViaOAuth) SourceSalesloftCredentials {
	typ := SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaOAuth

	return SourceSalesloftCredentials{
		SourceSalesloftAuthenticateViaOAuth: &sourceSalesloftAuthenticateViaOAuth,
		Type:                                typ,
	}
}

func CreateSourceSalesloftCredentialsSourceSalesloftAuthenticateViaAPIKey(sourceSalesloftAuthenticateViaAPIKey SourceSalesloftAuthenticateViaAPIKey) SourceSalesloftCredentials {
	typ := SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaAPIKey

	return SourceSalesloftCredentials{
		SourceSalesloftAuthenticateViaAPIKey: &sourceSalesloftAuthenticateViaAPIKey,
		Type:                                 typ,
	}
}

func (u *SourceSalesloftCredentials) UnmarshalJSON(data []byte) error {

	sourceSalesloftAuthenticateViaAPIKey := new(SourceSalesloftAuthenticateViaAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceSalesloftAuthenticateViaAPIKey, "", true, true); err == nil {
		u.SourceSalesloftAuthenticateViaAPIKey = sourceSalesloftAuthenticateViaAPIKey
		u.Type = SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaAPIKey
		return nil
	}

	sourceSalesloftAuthenticateViaOAuth := new(SourceSalesloftAuthenticateViaOAuth)
	if err := utils.UnmarshalJSON(data, &sourceSalesloftAuthenticateViaOAuth, "", true, true); err == nil {
		u.SourceSalesloftAuthenticateViaOAuth = sourceSalesloftAuthenticateViaOAuth
		u.Type = SourceSalesloftCredentialsTypeSourceSalesloftAuthenticateViaOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSalesloftCredentials) MarshalJSON() ([]byte, error) {
	if u.SourceSalesloftAuthenticateViaOAuth != nil {
		return utils.MarshalJSON(u.SourceSalesloftAuthenticateViaOAuth, "", true)
	}

	if u.SourceSalesloftAuthenticateViaAPIKey != nil {
		return utils.MarshalJSON(u.SourceSalesloftAuthenticateViaAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Salesloft string

const (
	SalesloftSalesloft Salesloft = "salesloft"
)

func (e Salesloft) ToPointer() *Salesloft {
	return &e
}

func (e *Salesloft) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "salesloft":
		*e = Salesloft(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Salesloft: %v", v)
	}
}

type SourceSalesloft struct {
	Credentials SourceSalesloftCredentials `json:"credentials"`
	sourceType  Salesloft                  `const:"salesloft" json:"sourceType"`
	// The date from which you'd like to replicate data for Salesloft API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceSalesloft) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloft) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloft) GetCredentials() SourceSalesloftCredentials {
	if o == nil {
		return SourceSalesloftCredentials{}
	}
	return o.Credentials
}

func (o *SourceSalesloft) GetSourceType() Salesloft {
	return SalesloftSalesloft
}

func (o *SourceSalesloft) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
