// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType string

const (
	SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthTypeAPIKey SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType = "api_key"
)

func (e SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType) ToPointer() *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType {
	return &e
}

func (e *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_key":
		*e = SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType: %v", v)
	}
}

type SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey struct {
	// API Key for making authenticated requests. More instruction on how to find this value in our <a href="https://docs.airbyte.com/integrations/sources/salesloft#setup-guide">docs</a>
	APIKey   string                                                        `json:"api_key"`
	authType SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType `const:"api_key" json:"auth_type"`
}

func (s SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey) GetAuthType() SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthType {
	return SourceSalesloftUpdateCredentialsAuthenticateViaAPIKeyAuthTypeAPIKey
}

type SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType string

const (
	SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthTypeOauth20 SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType = "oauth2.0"
)

func (e SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType) ToPointer() *SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType {
	return &e
}

func (e *SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType: %v", v)
	}
}

type SourceSalesloftUpdateCredentialsAuthenticateViaOAuth struct {
	// Access Token for making authenticated requests.
	AccessToken string                                                       `json:"access_token"`
	authType    SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your Salesloft developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Salesloft developer application.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetAuthType() SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthType {
	return SourceSalesloftUpdateCredentialsAuthenticateViaOAuthAuthTypeOauth20
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceSalesloftUpdateCredentialsType string

const (
	SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaOAuth  SourceSalesloftUpdateCredentialsType = "source-salesloft-update_Credentials_Authenticate via OAuth"
	SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaAPIKey SourceSalesloftUpdateCredentialsType = "source-salesloft-update_Credentials_Authenticate via API Key"
)

type SourceSalesloftUpdateCredentials struct {
	SourceSalesloftUpdateCredentialsAuthenticateViaOAuth  *SourceSalesloftUpdateCredentialsAuthenticateViaOAuth
	SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey *SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey

	Type SourceSalesloftUpdateCredentialsType
}

func CreateSourceSalesloftUpdateCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuth(sourceSalesloftUpdateCredentialsAuthenticateViaOAuth SourceSalesloftUpdateCredentialsAuthenticateViaOAuth) SourceSalesloftUpdateCredentials {
	typ := SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaOAuth

	return SourceSalesloftUpdateCredentials{
		SourceSalesloftUpdateCredentialsAuthenticateViaOAuth: &sourceSalesloftUpdateCredentialsAuthenticateViaOAuth,
		Type: typ,
	}
}

func CreateSourceSalesloftUpdateCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaAPIKey(sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey) SourceSalesloftUpdateCredentials {
	typ := SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaAPIKey

	return SourceSalesloftUpdateCredentials{
		SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey: &sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey,
		Type: typ,
	}
}

func (u *SourceSalesloftUpdateCredentials) UnmarshalJSON(data []byte) error {

	sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey := new(SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey, "", true, true); err == nil {
		u.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey = sourceSalesloftUpdateCredentialsAuthenticateViaAPIKey
		u.Type = SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaAPIKey
		return nil
	}

	sourceSalesloftUpdateCredentialsAuthenticateViaOAuth := new(SourceSalesloftUpdateCredentialsAuthenticateViaOAuth)
	if err := utils.UnmarshalJSON(data, &sourceSalesloftUpdateCredentialsAuthenticateViaOAuth, "", true, true); err == nil {
		u.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth = sourceSalesloftUpdateCredentialsAuthenticateViaOAuth
		u.Type = SourceSalesloftUpdateCredentialsTypeSourceSalesloftUpdateCredentialsAuthenticateViaOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSalesloftUpdateCredentials) MarshalJSON() ([]byte, error) {
	if u.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth != nil {
		return utils.MarshalJSON(u.SourceSalesloftUpdateCredentialsAuthenticateViaOAuth, "", true)
	}

	if u.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey != nil {
		return utils.MarshalJSON(u.SourceSalesloftUpdateCredentialsAuthenticateViaAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSalesloftUpdate struct {
	Credentials SourceSalesloftUpdateCredentials `json:"credentials"`
	// The date from which you'd like to replicate data for Salesloft API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceSalesloftUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSalesloftUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSalesloftUpdate) GetCredentials() SourceSalesloftUpdateCredentials {
	if o == nil {
		return SourceSalesloftUpdateCredentials{}
	}
	return o.Credentials
}

func (o *SourceSalesloftUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
