// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationRedisCacheType - Redis cache type to store data in.
type DestinationRedisCacheType string

const (
	DestinationRedisCacheTypeHash DestinationRedisCacheType = "hash"
)

func (e DestinationRedisCacheType) ToPointer() *DestinationRedisCacheType {
	return &e
}

func (e *DestinationRedisCacheType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hash":
		*e = DestinationRedisCacheType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisCacheType: %v", v)
	}
}

type DestinationRedisRedis string

const (
	DestinationRedisRedisRedis DestinationRedisRedis = "redis"
)

func (e DestinationRedisRedis) ToPointer() *DestinationRedisRedis {
	return &e
}

func (e *DestinationRedisRedis) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis":
		*e = DestinationRedisRedis(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisRedis: %v", v)
	}
}

type DestinationRedisSSLModesVerifyFullMode string

const (
	DestinationRedisSSLModesVerifyFullModeVerifyFull DestinationRedisSSLModesVerifyFullMode = "verify-full"
)

func (e DestinationRedisSSLModesVerifyFullMode) ToPointer() *DestinationRedisSSLModesVerifyFullMode {
	return &e
}

func (e *DestinationRedisSSLModesVerifyFullMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-full":
		*e = DestinationRedisSSLModesVerifyFullMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSLModesVerifyFullMode: %v", v)
	}
}

// DestinationRedisSSLModesVerifyFull - Verify-full SSL mode.
type DestinationRedisSSLModesVerifyFull struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate string `json:"client_certificate"`
	// Client key
	ClientKey string `json:"client_key"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                 `json:"client_key_password,omitempty"`
	mode              *DestinationRedisSSLModesVerifyFullMode `const:"verify-full" json:"mode"`
}

func (d DestinationRedisSSLModesVerifyFull) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedisSSLModesVerifyFull) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedisSSLModesVerifyFull) GetCaCertificate() string {
	if o == nil {
		return ""
	}
	return o.CaCertificate
}

func (o *DestinationRedisSSLModesVerifyFull) GetClientCertificate() string {
	if o == nil {
		return ""
	}
	return o.ClientCertificate
}

func (o *DestinationRedisSSLModesVerifyFull) GetClientKey() string {
	if o == nil {
		return ""
	}
	return o.ClientKey
}

func (o *DestinationRedisSSLModesVerifyFull) GetClientKeyPassword() *string {
	if o == nil {
		return nil
	}
	return o.ClientKeyPassword
}

func (o *DestinationRedisSSLModesVerifyFull) GetMode() *DestinationRedisSSLModesVerifyFullMode {
	return DestinationRedisSSLModesVerifyFullModeVerifyFull.ToPointer()
}

type DestinationRedisSSLModesDisableMode string

const (
	DestinationRedisSSLModesDisableModeDisable DestinationRedisSSLModesDisableMode = "disable"
)

func (e DestinationRedisSSLModesDisableMode) ToPointer() *DestinationRedisSSLModesDisableMode {
	return &e
}

func (e *DestinationRedisSSLModesDisableMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disable":
		*e = DestinationRedisSSLModesDisableMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSLModesDisableMode: %v", v)
	}
}

// DestinationRedisSSLModesDisable - Disable SSL.
type DestinationRedisSSLModesDisable struct {
	mode *DestinationRedisSSLModesDisableMode `const:"disable" json:"mode"`
}

func (d DestinationRedisSSLModesDisable) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedisSSLModesDisable) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedisSSLModesDisable) GetMode() *DestinationRedisSSLModesDisableMode {
	return DestinationRedisSSLModesDisableModeDisable.ToPointer()
}

type DestinationRedisSSLModesType string

const (
	DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable    DestinationRedisSSLModesType = "destination-redis_SSL Modes_disable"
	DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull DestinationRedisSSLModesType = "destination-redis_SSL Modes_verify-full"
)

type DestinationRedisSSLModes struct {
	DestinationRedisSSLModesDisable    *DestinationRedisSSLModesDisable
	DestinationRedisSSLModesVerifyFull *DestinationRedisSSLModesVerifyFull

	Type DestinationRedisSSLModesType
}

func CreateDestinationRedisSSLModesDestinationRedisSSLModesDisable(destinationRedisSSLModesDisable DestinationRedisSSLModesDisable) DestinationRedisSSLModes {
	typ := DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable

	return DestinationRedisSSLModes{
		DestinationRedisSSLModesDisable: &destinationRedisSSLModesDisable,
		Type:                            typ,
	}
}

func CreateDestinationRedisSSLModesDestinationRedisSSLModesVerifyFull(destinationRedisSSLModesVerifyFull DestinationRedisSSLModesVerifyFull) DestinationRedisSSLModes {
	typ := DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull

	return DestinationRedisSSLModes{
		DestinationRedisSSLModesVerifyFull: &destinationRedisSSLModesVerifyFull,
		Type:                               typ,
	}
}

func (u *DestinationRedisSSLModes) UnmarshalJSON(data []byte) error {

	destinationRedisSSLModesDisable := new(DestinationRedisSSLModesDisable)
	if err := utils.UnmarshalJSON(data, &destinationRedisSSLModesDisable, "", true, true); err == nil {
		u.DestinationRedisSSLModesDisable = destinationRedisSSLModesDisable
		u.Type = DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable
		return nil
	}

	destinationRedisSSLModesVerifyFull := new(DestinationRedisSSLModesVerifyFull)
	if err := utils.UnmarshalJSON(data, &destinationRedisSSLModesVerifyFull, "", true, true); err == nil {
		u.DestinationRedisSSLModesVerifyFull = destinationRedisSSLModesVerifyFull
		u.Type = DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationRedisSSLModes) MarshalJSON() ([]byte, error) {
	if u.DestinationRedisSSLModesDisable != nil {
		return utils.MarshalJSON(u.DestinationRedisSSLModesDisable, "", true)
	}

	if u.DestinationRedisSSLModesVerifyFull != nil {
		return utils.MarshalJSON(u.DestinationRedisSSLModesVerifyFull, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationRedisSSHTunnelMethodPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedisSSHTunnelMethodPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedisSSHTunnelMethodPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationRedisSSHTunnelMethodPasswordAuthentication) GetTunnelMethod() DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth
}

func (o *DestinationRedisSSHTunnelMethodPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationRedisSSHTunnelMethodPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationRedisSSHTunnelMethodPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationRedisSSHTunnelMethodSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) GetTunnelMethod() DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth
}

func (o *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationRedisSSHTunnelMethodSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationRedisSSHTunnelMethodNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedisSSHTunnelMethodNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedisSSHTunnelMethodNoTunnel) GetTunnelMethod() DestinationRedisSSHTunnelMethodNoTunnelTunnelMethod {
	return DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodNoTunnel
}

type DestinationRedisSSHTunnelMethodType string

const (
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel               DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_No Tunnel"
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication   DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_SSH Key Authentication"
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_Password Authentication"
)

type DestinationRedisSSHTunnelMethod struct {
	DestinationRedisSSHTunnelMethodNoTunnel               *DestinationRedisSSHTunnelMethodNoTunnel
	DestinationRedisSSHTunnelMethodSSHKeyAuthentication   *DestinationRedisSSHTunnelMethodSSHKeyAuthentication
	DestinationRedisSSHTunnelMethodPasswordAuthentication *DestinationRedisSSHTunnelMethodPasswordAuthentication

	Type DestinationRedisSSHTunnelMethodType
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodNoTunnel(destinationRedisSSHTunnelMethodNoTunnel DestinationRedisSSHTunnelMethodNoTunnel) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodNoTunnel: &destinationRedisSSHTunnelMethodNoTunnel,
		Type:                                    typ,
	}
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodSSHKeyAuthentication(destinationRedisSSHTunnelMethodSSHKeyAuthentication DestinationRedisSSHTunnelMethodSSHKeyAuthentication) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodSSHKeyAuthentication: &destinationRedisSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodPasswordAuthentication(destinationRedisSSHTunnelMethodPasswordAuthentication DestinationRedisSSHTunnelMethodPasswordAuthentication) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodPasswordAuthentication: &destinationRedisSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationRedisSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	destinationRedisSSHTunnelMethodNoTunnel := new(DestinationRedisSSHTunnelMethodNoTunnel)
	if err := utils.UnmarshalJSON(data, &destinationRedisSSHTunnelMethodNoTunnel, "", true, true); err == nil {
		u.DestinationRedisSSHTunnelMethodNoTunnel = destinationRedisSSHTunnelMethodNoTunnel
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel
		return nil
	}

	destinationRedisSSHTunnelMethodSSHKeyAuthentication := new(DestinationRedisSSHTunnelMethodSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationRedisSSHTunnelMethodSSHKeyAuthentication, "", true, true); err == nil {
		u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication = destinationRedisSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationRedisSSHTunnelMethodPasswordAuthentication := new(DestinationRedisSSHTunnelMethodPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationRedisSSHTunnelMethodPasswordAuthentication, "", true, true); err == nil {
		u.DestinationRedisSSHTunnelMethodPasswordAuthentication = destinationRedisSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationRedisSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationRedisSSHTunnelMethodNoTunnel != nil {
		return utils.MarshalJSON(u.DestinationRedisSSHTunnelMethodNoTunnel, "", true)
	}

	if u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication, "", true)
	}

	if u.DestinationRedisSSHTunnelMethodPasswordAuthentication != nil {
		return utils.MarshalJSON(u.DestinationRedisSSHTunnelMethodPasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationRedis struct {
	// Redis cache type to store data in.
	CacheType       *DestinationRedisCacheType `default:"hash" json:"cache_type"`
	destinationType DestinationRedisRedis      `const:"redis" json:"destinationType"`
	// Redis host to connect to.
	Host string `json:"host"`
	// Password associated with Redis.
	Password *string `json:"password,omitempty"`
	// Port of Redis.
	Port *int64 `default:"6379" json:"port"`
	// Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible.
	Ssl *bool `default:"false" json:"ssl"`
	// SSL connection modes.
	//   <li><b>verify-full</b> - This is the most secure mode. Always require encryption and verifies the identity of the source database server
	SslMode *DestinationRedisSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationRedisSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username associated with Redis.
	Username string `json:"username"`
}

func (d DestinationRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationRedis) GetCacheType() *DestinationRedisCacheType {
	if o == nil {
		return nil
	}
	return o.CacheType
}

func (o *DestinationRedis) GetDestinationType() DestinationRedisRedis {
	return DestinationRedisRedisRedis
}

func (o *DestinationRedis) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *DestinationRedis) GetSslMode() *DestinationRedisSSLModes {
	if o == nil {
		return nil
	}
	return o.SslMode
}

func (o *DestinationRedis) GetTunnelMethod() *DestinationRedisSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *DestinationRedis) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
