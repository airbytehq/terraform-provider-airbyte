// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type DestinationMongodbSchemasAuthorization string

const (
	DestinationMongodbSchemasAuthorizationLoginPassword DestinationMongodbSchemasAuthorization = "login/password"
)

func (e DestinationMongodbSchemasAuthorization) ToPointer() *DestinationMongodbSchemasAuthorization {
	return &e
}

func (e *DestinationMongodbSchemasAuthorization) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "login/password":
		*e = DestinationMongodbSchemasAuthorization(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbSchemasAuthorization: %v", v)
	}
}

// DestinationMongodbLoginPassword - Login/Password.
type DestinationMongodbLoginPassword struct {
	authorization DestinationMongodbSchemasAuthorization `const:"login/password" json:"authorization"`
	// Password associated with the username.
	Password string `json:"password"`
	// Username to use to access the database.
	Username string `json:"username"`
}

func (d DestinationMongodbLoginPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbLoginPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbLoginPassword) GetAuthorization() DestinationMongodbSchemasAuthorization {
	return DestinationMongodbSchemasAuthorizationLoginPassword
}

func (o *DestinationMongodbLoginPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationMongodbLoginPassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationMongodbAuthorization string

const (
	DestinationMongodbAuthorizationNone DestinationMongodbAuthorization = "none"
)

func (e DestinationMongodbAuthorization) ToPointer() *DestinationMongodbAuthorization {
	return &e
}

func (e *DestinationMongodbAuthorization) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		*e = DestinationMongodbAuthorization(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbAuthorization: %v", v)
	}
}

// DestinationMongodbNone - None.
type DestinationMongodbNone struct {
	authorization DestinationMongodbAuthorization `const:"none" json:"authorization"`
}

func (d DestinationMongodbNone) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbNone) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbNone) GetAuthorization() DestinationMongodbAuthorization {
	return DestinationMongodbAuthorizationNone
}

type DestinationMongodbAuthorizationTypeType string

const (
	DestinationMongodbAuthorizationTypeTypeNone          DestinationMongodbAuthorizationTypeType = "None"
	DestinationMongodbAuthorizationTypeTypeLoginPassword DestinationMongodbAuthorizationTypeType = "LoginPassword"
)

type DestinationMongodbAuthorizationType struct {
	None          *DestinationMongodbNone
	LoginPassword *DestinationMongodbLoginPassword

	Type DestinationMongodbAuthorizationTypeType
}

func CreateDestinationMongodbAuthorizationTypeNone(none DestinationMongodbNone) DestinationMongodbAuthorizationType {
	typ := DestinationMongodbAuthorizationTypeTypeNone

	return DestinationMongodbAuthorizationType{
		None: &none,
		Type: typ,
	}
}

func CreateDestinationMongodbAuthorizationTypeLoginPassword(loginPassword DestinationMongodbLoginPassword) DestinationMongodbAuthorizationType {
	typ := DestinationMongodbAuthorizationTypeTypeLoginPassword

	return DestinationMongodbAuthorizationType{
		LoginPassword: &loginPassword,
		Type:          typ,
	}
}

func (u *DestinationMongodbAuthorizationType) UnmarshalJSON(data []byte) error {

	none := new(DestinationMongodbNone)
	if err := utils.UnmarshalJSON(data, &none, "", true, true); err == nil {
		u.None = none
		u.Type = DestinationMongodbAuthorizationTypeTypeNone
		return nil
	}

	loginPassword := new(DestinationMongodbLoginPassword)
	if err := utils.UnmarshalJSON(data, &loginPassword, "", true, true); err == nil {
		u.LoginPassword = loginPassword
		u.Type = DestinationMongodbAuthorizationTypeTypeLoginPassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMongodbAuthorizationType) MarshalJSON() ([]byte, error) {
	if u.None != nil {
		return utils.MarshalJSON(u.None, "", true)
	}

	if u.LoginPassword != nil {
		return utils.MarshalJSON(u.LoginPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Mongodb string

const (
	MongodbMongodb Mongodb = "mongodb"
)

func (e Mongodb) ToPointer() *Mongodb {
	return &e
}

func (e *Mongodb) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mongodb":
		*e = Mongodb(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mongodb: %v", v)
	}
}

type DestinationMongodbSchemasInstanceTypeInstance string

const (
	DestinationMongodbSchemasInstanceTypeInstanceAtlas DestinationMongodbSchemasInstanceTypeInstance = "atlas"
)

func (e DestinationMongodbSchemasInstanceTypeInstance) ToPointer() *DestinationMongodbSchemasInstanceTypeInstance {
	return &e
}

func (e *DestinationMongodbSchemasInstanceTypeInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = DestinationMongodbSchemasInstanceTypeInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbSchemasInstanceTypeInstance: %v", v)
	}
}

// DestinationMongodbMongoDBAtlas - MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type DestinationMongodbMongoDBAtlas struct {
	// URL of a cluster to connect to.
	ClusterURL string                                         `json:"cluster_url"`
	Instance   *DestinationMongodbSchemasInstanceTypeInstance `default:"atlas" json:"instance"`
}

func (d DestinationMongodbMongoDBAtlas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbMongoDBAtlas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbMongoDBAtlas) GetClusterURL() string {
	if o == nil {
		return ""
	}
	return o.ClusterURL
}

func (o *DestinationMongodbMongoDBAtlas) GetInstance() *DestinationMongodbSchemasInstanceTypeInstance {
	if o == nil {
		return nil
	}
	return o.Instance
}

type DestinationMongodbSchemasInstance string

const (
	DestinationMongodbSchemasInstanceReplica DestinationMongodbSchemasInstance = "replica"
)

func (e DestinationMongodbSchemasInstance) ToPointer() *DestinationMongodbSchemasInstance {
	return &e
}

func (e *DestinationMongodbSchemasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = DestinationMongodbSchemasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbSchemasInstance: %v", v)
	}
}

// DestinationMongodbReplicaSet - MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type DestinationMongodbReplicaSet struct {
	Instance *DestinationMongodbSchemasInstance `default:"replica" json:"instance"`
	// A replica set name.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
	ServerAddresses string `json:"server_addresses"`
}

func (d DestinationMongodbReplicaSet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbReplicaSet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbReplicaSet) GetInstance() *DestinationMongodbSchemasInstance {
	if o == nil {
		return nil
	}
	return o.Instance
}

func (o *DestinationMongodbReplicaSet) GetReplicaSet() *string {
	if o == nil {
		return nil
	}
	return o.ReplicaSet
}

func (o *DestinationMongodbReplicaSet) GetServerAddresses() string {
	if o == nil {
		return ""
	}
	return o.ServerAddresses
}

type DestinationMongodbInstance string

const (
	DestinationMongodbInstanceStandalone DestinationMongodbInstance = "standalone"
)

func (e DestinationMongodbInstance) ToPointer() *DestinationMongodbInstance {
	return &e
}

func (e *DestinationMongodbInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = DestinationMongodbInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbInstance: %v", v)
	}
}

// DestinationMongodbStandaloneMongoDbInstance - MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type DestinationMongodbStandaloneMongoDbInstance struct {
	// The Host of a Mongo database to be replicated.
	Host     string                      `json:"host"`
	Instance *DestinationMongodbInstance `default:"standalone" json:"instance"`
	// The Port of a Mongo database to be replicated.
	Port *int64 `default:"27017" json:"port"`
}

func (d DestinationMongodbStandaloneMongoDbInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbStandaloneMongoDbInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbStandaloneMongoDbInstance) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMongodbStandaloneMongoDbInstance) GetInstance() *DestinationMongodbInstance {
	if o == nil {
		return nil
	}
	return o.Instance
}

func (o *DestinationMongodbStandaloneMongoDbInstance) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type DestinationMongodbMongoDbInstanceTypeType string

const (
	DestinationMongodbMongoDbInstanceTypeTypeStandaloneMongoDbInstance DestinationMongodbMongoDbInstanceTypeType = "StandaloneMongoDbInstance"
	DestinationMongodbMongoDbInstanceTypeTypeReplicaSet                DestinationMongodbMongoDbInstanceTypeType = "ReplicaSet"
	DestinationMongodbMongoDbInstanceTypeTypeMongoDBAtlas              DestinationMongodbMongoDbInstanceTypeType = "MongoDBAtlas"
)

type DestinationMongodbMongoDbInstanceType struct {
	StandaloneMongoDbInstance *DestinationMongodbStandaloneMongoDbInstance
	ReplicaSet                *DestinationMongodbReplicaSet
	MongoDBAtlas              *DestinationMongodbMongoDBAtlas

	Type DestinationMongodbMongoDbInstanceTypeType
}

func CreateDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance(standaloneMongoDbInstance DestinationMongodbStandaloneMongoDbInstance) DestinationMongodbMongoDbInstanceType {
	typ := DestinationMongodbMongoDbInstanceTypeTypeStandaloneMongoDbInstance

	return DestinationMongodbMongoDbInstanceType{
		StandaloneMongoDbInstance: &standaloneMongoDbInstance,
		Type:                      typ,
	}
}

func CreateDestinationMongodbMongoDbInstanceTypeReplicaSet(replicaSet DestinationMongodbReplicaSet) DestinationMongodbMongoDbInstanceType {
	typ := DestinationMongodbMongoDbInstanceTypeTypeReplicaSet

	return DestinationMongodbMongoDbInstanceType{
		ReplicaSet: &replicaSet,
		Type:       typ,
	}
}

func CreateDestinationMongodbMongoDbInstanceTypeMongoDBAtlas(mongoDBAtlas DestinationMongodbMongoDBAtlas) DestinationMongodbMongoDbInstanceType {
	typ := DestinationMongodbMongoDbInstanceTypeTypeMongoDBAtlas

	return DestinationMongodbMongoDbInstanceType{
		MongoDBAtlas: &mongoDBAtlas,
		Type:         typ,
	}
}

func (u *DestinationMongodbMongoDbInstanceType) UnmarshalJSON(data []byte) error {

	mongoDBAtlas := new(DestinationMongodbMongoDBAtlas)
	if err := utils.UnmarshalJSON(data, &mongoDBAtlas, "", true, true); err == nil {
		u.MongoDBAtlas = mongoDBAtlas
		u.Type = DestinationMongodbMongoDbInstanceTypeTypeMongoDBAtlas
		return nil
	}

	standaloneMongoDbInstance := new(DestinationMongodbStandaloneMongoDbInstance)
	if err := utils.UnmarshalJSON(data, &standaloneMongoDbInstance, "", true, true); err == nil {
		u.StandaloneMongoDbInstance = standaloneMongoDbInstance
		u.Type = DestinationMongodbMongoDbInstanceTypeTypeStandaloneMongoDbInstance
		return nil
	}

	replicaSet := new(DestinationMongodbReplicaSet)
	if err := utils.UnmarshalJSON(data, &replicaSet, "", true, true); err == nil {
		u.ReplicaSet = replicaSet
		u.Type = DestinationMongodbMongoDbInstanceTypeTypeReplicaSet
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMongodbMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.StandaloneMongoDbInstance != nil {
		return utils.MarshalJSON(u.StandaloneMongoDbInstance, "", true)
	}

	if u.ReplicaSet != nil {
		return utils.MarshalJSON(u.ReplicaSet, "", true)
	}

	if u.MongoDBAtlas != nil {
		return utils.MarshalJSON(u.MongoDBAtlas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMongodbSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationMongodbSchemasTunnelMethodTunnelMethod string

const (
	DestinationMongodbSchemasTunnelMethodTunnelMethodSSHPasswordAuth DestinationMongodbSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationMongodbSchemasTunnelMethodTunnelMethod) ToPointer() *DestinationMongodbSchemasTunnelMethodTunnelMethod {
	return &e
}

func (e *DestinationMongodbSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMongodbSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

// DestinationMongodbPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMongodbPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationMongodbSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationMongodbPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMongodbPasswordAuthentication) GetTunnelMethod() DestinationMongodbSchemasTunnelMethodTunnelMethod {
	return DestinationMongodbSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *DestinationMongodbPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMongodbPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationMongodbPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationMongodbSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationMongodbSchemasTunnelMethod string

const (
	DestinationMongodbSchemasTunnelMethodSSHKeyAuth DestinationMongodbSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationMongodbSchemasTunnelMethod) ToPointer() *DestinationMongodbSchemasTunnelMethod {
	return &e
}

func (e *DestinationMongodbSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationMongodbSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbSchemasTunnelMethod: %v", v)
	}
}

// DestinationMongodbSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMongodbSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationMongodbSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationMongodbSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationMongodbSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMongodbSSHKeyAuthentication) GetTunnelMethod() DestinationMongodbSchemasTunnelMethod {
	return DestinationMongodbSchemasTunnelMethodSSHKeyAuth
}

func (o *DestinationMongodbSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMongodbSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationMongodbTunnelMethod - No ssh tunnel needed to connect to database
type DestinationMongodbTunnelMethod string

const (
	DestinationMongodbTunnelMethodNoTunnel DestinationMongodbTunnelMethod = "NO_TUNNEL"
)

func (e DestinationMongodbTunnelMethod) ToPointer() *DestinationMongodbTunnelMethod {
	return &e
}

func (e *DestinationMongodbTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationMongodbTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMongodbTunnelMethod: %v", v)
	}
}

// DestinationMongodbNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMongodbNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationMongodbTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationMongodbNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodbNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodbNoTunnel) GetTunnelMethod() DestinationMongodbTunnelMethod {
	return DestinationMongodbTunnelMethodNoTunnel
}

type DestinationMongodbSSHTunnelMethodType string

const (
	DestinationMongodbSSHTunnelMethodTypeNoTunnel               DestinationMongodbSSHTunnelMethodType = "NoTunnel"
	DestinationMongodbSSHTunnelMethodTypeSSHKeyAuthentication   DestinationMongodbSSHTunnelMethodType = "SSHKeyAuthentication"
	DestinationMongodbSSHTunnelMethodTypePasswordAuthentication DestinationMongodbSSHTunnelMethodType = "PasswordAuthentication"
)

type DestinationMongodbSSHTunnelMethod struct {
	NoTunnel               *DestinationMongodbNoTunnel
	SSHKeyAuthentication   *DestinationMongodbSSHKeyAuthentication
	PasswordAuthentication *DestinationMongodbPasswordAuthentication

	Type DestinationMongodbSSHTunnelMethodType
}

func CreateDestinationMongodbSSHTunnelMethodNoTunnel(noTunnel DestinationMongodbNoTunnel) DestinationMongodbSSHTunnelMethod {
	typ := DestinationMongodbSSHTunnelMethodTypeNoTunnel

	return DestinationMongodbSSHTunnelMethod{
		NoTunnel: &noTunnel,
		Type:     typ,
	}
}

func CreateDestinationMongodbSSHTunnelMethodSSHKeyAuthentication(sshKeyAuthentication DestinationMongodbSSHKeyAuthentication) DestinationMongodbSSHTunnelMethod {
	typ := DestinationMongodbSSHTunnelMethodTypeSSHKeyAuthentication

	return DestinationMongodbSSHTunnelMethod{
		SSHKeyAuthentication: &sshKeyAuthentication,
		Type:                 typ,
	}
}

func CreateDestinationMongodbSSHTunnelMethodPasswordAuthentication(passwordAuthentication DestinationMongodbPasswordAuthentication) DestinationMongodbSSHTunnelMethod {
	typ := DestinationMongodbSSHTunnelMethodTypePasswordAuthentication

	return DestinationMongodbSSHTunnelMethod{
		PasswordAuthentication: &passwordAuthentication,
		Type:                   typ,
	}
}

func (u *DestinationMongodbSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	noTunnel := new(DestinationMongodbNoTunnel)
	if err := utils.UnmarshalJSON(data, &noTunnel, "", true, true); err == nil {
		u.NoTunnel = noTunnel
		u.Type = DestinationMongodbSSHTunnelMethodTypeNoTunnel
		return nil
	}

	sshKeyAuthentication := new(DestinationMongodbSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sshKeyAuthentication, "", true, true); err == nil {
		u.SSHKeyAuthentication = sshKeyAuthentication
		u.Type = DestinationMongodbSSHTunnelMethodTypeSSHKeyAuthentication
		return nil
	}

	passwordAuthentication := new(DestinationMongodbPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &passwordAuthentication, "", true, true); err == nil {
		u.PasswordAuthentication = passwordAuthentication
		u.Type = DestinationMongodbSSHTunnelMethodTypePasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMongodbSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.NoTunnel != nil {
		return utils.MarshalJSON(u.NoTunnel, "", true)
	}

	if u.SSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SSHKeyAuthentication, "", true)
	}

	if u.PasswordAuthentication != nil {
		return utils.MarshalJSON(u.PasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMongodb struct {
	// Authorization type.
	AuthType DestinationMongodbAuthorizationType `json:"auth_type"`
	// Name of the database.
	Database        string  `json:"database"`
	destinationType Mongodb `const:"mongodb" json:"destinationType"`
	// MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *DestinationMongodbMongoDbInstanceType `json:"instance_type,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMongodbSSHTunnelMethod `json:"tunnel_method,omitempty"`
}

func (d DestinationMongodb) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMongodb) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMongodb) GetAuthType() DestinationMongodbAuthorizationType {
	if o == nil {
		return DestinationMongodbAuthorizationType{}
	}
	return o.AuthType
}

func (o *DestinationMongodb) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationMongodb) GetDestinationType() Mongodb {
	return MongodbMongodb
}

func (o *DestinationMongodb) GetInstanceType() *DestinationMongodbMongoDbInstanceType {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *DestinationMongodb) GetTunnelMethod() *DestinationMongodbSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}
