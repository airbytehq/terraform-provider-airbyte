// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMailchimpUpdateAuthenticationAPIKeyAuthType string

const (
	SourceMailchimpUpdateAuthenticationAPIKeyAuthTypeApikey SourceMailchimpUpdateAuthenticationAPIKeyAuthType = "apikey"
)

func (e SourceMailchimpUpdateAuthenticationAPIKeyAuthType) ToPointer() *SourceMailchimpUpdateAuthenticationAPIKeyAuthType {
	return &e
}

func (e *SourceMailchimpUpdateAuthenticationAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apikey":
		*e = SourceMailchimpUpdateAuthenticationAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMailchimpUpdateAuthenticationAPIKeyAuthType: %v", v)
	}
}

type SourceMailchimpUpdateAuthenticationAPIKey struct {
	// Mailchimp API Key. See the <a href="https://docs.airbyte.com/integrations/sources/mailchimp">docs</a> for information on how to generate this key.
	Apikey   string                                            `json:"apikey"`
	AuthType SourceMailchimpUpdateAuthenticationAPIKeyAuthType `json:"auth_type"`
}

type SourceMailchimpUpdateAuthenticationOAuth20AuthType string

const (
	SourceMailchimpUpdateAuthenticationOAuth20AuthTypeOauth20 SourceMailchimpUpdateAuthenticationOAuth20AuthType = "oauth2.0"
)

func (e SourceMailchimpUpdateAuthenticationOAuth20AuthType) ToPointer() *SourceMailchimpUpdateAuthenticationOAuth20AuthType {
	return &e
}

func (e *SourceMailchimpUpdateAuthenticationOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceMailchimpUpdateAuthenticationOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMailchimpUpdateAuthenticationOAuth20AuthType: %v", v)
	}
}

type SourceMailchimpUpdateAuthenticationOAuth20 struct {
	// An access token generated using the above client ID and secret.
	AccessToken string                                             `json:"access_token"`
	AuthType    SourceMailchimpUpdateAuthenticationOAuth20AuthType `json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

type SourceMailchimpUpdateAuthenticationType string

const (
	SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationOAuth20 SourceMailchimpUpdateAuthenticationType = "source-mailchimp-update_Authentication_OAuth2.0"
	SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationAPIKey  SourceMailchimpUpdateAuthenticationType = "source-mailchimp-update_Authentication_API Key"
)

type SourceMailchimpUpdateAuthentication struct {
	SourceMailchimpUpdateAuthenticationOAuth20 *SourceMailchimpUpdateAuthenticationOAuth20
	SourceMailchimpUpdateAuthenticationAPIKey  *SourceMailchimpUpdateAuthenticationAPIKey

	Type SourceMailchimpUpdateAuthenticationType
}

func CreateSourceMailchimpUpdateAuthenticationSourceMailchimpUpdateAuthenticationOAuth20(sourceMailchimpUpdateAuthenticationOAuth20 SourceMailchimpUpdateAuthenticationOAuth20) SourceMailchimpUpdateAuthentication {
	typ := SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationOAuth20

	return SourceMailchimpUpdateAuthentication{
		SourceMailchimpUpdateAuthenticationOAuth20: &sourceMailchimpUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceMailchimpUpdateAuthenticationSourceMailchimpUpdateAuthenticationAPIKey(sourceMailchimpUpdateAuthenticationAPIKey SourceMailchimpUpdateAuthenticationAPIKey) SourceMailchimpUpdateAuthentication {
	typ := SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationAPIKey

	return SourceMailchimpUpdateAuthentication{
		SourceMailchimpUpdateAuthenticationAPIKey: &sourceMailchimpUpdateAuthenticationAPIKey,
		Type: typ,
	}
}

func (u *SourceMailchimpUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceMailchimpUpdateAuthenticationAPIKey := new(SourceMailchimpUpdateAuthenticationAPIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMailchimpUpdateAuthenticationAPIKey); err == nil {
		u.SourceMailchimpUpdateAuthenticationAPIKey = sourceMailchimpUpdateAuthenticationAPIKey
		u.Type = SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationAPIKey
		return nil
	}

	sourceMailchimpUpdateAuthenticationOAuth20 := new(SourceMailchimpUpdateAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMailchimpUpdateAuthenticationOAuth20); err == nil {
		u.SourceMailchimpUpdateAuthenticationOAuth20 = sourceMailchimpUpdateAuthenticationOAuth20
		u.Type = SourceMailchimpUpdateAuthenticationTypeSourceMailchimpUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMailchimpUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceMailchimpUpdateAuthenticationAPIKey != nil {
		return json.Marshal(u.SourceMailchimpUpdateAuthenticationAPIKey)
	}

	if u.SourceMailchimpUpdateAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceMailchimpUpdateAuthenticationOAuth20)
	}

	return nil, nil
}

type SourceMailchimpUpdate struct {
	CampaignID  *string                              `json:"campaign_id,omitempty"`
	Credentials *SourceMailchimpUpdateAuthentication `json:"credentials,omitempty"`
}
