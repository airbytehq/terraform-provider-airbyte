// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType string

const (
	SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthTypeSandboxAccessToken SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType = "sandbox_access_token"
)

func (e SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType) ToPointer() *SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType {
	return &e
}

func (e *SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sandbox_access_token":
		*e = SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType: %v", v)
	}
}

// SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken - Authentication method
type SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken struct {
	// The long-term authorized access token.
	AccessToken string `json:"access_token"`
	// The Advertiser ID which generated for the developer's Sandbox application.
	AdvertiserID string                                                                     `json:"advertiser_id"`
	AuthType     *SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenAuthType `json:"auth_type,omitempty"`
}

type SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType string

const (
	SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthTypeOauth20 SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType) ToPointer() *SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType {
	return &e
}

func (e *SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType: %v", v)
	}
}

// SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 - Authentication method
type SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 struct {
	// Long-term Authorized Access Token.
	AccessToken string `json:"access_token"`
	// The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
	AdvertiserID *string `json:"advertiser_id,omitempty"`
	// The Developer Application App ID.
	AppID    string                                                          `json:"app_id"`
	AuthType *SourceTiktokMarketingUpdateAuthenticationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// The Developer Application Secret.
	Secret string `json:"secret"`
}

type SourceTiktokMarketingUpdateAuthenticationMethodType string

const (
	SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodOAuth20            SourceTiktokMarketingUpdateAuthenticationMethodType = "source-tiktok-marketing-update_Authentication Method_OAuth2.0"
	SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken SourceTiktokMarketingUpdateAuthenticationMethodType = "source-tiktok-marketing-update_Authentication Method_Sandbox Access Token"
)

type SourceTiktokMarketingUpdateAuthenticationMethod struct {
	SourceTiktokMarketingUpdateAuthenticationMethodOAuth20            *SourceTiktokMarketingUpdateAuthenticationMethodOAuth20
	SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken *SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken

	Type SourceTiktokMarketingUpdateAuthenticationMethodType
}

func CreateSourceTiktokMarketingUpdateAuthenticationMethodSourceTiktokMarketingUpdateAuthenticationMethodOAuth20(sourceTiktokMarketingUpdateAuthenticationMethodOAuth20 SourceTiktokMarketingUpdateAuthenticationMethodOAuth20) SourceTiktokMarketingUpdateAuthenticationMethod {
	typ := SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodOAuth20

	return SourceTiktokMarketingUpdateAuthenticationMethod{
		SourceTiktokMarketingUpdateAuthenticationMethodOAuth20: &sourceTiktokMarketingUpdateAuthenticationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceTiktokMarketingUpdateAuthenticationMethodSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken(sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken) SourceTiktokMarketingUpdateAuthenticationMethod {
	typ := SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken

	return SourceTiktokMarketingUpdateAuthenticationMethod{
		SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken: &sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken,
		Type: typ,
	}
}

func (u *SourceTiktokMarketingUpdateAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken := new(SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken); err == nil {
		u.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken = sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken
		u.Type = SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken
		return nil
	}

	sourceTiktokMarketingUpdateAuthenticationMethodOAuth20 := new(SourceTiktokMarketingUpdateAuthenticationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTiktokMarketingUpdateAuthenticationMethodOAuth20); err == nil {
		u.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 = sourceTiktokMarketingUpdateAuthenticationMethodOAuth20
		u.Type = SourceTiktokMarketingUpdateAuthenticationMethodTypeSourceTiktokMarketingUpdateAuthenticationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceTiktokMarketingUpdateAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken != nil {
		return json.Marshal(u.SourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken)
	}

	if u.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20 != nil {
		return json.Marshal(u.SourceTiktokMarketingUpdateAuthenticationMethodOAuth20)
	}

	return nil, nil
}

type SourceTiktokMarketingUpdate struct {
	// The attribution window in days.
	AttributionWindow *int64 `json:"attribution_window,omitempty"`
	// Authentication method
	Credentials *SourceTiktokMarketingUpdateAuthenticationMethod `json:"credentials,omitempty"`
	// The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DD. All data generated between start_date and this date will be replicated. Not setting this option will result in always syncing the data till the current date.
	EndDate *types.Date `json:"end_date,omitempty"`
	// Set to active if you want to include deleted data in reports.
	IncludeDeleted *bool `json:"include_deleted,omitempty"`
	// The Start Date in format: YYYY-MM-DD. Any data before this date will not be replicated. If this parameter is not set, all data will be replicated.
	StartDate *types.Date `json:"start_date,omitempty"`
}
