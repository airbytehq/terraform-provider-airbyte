// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskChatAuthorizationMethodAccessTokenCredentials string

const (
	SourceZendeskChatAuthorizationMethodAccessTokenCredentialsAccessToken SourceZendeskChatAuthorizationMethodAccessTokenCredentials = "access_token"
)

func (e SourceZendeskChatAuthorizationMethodAccessTokenCredentials) ToPointer() *SourceZendeskChatAuthorizationMethodAccessTokenCredentials {
	return &e
}

func (e *SourceZendeskChatAuthorizationMethodAccessTokenCredentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceZendeskChatAuthorizationMethodAccessTokenCredentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskChatAuthorizationMethodAccessTokenCredentials: %v", v)
	}
}

type SourceZendeskChatAuthorizationMethodAccessToken struct {
	// The Access Token to make authenticated requests.
	AccessToken string                                                     `json:"access_token"`
	credentials SourceZendeskChatAuthorizationMethodAccessTokenCredentials `const:"access_token" json:"credentials"`
}

func (s SourceZendeskChatAuthorizationMethodAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskChatAuthorizationMethodAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskChatAuthorizationMethodAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskChatAuthorizationMethodAccessToken) GetCredentials() SourceZendeskChatAuthorizationMethodAccessTokenCredentials {
	return SourceZendeskChatAuthorizationMethodAccessTokenCredentialsAccessToken
}

type SourceZendeskChatAuthorizationMethodOAuth20Credentials string

const (
	SourceZendeskChatAuthorizationMethodOAuth20CredentialsOauth20 SourceZendeskChatAuthorizationMethodOAuth20Credentials = "oauth2.0"
)

func (e SourceZendeskChatAuthorizationMethodOAuth20Credentials) ToPointer() *SourceZendeskChatAuthorizationMethodOAuth20Credentials {
	return &e
}

func (e *SourceZendeskChatAuthorizationMethodOAuth20Credentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskChatAuthorizationMethodOAuth20Credentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskChatAuthorizationMethodOAuth20Credentials: %v", v)
	}
}

type SourceZendeskChatAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken *string `json:"access_token,omitempty"`
	// The Client ID of your OAuth application
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string                                                `json:"client_secret,omitempty"`
	credentials  SourceZendeskChatAuthorizationMethodOAuth20Credentials `const:"oauth2.0" json:"credentials"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

func (s SourceZendeskChatAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskChatAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskChatAuthorizationMethodOAuth20) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceZendeskChatAuthorizationMethodOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskChatAuthorizationMethodOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourceZendeskChatAuthorizationMethodOAuth20) GetCredentials() SourceZendeskChatAuthorizationMethodOAuth20Credentials {
	return SourceZendeskChatAuthorizationMethodOAuth20CredentialsOauth20
}

func (o *SourceZendeskChatAuthorizationMethodOAuth20) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

type SourceZendeskChatAuthorizationMethodType string

const (
	SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodOAuth20     SourceZendeskChatAuthorizationMethodType = "source-zendesk-chat_Authorization Method_OAuth2.0"
	SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodAccessToken SourceZendeskChatAuthorizationMethodType = "source-zendesk-chat_Authorization Method_Access Token"
)

type SourceZendeskChatAuthorizationMethod struct {
	SourceZendeskChatAuthorizationMethodOAuth20     *SourceZendeskChatAuthorizationMethodOAuth20
	SourceZendeskChatAuthorizationMethodAccessToken *SourceZendeskChatAuthorizationMethodAccessToken

	Type SourceZendeskChatAuthorizationMethodType
}

func CreateSourceZendeskChatAuthorizationMethodSourceZendeskChatAuthorizationMethodOAuth20(sourceZendeskChatAuthorizationMethodOAuth20 SourceZendeskChatAuthorizationMethodOAuth20) SourceZendeskChatAuthorizationMethod {
	typ := SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodOAuth20

	return SourceZendeskChatAuthorizationMethod{
		SourceZendeskChatAuthorizationMethodOAuth20: &sourceZendeskChatAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskChatAuthorizationMethodSourceZendeskChatAuthorizationMethodAccessToken(sourceZendeskChatAuthorizationMethodAccessToken SourceZendeskChatAuthorizationMethodAccessToken) SourceZendeskChatAuthorizationMethod {
	typ := SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodAccessToken

	return SourceZendeskChatAuthorizationMethod{
		SourceZendeskChatAuthorizationMethodAccessToken: &sourceZendeskChatAuthorizationMethodAccessToken,
		Type: typ,
	}
}

func (u *SourceZendeskChatAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceZendeskChatAuthorizationMethodAccessToken := new(SourceZendeskChatAuthorizationMethodAccessToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskChatAuthorizationMethodAccessToken, "", true, true); err == nil {
		u.SourceZendeskChatAuthorizationMethodAccessToken = sourceZendeskChatAuthorizationMethodAccessToken
		u.Type = SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodAccessToken
		return nil
	}

	sourceZendeskChatAuthorizationMethodOAuth20 := new(SourceZendeskChatAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskChatAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceZendeskChatAuthorizationMethodOAuth20 = sourceZendeskChatAuthorizationMethodOAuth20
		u.Type = SourceZendeskChatAuthorizationMethodTypeSourceZendeskChatAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskChatAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskChatAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceZendeskChatAuthorizationMethodAccessToken != nil {
		return utils.MarshalJSON(u.SourceZendeskChatAuthorizationMethodAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskChatZendeskChat string

const (
	SourceZendeskChatZendeskChatZendeskChat SourceZendeskChatZendeskChat = "zendesk-chat"
)

func (e SourceZendeskChatZendeskChat) ToPointer() *SourceZendeskChatZendeskChat {
	return &e
}

func (e *SourceZendeskChatZendeskChat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-chat":
		*e = SourceZendeskChatZendeskChat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskChatZendeskChat: %v", v)
	}
}

type SourceZendeskChat struct {
	Credentials *SourceZendeskChatAuthorizationMethod `json:"credentials,omitempty"`
	sourceType  SourceZendeskChatZendeskChat          `const:"zendesk-chat" json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Chat API, in the format YYYY-MM-DDT00:00:00Z.
	StartDate time.Time `json:"start_date"`
	// Required if you access Zendesk Chat from a Zendesk Support subdomain.
	Subdomain *string `default:"" json:"subdomain"`
}

func (s SourceZendeskChat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskChat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskChat) GetCredentials() *SourceZendeskChatAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskChat) GetSourceType() SourceZendeskChatZendeskChat {
	return SourceZendeskChatZendeskChatZendeskChat
}

func (o *SourceZendeskChat) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceZendeskChat) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}
