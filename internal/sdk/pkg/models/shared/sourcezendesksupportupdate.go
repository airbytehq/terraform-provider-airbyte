// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskSupportUpdateAuthenticationAPITokenCredentials string

const (
	SourceZendeskSupportUpdateAuthenticationAPITokenCredentialsAPIToken SourceZendeskSupportUpdateAuthenticationAPITokenCredentials = "api_token"
)

func (e SourceZendeskSupportUpdateAuthenticationAPITokenCredentials) ToPointer() *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials {
	return &e
}

func (e *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSupportUpdateAuthenticationAPITokenCredentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportUpdateAuthenticationAPITokenCredentials: %v", v)
	}
}

// SourceZendeskSupportUpdateAuthenticationAPIToken - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportUpdateAuthenticationAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See our <a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide">full documentation</a> for more information on generating this token.
	APIToken    string                                                       `json:"api_token"`
	credentials *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials `const:"api_token" json:"credentials,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`
}

func (s SourceZendeskSupportUpdateAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupportUpdateAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupportUpdateAuthenticationAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskSupportUpdateAuthenticationAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskSupportUpdateAuthenticationAPIToken) GetCredentials() *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials {
	return SourceZendeskSupportUpdateAuthenticationAPITokenCredentialsAPIToken.ToPointer()
}

func (o *SourceZendeskSupportUpdateAuthenticationAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskSupportUpdateAuthenticationOAuth20Credentials string

const (
	SourceZendeskSupportUpdateAuthenticationOAuth20CredentialsOauth20 SourceZendeskSupportUpdateAuthenticationOAuth20Credentials = "oauth2.0"
)

func (e SourceZendeskSupportUpdateAuthenticationOAuth20Credentials) ToPointer() *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials {
	return &e
}

func (e *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSupportUpdateAuthenticationOAuth20Credentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportUpdateAuthenticationOAuth20Credentials: %v", v)
	}
}

// SourceZendeskSupportUpdateAuthenticationOAuth20 - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportUpdateAuthenticationOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The OAuth access token. See the <a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/">Zendesk docs</a> for more information on generating this token.
	AccessToken string `json:"access_token"`
	// The OAuth client's ID. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientID *string `json:"client_id,omitempty"`
	// The OAuth client secret. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientSecret *string                                                     `json:"client_secret,omitempty"`
	credentials  *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials `const:"oauth2.0" json:"credentials,omitempty"`
}

func (s SourceZendeskSupportUpdateAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupportUpdateAuthenticationOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupportUpdateAuthenticationOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskSupportUpdateAuthenticationOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskSupportUpdateAuthenticationOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskSupportUpdateAuthenticationOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourceZendeskSupportUpdateAuthenticationOAuth20) GetCredentials() *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials {
	return SourceZendeskSupportUpdateAuthenticationOAuth20CredentialsOauth20.ToPointer()
}

type SourceZendeskSupportUpdateAuthenticationType string

const (
	SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20  SourceZendeskSupportUpdateAuthenticationType = "source-zendesk-support-update_Authentication_OAuth2.0"
	SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken SourceZendeskSupportUpdateAuthenticationType = "source-zendesk-support-update_Authentication_API Token"
)

type SourceZendeskSupportUpdateAuthentication struct {
	SourceZendeskSupportUpdateAuthenticationOAuth20  *SourceZendeskSupportUpdateAuthenticationOAuth20
	SourceZendeskSupportUpdateAuthenticationAPIToken *SourceZendeskSupportUpdateAuthenticationAPIToken

	Type SourceZendeskSupportUpdateAuthenticationType
}

func CreateSourceZendeskSupportUpdateAuthenticationSourceZendeskSupportUpdateAuthenticationOAuth20(sourceZendeskSupportUpdateAuthenticationOAuth20 SourceZendeskSupportUpdateAuthenticationOAuth20) SourceZendeskSupportUpdateAuthentication {
	typ := SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20

	return SourceZendeskSupportUpdateAuthentication{
		SourceZendeskSupportUpdateAuthenticationOAuth20: &sourceZendeskSupportUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSupportUpdateAuthenticationSourceZendeskSupportUpdateAuthenticationAPIToken(sourceZendeskSupportUpdateAuthenticationAPIToken SourceZendeskSupportUpdateAuthenticationAPIToken) SourceZendeskSupportUpdateAuthentication {
	typ := SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken

	return SourceZendeskSupportUpdateAuthentication{
		SourceZendeskSupportUpdateAuthenticationAPIToken: &sourceZendeskSupportUpdateAuthenticationAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSupportUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceZendeskSupportUpdateAuthenticationAPIToken := new(SourceZendeskSupportUpdateAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSupportUpdateAuthenticationAPIToken, "", true, true); err == nil {
		u.SourceZendeskSupportUpdateAuthenticationAPIToken = sourceZendeskSupportUpdateAuthenticationAPIToken
		u.Type = SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken
		return nil
	}

	sourceZendeskSupportUpdateAuthenticationOAuth20 := new(SourceZendeskSupportUpdateAuthenticationOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSupportUpdateAuthenticationOAuth20, "", true, true); err == nil {
		u.SourceZendeskSupportUpdateAuthenticationOAuth20 = sourceZendeskSupportUpdateAuthenticationOAuth20
		u.Type = SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSupportUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSupportUpdateAuthenticationOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskSupportUpdateAuthenticationOAuth20, "", true)
	}

	if u.SourceZendeskSupportUpdateAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskSupportUpdateAuthenticationAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskSupportUpdate struct {
	// Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
	Credentials *SourceZendeskSupportUpdateAuthentication `json:"credentials,omitempty"`
	// Makes each stream read a single page of data.
	IgnorePagination *bool `default:"false" json:"ignore_pagination"`
	// The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskSupportUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupportUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupportUpdate) GetCredentials() *SourceZendeskSupportUpdateAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskSupportUpdate) GetIgnorePagination() *bool {
	if o == nil {
		return nil
	}
	return o.IgnorePagination
}

func (o *SourceZendeskSupportUpdate) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceZendeskSupportUpdate) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
