// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskSupportUpdateAuthenticationAPITokenCredentials string

const (
	SourceZendeskSupportUpdateAuthenticationAPITokenCredentialsAPIToken SourceZendeskSupportUpdateAuthenticationAPITokenCredentials = "api_token"
)

func (e SourceZendeskSupportUpdateAuthenticationAPITokenCredentials) ToPointer() *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials {
	return &e
}

func (e *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSupportUpdateAuthenticationAPITokenCredentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportUpdateAuthenticationAPITokenCredentials: %v", v)
	}
}

// SourceZendeskSupportUpdateAuthenticationAPIToken - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportUpdateAuthenticationAPIToken struct {
	// The value of the API token generated. See our <a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide">full documentation</a> for more information on generating this token.
	APIToken    string                                                       `json:"api_token"`
	Credentials *SourceZendeskSupportUpdateAuthenticationAPITokenCredentials `json:"credentials,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskSupportUpdateAuthenticationAPIToken SourceZendeskSupportUpdateAuthenticationAPIToken

func (c *SourceZendeskSupportUpdateAuthenticationAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSupportUpdateAuthenticationAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSupportUpdateAuthenticationAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_token")
	delete(additionalFields, "credentials")
	delete(additionalFields, "email")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSupportUpdateAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSupportUpdateAuthenticationAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSupportUpdateAuthenticationOAuth20Credentials string

const (
	SourceZendeskSupportUpdateAuthenticationOAuth20CredentialsOauth20 SourceZendeskSupportUpdateAuthenticationOAuth20Credentials = "oauth2.0"
)

func (e SourceZendeskSupportUpdateAuthenticationOAuth20Credentials) ToPointer() *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials {
	return &e
}

func (e *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSupportUpdateAuthenticationOAuth20Credentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportUpdateAuthenticationOAuth20Credentials: %v", v)
	}
}

// SourceZendeskSupportUpdateAuthenticationOAuth20 - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportUpdateAuthenticationOAuth20 struct {
	// The OAuth access token. See the <a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/">Zendesk docs</a> for more information on generating this token.
	AccessToken string `json:"access_token"`
	// The OAuth client's ID. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientID *string `json:"client_id,omitempty"`
	// The OAuth client secret. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientSecret *string                                                     `json:"client_secret,omitempty"`
	Credentials  *SourceZendeskSupportUpdateAuthenticationOAuth20Credentials `json:"credentials,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskSupportUpdateAuthenticationOAuth20 SourceZendeskSupportUpdateAuthenticationOAuth20

func (c *SourceZendeskSupportUpdateAuthenticationOAuth20) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSupportUpdateAuthenticationOAuth20{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSupportUpdateAuthenticationOAuth20(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "access_token")
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")
	delete(additionalFields, "credentials")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSupportUpdateAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSupportUpdateAuthenticationOAuth20(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSupportUpdateAuthenticationType string

const (
	SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20  SourceZendeskSupportUpdateAuthenticationType = "source-zendesk-support-update_Authentication_OAuth2.0"
	SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken SourceZendeskSupportUpdateAuthenticationType = "source-zendesk-support-update_Authentication_API Token"
)

type SourceZendeskSupportUpdateAuthentication struct {
	SourceZendeskSupportUpdateAuthenticationOAuth20  *SourceZendeskSupportUpdateAuthenticationOAuth20
	SourceZendeskSupportUpdateAuthenticationAPIToken *SourceZendeskSupportUpdateAuthenticationAPIToken

	Type SourceZendeskSupportUpdateAuthenticationType
}

func CreateSourceZendeskSupportUpdateAuthenticationSourceZendeskSupportUpdateAuthenticationOAuth20(sourceZendeskSupportUpdateAuthenticationOAuth20 SourceZendeskSupportUpdateAuthenticationOAuth20) SourceZendeskSupportUpdateAuthentication {
	typ := SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20

	return SourceZendeskSupportUpdateAuthentication{
		SourceZendeskSupportUpdateAuthenticationOAuth20: &sourceZendeskSupportUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSupportUpdateAuthenticationSourceZendeskSupportUpdateAuthenticationAPIToken(sourceZendeskSupportUpdateAuthenticationAPIToken SourceZendeskSupportUpdateAuthenticationAPIToken) SourceZendeskSupportUpdateAuthentication {
	typ := SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken

	return SourceZendeskSupportUpdateAuthentication{
		SourceZendeskSupportUpdateAuthenticationAPIToken: &sourceZendeskSupportUpdateAuthenticationAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSupportUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceZendeskSupportUpdateAuthenticationAPIToken := new(SourceZendeskSupportUpdateAuthenticationAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSupportUpdateAuthenticationAPIToken); err == nil {
		u.SourceZendeskSupportUpdateAuthenticationAPIToken = sourceZendeskSupportUpdateAuthenticationAPIToken
		u.Type = SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationAPIToken
		return nil
	}

	sourceZendeskSupportUpdateAuthenticationOAuth20 := new(SourceZendeskSupportUpdateAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSupportUpdateAuthenticationOAuth20); err == nil {
		u.SourceZendeskSupportUpdateAuthenticationOAuth20 = sourceZendeskSupportUpdateAuthenticationOAuth20
		u.Type = SourceZendeskSupportUpdateAuthenticationTypeSourceZendeskSupportUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSupportUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSupportUpdateAuthenticationAPIToken != nil {
		return json.Marshal(u.SourceZendeskSupportUpdateAuthenticationAPIToken)
	}

	if u.SourceZendeskSupportUpdateAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceZendeskSupportUpdateAuthenticationOAuth20)
	}

	return nil, nil
}

type SourceZendeskSupportUpdate struct {
	// Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
	Credentials *SourceZendeskSupportUpdateAuthentication `json:"credentials,omitempty"`
	// Makes each stream read a single page of data.
	IgnorePagination *bool `json:"ignore_pagination,omitempty"`
	// The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}
