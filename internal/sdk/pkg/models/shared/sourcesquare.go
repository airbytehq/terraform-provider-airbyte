// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceSquareSchemasAuthType string

const (
	SourceSquareSchemasAuthTypeAPIKey SourceSquareSchemasAuthType = "API Key"
)

func (e SourceSquareSchemasAuthType) ToPointer() *SourceSquareSchemasAuthType {
	return &e
}

func (e *SourceSquareSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Key":
		*e = SourceSquareSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareSchemasAuthType: %v", v)
	}
}

// SourceSquareAPIKey - Choose how to authenticate to Square.
type SourceSquareAPIKey struct {
	// The API key for a Square application
	APIKey   string                      `json:"api_key"`
	authType SourceSquareSchemasAuthType `const:"API Key" json:"auth_type"`
}

func (s SourceSquareAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSquareAPIKey) GetAuthType() SourceSquareSchemasAuthType {
	return SourceSquareSchemasAuthTypeAPIKey
}

type SourceSquareAuthType string

const (
	SourceSquareAuthTypeOAuth SourceSquareAuthType = "OAuth"
)

func (e SourceSquareAuthType) ToPointer() *SourceSquareAuthType {
	return &e
}

func (e *SourceSquareAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSquareAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareAuthType: %v", v)
	}
}

// SourceSquareOauthAuthentication - Choose how to authenticate to Square.
type SourceSquareOauthAuthentication struct {
	authType SourceSquareAuthType `const:"OAuth" json:"auth_type"`
	// The Square-issued ID of your application
	ClientID string `json:"client_id"`
	// The Square-issued application secret for your application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`
}

func (s SourceSquareOauthAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareOauthAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareOauthAuthentication) GetAuthType() SourceSquareAuthType {
	return SourceSquareAuthTypeOAuth
}

func (o *SourceSquareOauthAuthentication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSquareOauthAuthentication) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSquareOauthAuthentication) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceSquareAuthenticationType string

const (
	SourceSquareAuthenticationTypeSourceSquareOauthAuthentication SourceSquareAuthenticationType = "source-square_Oauth authentication"
	SourceSquareAuthenticationTypeSourceSquareAPIKey              SourceSquareAuthenticationType = "source-square_API key"
)

type SourceSquareAuthentication struct {
	SourceSquareOauthAuthentication *SourceSquareOauthAuthentication
	SourceSquareAPIKey              *SourceSquareAPIKey

	Type SourceSquareAuthenticationType
}

func CreateSourceSquareAuthenticationSourceSquareOauthAuthentication(sourceSquareOauthAuthentication SourceSquareOauthAuthentication) SourceSquareAuthentication {
	typ := SourceSquareAuthenticationTypeSourceSquareOauthAuthentication

	return SourceSquareAuthentication{
		SourceSquareOauthAuthentication: &sourceSquareOauthAuthentication,
		Type:                            typ,
	}
}

func CreateSourceSquareAuthenticationSourceSquareAPIKey(sourceSquareAPIKey SourceSquareAPIKey) SourceSquareAuthentication {
	typ := SourceSquareAuthenticationTypeSourceSquareAPIKey

	return SourceSquareAuthentication{
		SourceSquareAPIKey: &sourceSquareAPIKey,
		Type:               typ,
	}
}

func (u *SourceSquareAuthentication) UnmarshalJSON(data []byte) error {

	sourceSquareAPIKey := new(SourceSquareAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceSquareAPIKey, "", true, true); err == nil {
		u.SourceSquareAPIKey = sourceSquareAPIKey
		u.Type = SourceSquareAuthenticationTypeSourceSquareAPIKey
		return nil
	}

	sourceSquareOauthAuthentication := new(SourceSquareOauthAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSquareOauthAuthentication, "", true, true); err == nil {
		u.SourceSquareOauthAuthentication = sourceSquareOauthAuthentication
		u.Type = SourceSquareAuthenticationTypeSourceSquareOauthAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSquareAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceSquareOauthAuthentication != nil {
		return utils.MarshalJSON(u.SourceSquareOauthAuthentication, "", true)
	}

	if u.SourceSquareAPIKey != nil {
		return utils.MarshalJSON(u.SourceSquareAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Square string

const (
	SquareSquare Square = "square"
)

func (e Square) ToPointer() *Square {
	return &e
}

func (e *Square) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "square":
		*e = Square(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Square: %v", v)
	}
}

type SourceSquare struct {
	// Choose how to authenticate to Square.
	Credentials *SourceSquareAuthentication `json:"credentials,omitempty"`
	// In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)
	IncludeDeletedObjects *bool `default:"false" json:"include_deleted_objects"`
	// Determines whether to use the sandbox or production environment.
	IsSandbox  *bool  `default:"false" json:"is_sandbox"`
	sourceType Square `const:"square" json:"sourceType"`
	// UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.
	StartDate *types.Date `default:"2021-01-01" json:"start_date"`
}

func (s SourceSquare) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquare) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquare) GetCredentials() *SourceSquareAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSquare) GetIncludeDeletedObjects() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeDeletedObjects
}

func (o *SourceSquare) GetIsSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.IsSandbox
}

func (o *SourceSquare) GetSourceType() Square {
	return SquareSquare
}

func (o *SourceSquare) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
