// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSquareAuthenticationAPIKeyAuthType string

const (
	SourceSquareAuthenticationAPIKeyAuthTypeAPIKey SourceSquareAuthenticationAPIKeyAuthType = "API Key"
)

func (e SourceSquareAuthenticationAPIKeyAuthType) ToPointer() *SourceSquareAuthenticationAPIKeyAuthType {
	return &e
}

func (e *SourceSquareAuthenticationAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Key":
		*e = SourceSquareAuthenticationAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareAuthenticationAPIKeyAuthType: %v", v)
	}
}

// SourceSquareAuthenticationAPIKey - Choose how to authenticate to Square.
type SourceSquareAuthenticationAPIKey struct {
	// The API key for a Square application
	APIKey   string                                   `json:"api_key"`
	authType SourceSquareAuthenticationAPIKeyAuthType `const:"API Key" json:"auth_type"`
}

func (s SourceSquareAuthenticationAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareAuthenticationAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareAuthenticationAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSquareAuthenticationAPIKey) GetAuthType() SourceSquareAuthenticationAPIKeyAuthType {
	return SourceSquareAuthenticationAPIKeyAuthTypeAPIKey
}

type SourceSquareAuthenticationOauthAuthenticationAuthType string

const (
	SourceSquareAuthenticationOauthAuthenticationAuthTypeOAuth SourceSquareAuthenticationOauthAuthenticationAuthType = "OAuth"
)

func (e SourceSquareAuthenticationOauthAuthenticationAuthType) ToPointer() *SourceSquareAuthenticationOauthAuthenticationAuthType {
	return &e
}

func (e *SourceSquareAuthenticationOauthAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSquareAuthenticationOauthAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareAuthenticationOauthAuthenticationAuthType: %v", v)
	}
}

// SourceSquareAuthenticationOauthAuthentication - Choose how to authenticate to Square.
type SourceSquareAuthenticationOauthAuthentication struct {
	authType SourceSquareAuthenticationOauthAuthenticationAuthType `const:"OAuth" json:"auth_type"`
	// The Square-issued ID of your application
	ClientID string `json:"client_id"`
	// The Square-issued application secret for your application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`
}

func (s SourceSquareAuthenticationOauthAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareAuthenticationOauthAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareAuthenticationOauthAuthentication) GetAuthType() SourceSquareAuthenticationOauthAuthenticationAuthType {
	return SourceSquareAuthenticationOauthAuthenticationAuthTypeOAuth
}

func (o *SourceSquareAuthenticationOauthAuthentication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSquareAuthenticationOauthAuthentication) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSquareAuthenticationOauthAuthentication) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceSquareAuthenticationType string

const (
	SourceSquareAuthenticationTypeSourceSquareAuthenticationOauthAuthentication SourceSquareAuthenticationType = "source-square_Authentication_Oauth authentication"
	SourceSquareAuthenticationTypeSourceSquareAuthenticationAPIKey              SourceSquareAuthenticationType = "source-square_Authentication_API key"
)

type SourceSquareAuthentication struct {
	SourceSquareAuthenticationOauthAuthentication *SourceSquareAuthenticationOauthAuthentication
	SourceSquareAuthenticationAPIKey              *SourceSquareAuthenticationAPIKey

	Type SourceSquareAuthenticationType
}

func CreateSourceSquareAuthenticationSourceSquareAuthenticationOauthAuthentication(sourceSquareAuthenticationOauthAuthentication SourceSquareAuthenticationOauthAuthentication) SourceSquareAuthentication {
	typ := SourceSquareAuthenticationTypeSourceSquareAuthenticationOauthAuthentication

	return SourceSquareAuthentication{
		SourceSquareAuthenticationOauthAuthentication: &sourceSquareAuthenticationOauthAuthentication,
		Type: typ,
	}
}

func CreateSourceSquareAuthenticationSourceSquareAuthenticationAPIKey(sourceSquareAuthenticationAPIKey SourceSquareAuthenticationAPIKey) SourceSquareAuthentication {
	typ := SourceSquareAuthenticationTypeSourceSquareAuthenticationAPIKey

	return SourceSquareAuthentication{
		SourceSquareAuthenticationAPIKey: &sourceSquareAuthenticationAPIKey,
		Type:                             typ,
	}
}

func (u *SourceSquareAuthentication) UnmarshalJSON(data []byte) error {

	sourceSquareAuthenticationAPIKey := new(SourceSquareAuthenticationAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceSquareAuthenticationAPIKey, "", true, true); err == nil {
		u.SourceSquareAuthenticationAPIKey = sourceSquareAuthenticationAPIKey
		u.Type = SourceSquareAuthenticationTypeSourceSquareAuthenticationAPIKey
		return nil
	}

	sourceSquareAuthenticationOauthAuthentication := new(SourceSquareAuthenticationOauthAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSquareAuthenticationOauthAuthentication, "", true, true); err == nil {
		u.SourceSquareAuthenticationOauthAuthentication = sourceSquareAuthenticationOauthAuthentication
		u.Type = SourceSquareAuthenticationTypeSourceSquareAuthenticationOauthAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSquareAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceSquareAuthenticationOauthAuthentication != nil {
		return utils.MarshalJSON(u.SourceSquareAuthenticationOauthAuthentication, "", true)
	}

	if u.SourceSquareAuthenticationAPIKey != nil {
		return utils.MarshalJSON(u.SourceSquareAuthenticationAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSquareSquare string

const (
	SourceSquareSquareSquare SourceSquareSquare = "square"
)

func (e SourceSquareSquare) ToPointer() *SourceSquareSquare {
	return &e
}

func (e *SourceSquareSquare) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "square":
		*e = SourceSquareSquare(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareSquare: %v", v)
	}
}

type SourceSquare struct {
	// Choose how to authenticate to Square.
	Credentials *SourceSquareAuthentication `json:"credentials,omitempty"`
	// In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)
	IncludeDeletedObjects *bool `default:"false" json:"include_deleted_objects"`
	// Determines whether to use the sandbox or production environment.
	IsSandbox  *bool              `default:"false" json:"is_sandbox"`
	sourceType SourceSquareSquare `const:"square" json:"sourceType"`
	// UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.
	StartDate *types.Date `default:"2021-01-01" json:"start_date"`
}

func (s SourceSquare) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquare) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquare) GetCredentials() *SourceSquareAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSquare) GetIncludeDeletedObjects() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeDeletedObjects
}

func (o *SourceSquare) GetIsSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.IsSandbox
}

func (o *SourceSquare) GetSourceType() SourceSquareSquare {
	return SourceSquareSquareSquare
}

func (o *SourceSquare) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
