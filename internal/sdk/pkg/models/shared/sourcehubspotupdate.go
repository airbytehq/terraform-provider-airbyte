// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// SourceHubspotUpdateAuthenticationPrivateAppAuthType - Name of the credentials set
type SourceHubspotUpdateAuthenticationPrivateAppAuthType string

const (
	SourceHubspotUpdateAuthenticationPrivateAppAuthTypePrivateAppCredentials SourceHubspotUpdateAuthenticationPrivateAppAuthType = "Private App Credentials"
)

func (e SourceHubspotUpdateAuthenticationPrivateAppAuthType) ToPointer() *SourceHubspotUpdateAuthenticationPrivateAppAuthType {
	return &e
}

func (e *SourceHubspotUpdateAuthenticationPrivateAppAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Private App Credentials":
		*e = SourceHubspotUpdateAuthenticationPrivateAppAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHubspotUpdateAuthenticationPrivateAppAuthType: %v", v)
	}
}

// SourceHubspotUpdateAuthenticationPrivateApp - Choose how to authenticate to HubSpot.
type SourceHubspotUpdateAuthenticationPrivateApp struct {
	// HubSpot Access token. See the <a href="https://developers.hubspot.com/docs/api/private-apps">Hubspot docs</a> if you need help finding this token.
	AccessToken string `json:"access_token"`
	// Name of the credentials set
	credentialsTitle SourceHubspotUpdateAuthenticationPrivateAppAuthType `const:"Private App Credentials" json:"credentials_title"`
}

func (s SourceHubspotUpdateAuthenticationPrivateApp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspotUpdateAuthenticationPrivateApp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspotUpdateAuthenticationPrivateApp) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceHubspotUpdateAuthenticationPrivateApp) GetCredentialsTitle() SourceHubspotUpdateAuthenticationPrivateAppAuthType {
	return SourceHubspotUpdateAuthenticationPrivateAppAuthTypePrivateAppCredentials
}

// SourceHubspotUpdateAuthenticationOAuthAuthType - Name of the credentials
type SourceHubspotUpdateAuthenticationOAuthAuthType string

const (
	SourceHubspotUpdateAuthenticationOAuthAuthTypeOAuthCredentials SourceHubspotUpdateAuthenticationOAuthAuthType = "OAuth Credentials"
)

func (e SourceHubspotUpdateAuthenticationOAuthAuthType) ToPointer() *SourceHubspotUpdateAuthenticationOAuthAuthType {
	return &e
}

func (e *SourceHubspotUpdateAuthenticationOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth Credentials":
		*e = SourceHubspotUpdateAuthenticationOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHubspotUpdateAuthenticationOAuthAuthType: %v", v)
	}
}

// SourceHubspotUpdateAuthenticationOAuth - Choose how to authenticate to HubSpot.
type SourceHubspotUpdateAuthenticationOAuth struct {
	// The Client ID of your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this ID.
	ClientID string `json:"client_id"`
	// The client secret for your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this secret.
	ClientSecret string `json:"client_secret"`
	// Name of the credentials
	credentialsTitle SourceHubspotUpdateAuthenticationOAuthAuthType `const:"OAuth Credentials" json:"credentials_title"`
	// Refresh token to renew an expired access token. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceHubspotUpdateAuthenticationOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspotUpdateAuthenticationOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspotUpdateAuthenticationOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceHubspotUpdateAuthenticationOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceHubspotUpdateAuthenticationOAuth) GetCredentialsTitle() SourceHubspotUpdateAuthenticationOAuthAuthType {
	return SourceHubspotUpdateAuthenticationOAuthAuthTypeOAuthCredentials
}

func (o *SourceHubspotUpdateAuthenticationOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceHubspotUpdateAuthenticationType string

const (
	SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationOAuth      SourceHubspotUpdateAuthenticationType = "source-hubspot-update_Authentication_OAuth"
	SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationPrivateApp SourceHubspotUpdateAuthenticationType = "source-hubspot-update_Authentication_Private App"
)

type SourceHubspotUpdateAuthentication struct {
	SourceHubspotUpdateAuthenticationOAuth      *SourceHubspotUpdateAuthenticationOAuth
	SourceHubspotUpdateAuthenticationPrivateApp *SourceHubspotUpdateAuthenticationPrivateApp

	Type SourceHubspotUpdateAuthenticationType
}

func CreateSourceHubspotUpdateAuthenticationSourceHubspotUpdateAuthenticationOAuth(sourceHubspotUpdateAuthenticationOAuth SourceHubspotUpdateAuthenticationOAuth) SourceHubspotUpdateAuthentication {
	typ := SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationOAuth

	return SourceHubspotUpdateAuthentication{
		SourceHubspotUpdateAuthenticationOAuth: &sourceHubspotUpdateAuthenticationOAuth,
		Type:                                   typ,
	}
}

func CreateSourceHubspotUpdateAuthenticationSourceHubspotUpdateAuthenticationPrivateApp(sourceHubspotUpdateAuthenticationPrivateApp SourceHubspotUpdateAuthenticationPrivateApp) SourceHubspotUpdateAuthentication {
	typ := SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationPrivateApp

	return SourceHubspotUpdateAuthentication{
		SourceHubspotUpdateAuthenticationPrivateApp: &sourceHubspotUpdateAuthenticationPrivateApp,
		Type: typ,
	}
}

func (u *SourceHubspotUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceHubspotUpdateAuthenticationPrivateApp := new(SourceHubspotUpdateAuthenticationPrivateApp)
	if err := utils.UnmarshalJSON(data, &sourceHubspotUpdateAuthenticationPrivateApp, "", true, true); err == nil {
		u.SourceHubspotUpdateAuthenticationPrivateApp = sourceHubspotUpdateAuthenticationPrivateApp
		u.Type = SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationPrivateApp
		return nil
	}

	sourceHubspotUpdateAuthenticationOAuth := new(SourceHubspotUpdateAuthenticationOAuth)
	if err := utils.UnmarshalJSON(data, &sourceHubspotUpdateAuthenticationOAuth, "", true, true); err == nil {
		u.SourceHubspotUpdateAuthenticationOAuth = sourceHubspotUpdateAuthenticationOAuth
		u.Type = SourceHubspotUpdateAuthenticationTypeSourceHubspotUpdateAuthenticationOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceHubspotUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceHubspotUpdateAuthenticationOAuth != nil {
		return utils.MarshalJSON(u.SourceHubspotUpdateAuthenticationOAuth, "", true)
	}

	if u.SourceHubspotUpdateAuthenticationPrivateApp != nil {
		return utils.MarshalJSON(u.SourceHubspotUpdateAuthenticationPrivateApp, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceHubspotUpdate struct {
	// Choose how to authenticate to HubSpot.
	Credentials SourceHubspotUpdateAuthentication `json:"credentials"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceHubspotUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspotUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspotUpdate) GetCredentials() SourceHubspotUpdateAuthentication {
	if o == nil {
		return SourceHubspotUpdateAuthentication{}
	}
	return o.Credentials
}

func (o *SourceHubspotUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
