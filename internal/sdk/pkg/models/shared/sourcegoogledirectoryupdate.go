// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

// SourceGoogleDirectoryUpdateSchemasCredentialsTitle - Authentication Scenario
type SourceGoogleDirectoryUpdateSchemasCredentialsTitle string

const (
	SourceGoogleDirectoryUpdateSchemasCredentialsTitleServiceAccounts SourceGoogleDirectoryUpdateSchemasCredentialsTitle = "Service accounts"
)

func (e SourceGoogleDirectoryUpdateSchemasCredentialsTitle) ToPointer() *SourceGoogleDirectoryUpdateSchemasCredentialsTitle {
	return &e
}

func (e *SourceGoogleDirectoryUpdateSchemasCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service accounts":
		*e = SourceGoogleDirectoryUpdateSchemasCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleDirectoryUpdateSchemasCredentialsTitle: %v", v)
	}
}

// ServiceAccountKey - For these scenario user should obtain service account's credentials from the Google API Console and provide delegated email.
type ServiceAccountKey struct {
	// The contents of the JSON service account key. See the <a href="https://developers.google.com/admin-sdk/directory/v1/guides/delegation">docs</a> for more information on how to generate this key.
	CredentialsJSON string `json:"credentials_json"`
	// Authentication Scenario
	credentialsTitle *SourceGoogleDirectoryUpdateSchemasCredentialsTitle `const:"Service accounts" json:"credentials_title,omitempty"`
	// The email of the user, which has permissions to access the Google Workspace Admin APIs.
	Email string `json:"email"`
}

func (s ServiceAccountKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceAccountKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ServiceAccountKey) GetCredentialsJSON() string {
	if o == nil {
		return ""
	}
	return o.CredentialsJSON
}

func (o *ServiceAccountKey) GetCredentialsTitle() *SourceGoogleDirectoryUpdateSchemasCredentialsTitle {
	return SourceGoogleDirectoryUpdateSchemasCredentialsTitleServiceAccounts.ToPointer()
}

func (o *ServiceAccountKey) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// SourceGoogleDirectoryUpdateCredentialsTitle - Authentication Scenario
type SourceGoogleDirectoryUpdateCredentialsTitle string

const (
	SourceGoogleDirectoryUpdateCredentialsTitleWebServerApp SourceGoogleDirectoryUpdateCredentialsTitle = "Web server app"
)

func (e SourceGoogleDirectoryUpdateCredentialsTitle) ToPointer() *SourceGoogleDirectoryUpdateCredentialsTitle {
	return &e
}

func (e *SourceGoogleDirectoryUpdateCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Web server app":
		*e = SourceGoogleDirectoryUpdateCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleDirectoryUpdateCredentialsTitle: %v", v)
	}
}

// SignInViaGoogleOAuth - For these scenario user only needs to give permission to read Google Directory data.
type SignInViaGoogleOAuth struct {
	// The Client ID of the developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of the developer application.
	ClientSecret string `json:"client_secret"`
	// Authentication Scenario
	credentialsTitle *SourceGoogleDirectoryUpdateCredentialsTitle `const:"Web server app" json:"credentials_title,omitempty"`
	// The Token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SignInViaGoogleOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SignInViaGoogleOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SignInViaGoogleOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SignInViaGoogleOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SignInViaGoogleOAuth) GetCredentialsTitle() *SourceGoogleDirectoryUpdateCredentialsTitle {
	return SourceGoogleDirectoryUpdateCredentialsTitleWebServerApp.ToPointer()
}

func (o *SignInViaGoogleOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleDirectoryUpdateGoogleCredentialsType string

const (
	SourceGoogleDirectoryUpdateGoogleCredentialsTypeSignInViaGoogleOAuth SourceGoogleDirectoryUpdateGoogleCredentialsType = "Sign in via Google (OAuth)"
	SourceGoogleDirectoryUpdateGoogleCredentialsTypeServiceAccountKey    SourceGoogleDirectoryUpdateGoogleCredentialsType = "Service Account Key"
)

type SourceGoogleDirectoryUpdateGoogleCredentials struct {
	SignInViaGoogleOAuth *SignInViaGoogleOAuth
	ServiceAccountKey    *ServiceAccountKey

	Type SourceGoogleDirectoryUpdateGoogleCredentialsType
}

func CreateSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth(signInViaGoogleOAuth SignInViaGoogleOAuth) SourceGoogleDirectoryUpdateGoogleCredentials {
	typ := SourceGoogleDirectoryUpdateGoogleCredentialsTypeSignInViaGoogleOAuth

	return SourceGoogleDirectoryUpdateGoogleCredentials{
		SignInViaGoogleOAuth: &signInViaGoogleOAuth,
		Type:                 typ,
	}
}

func CreateSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey(serviceAccountKey ServiceAccountKey) SourceGoogleDirectoryUpdateGoogleCredentials {
	typ := SourceGoogleDirectoryUpdateGoogleCredentialsTypeServiceAccountKey

	return SourceGoogleDirectoryUpdateGoogleCredentials{
		ServiceAccountKey: &serviceAccountKey,
		Type:              typ,
	}
}

func (u *SourceGoogleDirectoryUpdateGoogleCredentials) UnmarshalJSON(data []byte) error {

	serviceAccountKey := new(ServiceAccountKey)
	if err := utils.UnmarshalJSON(data, &serviceAccountKey, "", true, true); err == nil {
		u.ServiceAccountKey = serviceAccountKey
		u.Type = SourceGoogleDirectoryUpdateGoogleCredentialsTypeServiceAccountKey
		return nil
	}

	signInViaGoogleOAuth := new(SignInViaGoogleOAuth)
	if err := utils.UnmarshalJSON(data, &signInViaGoogleOAuth, "", true, true); err == nil {
		u.SignInViaGoogleOAuth = signInViaGoogleOAuth
		u.Type = SourceGoogleDirectoryUpdateGoogleCredentialsTypeSignInViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleDirectoryUpdateGoogleCredentials) MarshalJSON() ([]byte, error) {
	if u.SignInViaGoogleOAuth != nil {
		return utils.MarshalJSON(u.SignInViaGoogleOAuth, "", true)
	}

	if u.ServiceAccountKey != nil {
		return utils.MarshalJSON(u.ServiceAccountKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleDirectoryUpdate struct {
	// Google APIs use the OAuth 2.0 protocol for authentication and authorization. The Source supports <a href="https://developers.google.com/identity/protocols/oauth2#webserver" target="_blank">Web server application</a> and <a href="https://developers.google.com/identity/protocols/oauth2#serviceaccount" target="_blank">Service accounts</a> scenarios.
	Credentials *SourceGoogleDirectoryUpdateGoogleCredentials `json:"credentials,omitempty"`
}

func (o *SourceGoogleDirectoryUpdate) GetCredentials() *SourceGoogleDirectoryUpdateGoogleCredentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}
