// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

// SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle - Authentication Scenario
type SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle string

const (
	SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitleServiceAccounts SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle = "Service accounts"
)

func (e SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle) ToPointer() *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle {
	return &e
}

func (e *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service accounts":
		*e = SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle: %v", v)
	}
}

// SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey - For these scenario user should obtain service account's credentials from the Google API Console and provide delegated email.
type SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey struct {
	// The contents of the JSON service account key. See the <a href="https://developers.google.com/admin-sdk/directory/v1/guides/delegation">docs</a> for more information on how to generate this key.
	CredentialsJSON string `json:"credentials_json"`
	// Authentication Scenario
	credentialsTitle *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle `const:"Service accounts" json:"credentials_title,omitempty"`
	// The email of the user, which has permissions to access the Google Workspace Admin APIs.
	Email string `json:"email"`
}

func (s SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) GetCredentialsJSON() string {
	if o == nil {
		return ""
	}
	return o.CredentialsJSON
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) GetCredentialsTitle() *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitle {
	return SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyCredentialsTitleServiceAccounts.ToPointer()
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle - Authentication Scenario
type SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle string

const (
	SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitleWebServerApp SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle = "Web server app"
)

func (e SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle) ToPointer() *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle {
	return &e
}

func (e *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Web server app":
		*e = SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle: %v", v)
	}
}

// SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth - For these scenario user only needs to give permission to read Google Directory data.
type SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth struct {
	// The Client ID of the developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of the developer application.
	ClientSecret string `json:"client_secret"`
	// Authentication Scenario
	credentialsTitle *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle `const:"Web server app" json:"credentials_title,omitempty"`
	// The Token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) GetCredentialsTitle() *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitle {
	return SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthCredentialsTitleWebServerApp.ToPointer()
}

func (o *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleDirectoryUpdateGoogleCredentialsType string

const (
	SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth SourceGoogleDirectoryUpdateGoogleCredentialsType = "source-google-directory-update_Google Credentials_Sign in via Google (OAuth)"
	SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey    SourceGoogleDirectoryUpdateGoogleCredentialsType = "source-google-directory-update_Google Credentials_Service Account Key"
)

type SourceGoogleDirectoryUpdateGoogleCredentials struct {
	SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth *SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth
	SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey    *SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey

	Type SourceGoogleDirectoryUpdateGoogleCredentialsType
}

func CreateSourceGoogleDirectoryUpdateGoogleCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth(sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth) SourceGoogleDirectoryUpdateGoogleCredentials {
	typ := SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth

	return SourceGoogleDirectoryUpdateGoogleCredentials{
		SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth: &sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleDirectoryUpdateGoogleCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey(sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey) SourceGoogleDirectoryUpdateGoogleCredentials {
	typ := SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey

	return SourceGoogleDirectoryUpdateGoogleCredentials{
		SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey: &sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey,
		Type: typ,
	}
}

func (u *SourceGoogleDirectoryUpdateGoogleCredentials) UnmarshalJSON(data []byte) error {

	sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey := new(SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey)
	if err := utils.UnmarshalJSON(data, &sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey, "", true, true); err == nil {
		u.SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey = sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey
		u.Type = SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey
		return nil
	}

	sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth := new(SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth, "", true, true); err == nil {
		u.SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth = sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth
		u.Type = SourceGoogleDirectoryUpdateGoogleCredentialsTypeSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleDirectoryUpdateGoogleCredentials) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth != nil {
		return utils.MarshalJSON(u.SourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth, "", true)
	}

	if u.SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey != nil {
		return utils.MarshalJSON(u.SourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleDirectoryUpdate struct {
	// Google APIs use the OAuth 2.0 protocol for authentication and authorization. The Source supports <a href="https://developers.google.com/identity/protocols/oauth2#webserver" target="_blank">Web server application</a> and <a href="https://developers.google.com/identity/protocols/oauth2#serviceaccount" target="_blank">Service accounts</a> scenarios.
	Credentials *SourceGoogleDirectoryUpdateGoogleCredentials `json:"credentials,omitempty"`
}

func (o *SourceGoogleDirectoryUpdate) GetCredentials() *SourceGoogleDirectoryUpdateGoogleCredentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}
