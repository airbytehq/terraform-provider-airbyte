// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type DestinationPineconeUpdateSchemasEmbeddingMode string

const (
	DestinationPineconeUpdateSchemasEmbeddingModeFake DestinationPineconeUpdateSchemasEmbeddingMode = "fake"
)

func (e DestinationPineconeUpdateSchemasEmbeddingMode) ToPointer() *DestinationPineconeUpdateSchemasEmbeddingMode {
	return &e
}

func (e *DestinationPineconeUpdateSchemasEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationPineconeUpdateSchemasEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationPineconeUpdateSchemasEmbeddingMode: %v", v)
	}
}

// DestinationPineconeUpdateFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationPineconeUpdateFake struct {
	mode *DestinationPineconeUpdateSchemasEmbeddingMode `const:"fake" json:"mode"`
}

func (d DestinationPineconeUpdateFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationPineconeUpdateFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationPineconeUpdateFake) GetMode() *DestinationPineconeUpdateSchemasEmbeddingMode {
	return DestinationPineconeUpdateSchemasEmbeddingModeFake.ToPointer()
}

type DestinationPineconeUpdateSchemasMode string

const (
	DestinationPineconeUpdateSchemasModeCohere DestinationPineconeUpdateSchemasMode = "cohere"
)

func (e DestinationPineconeUpdateSchemasMode) ToPointer() *DestinationPineconeUpdateSchemasMode {
	return &e
}

func (e *DestinationPineconeUpdateSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationPineconeUpdateSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationPineconeUpdateSchemasMode: %v", v)
	}
}

// DestinationPineconeUpdateCohere - Use the Cohere API to embed text.
type DestinationPineconeUpdateCohere struct {
	CohereKey string                                `json:"cohere_key"`
	mode      *DestinationPineconeUpdateSchemasMode `const:"cohere" json:"mode"`
}

func (d DestinationPineconeUpdateCohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationPineconeUpdateCohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationPineconeUpdateCohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *DestinationPineconeUpdateCohere) GetMode() *DestinationPineconeUpdateSchemasMode {
	return DestinationPineconeUpdateSchemasModeCohere.ToPointer()
}

type DestinationPineconeUpdateMode string

const (
	DestinationPineconeUpdateModeOpenai DestinationPineconeUpdateMode = "openai"
)

func (e DestinationPineconeUpdateMode) ToPointer() *DestinationPineconeUpdateMode {
	return &e
}

func (e *DestinationPineconeUpdateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationPineconeUpdateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationPineconeUpdateMode: %v", v)
	}
}

// DestinationPineconeUpdateOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationPineconeUpdateOpenAI struct {
	mode      *DestinationPineconeUpdateMode `const:"openai" json:"mode"`
	OpenaiKey string                         `json:"openai_key"`
}

func (d DestinationPineconeUpdateOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationPineconeUpdateOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationPineconeUpdateOpenAI) GetMode() *DestinationPineconeUpdateMode {
	return DestinationPineconeUpdateModeOpenai.ToPointer()
}

func (o *DestinationPineconeUpdateOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationPineconeUpdateEmbeddingType string

const (
	DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateOpenAI DestinationPineconeUpdateEmbeddingType = "destination-pinecone-update_OpenAI"
	DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateCohere DestinationPineconeUpdateEmbeddingType = "destination-pinecone-update_Cohere"
	DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateFake   DestinationPineconeUpdateEmbeddingType = "destination-pinecone-update_Fake"
)

type DestinationPineconeUpdateEmbedding struct {
	DestinationPineconeUpdateOpenAI *DestinationPineconeUpdateOpenAI
	DestinationPineconeUpdateCohere *DestinationPineconeUpdateCohere
	DestinationPineconeUpdateFake   *DestinationPineconeUpdateFake

	Type DestinationPineconeUpdateEmbeddingType
}

func CreateDestinationPineconeUpdateEmbeddingDestinationPineconeUpdateOpenAI(destinationPineconeUpdateOpenAI DestinationPineconeUpdateOpenAI) DestinationPineconeUpdateEmbedding {
	typ := DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateOpenAI

	return DestinationPineconeUpdateEmbedding{
		DestinationPineconeUpdateOpenAI: &destinationPineconeUpdateOpenAI,
		Type:                            typ,
	}
}

func CreateDestinationPineconeUpdateEmbeddingDestinationPineconeUpdateCohere(destinationPineconeUpdateCohere DestinationPineconeUpdateCohere) DestinationPineconeUpdateEmbedding {
	typ := DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateCohere

	return DestinationPineconeUpdateEmbedding{
		DestinationPineconeUpdateCohere: &destinationPineconeUpdateCohere,
		Type:                            typ,
	}
}

func CreateDestinationPineconeUpdateEmbeddingDestinationPineconeUpdateFake(destinationPineconeUpdateFake DestinationPineconeUpdateFake) DestinationPineconeUpdateEmbedding {
	typ := DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateFake

	return DestinationPineconeUpdateEmbedding{
		DestinationPineconeUpdateFake: &destinationPineconeUpdateFake,
		Type:                          typ,
	}
}

func (u *DestinationPineconeUpdateEmbedding) UnmarshalJSON(data []byte) error {

	destinationPineconeUpdateFake := new(DestinationPineconeUpdateFake)
	if err := utils.UnmarshalJSON(data, &destinationPineconeUpdateFake, "", true, true); err == nil {
		u.DestinationPineconeUpdateFake = destinationPineconeUpdateFake
		u.Type = DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateFake
		return nil
	}

	destinationPineconeUpdateOpenAI := new(DestinationPineconeUpdateOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationPineconeUpdateOpenAI, "", true, true); err == nil {
		u.DestinationPineconeUpdateOpenAI = destinationPineconeUpdateOpenAI
		u.Type = DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateOpenAI
		return nil
	}

	destinationPineconeUpdateCohere := new(DestinationPineconeUpdateCohere)
	if err := utils.UnmarshalJSON(data, &destinationPineconeUpdateCohere, "", true, true); err == nil {
		u.DestinationPineconeUpdateCohere = destinationPineconeUpdateCohere
		u.Type = DestinationPineconeUpdateEmbeddingTypeDestinationPineconeUpdateCohere
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationPineconeUpdateEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationPineconeUpdateOpenAI != nil {
		return utils.MarshalJSON(u.DestinationPineconeUpdateOpenAI, "", true)
	}

	if u.DestinationPineconeUpdateCohere != nil {
		return utils.MarshalJSON(u.DestinationPineconeUpdateCohere, "", true)
	}

	if u.DestinationPineconeUpdateFake != nil {
		return utils.MarshalJSON(u.DestinationPineconeUpdateFake, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationPineconeUpdateIndexing - Pinecone is a popular vector store that can be used to store and retrieve embeddings.
type DestinationPineconeUpdateIndexing struct {
	// Pinecone index to use
	Index string `json:"index"`
	// Pinecone environment to use
	PineconeEnvironment string `json:"pinecone_environment"`
	PineconeKey         string `json:"pinecone_key"`
}

func (o *DestinationPineconeUpdateIndexing) GetIndex() string {
	if o == nil {
		return ""
	}
	return o.Index
}

func (o *DestinationPineconeUpdateIndexing) GetPineconeEnvironment() string {
	if o == nil {
		return ""
	}
	return o.PineconeEnvironment
}

func (o *DestinationPineconeUpdateIndexing) GetPineconeKey() string {
	if o == nil {
		return ""
	}
	return o.PineconeKey
}

type DestinationPineconeUpdateProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
}

func (d DestinationPineconeUpdateProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationPineconeUpdateProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationPineconeUpdateProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationPineconeUpdateProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationPineconeUpdateProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationPineconeUpdateProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

type DestinationPineconeUpdate struct {
	// Embedding configuration
	Embedding DestinationPineconeUpdateEmbedding `json:"embedding"`
	// Pinecone is a popular vector store that can be used to store and retrieve embeddings.
	Indexing   DestinationPineconeUpdateIndexing              `json:"indexing"`
	Processing DestinationPineconeUpdateProcessingConfigModel `json:"processing"`
}

func (o *DestinationPineconeUpdate) GetEmbedding() DestinationPineconeUpdateEmbedding {
	if o == nil {
		return DestinationPineconeUpdateEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationPineconeUpdate) GetIndexing() DestinationPineconeUpdateIndexing {
	if o == nil {
		return DestinationPineconeUpdateIndexing{}
	}
	return o.Indexing
}

func (o *DestinationPineconeUpdate) GetProcessing() DestinationPineconeUpdateProcessingConfigModel {
	if o == nil {
		return DestinationPineconeUpdateProcessingConfigModel{}
	}
	return o.Processing
}
