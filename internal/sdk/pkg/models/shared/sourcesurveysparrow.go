// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSurveySparrowBaseURLGlobalAccountURLBase string

const (
	SourceSurveySparrowBaseURLGlobalAccountURLBaseHTTPSAPISurveysparrowComV3 SourceSurveySparrowBaseURLGlobalAccountURLBase = "https://api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowBaseURLGlobalAccountURLBase) ToPointer() *SourceSurveySparrowBaseURLGlobalAccountURLBase {
	return &e
}

func (e *SourceSurveySparrowBaseURLGlobalAccountURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://api.surveysparrow.com/v3":
		*e = SourceSurveySparrowBaseURLGlobalAccountURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowBaseURLGlobalAccountURLBase: %v", v)
	}
}

// SourceSurveySparrowBaseURLGlobalAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowBaseURLGlobalAccount struct {
	urlBase *SourceSurveySparrowBaseURLGlobalAccountURLBase `const:"https://api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowBaseURLGlobalAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowBaseURLGlobalAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowBaseURLGlobalAccount) GetURLBase() *SourceSurveySparrowBaseURLGlobalAccountURLBase {
	return SourceSurveySparrowBaseURLGlobalAccountURLBaseHTTPSAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowBaseURLEUBasedAccountURLBase string

const (
	SourceSurveySparrowBaseURLEUBasedAccountURLBaseHTTPSEuAPISurveysparrowComV3 SourceSurveySparrowBaseURLEUBasedAccountURLBase = "https://eu-api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowBaseURLEUBasedAccountURLBase) ToPointer() *SourceSurveySparrowBaseURLEUBasedAccountURLBase {
	return &e
}

func (e *SourceSurveySparrowBaseURLEUBasedAccountURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://eu-api.surveysparrow.com/v3":
		*e = SourceSurveySparrowBaseURLEUBasedAccountURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowBaseURLEUBasedAccountURLBase: %v", v)
	}
}

// SourceSurveySparrowBaseURLEUBasedAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowBaseURLEUBasedAccount struct {
	urlBase *SourceSurveySparrowBaseURLEUBasedAccountURLBase `const:"https://eu-api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowBaseURLEUBasedAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowBaseURLEUBasedAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowBaseURLEUBasedAccount) GetURLBase() *SourceSurveySparrowBaseURLEUBasedAccountURLBase {
	return SourceSurveySparrowBaseURLEUBasedAccountURLBaseHTTPSEuAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowBaseURLType string

const (
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount SourceSurveySparrowBaseURLType = "source-survey-sparrow_Base URL_EU-based account"
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount  SourceSurveySparrowBaseURLType = "source-survey-sparrow_Base URL_Global account"
)

type SourceSurveySparrowBaseURL struct {
	SourceSurveySparrowBaseURLEUBasedAccount *SourceSurveySparrowBaseURLEUBasedAccount
	SourceSurveySparrowBaseURLGlobalAccount  *SourceSurveySparrowBaseURLGlobalAccount

	Type SourceSurveySparrowBaseURLType
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowBaseURLEUBasedAccount(sourceSurveySparrowBaseURLEUBasedAccount SourceSurveySparrowBaseURLEUBasedAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowBaseURLEUBasedAccount: &sourceSurveySparrowBaseURLEUBasedAccount,
		Type:                                     typ,
	}
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowBaseURLGlobalAccount(sourceSurveySparrowBaseURLGlobalAccount SourceSurveySparrowBaseURLGlobalAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowBaseURLGlobalAccount: &sourceSurveySparrowBaseURLGlobalAccount,
		Type:                                    typ,
	}
}

func (u *SourceSurveySparrowBaseURL) UnmarshalJSON(data []byte) error {

	sourceSurveySparrowBaseURLEUBasedAccount := new(SourceSurveySparrowBaseURLEUBasedAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowBaseURLEUBasedAccount, "", true, true); err == nil {
		u.SourceSurveySparrowBaseURLEUBasedAccount = sourceSurveySparrowBaseURLEUBasedAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount
		return nil
	}

	sourceSurveySparrowBaseURLGlobalAccount := new(SourceSurveySparrowBaseURLGlobalAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowBaseURLGlobalAccount, "", true, true); err == nil {
		u.SourceSurveySparrowBaseURLGlobalAccount = sourceSurveySparrowBaseURLGlobalAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSurveySparrowBaseURL) MarshalJSON() ([]byte, error) {
	if u.SourceSurveySparrowBaseURLEUBasedAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowBaseURLEUBasedAccount, "", true)
	}

	if u.SourceSurveySparrowBaseURLGlobalAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowBaseURLGlobalAccount, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSurveySparrowSurveySparrow string

const (
	SourceSurveySparrowSurveySparrowSurveySparrow SourceSurveySparrowSurveySparrow = "survey-sparrow"
)

func (e SourceSurveySparrowSurveySparrow) ToPointer() *SourceSurveySparrowSurveySparrow {
	return &e
}

func (e *SourceSurveySparrowSurveySparrow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "survey-sparrow":
		*e = SourceSurveySparrowSurveySparrow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowSurveySparrow: %v", v)
	}
}

type SourceSurveySparrow struct {
	// Your access token. See <a href="https://developers.surveysparrow.com/rest-apis#authentication">here</a>. The key is case sensitive.
	AccessToken string `json:"access_token"`
	// Is your account location is EU based? If yes, the base url to retrieve data will be different.
	Region     *SourceSurveySparrowBaseURL      `json:"region,omitempty"`
	sourceType SourceSurveySparrowSurveySparrow `const:"survey-sparrow" json:"sourceType"`
	// A List of your survey ids for survey-specific stream
	SurveyID []interface{} `json:"survey_id,omitempty"`
}

func (s SourceSurveySparrow) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrow) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrow) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSurveySparrow) GetRegion() *SourceSurveySparrowBaseURL {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceSurveySparrow) GetSourceType() SourceSurveySparrowSurveySparrow {
	return SourceSurveySparrowSurveySparrowSurveySparrow
}

func (o *SourceSurveySparrow) GetSurveyID() []interface{} {
	if o == nil {
		return nil
	}
	return o.SurveyID
}
