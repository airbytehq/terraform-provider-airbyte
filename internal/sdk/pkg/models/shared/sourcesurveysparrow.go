// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceSurveySparrowSchemasURLBase string

const (
	SourceSurveySparrowSchemasURLBaseHTTPSAPISurveysparrowComV3 SourceSurveySparrowSchemasURLBase = "https://api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowSchemasURLBase) ToPointer() *SourceSurveySparrowSchemasURLBase {
	return &e
}

func (e *SourceSurveySparrowSchemasURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://api.surveysparrow.com/v3":
		*e = SourceSurveySparrowSchemasURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowSchemasURLBase: %v", v)
	}
}

// SourceSurveySparrowGlobalAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowGlobalAccount struct {
	urlBase *SourceSurveySparrowSchemasURLBase `const:"https://api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowGlobalAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowGlobalAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowGlobalAccount) GetURLBase() *SourceSurveySparrowSchemasURLBase {
	return SourceSurveySparrowSchemasURLBaseHTTPSAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowURLBase string

const (
	SourceSurveySparrowURLBaseHTTPSEuAPISurveysparrowComV3 SourceSurveySparrowURLBase = "https://eu-api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowURLBase) ToPointer() *SourceSurveySparrowURLBase {
	return &e
}

func (e *SourceSurveySparrowURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://eu-api.surveysparrow.com/v3":
		*e = SourceSurveySparrowURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowURLBase: %v", v)
	}
}

// SourceSurveySparrowEUBasedAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowEUBasedAccount struct {
	urlBase *SourceSurveySparrowURLBase `const:"https://eu-api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowEUBasedAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowEUBasedAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowEUBasedAccount) GetURLBase() *SourceSurveySparrowURLBase {
	return SourceSurveySparrowURLBaseHTTPSEuAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowBaseURLType string

const (
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowEUBasedAccount SourceSurveySparrowBaseURLType = "source-survey-sparrow_EU-based account"
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowGlobalAccount  SourceSurveySparrowBaseURLType = "source-survey-sparrow_Global account"
)

type SourceSurveySparrowBaseURL struct {
	SourceSurveySparrowEUBasedAccount *SourceSurveySparrowEUBasedAccount
	SourceSurveySparrowGlobalAccount  *SourceSurveySparrowGlobalAccount

	Type SourceSurveySparrowBaseURLType
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowEUBasedAccount(sourceSurveySparrowEUBasedAccount SourceSurveySparrowEUBasedAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowEUBasedAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowEUBasedAccount: &sourceSurveySparrowEUBasedAccount,
		Type:                              typ,
	}
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowGlobalAccount(sourceSurveySparrowGlobalAccount SourceSurveySparrowGlobalAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowGlobalAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowGlobalAccount: &sourceSurveySparrowGlobalAccount,
		Type:                             typ,
	}
}

func (u *SourceSurveySparrowBaseURL) UnmarshalJSON(data []byte) error {

	sourceSurveySparrowEUBasedAccount := new(SourceSurveySparrowEUBasedAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowEUBasedAccount, "", true, true); err == nil {
		u.SourceSurveySparrowEUBasedAccount = sourceSurveySparrowEUBasedAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowEUBasedAccount
		return nil
	}

	sourceSurveySparrowGlobalAccount := new(SourceSurveySparrowGlobalAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowGlobalAccount, "", true, true); err == nil {
		u.SourceSurveySparrowGlobalAccount = sourceSurveySparrowGlobalAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowGlobalAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSurveySparrowBaseURL) MarshalJSON() ([]byte, error) {
	if u.SourceSurveySparrowEUBasedAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowEUBasedAccount, "", true)
	}

	if u.SourceSurveySparrowGlobalAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowGlobalAccount, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SurveySparrow string

const (
	SurveySparrowSurveySparrow SurveySparrow = "survey-sparrow"
)

func (e SurveySparrow) ToPointer() *SurveySparrow {
	return &e
}

func (e *SurveySparrow) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "survey-sparrow":
		*e = SurveySparrow(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SurveySparrow: %v", v)
	}
}

type SourceSurveySparrow struct {
	// Your access token. See <a href="https://developers.surveysparrow.com/rest-apis#authentication">here</a>. The key is case sensitive.
	AccessToken string `json:"access_token"`
	// Is your account location is EU based? If yes, the base url to retrieve data will be different.
	Region     *SourceSurveySparrowBaseURL `json:"region,omitempty"`
	sourceType SurveySparrow               `const:"survey-sparrow" json:"sourceType"`
	// A List of your survey ids for survey-specific stream
	SurveyID []interface{} `json:"survey_id,omitempty"`
}

func (s SourceSurveySparrow) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrow) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrow) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSurveySparrow) GetRegion() *SourceSurveySparrowBaseURL {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceSurveySparrow) GetSourceType() SurveySparrow {
	return SurveySparrowSurveySparrow
}

func (o *SourceSurveySparrow) GetSurveyID() []interface{} {
	if o == nil {
		return nil
	}
	return o.SurveyID
}
