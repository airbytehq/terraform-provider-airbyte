// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceBrazeBraze string

const (
	SourceBrazeBrazeBraze SourceBrazeBraze = "braze"
)

func (e SourceBrazeBraze) ToPointer() *SourceBrazeBraze {
	return &e
}

func (e *SourceBrazeBraze) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "braze":
		*e = SourceBrazeBraze(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceBrazeBraze: %v", v)
	}
}

type SourceBraze struct {
	// Braze REST API key
	APIKey     string           `json:"api_key"`
	sourceType SourceBrazeBraze `const:"braze" json:"sourceType"`
	// Rows after this date will be synced
	StartDate types.Date `json:"start_date"`
	// Braze REST API endpoint
	URL string `json:"url"`
}

func (s SourceBraze) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceBraze) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceBraze) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceBraze) GetSourceType() SourceBrazeBraze {
	return SourceBrazeBrazeBraze
}

func (o *SourceBraze) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourceBraze) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
