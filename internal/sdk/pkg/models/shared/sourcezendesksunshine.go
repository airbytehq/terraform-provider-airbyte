// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod string

const (
	SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod = "api_token"
)

func (e SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod) ToPointer() *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod {
	return &e
}

func (e *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod: %v", v)
	}
}

type SourceZendeskSunshineAuthorizationMethodAPIToken struct {
	// API Token. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk_sunshine">docs</a> for information on how to generate this key.
	APIToken   string                                                      `json:"api_token"`
	authMethod *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod `const:"api_token" json:"auth_method"`
	// The user email for your Zendesk account
	Email string `json:"email"`
}

func (s SourceZendeskSunshineAuthorizationMethodAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSunshineAuthorizationMethodAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSunshineAuthorizationMethodAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskSunshineAuthorizationMethodAPIToken) GetAuthMethod() *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod {
	return SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodAPIToken.ToPointer()
}

func (o *SourceZendeskSunshineAuthorizationMethodAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod string

const (
	SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodOauth20 SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod = "oauth2.0"
)

func (e SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod) ToPointer() *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod {
	return &e
}

func (e *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod: %v", v)
	}
}

type SourceZendeskSunshineAuthorizationMethodOAuth20 struct {
	// Long-term access Token for making authenticated requests.
	AccessToken string                                                     `json:"access_token"`
	authMethod  *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
}

func (s SourceZendeskSunshineAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSunshineAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSunshineAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskSunshineAuthorizationMethodOAuth20) GetAuthMethod() *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod {
	return SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodOauth20.ToPointer()
}

func (o *SourceZendeskSunshineAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceZendeskSunshineAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

type SourceZendeskSunshineAuthorizationMethodType string

const (
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20  SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_OAuth2.0"
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_API Token"
)

type SourceZendeskSunshineAuthorizationMethod struct {
	SourceZendeskSunshineAuthorizationMethodOAuth20  *SourceZendeskSunshineAuthorizationMethodOAuth20
	SourceZendeskSunshineAuthorizationMethodAPIToken *SourceZendeskSunshineAuthorizationMethodAPIToken

	Type SourceZendeskSunshineAuthorizationMethodType
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodOAuth20(sourceZendeskSunshineAuthorizationMethodOAuth20 SourceZendeskSunshineAuthorizationMethodOAuth20) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodOAuth20: &sourceZendeskSunshineAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodAPIToken(sourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPIToken) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodAPIToken: &sourceZendeskSunshineAuthorizationMethodAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSunshineAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceZendeskSunshineAuthorizationMethodAPIToken := new(SourceZendeskSunshineAuthorizationMethodAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSunshineAuthorizationMethodAPIToken, "", true, true); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodAPIToken = sourceZendeskSunshineAuthorizationMethodAPIToken
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken
		return nil
	}

	sourceZendeskSunshineAuthorizationMethodOAuth20 := new(SourceZendeskSunshineAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSunshineAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodOAuth20 = sourceZendeskSunshineAuthorizationMethodOAuth20
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSunshineAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskSunshineAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskSunshineAuthorizationMethodAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskSunshineZendeskSunshine string

const (
	SourceZendeskSunshineZendeskSunshineZendeskSunshine SourceZendeskSunshineZendeskSunshine = "zendesk-sunshine"
)

func (e SourceZendeskSunshineZendeskSunshine) ToPointer() *SourceZendeskSunshineZendeskSunshine {
	return &e
}

func (e *SourceZendeskSunshineZendeskSunshine) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-sunshine":
		*e = SourceZendeskSunshineZendeskSunshine(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineZendeskSunshine: %v", v)
	}
}

type SourceZendeskSunshine struct {
	Credentials *SourceZendeskSunshineAuthorizationMethod `json:"credentials,omitempty"`
	sourceType  SourceZendeskSunshineZendeskSunshine      `const:"zendesk-sunshine" json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.
	StartDate time.Time `json:"start_date"`
	// The subdomain for your Zendesk Account.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskSunshine) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSunshine) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSunshine) GetCredentials() *SourceZendeskSunshineAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskSunshine) GetSourceType() SourceZendeskSunshineZendeskSunshine {
	return SourceZendeskSunshineZendeskSunshineZendeskSunshine
}

func (o *SourceZendeskSunshine) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceZendeskSunshine) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
