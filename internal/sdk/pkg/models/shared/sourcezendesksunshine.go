// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod string

const (
	SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod = "api_token"
)

func (e SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod) ToPointer() *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod {
	return &e
}

func (e *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod: %v", v)
	}
}

type SourceZendeskSunshineAuthorizationMethodAPIToken struct {
	// API Token. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk_sunshine">docs</a> for information on how to generate this key.
	APIToken   string                                                     `json:"api_token"`
	AuthMethod SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethod `json:"auth_method"`
	// The user email for your Zendesk account
	Email string `json:"email"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPIToken

func (c *SourceZendeskSunshineAuthorizationMethodAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSunshineAuthorizationMethodAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSunshineAuthorizationMethodAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_token")
	delete(additionalFields, "auth_method")
	delete(additionalFields, "email")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSunshineAuthorizationMethodAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSunshineAuthorizationMethodAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod string

const (
	SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodOauth20 SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod = "oauth2.0"
)

func (e SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod) ToPointer() *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod {
	return &e
}

func (e *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod: %v", v)
	}
}

type SourceZendeskSunshineAuthorizationMethodOAuth20 struct {
	// Long-term access Token for making authenticated requests.
	AccessToken string                                                    `json:"access_token"`
	AuthMethod  SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethod `json:"auth_method"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskSunshineAuthorizationMethodOAuth20 SourceZendeskSunshineAuthorizationMethodOAuth20

func (c *SourceZendeskSunshineAuthorizationMethodOAuth20) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSunshineAuthorizationMethodOAuth20{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSunshineAuthorizationMethodOAuth20(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "access_token")
	delete(additionalFields, "auth_method")
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSunshineAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSunshineAuthorizationMethodOAuth20(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSunshineAuthorizationMethodType string

const (
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20  SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_OAuth2.0"
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_API Token"
)

type SourceZendeskSunshineAuthorizationMethod struct {
	SourceZendeskSunshineAuthorizationMethodOAuth20  *SourceZendeskSunshineAuthorizationMethodOAuth20
	SourceZendeskSunshineAuthorizationMethodAPIToken *SourceZendeskSunshineAuthorizationMethodAPIToken

	Type SourceZendeskSunshineAuthorizationMethodType
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodOAuth20(sourceZendeskSunshineAuthorizationMethodOAuth20 SourceZendeskSunshineAuthorizationMethodOAuth20) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodOAuth20: &sourceZendeskSunshineAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodAPIToken(sourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPIToken) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodAPIToken: &sourceZendeskSunshineAuthorizationMethodAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSunshineAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceZendeskSunshineAuthorizationMethodOAuth20 := new(SourceZendeskSunshineAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSunshineAuthorizationMethodOAuth20); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodOAuth20 = sourceZendeskSunshineAuthorizationMethodOAuth20
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20
		return nil
	}

	sourceZendeskSunshineAuthorizationMethodAPIToken := new(SourceZendeskSunshineAuthorizationMethodAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSunshineAuthorizationMethodAPIToken); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodAPIToken = sourceZendeskSunshineAuthorizationMethodAPIToken
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSunshineAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceZendeskSunshineAuthorizationMethodOAuth20)
	}

	if u.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
		return json.Marshal(u.SourceZendeskSunshineAuthorizationMethodAPIToken)
	}

	return nil, nil
}

type SourceZendeskSunshineZendeskSunshine string

const (
	SourceZendeskSunshineZendeskSunshineZendeskSunshine SourceZendeskSunshineZendeskSunshine = "zendesk-sunshine"
)

func (e SourceZendeskSunshineZendeskSunshine) ToPointer() *SourceZendeskSunshineZendeskSunshine {
	return &e
}

func (e *SourceZendeskSunshineZendeskSunshine) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-sunshine":
		*e = SourceZendeskSunshineZendeskSunshine(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineZendeskSunshine: %v", v)
	}
}

type SourceZendeskSunshine struct {
	Credentials *SourceZendeskSunshineAuthorizationMethod `json:"credentials,omitempty"`
	SourceType  SourceZendeskSunshineZendeskSunshine      `json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.
	StartDate string `json:"start_date"`
	// The subdomain for your Zendesk Account.
	Subdomain string `json:"subdomain"`
}
