// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod string

const (
	SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethodAccessToken SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod = "access_token"
)

func (e SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod) ToPointer() *SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod {
	return &e
}

func (e *SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod: %v", v)
	}
}

type SourceLinkedinPagesUpdateAuthenticationAccessToken struct {
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	AccessToken string                                                        `json:"access_token"`
	AuthMethod  *SourceLinkedinPagesUpdateAuthenticationAccessTokenAuthMethod `json:"auth_method,omitempty"`
}

type SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod string

const (
	SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethodOAuth20 SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod = "oAuth2.0"
)

func (e SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod) ToPointer() *SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod {
	return &e
}

func (e *SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oAuth2.0":
		*e = SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod: %v", v)
	}
}

type SourceLinkedinPagesUpdateAuthenticationOAuth20 struct {
	AuthMethod *SourceLinkedinPagesUpdateAuthenticationOAuth20AuthMethod `json:"auth_method,omitempty"`
	// The client ID of the LinkedIn developer application.
	ClientID string `json:"client_id"`
	// The client secret of the LinkedIn developer application.
	ClientSecret string `json:"client_secret"`
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	RefreshToken string `json:"refresh_token"`
}

type SourceLinkedinPagesUpdateAuthenticationType string

const (
	SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationOAuth20     SourceLinkedinPagesUpdateAuthenticationType = "source-linkedin-pages-update_Authentication_OAuth2.0"
	SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationAccessToken SourceLinkedinPagesUpdateAuthenticationType = "source-linkedin-pages-update_Authentication_Access token"
)

type SourceLinkedinPagesUpdateAuthentication struct {
	SourceLinkedinPagesUpdateAuthenticationOAuth20     *SourceLinkedinPagesUpdateAuthenticationOAuth20
	SourceLinkedinPagesUpdateAuthenticationAccessToken *SourceLinkedinPagesUpdateAuthenticationAccessToken

	Type SourceLinkedinPagesUpdateAuthenticationType
}

func CreateSourceLinkedinPagesUpdateAuthenticationSourceLinkedinPagesUpdateAuthenticationOAuth20(sourceLinkedinPagesUpdateAuthenticationOAuth20 SourceLinkedinPagesUpdateAuthenticationOAuth20) SourceLinkedinPagesUpdateAuthentication {
	typ := SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationOAuth20

	return SourceLinkedinPagesUpdateAuthentication{
		SourceLinkedinPagesUpdateAuthenticationOAuth20: &sourceLinkedinPagesUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceLinkedinPagesUpdateAuthenticationSourceLinkedinPagesUpdateAuthenticationAccessToken(sourceLinkedinPagesUpdateAuthenticationAccessToken SourceLinkedinPagesUpdateAuthenticationAccessToken) SourceLinkedinPagesUpdateAuthentication {
	typ := SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationAccessToken

	return SourceLinkedinPagesUpdateAuthentication{
		SourceLinkedinPagesUpdateAuthenticationAccessToken: &sourceLinkedinPagesUpdateAuthenticationAccessToken,
		Type: typ,
	}
}

func (u *SourceLinkedinPagesUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceLinkedinPagesUpdateAuthenticationAccessToken := new(SourceLinkedinPagesUpdateAuthenticationAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinPagesUpdateAuthenticationAccessToken); err == nil {
		u.SourceLinkedinPagesUpdateAuthenticationAccessToken = sourceLinkedinPagesUpdateAuthenticationAccessToken
		u.Type = SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationAccessToken
		return nil
	}

	sourceLinkedinPagesUpdateAuthenticationOAuth20 := new(SourceLinkedinPagesUpdateAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinPagesUpdateAuthenticationOAuth20); err == nil {
		u.SourceLinkedinPagesUpdateAuthenticationOAuth20 = sourceLinkedinPagesUpdateAuthenticationOAuth20
		u.Type = SourceLinkedinPagesUpdateAuthenticationTypeSourceLinkedinPagesUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLinkedinPagesUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceLinkedinPagesUpdateAuthenticationAccessToken != nil {
		return json.Marshal(u.SourceLinkedinPagesUpdateAuthenticationAccessToken)
	}

	if u.SourceLinkedinPagesUpdateAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceLinkedinPagesUpdateAuthenticationOAuth20)
	}

	return nil, nil
}

type SourceLinkedinPagesUpdate struct {
	Credentials *SourceLinkedinPagesUpdateAuthentication `json:"credentials,omitempty"`
	// Specify the Organization ID
	OrgID string `json:"org_id"`
}
