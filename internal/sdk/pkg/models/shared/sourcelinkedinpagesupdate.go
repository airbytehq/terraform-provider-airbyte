// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceLinkedinPagesUpdateSchemasAuthMethod string

const (
	SourceLinkedinPagesUpdateSchemasAuthMethodAccessToken SourceLinkedinPagesUpdateSchemasAuthMethod = "access_token"
)

func (e SourceLinkedinPagesUpdateSchemasAuthMethod) ToPointer() *SourceLinkedinPagesUpdateSchemasAuthMethod {
	return &e
}

func (e *SourceLinkedinPagesUpdateSchemasAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceLinkedinPagesUpdateSchemasAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesUpdateSchemasAuthMethod: %v", v)
	}
}

type SourceLinkedinPagesUpdateAccessToken struct {
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	AccessToken string                                      `json:"access_token"`
	authMethod  *SourceLinkedinPagesUpdateSchemasAuthMethod `const:"access_token" json:"auth_method,omitempty"`
}

func (s SourceLinkedinPagesUpdateAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLinkedinPagesUpdateAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLinkedinPagesUpdateAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceLinkedinPagesUpdateAccessToken) GetAuthMethod() *SourceLinkedinPagesUpdateSchemasAuthMethod {
	return SourceLinkedinPagesUpdateSchemasAuthMethodAccessToken.ToPointer()
}

type SourceLinkedinPagesUpdateAuthMethod string

const (
	SourceLinkedinPagesUpdateAuthMethodOAuth20 SourceLinkedinPagesUpdateAuthMethod = "oAuth2.0"
)

func (e SourceLinkedinPagesUpdateAuthMethod) ToPointer() *SourceLinkedinPagesUpdateAuthMethod {
	return &e
}

func (e *SourceLinkedinPagesUpdateAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oAuth2.0":
		*e = SourceLinkedinPagesUpdateAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesUpdateAuthMethod: %v", v)
	}
}

type SourceLinkedinPagesUpdateOAuth20 struct {
	authMethod *SourceLinkedinPagesUpdateAuthMethod `const:"oAuth2.0" json:"auth_method,omitempty"`
	// The client ID of the LinkedIn developer application.
	ClientID string `json:"client_id"`
	// The client secret of the LinkedIn developer application.
	ClientSecret string `json:"client_secret"`
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceLinkedinPagesUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLinkedinPagesUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLinkedinPagesUpdateOAuth20) GetAuthMethod() *SourceLinkedinPagesUpdateAuthMethod {
	return SourceLinkedinPagesUpdateAuthMethodOAuth20.ToPointer()
}

func (o *SourceLinkedinPagesUpdateOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceLinkedinPagesUpdateOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceLinkedinPagesUpdateOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceLinkedinPagesUpdateAuthenticationType string

const (
	SourceLinkedinPagesUpdateAuthenticationTypeOAuth20     SourceLinkedinPagesUpdateAuthenticationType = "OAuth20"
	SourceLinkedinPagesUpdateAuthenticationTypeAccessToken SourceLinkedinPagesUpdateAuthenticationType = "AccessToken"
)

type SourceLinkedinPagesUpdateAuthentication struct {
	OAuth20     *SourceLinkedinPagesUpdateOAuth20
	AccessToken *SourceLinkedinPagesUpdateAccessToken

	Type SourceLinkedinPagesUpdateAuthenticationType
}

func CreateSourceLinkedinPagesUpdateAuthenticationOAuth20(oAuth20 SourceLinkedinPagesUpdateOAuth20) SourceLinkedinPagesUpdateAuthentication {
	typ := SourceLinkedinPagesUpdateAuthenticationTypeOAuth20

	return SourceLinkedinPagesUpdateAuthentication{
		OAuth20: &oAuth20,
		Type:    typ,
	}
}

func CreateSourceLinkedinPagesUpdateAuthenticationAccessToken(accessToken SourceLinkedinPagesUpdateAccessToken) SourceLinkedinPagesUpdateAuthentication {
	typ := SourceLinkedinPagesUpdateAuthenticationTypeAccessToken

	return SourceLinkedinPagesUpdateAuthentication{
		AccessToken: &accessToken,
		Type:        typ,
	}
}

func (u *SourceLinkedinPagesUpdateAuthentication) UnmarshalJSON(data []byte) error {

	accessToken := new(SourceLinkedinPagesUpdateAccessToken)
	if err := utils.UnmarshalJSON(data, &accessToken, "", true, true); err == nil {
		u.AccessToken = accessToken
		u.Type = SourceLinkedinPagesUpdateAuthenticationTypeAccessToken
		return nil
	}

	oAuth20 := new(SourceLinkedinPagesUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &oAuth20, "", true, true); err == nil {
		u.OAuth20 = oAuth20
		u.Type = SourceLinkedinPagesUpdateAuthenticationTypeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLinkedinPagesUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.OAuth20 != nil {
		return utils.MarshalJSON(u.OAuth20, "", true)
	}

	if u.AccessToken != nil {
		return utils.MarshalJSON(u.AccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceLinkedinPagesUpdate struct {
	Credentials *SourceLinkedinPagesUpdateAuthentication `json:"credentials,omitempty"`
	// Specify the Organization ID
	OrgID string `json:"org_id"`
}

func (o *SourceLinkedinPagesUpdate) GetCredentials() *SourceLinkedinPagesUpdateAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceLinkedinPagesUpdate) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}
