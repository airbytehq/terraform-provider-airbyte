// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationLangchainLangchain string

const (
	DestinationLangchainLangchainLangchain DestinationLangchainLangchain = "langchain"
)

func (e DestinationLangchainLangchain) ToPointer() *DestinationLangchainLangchain {
	return &e
}

func (e *DestinationLangchainLangchain) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "langchain":
		*e = DestinationLangchainLangchain(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainLangchain: %v", v)
	}
}

type DestinationLangchainEmbeddingFakeMode string

const (
	DestinationLangchainEmbeddingFakeModeFake DestinationLangchainEmbeddingFakeMode = "fake"
)

func (e DestinationLangchainEmbeddingFakeMode) ToPointer() *DestinationLangchainEmbeddingFakeMode {
	return &e
}

func (e *DestinationLangchainEmbeddingFakeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationLangchainEmbeddingFakeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainEmbeddingFakeMode: %v", v)
	}
}

// DestinationLangchainEmbeddingFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationLangchainEmbeddingFake struct {
	Mode *DestinationLangchainEmbeddingFakeMode `json:"mode,omitempty"`
}

type DestinationLangchainEmbeddingOpenAIMode string

const (
	DestinationLangchainEmbeddingOpenAIModeOpenai DestinationLangchainEmbeddingOpenAIMode = "openai"
)

func (e DestinationLangchainEmbeddingOpenAIMode) ToPointer() *DestinationLangchainEmbeddingOpenAIMode {
	return &e
}

func (e *DestinationLangchainEmbeddingOpenAIMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationLangchainEmbeddingOpenAIMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainEmbeddingOpenAIMode: %v", v)
	}
}

// DestinationLangchainEmbeddingOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationLangchainEmbeddingOpenAI struct {
	Mode      *DestinationLangchainEmbeddingOpenAIMode `json:"mode,omitempty"`
	OpenaiKey string                                   `json:"openai_key"`
}

type DestinationLangchainEmbeddingType string

const (
	DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingOpenAI DestinationLangchainEmbeddingType = "destination-langchain_Embedding_OpenAI"
	DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingFake   DestinationLangchainEmbeddingType = "destination-langchain_Embedding_Fake"
)

type DestinationLangchainEmbedding struct {
	DestinationLangchainEmbeddingOpenAI *DestinationLangchainEmbeddingOpenAI
	DestinationLangchainEmbeddingFake   *DestinationLangchainEmbeddingFake

	Type DestinationLangchainEmbeddingType
}

func CreateDestinationLangchainEmbeddingDestinationLangchainEmbeddingOpenAI(destinationLangchainEmbeddingOpenAI DestinationLangchainEmbeddingOpenAI) DestinationLangchainEmbedding {
	typ := DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingOpenAI

	return DestinationLangchainEmbedding{
		DestinationLangchainEmbeddingOpenAI: &destinationLangchainEmbeddingOpenAI,
		Type:                                typ,
	}
}

func CreateDestinationLangchainEmbeddingDestinationLangchainEmbeddingFake(destinationLangchainEmbeddingFake DestinationLangchainEmbeddingFake) DestinationLangchainEmbedding {
	typ := DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingFake

	return DestinationLangchainEmbedding{
		DestinationLangchainEmbeddingFake: &destinationLangchainEmbeddingFake,
		Type:                              typ,
	}
}

func (u *DestinationLangchainEmbedding) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationLangchainEmbeddingOpenAI := new(DestinationLangchainEmbeddingOpenAI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationLangchainEmbeddingOpenAI); err == nil {
		u.DestinationLangchainEmbeddingOpenAI = destinationLangchainEmbeddingOpenAI
		u.Type = DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingOpenAI
		return nil
	}

	destinationLangchainEmbeddingFake := new(DestinationLangchainEmbeddingFake)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationLangchainEmbeddingFake); err == nil {
		u.DestinationLangchainEmbeddingFake = destinationLangchainEmbeddingFake
		u.Type = DestinationLangchainEmbeddingTypeDestinationLangchainEmbeddingFake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationLangchainEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationLangchainEmbeddingOpenAI != nil {
		return json.Marshal(u.DestinationLangchainEmbeddingOpenAI)
	}

	if u.DestinationLangchainEmbeddingFake != nil {
		return json.Marshal(u.DestinationLangchainEmbeddingFake)
	}

	return nil, nil
}

type DestinationLangchainIndexingChromaLocalPersistanceMode string

const (
	DestinationLangchainIndexingChromaLocalPersistanceModeChromaLocal DestinationLangchainIndexingChromaLocalPersistanceMode = "chroma_local"
)

func (e DestinationLangchainIndexingChromaLocalPersistanceMode) ToPointer() *DestinationLangchainIndexingChromaLocalPersistanceMode {
	return &e
}

func (e *DestinationLangchainIndexingChromaLocalPersistanceMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chroma_local":
		*e = DestinationLangchainIndexingChromaLocalPersistanceMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainIndexingChromaLocalPersistanceMode: %v", v)
	}
}

// DestinationLangchainIndexingChromaLocalPersistance - Chroma is a popular vector store that can be used to store and retrieve embeddings. It will build its index in memory and persist it to disk by the end of the sync.
type DestinationLangchainIndexingChromaLocalPersistance struct {
	// Name of the collection to use.
	CollectionName *string `json:"collection_name,omitempty"`
	// Path to the directory where chroma files will be written. The files will be placed inside that local mount.
	DestinationPath string                                                  `json:"destination_path"`
	Mode            *DestinationLangchainIndexingChromaLocalPersistanceMode `json:"mode,omitempty"`
}

type DestinationLangchainIndexingDocArrayHnswSearchMode string

const (
	DestinationLangchainIndexingDocArrayHnswSearchModeDocArrayHnswSearch DestinationLangchainIndexingDocArrayHnswSearchMode = "DocArrayHnswSearch"
)

func (e DestinationLangchainIndexingDocArrayHnswSearchMode) ToPointer() *DestinationLangchainIndexingDocArrayHnswSearchMode {
	return &e
}

func (e *DestinationLangchainIndexingDocArrayHnswSearchMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DocArrayHnswSearch":
		*e = DestinationLangchainIndexingDocArrayHnswSearchMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainIndexingDocArrayHnswSearchMode: %v", v)
	}
}

// DestinationLangchainIndexingDocArrayHnswSearch - DocArrayHnswSearch is a lightweight Document Index implementation provided by Docarray that runs fully locally and is best suited for small- to medium-sized datasets. It stores vectors on disk in hnswlib, and stores all other data in SQLite.
type DestinationLangchainIndexingDocArrayHnswSearch struct {
	// Path to the directory where hnswlib and meta data files will be written. The files will be placed inside that local mount. All files in the specified destination directory will be deleted on each run.
	DestinationPath string                                              `json:"destination_path"`
	Mode            *DestinationLangchainIndexingDocArrayHnswSearchMode `json:"mode,omitempty"`
}

type DestinationLangchainIndexingPineconeMode string

const (
	DestinationLangchainIndexingPineconeModePinecone DestinationLangchainIndexingPineconeMode = "pinecone"
)

func (e DestinationLangchainIndexingPineconeMode) ToPointer() *DestinationLangchainIndexingPineconeMode {
	return &e
}

func (e *DestinationLangchainIndexingPineconeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinecone":
		*e = DestinationLangchainIndexingPineconeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainIndexingPineconeMode: %v", v)
	}
}

// DestinationLangchainIndexingPinecone - Pinecone is a popular vector store that can be used to store and retrieve embeddings. It is a managed service and can also be queried from outside of langchain.
type DestinationLangchainIndexingPinecone struct {
	// Pinecone index to use
	Index string                                    `json:"index"`
	Mode  *DestinationLangchainIndexingPineconeMode `json:"mode,omitempty"`
	// Pinecone environment to use
	PineconeEnvironment string `json:"pinecone_environment"`
	PineconeKey         string `json:"pinecone_key"`
}

type DestinationLangchainIndexingType string

const (
	DestinationLangchainIndexingTypeDestinationLangchainIndexingPinecone               DestinationLangchainIndexingType = "destination-langchain_Indexing_Pinecone"
	DestinationLangchainIndexingTypeDestinationLangchainIndexingDocArrayHnswSearch     DestinationLangchainIndexingType = "destination-langchain_Indexing_DocArrayHnswSearch"
	DestinationLangchainIndexingTypeDestinationLangchainIndexingChromaLocalPersistance DestinationLangchainIndexingType = "destination-langchain_Indexing_Chroma (local persistance)"
)

type DestinationLangchainIndexing struct {
	DestinationLangchainIndexingPinecone               *DestinationLangchainIndexingPinecone
	DestinationLangchainIndexingDocArrayHnswSearch     *DestinationLangchainIndexingDocArrayHnswSearch
	DestinationLangchainIndexingChromaLocalPersistance *DestinationLangchainIndexingChromaLocalPersistance

	Type DestinationLangchainIndexingType
}

func CreateDestinationLangchainIndexingDestinationLangchainIndexingPinecone(destinationLangchainIndexingPinecone DestinationLangchainIndexingPinecone) DestinationLangchainIndexing {
	typ := DestinationLangchainIndexingTypeDestinationLangchainIndexingPinecone

	return DestinationLangchainIndexing{
		DestinationLangchainIndexingPinecone: &destinationLangchainIndexingPinecone,
		Type:                                 typ,
	}
}

func CreateDestinationLangchainIndexingDestinationLangchainIndexingDocArrayHnswSearch(destinationLangchainIndexingDocArrayHnswSearch DestinationLangchainIndexingDocArrayHnswSearch) DestinationLangchainIndexing {
	typ := DestinationLangchainIndexingTypeDestinationLangchainIndexingDocArrayHnswSearch

	return DestinationLangchainIndexing{
		DestinationLangchainIndexingDocArrayHnswSearch: &destinationLangchainIndexingDocArrayHnswSearch,
		Type: typ,
	}
}

func CreateDestinationLangchainIndexingDestinationLangchainIndexingChromaLocalPersistance(destinationLangchainIndexingChromaLocalPersistance DestinationLangchainIndexingChromaLocalPersistance) DestinationLangchainIndexing {
	typ := DestinationLangchainIndexingTypeDestinationLangchainIndexingChromaLocalPersistance

	return DestinationLangchainIndexing{
		DestinationLangchainIndexingChromaLocalPersistance: &destinationLangchainIndexingChromaLocalPersistance,
		Type: typ,
	}
}

func (u *DestinationLangchainIndexing) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationLangchainIndexingPinecone := new(DestinationLangchainIndexingPinecone)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationLangchainIndexingPinecone); err == nil {
		u.DestinationLangchainIndexingPinecone = destinationLangchainIndexingPinecone
		u.Type = DestinationLangchainIndexingTypeDestinationLangchainIndexingPinecone
		return nil
	}

	destinationLangchainIndexingDocArrayHnswSearch := new(DestinationLangchainIndexingDocArrayHnswSearch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationLangchainIndexingDocArrayHnswSearch); err == nil {
		u.DestinationLangchainIndexingDocArrayHnswSearch = destinationLangchainIndexingDocArrayHnswSearch
		u.Type = DestinationLangchainIndexingTypeDestinationLangchainIndexingDocArrayHnswSearch
		return nil
	}

	destinationLangchainIndexingChromaLocalPersistance := new(DestinationLangchainIndexingChromaLocalPersistance)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationLangchainIndexingChromaLocalPersistance); err == nil {
		u.DestinationLangchainIndexingChromaLocalPersistance = destinationLangchainIndexingChromaLocalPersistance
		u.Type = DestinationLangchainIndexingTypeDestinationLangchainIndexingChromaLocalPersistance
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationLangchainIndexing) MarshalJSON() ([]byte, error) {
	if u.DestinationLangchainIndexingPinecone != nil {
		return json.Marshal(u.DestinationLangchainIndexingPinecone)
	}

	if u.DestinationLangchainIndexingDocArrayHnswSearch != nil {
		return json.Marshal(u.DestinationLangchainIndexingDocArrayHnswSearch)
	}

	if u.DestinationLangchainIndexingChromaLocalPersistance != nil {
		return json.Marshal(u.DestinationLangchainIndexingChromaLocalPersistance)
	}

	return nil, nil
}

type DestinationLangchainProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `json:"chunk_overlap,omitempty"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be used to calculate the embedding. All other fields are passed along as meta fields. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields"`
}

type DestinationLangchain struct {
	DestinationType DestinationLangchainLangchain `json:"destinationType"`
	// Embedding configuration
	Embedding DestinationLangchainEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationLangchainIndexing              `json:"indexing"`
	Processing DestinationLangchainProcessingConfigModel `json:"processing"`
}
