// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskTalkUpdateAuthenticationOAuth20AuthType string

const (
	SourceZendeskTalkUpdateAuthenticationOAuth20AuthTypeOauth20 SourceZendeskTalkUpdateAuthenticationOAuth20AuthType = "oauth2.0"
)

func (e SourceZendeskTalkUpdateAuthenticationOAuth20AuthType) ToPointer() *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType {
	return &e
}

func (e *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskTalkUpdateAuthenticationOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkUpdateAuthenticationOAuth20AuthType: %v", v)
	}
}

// SourceZendeskTalkUpdateAuthenticationOAuth20 - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkUpdateAuthenticationOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	AccessToken string                                                `json:"access_token"`
	authType    *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Client Secret
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceZendeskTalkUpdateAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkUpdateAuthenticationOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkUpdateAuthenticationOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkUpdateAuthenticationOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskTalkUpdateAuthenticationOAuth20) GetAuthType() *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType {
	return SourceZendeskTalkUpdateAuthenticationOAuth20AuthTypeOauth20.ToPointer()
}

func (o *SourceZendeskTalkUpdateAuthenticationOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskTalkUpdateAuthenticationOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type SourceZendeskTalkUpdateAuthenticationAPITokenAuthType string

const (
	SourceZendeskTalkUpdateAuthenticationAPITokenAuthTypeAPIToken SourceZendeskTalkUpdateAuthenticationAPITokenAuthType = "api_token"
)

func (e SourceZendeskTalkUpdateAuthenticationAPITokenAuthType) ToPointer() *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType {
	return &e
}

func (e *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskTalkUpdateAuthenticationAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkUpdateAuthenticationAPITokenAuthType: %v", v)
	}
}

// SourceZendeskTalkUpdateAuthenticationAPIToken - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkUpdateAuthenticationAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	APIToken string                                                 `json:"api_token"`
	authType *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType `const:"api_token" json:"auth_type,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`
}

func (s SourceZendeskTalkUpdateAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkUpdateAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkUpdateAuthenticationAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkUpdateAuthenticationAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskTalkUpdateAuthenticationAPIToken) GetAuthType() *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType {
	return SourceZendeskTalkUpdateAuthenticationAPITokenAuthTypeAPIToken.ToPointer()
}

func (o *SourceZendeskTalkUpdateAuthenticationAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskTalkUpdateAuthenticationType string

const (
	SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken SourceZendeskTalkUpdateAuthenticationType = "source-zendesk-talk-update_Authentication_API Token"
	SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20  SourceZendeskTalkUpdateAuthenticationType = "source-zendesk-talk-update_Authentication_OAuth2.0"
)

type SourceZendeskTalkUpdateAuthentication struct {
	SourceZendeskTalkUpdateAuthenticationAPIToken *SourceZendeskTalkUpdateAuthenticationAPIToken
	SourceZendeskTalkUpdateAuthenticationOAuth20  *SourceZendeskTalkUpdateAuthenticationOAuth20

	Type SourceZendeskTalkUpdateAuthenticationType
}

func CreateSourceZendeskTalkUpdateAuthenticationSourceZendeskTalkUpdateAuthenticationAPIToken(sourceZendeskTalkUpdateAuthenticationAPIToken SourceZendeskTalkUpdateAuthenticationAPIToken) SourceZendeskTalkUpdateAuthentication {
	typ := SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken

	return SourceZendeskTalkUpdateAuthentication{
		SourceZendeskTalkUpdateAuthenticationAPIToken: &sourceZendeskTalkUpdateAuthenticationAPIToken,
		Type: typ,
	}
}

func CreateSourceZendeskTalkUpdateAuthenticationSourceZendeskTalkUpdateAuthenticationOAuth20(sourceZendeskTalkUpdateAuthenticationOAuth20 SourceZendeskTalkUpdateAuthenticationOAuth20) SourceZendeskTalkUpdateAuthentication {
	typ := SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20

	return SourceZendeskTalkUpdateAuthentication{
		SourceZendeskTalkUpdateAuthenticationOAuth20: &sourceZendeskTalkUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func (u *SourceZendeskTalkUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceZendeskTalkUpdateAuthenticationAPIToken := new(SourceZendeskTalkUpdateAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkUpdateAuthenticationAPIToken, "", true, true); err == nil {
		u.SourceZendeskTalkUpdateAuthenticationAPIToken = sourceZendeskTalkUpdateAuthenticationAPIToken
		u.Type = SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken
		return nil
	}

	sourceZendeskTalkUpdateAuthenticationOAuth20 := new(SourceZendeskTalkUpdateAuthenticationOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkUpdateAuthenticationOAuth20, "", true, true); err == nil {
		u.SourceZendeskTalkUpdateAuthenticationOAuth20 = sourceZendeskTalkUpdateAuthenticationOAuth20
		u.Type = SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskTalkUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskTalkUpdateAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkUpdateAuthenticationAPIToken, "", true)
	}

	if u.SourceZendeskTalkUpdateAuthenticationOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkUpdateAuthenticationOAuth20, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskTalkUpdate struct {
	// Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
	Credentials *SourceZendeskTalkUpdateAuthentication `json:"credentials,omitempty"`
	// The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
	// This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskTalkUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkUpdate) GetCredentials() *SourceZendeskTalkUpdateAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskTalkUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceZendeskTalkUpdate) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
