// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskTalkUpdateAuthenticationOAuth20AuthType string

const (
	SourceZendeskTalkUpdateAuthenticationOAuth20AuthTypeOauth20 SourceZendeskTalkUpdateAuthenticationOAuth20AuthType = "oauth2.0"
)

func (e SourceZendeskTalkUpdateAuthenticationOAuth20AuthType) ToPointer() *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType {
	return &e
}

func (e *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskTalkUpdateAuthenticationOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkUpdateAuthenticationOAuth20AuthType: %v", v)
	}
}

// SourceZendeskTalkUpdateAuthenticationOAuth20 - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkUpdateAuthenticationOAuth20 struct {
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	AccessToken string                                                `json:"access_token"`
	AuthType    *SourceZendeskTalkUpdateAuthenticationOAuth20AuthType `json:"auth_type,omitempty"`
	// Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Client Secret
	ClientSecret *string `json:"client_secret,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskTalkUpdateAuthenticationOAuth20 SourceZendeskTalkUpdateAuthenticationOAuth20

func (c *SourceZendeskTalkUpdateAuthenticationOAuth20) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskTalkUpdateAuthenticationOAuth20{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskTalkUpdateAuthenticationOAuth20(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "access_token")
	delete(additionalFields, "auth_type")
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskTalkUpdateAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskTalkUpdateAuthenticationOAuth20(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskTalkUpdateAuthenticationAPITokenAuthType string

const (
	SourceZendeskTalkUpdateAuthenticationAPITokenAuthTypeAPIToken SourceZendeskTalkUpdateAuthenticationAPITokenAuthType = "api_token"
)

func (e SourceZendeskTalkUpdateAuthenticationAPITokenAuthType) ToPointer() *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType {
	return &e
}

func (e *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskTalkUpdateAuthenticationAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkUpdateAuthenticationAPITokenAuthType: %v", v)
	}
}

// SourceZendeskTalkUpdateAuthenticationAPIToken - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkUpdateAuthenticationAPIToken struct {
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	APIToken string                                                 `json:"api_token"`
	AuthType *SourceZendeskTalkUpdateAuthenticationAPITokenAuthType `json:"auth_type,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceZendeskTalkUpdateAuthenticationAPIToken SourceZendeskTalkUpdateAuthenticationAPIToken

func (c *SourceZendeskTalkUpdateAuthenticationAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskTalkUpdateAuthenticationAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskTalkUpdateAuthenticationAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_token")
	delete(additionalFields, "auth_type")
	delete(additionalFields, "email")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskTalkUpdateAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskTalkUpdateAuthenticationAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskTalkUpdateAuthenticationType string

const (
	SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken SourceZendeskTalkUpdateAuthenticationType = "source-zendesk-talk-update_Authentication_API Token"
	SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20  SourceZendeskTalkUpdateAuthenticationType = "source-zendesk-talk-update_Authentication_OAuth2.0"
)

type SourceZendeskTalkUpdateAuthentication struct {
	SourceZendeskTalkUpdateAuthenticationAPIToken *SourceZendeskTalkUpdateAuthenticationAPIToken
	SourceZendeskTalkUpdateAuthenticationOAuth20  *SourceZendeskTalkUpdateAuthenticationOAuth20

	Type SourceZendeskTalkUpdateAuthenticationType
}

func CreateSourceZendeskTalkUpdateAuthenticationSourceZendeskTalkUpdateAuthenticationAPIToken(sourceZendeskTalkUpdateAuthenticationAPIToken SourceZendeskTalkUpdateAuthenticationAPIToken) SourceZendeskTalkUpdateAuthentication {
	typ := SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken

	return SourceZendeskTalkUpdateAuthentication{
		SourceZendeskTalkUpdateAuthenticationAPIToken: &sourceZendeskTalkUpdateAuthenticationAPIToken,
		Type: typ,
	}
}

func CreateSourceZendeskTalkUpdateAuthenticationSourceZendeskTalkUpdateAuthenticationOAuth20(sourceZendeskTalkUpdateAuthenticationOAuth20 SourceZendeskTalkUpdateAuthenticationOAuth20) SourceZendeskTalkUpdateAuthentication {
	typ := SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20

	return SourceZendeskTalkUpdateAuthentication{
		SourceZendeskTalkUpdateAuthenticationOAuth20: &sourceZendeskTalkUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func (u *SourceZendeskTalkUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceZendeskTalkUpdateAuthenticationAPIToken := new(SourceZendeskTalkUpdateAuthenticationAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskTalkUpdateAuthenticationAPIToken); err == nil {
		u.SourceZendeskTalkUpdateAuthenticationAPIToken = sourceZendeskTalkUpdateAuthenticationAPIToken
		u.Type = SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationAPIToken
		return nil
	}

	sourceZendeskTalkUpdateAuthenticationOAuth20 := new(SourceZendeskTalkUpdateAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskTalkUpdateAuthenticationOAuth20); err == nil {
		u.SourceZendeskTalkUpdateAuthenticationOAuth20 = sourceZendeskTalkUpdateAuthenticationOAuth20
		u.Type = SourceZendeskTalkUpdateAuthenticationTypeSourceZendeskTalkUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskTalkUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskTalkUpdateAuthenticationAPIToken != nil {
		return json.Marshal(u.SourceZendeskTalkUpdateAuthenticationAPIToken)
	}

	if u.SourceZendeskTalkUpdateAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceZendeskTalkUpdateAuthenticationOAuth20)
	}

	return nil, nil
}

type SourceZendeskTalkUpdate struct {
	// Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
	Credentials *SourceZendeskTalkUpdateAuthentication `json:"credentials,omitempty"`
	// The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
	// This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}
