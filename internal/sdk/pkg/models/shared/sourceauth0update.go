// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod string

const (
	SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethodOauth2AccessToken SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod = "oauth2_access_token"
)

func (e SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod) ToPointer() *SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod {
	return &e
}

func (e *SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2_access_token":
		*e = SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod: %v", v)
	}
}

type SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken struct {
	// Also called <a href="https://auth0.com/docs/secure/tokens/access-tokens/get-management-api-access-tokens-for-testing">API Access Token </a> The access token used to call the Auth0 Management API Token. It's a JWT that contains specific grant permissions knowns as scopes.
	AccessToken string                                                                     `json:"access_token"`
	AuthType    SourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenAuthenticationMethod `json:"auth_type"`
}

type SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod string

const (
	SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethodOauth2ConfidentialApplication SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod = "oauth2_confidential_application"
)

func (e SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod) ToPointer() *SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod {
	return &e
}

func (e *SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2_confidential_application":
		*e = SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod: %v", v)
	}
}

type SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication struct {
	// The audience for the token, which is your API. You can find this in the Identifier field on your  <a href="https://manage.auth0.com/#/apis">API's settings tab</a>
	Audience string                                                                                 `json:"audience"`
	AuthType SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethod `json:"auth_type"`
	// Your application's Client ID. You can find this value on the <a href="https://manage.auth0.com/#/applications">application's settings tab</a> after you login the admin portal.
	ClientID string `json:"client_id"`
	// Your application's Client Secret. You can find this value on the <a href="https://manage.auth0.com/#/applications">application's settings tab</a> after you login the admin portal.
	ClientSecret string `json:"client_secret"`
}

type SourceAuth0UpdateAuthenticationMethodType string

const (
	SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication SourceAuth0UpdateAuthenticationMethodType = "source-auth0-update_Authentication Method_OAuth2 Confidential Application"
	SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken             SourceAuth0UpdateAuthenticationMethodType = "source-auth0-update_Authentication Method_OAuth2 Access Token"
)

type SourceAuth0UpdateAuthenticationMethod struct {
	SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication *SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication
	SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken             *SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken

	Type SourceAuth0UpdateAuthenticationMethodType
}

func CreateSourceAuth0UpdateAuthenticationMethodSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication(sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication) SourceAuth0UpdateAuthenticationMethod {
	typ := SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication

	return SourceAuth0UpdateAuthenticationMethod{
		SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication: &sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication,
		Type: typ,
	}
}

func CreateSourceAuth0UpdateAuthenticationMethodSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken(sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken) SourceAuth0UpdateAuthenticationMethod {
	typ := SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken

	return SourceAuth0UpdateAuthenticationMethod{
		SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken: &sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken,
		Type: typ,
	}
}

func (u *SourceAuth0UpdateAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken := new(SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken); err == nil {
		u.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken = sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken
		u.Type = SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2AccessToken
		return nil
	}

	sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication := new(SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication); err == nil {
		u.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication = sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication
		u.Type = SourceAuth0UpdateAuthenticationMethodTypeSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAuth0UpdateAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken != nil {
		return json.Marshal(u.SourceAuth0UpdateAuthenticationMethodOAuth2AccessToken)
	}

	if u.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication != nil {
		return json.Marshal(u.SourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication)
	}

	return nil, nil
}

type SourceAuth0Update struct {
	// The Authentication API is served over HTTPS. All URLs referenced in the documentation have the following base `https://YOUR_DOMAIN`
	BaseURL     string                                `json:"base_url"`
	Credentials SourceAuth0UpdateAuthenticationMethod `json:"credentials"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate *string `json:"start_date,omitempty"`
}
