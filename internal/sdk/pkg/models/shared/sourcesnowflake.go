// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType string

const (
	SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeUsernamePassword SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType = "username/password"
)

func (e SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username/password":
		*e = SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type SourceSnowflakeAuthorizationMethodUsernameAndPassword struct {
	authType SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType `const:"username/password" json:"auth_type"`
	// The password associated with the username.
	Password string `json:"password"`
	// The username you created to allow Airbyte to access the database.
	Username string `json:"username"`
}

func (s SourceSnowflakeAuthorizationMethodUsernameAndPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflakeAuthorizationMethodUsernameAndPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflakeAuthorizationMethodUsernameAndPassword) GetAuthType() SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthType {
	return SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeUsernamePassword
}

func (o *SourceSnowflakeAuthorizationMethodUsernameAndPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *SourceSnowflakeAuthorizationMethodUsernameAndPassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type SourceSnowflakeAuthorizationMethodOAuth20AuthType string

const (
	SourceSnowflakeAuthorizationMethodOAuth20AuthTypeOAuth SourceSnowflakeAuthorizationMethodOAuth20AuthType = "OAuth"
)

func (e SourceSnowflakeAuthorizationMethodOAuth20AuthType) ToPointer() *SourceSnowflakeAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceSnowflakeAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSnowflakeAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceSnowflakeAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                           `json:"access_token,omitempty"`
	authType    SourceSnowflakeAuthorizationMethodOAuth20AuthType `const:"OAuth" json:"auth_type"`
	// The Client ID of your Snowflake developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Snowflake developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token for making authenticated requests.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

func (s SourceSnowflakeAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflakeAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflakeAuthorizationMethodOAuth20) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceSnowflakeAuthorizationMethodOAuth20) GetAuthType() SourceSnowflakeAuthorizationMethodOAuth20AuthType {
	return SourceSnowflakeAuthorizationMethodOAuth20AuthTypeOAuth
}

func (o *SourceSnowflakeAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSnowflakeAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSnowflakeAuthorizationMethodOAuth20) GetRefreshToken() *string {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

type SourceSnowflakeAuthorizationMethodType string

const (
	SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodOAuth20             SourceSnowflakeAuthorizationMethodType = "source-snowflake_Authorization Method_OAuth2.0"
	SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodUsernameAndPassword SourceSnowflakeAuthorizationMethodType = "source-snowflake_Authorization Method_Username and Password"
)

type SourceSnowflakeAuthorizationMethod struct {
	SourceSnowflakeAuthorizationMethodOAuth20             *SourceSnowflakeAuthorizationMethodOAuth20
	SourceSnowflakeAuthorizationMethodUsernameAndPassword *SourceSnowflakeAuthorizationMethodUsernameAndPassword

	Type SourceSnowflakeAuthorizationMethodType
}

func CreateSourceSnowflakeAuthorizationMethodSourceSnowflakeAuthorizationMethodOAuth20(sourceSnowflakeAuthorizationMethodOAuth20 SourceSnowflakeAuthorizationMethodOAuth20) SourceSnowflakeAuthorizationMethod {
	typ := SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodOAuth20

	return SourceSnowflakeAuthorizationMethod{
		SourceSnowflakeAuthorizationMethodOAuth20: &sourceSnowflakeAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceSnowflakeAuthorizationMethodSourceSnowflakeAuthorizationMethodUsernameAndPassword(sourceSnowflakeAuthorizationMethodUsernameAndPassword SourceSnowflakeAuthorizationMethodUsernameAndPassword) SourceSnowflakeAuthorizationMethod {
	typ := SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodUsernameAndPassword

	return SourceSnowflakeAuthorizationMethod{
		SourceSnowflakeAuthorizationMethodUsernameAndPassword: &sourceSnowflakeAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *SourceSnowflakeAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceSnowflakeAuthorizationMethodUsernameAndPassword := new(SourceSnowflakeAuthorizationMethodUsernameAndPassword)
	if err := utils.UnmarshalJSON(data, &sourceSnowflakeAuthorizationMethodUsernameAndPassword, "", true, true); err == nil {
		u.SourceSnowflakeAuthorizationMethodUsernameAndPassword = sourceSnowflakeAuthorizationMethodUsernameAndPassword
		u.Type = SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodUsernameAndPassword
		return nil
	}

	sourceSnowflakeAuthorizationMethodOAuth20 := new(SourceSnowflakeAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceSnowflakeAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceSnowflakeAuthorizationMethodOAuth20 = sourceSnowflakeAuthorizationMethodOAuth20
		u.Type = SourceSnowflakeAuthorizationMethodTypeSourceSnowflakeAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSnowflakeAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceSnowflakeAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceSnowflakeAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceSnowflakeAuthorizationMethodUsernameAndPassword != nil {
		return utils.MarshalJSON(u.SourceSnowflakeAuthorizationMethodUsernameAndPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSnowflakeSnowflake string

const (
	SourceSnowflakeSnowflakeSnowflake SourceSnowflakeSnowflake = "snowflake"
)

func (e SourceSnowflakeSnowflake) ToPointer() *SourceSnowflakeSnowflake {
	return &e
}

func (e *SourceSnowflakeSnowflake) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snowflake":
		*e = SourceSnowflakeSnowflake(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeSnowflake: %v", v)
	}
}

type SourceSnowflake struct {
	Credentials *SourceSnowflakeAuthorizationMethod `json:"credentials,omitempty"`
	// The database you created for Airbyte to access data.
	Database string `json:"database"`
	// The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The role you created for Airbyte to access Snowflake.
	Role string `json:"role"`
	// The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
	Schema     *string                  `json:"schema,omitempty"`
	sourceType SourceSnowflakeSnowflake `const:"snowflake" json:"sourceType"`
	// The warehouse you created for Airbyte to access data.
	Warehouse string `json:"warehouse"`
}

func (s SourceSnowflake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSnowflake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSnowflake) GetCredentials() *SourceSnowflakeAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSnowflake) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceSnowflake) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceSnowflake) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *SourceSnowflake) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *SourceSnowflake) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *SourceSnowflake) GetSourceType() SourceSnowflakeSnowflake {
	return SourceSnowflakeSnowflakeSnowflake
}

func (o *SourceSnowflake) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}
