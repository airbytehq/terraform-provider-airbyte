// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod string

const (
	SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethodStandard SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod = "Standard"
)

func (e SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod) ToPointer() *SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod {
	return &e
}

func (e *SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod: %v", v)
	}
}

// SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor - Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
type SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor struct {
	Method SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursorMethod `json:"method"`
}

type SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod string

const (
	SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethodXmin SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod = "Xmin"
)

func (e SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod) ToPointer() *SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod {
	return &e
}

func (e *SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Xmin":
		*e = SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod: %v", v)
	}
}

// SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn - <i>Recommended</i> - Incrementally reads new inserts and updates via Postgres <a href="https://docs.airbyte.com/integrations/sources/postgres/#xmin">Xmin system column</a>. Only recommended for tables up to 500GB.
type SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn struct {
	Method SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumnMethod `json:"method"`
}

// SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour - Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
type SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour string

const (
	SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviourWhileReadingData                 SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour = "While reading Data"
	SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviourAfterLoadingDataInTheDestination SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour = "After loading Data in the destination"
)

func (e SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour) ToPointer() *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour {
	return &e
}

func (e *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "While reading Data":
		fallthrough
	case "After loading Data in the destination":
		*e = SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour: %v", v)
	}
}

type SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod string

const (
	SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethodCdc SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod = "CDC"
)

func (e SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod) ToPointer() *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod {
	return &e
}

func (e *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CDC":
		*e = SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod: %v", v)
	}
}

// SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin - A logical decoding plugin installed on the PostgreSQL server.
type SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin string

const (
	SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPluginPgoutput SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin = "pgoutput"
)

func (e SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin) ToPointer() *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin {
	return &e
}

func (e *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pgoutput":
		*e = SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin: %v", v)
	}
}

// SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC - <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the Postgres <a href="https://docs.airbyte.com/integrations/sources/postgres/#cdc">write-ahead log (WAL)</a>. This needs to be configured on the source database itself. Recommended for tables of any size.
type SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC struct {
	// The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-5-optional-set-up-initial-waiting-time">initial waiting time</a>.
	InitialWaitingSeconds *int64 `json:"initial_waiting_seconds,omitempty"`
	// Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
	LsnCommitBehaviour *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCLSNCommitBehaviour `json:"lsn_commit_behaviour,omitempty"`
	Method             SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCMethod              `json:"method"`
	// A logical decoding plugin installed on the PostgreSQL server.
	Plugin *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDCPlugin `json:"plugin,omitempty"`
	// A Postgres publication used for consuming changes. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables">publications and replication identities</a>.
	Publication string `json:"publication"`
	// The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful.
	QueueSize *int64 `json:"queue_size,omitempty"`
	// A plugin logical replication slot. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot">replication slots</a>.
	ReplicationSlot string `json:"replication_slot"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC

func (c *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "initial_waiting_seconds")
	delete(additionalFields, "lsn_commit_behaviour")
	delete(additionalFields, "method")
	delete(additionalFields, "plugin")
	delete(additionalFields, "publication")
	delete(additionalFields, "queue_size")
	delete(additionalFields, "replication_slot")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateUpdateMethodType string

const (
	SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC  SourcePostgresUpdateUpdateMethodType = "source-postgres-update_Update Method_Read Changes using Write-Ahead Log (CDC)"
	SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn SourcePostgresUpdateUpdateMethodType = "source-postgres-update_Update Method_Detect Changes with Xmin System Column"
	SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor  SourcePostgresUpdateUpdateMethodType = "source-postgres-update_Update Method_Scan Changes with User Defined Cursor"
)

type SourcePostgresUpdateUpdateMethod struct {
	SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC  *SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC
	SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn *SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn
	SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor  *SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor

	Type SourcePostgresUpdateUpdateMethodType
}

func CreateSourcePostgresUpdateUpdateMethodSourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC(sourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC) SourcePostgresUpdateUpdateMethod {
	typ := SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC

	return SourcePostgresUpdateUpdateMethod{
		SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC: &sourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC,
		Type: typ,
	}
}

func CreateSourcePostgresUpdateUpdateMethodSourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn(sourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn) SourcePostgresUpdateUpdateMethod {
	typ := SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn

	return SourcePostgresUpdateUpdateMethod{
		SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn: &sourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn,
		Type: typ,
	}
}

func CreateSourcePostgresUpdateUpdateMethodSourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor(sourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor) SourcePostgresUpdateUpdateMethod {
	typ := SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor

	return SourcePostgresUpdateUpdateMethod{
		SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor: &sourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor,
		Type: typ,
	}
}

func (u *SourcePostgresUpdateUpdateMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn := new(SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn); err == nil {
		u.SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn = sourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn
		u.Type = SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn
		return nil
	}

	sourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor := new(SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor); err == nil {
		u.SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor = sourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor
		u.Type = SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor
		return nil
	}

	sourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC := new(SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC); err == nil {
		u.SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC = sourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC
		u.Type = SourcePostgresUpdateUpdateMethodTypeSourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePostgresUpdateUpdateMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn != nil {
		return json.Marshal(u.SourcePostgresUpdateUpdateMethodDetectChangesWithXminSystemColumn)
	}

	if u.SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor != nil {
		return json.Marshal(u.SourcePostgresUpdateUpdateMethodScanChangesWithUserDefinedCursor)
	}

	if u.SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC != nil {
		return json.Marshal(u.SourcePostgresUpdateUpdateMethodReadChangesUsingWriteAheadLogCDC)
	}

	return nil, nil
}

type SourcePostgresUpdateSSLModesVerifyFullMode string

const (
	SourcePostgresUpdateSSLModesVerifyFullModeVerifyFull SourcePostgresUpdateSSLModesVerifyFullMode = "verify-full"
)

func (e SourcePostgresUpdateSSLModesVerifyFullMode) ToPointer() *SourcePostgresUpdateSSLModesVerifyFullMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesVerifyFullMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-full":
		*e = SourcePostgresUpdateSSLModesVerifyFullMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesVerifyFullMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesVerifyFull - This is the most secure mode. Always require encryption and verifies the identity of the source database server.
type SourcePostgresUpdateSSLModesVerifyFull struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                    `json:"client_key_password,omitempty"`
	Mode              SourcePostgresUpdateSSLModesVerifyFullMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesVerifyFull SourcePostgresUpdateSSLModesVerifyFull

func (c *SourcePostgresUpdateSSLModesVerifyFull) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesVerifyFull{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesVerifyFull(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesVerifyFull) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesVerifyFull(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesVerifyCaMode string

const (
	SourcePostgresUpdateSSLModesVerifyCaModeVerifyCa SourcePostgresUpdateSSLModesVerifyCaMode = "verify-ca"
)

func (e SourcePostgresUpdateSSLModesVerifyCaMode) ToPointer() *SourcePostgresUpdateSSLModesVerifyCaMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesVerifyCaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-ca":
		*e = SourcePostgresUpdateSSLModesVerifyCaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesVerifyCaMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesVerifyCa - Always require encryption and verifies that the source database server has a valid SSL certificate.
type SourcePostgresUpdateSSLModesVerifyCa struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                  `json:"client_key_password,omitempty"`
	Mode              SourcePostgresUpdateSSLModesVerifyCaMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesVerifyCa SourcePostgresUpdateSSLModesVerifyCa

func (c *SourcePostgresUpdateSSLModesVerifyCa) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesVerifyCa{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesVerifyCa(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesVerifyCa) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesVerifyCa(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesRequireMode string

const (
	SourcePostgresUpdateSSLModesRequireModeRequire SourcePostgresUpdateSSLModesRequireMode = "require"
)

func (e SourcePostgresUpdateSSLModesRequireMode) ToPointer() *SourcePostgresUpdateSSLModesRequireMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesRequireMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "require":
		*e = SourcePostgresUpdateSSLModesRequireMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesRequireMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesRequire - Always require encryption. If the source database server does not support encryption, connection will fail.
type SourcePostgresUpdateSSLModesRequire struct {
	Mode SourcePostgresUpdateSSLModesRequireMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesRequire SourcePostgresUpdateSSLModesRequire

func (c *SourcePostgresUpdateSSLModesRequire) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesRequire{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesRequire(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesRequire) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesRequire(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesPreferMode string

const (
	SourcePostgresUpdateSSLModesPreferModePrefer SourcePostgresUpdateSSLModesPreferMode = "prefer"
)

func (e SourcePostgresUpdateSSLModesPreferMode) ToPointer() *SourcePostgresUpdateSSLModesPreferMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesPreferMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prefer":
		*e = SourcePostgresUpdateSSLModesPreferMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesPreferMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesPrefer - Allows unencrypted connection only if the source database does not support encryption.
type SourcePostgresUpdateSSLModesPrefer struct {
	Mode SourcePostgresUpdateSSLModesPreferMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesPrefer SourcePostgresUpdateSSLModesPrefer

func (c *SourcePostgresUpdateSSLModesPrefer) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesPrefer{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesPrefer(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesPrefer) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesPrefer(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesAllowMode string

const (
	SourcePostgresUpdateSSLModesAllowModeAllow SourcePostgresUpdateSSLModesAllowMode = "allow"
)

func (e SourcePostgresUpdateSSLModesAllowMode) ToPointer() *SourcePostgresUpdateSSLModesAllowMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesAllowMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		*e = SourcePostgresUpdateSSLModesAllowMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesAllowMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesAllow - Enables encryption only when required by the source database.
type SourcePostgresUpdateSSLModesAllow struct {
	Mode SourcePostgresUpdateSSLModesAllowMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesAllow SourcePostgresUpdateSSLModesAllow

func (c *SourcePostgresUpdateSSLModesAllow) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesAllow{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesAllow(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesAllow) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesAllow(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesDisableMode string

const (
	SourcePostgresUpdateSSLModesDisableModeDisable SourcePostgresUpdateSSLModesDisableMode = "disable"
)

func (e SourcePostgresUpdateSSLModesDisableMode) ToPointer() *SourcePostgresUpdateSSLModesDisableMode {
	return &e
}

func (e *SourcePostgresUpdateSSLModesDisableMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disable":
		*e = SourcePostgresUpdateSSLModesDisableMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSLModesDisableMode: %v", v)
	}
}

// SourcePostgresUpdateSSLModesDisable - Disables encryption of communication between Airbyte and source database.
type SourcePostgresUpdateSSLModesDisable struct {
	Mode SourcePostgresUpdateSSLModesDisableMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourcePostgresUpdateSSLModesDisable SourcePostgresUpdateSSLModesDisable

func (c *SourcePostgresUpdateSSLModesDisable) UnmarshalJSON(bs []byte) error {
	data := _SourcePostgresUpdateSSLModesDisable{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourcePostgresUpdateSSLModesDisable(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourcePostgresUpdateSSLModesDisable) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourcePostgresUpdateSSLModesDisable(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourcePostgresUpdateSSLModesType string

const (
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesDisable    SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_disable"
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesAllow      SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_allow"
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesPrefer     SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_prefer"
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesRequire    SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_require"
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyCa   SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_verify-ca"
	SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyFull SourcePostgresUpdateSSLModesType = "source-postgres-update_SSL Modes_verify-full"
)

type SourcePostgresUpdateSSLModes struct {
	SourcePostgresUpdateSSLModesDisable    *SourcePostgresUpdateSSLModesDisable
	SourcePostgresUpdateSSLModesAllow      *SourcePostgresUpdateSSLModesAllow
	SourcePostgresUpdateSSLModesPrefer     *SourcePostgresUpdateSSLModesPrefer
	SourcePostgresUpdateSSLModesRequire    *SourcePostgresUpdateSSLModesRequire
	SourcePostgresUpdateSSLModesVerifyCa   *SourcePostgresUpdateSSLModesVerifyCa
	SourcePostgresUpdateSSLModesVerifyFull *SourcePostgresUpdateSSLModesVerifyFull

	Type SourcePostgresUpdateSSLModesType
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesDisable(sourcePostgresUpdateSSLModesDisable SourcePostgresUpdateSSLModesDisable) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesDisable

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesDisable: &sourcePostgresUpdateSSLModesDisable,
		Type:                                typ,
	}
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesAllow(sourcePostgresUpdateSSLModesAllow SourcePostgresUpdateSSLModesAllow) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesAllow

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesAllow: &sourcePostgresUpdateSSLModesAllow,
		Type:                              typ,
	}
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesPrefer(sourcePostgresUpdateSSLModesPrefer SourcePostgresUpdateSSLModesPrefer) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesPrefer

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesPrefer: &sourcePostgresUpdateSSLModesPrefer,
		Type:                               typ,
	}
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesRequire(sourcePostgresUpdateSSLModesRequire SourcePostgresUpdateSSLModesRequire) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesRequire

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesRequire: &sourcePostgresUpdateSSLModesRequire,
		Type:                                typ,
	}
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesVerifyCa(sourcePostgresUpdateSSLModesVerifyCa SourcePostgresUpdateSSLModesVerifyCa) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyCa

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesVerifyCa: &sourcePostgresUpdateSSLModesVerifyCa,
		Type:                                 typ,
	}
}

func CreateSourcePostgresUpdateSSLModesSourcePostgresUpdateSSLModesVerifyFull(sourcePostgresUpdateSSLModesVerifyFull SourcePostgresUpdateSSLModesVerifyFull) SourcePostgresUpdateSSLModes {
	typ := SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyFull

	return SourcePostgresUpdateSSLModes{
		SourcePostgresUpdateSSLModesVerifyFull: &sourcePostgresUpdateSSLModesVerifyFull,
		Type:                                   typ,
	}
}

func (u *SourcePostgresUpdateSSLModes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePostgresUpdateSSLModesDisable := new(SourcePostgresUpdateSSLModesDisable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesDisable); err == nil {
		u.SourcePostgresUpdateSSLModesDisable = sourcePostgresUpdateSSLModesDisable
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesDisable
		return nil
	}

	sourcePostgresUpdateSSLModesAllow := new(SourcePostgresUpdateSSLModesAllow)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesAllow); err == nil {
		u.SourcePostgresUpdateSSLModesAllow = sourcePostgresUpdateSSLModesAllow
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesAllow
		return nil
	}

	sourcePostgresUpdateSSLModesPrefer := new(SourcePostgresUpdateSSLModesPrefer)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesPrefer); err == nil {
		u.SourcePostgresUpdateSSLModesPrefer = sourcePostgresUpdateSSLModesPrefer
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesPrefer
		return nil
	}

	sourcePostgresUpdateSSLModesRequire := new(SourcePostgresUpdateSSLModesRequire)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesRequire); err == nil {
		u.SourcePostgresUpdateSSLModesRequire = sourcePostgresUpdateSSLModesRequire
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesRequire
		return nil
	}

	sourcePostgresUpdateSSLModesVerifyCa := new(SourcePostgresUpdateSSLModesVerifyCa)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesVerifyCa); err == nil {
		u.SourcePostgresUpdateSSLModesVerifyCa = sourcePostgresUpdateSSLModesVerifyCa
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyCa
		return nil
	}

	sourcePostgresUpdateSSLModesVerifyFull := new(SourcePostgresUpdateSSLModesVerifyFull)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSLModesVerifyFull); err == nil {
		u.SourcePostgresUpdateSSLModesVerifyFull = sourcePostgresUpdateSSLModesVerifyFull
		u.Type = SourcePostgresUpdateSSLModesTypeSourcePostgresUpdateSSLModesVerifyFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePostgresUpdateSSLModes) MarshalJSON() ([]byte, error) {
	if u.SourcePostgresUpdateSSLModesDisable != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesDisable)
	}

	if u.SourcePostgresUpdateSSLModesAllow != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesAllow)
	}

	if u.SourcePostgresUpdateSSLModesPrefer != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesPrefer)
	}

	if u.SourcePostgresUpdateSSLModesRequire != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesRequire)
	}

	if u.SourcePostgresUpdateSSLModesVerifyCa != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesVerifyCa)
	}

	if u.SourcePostgresUpdateSSLModesVerifyFull != nil {
		return json.Marshal(u.SourcePostgresUpdateSSLModesVerifyFull)
	}

	return nil, nil
}

// SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod SourcePostgresUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// SourcePostgresUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourcePostgresUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod SourcePostgresUpdateSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type SourcePostgresUpdateSSHTunnelMethodType string

const (
	SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodNoTunnel               SourcePostgresUpdateSSHTunnelMethodType = "source-postgres-update_SSH Tunnel Method_No Tunnel"
	SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication   SourcePostgresUpdateSSHTunnelMethodType = "source-postgres-update_SSH Tunnel Method_SSH Key Authentication"
	SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodPasswordAuthentication SourcePostgresUpdateSSHTunnelMethodType = "source-postgres-update_SSH Tunnel Method_Password Authentication"
)

type SourcePostgresUpdateSSHTunnelMethod struct {
	SourcePostgresUpdateSSHTunnelMethodNoTunnel               *SourcePostgresUpdateSSHTunnelMethodNoTunnel
	SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication   *SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication
	SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication *SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication

	Type SourcePostgresUpdateSSHTunnelMethodType
}

func CreateSourcePostgresUpdateSSHTunnelMethodSourcePostgresUpdateSSHTunnelMethodNoTunnel(sourcePostgresUpdateSSHTunnelMethodNoTunnel SourcePostgresUpdateSSHTunnelMethodNoTunnel) SourcePostgresUpdateSSHTunnelMethod {
	typ := SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodNoTunnel

	return SourcePostgresUpdateSSHTunnelMethod{
		SourcePostgresUpdateSSHTunnelMethodNoTunnel: &sourcePostgresUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateSourcePostgresUpdateSSHTunnelMethodSourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication(sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication) SourcePostgresUpdateSSHTunnelMethod {
	typ := SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication

	return SourcePostgresUpdateSSHTunnelMethod{
		SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication: &sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateSourcePostgresUpdateSSHTunnelMethodSourcePostgresUpdateSSHTunnelMethodPasswordAuthentication(sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication) SourcePostgresUpdateSSHTunnelMethod {
	typ := SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodPasswordAuthentication

	return SourcePostgresUpdateSSHTunnelMethod{
		SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication: &sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *SourcePostgresUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePostgresUpdateSSHTunnelMethodNoTunnel := new(SourcePostgresUpdateSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSHTunnelMethodNoTunnel); err == nil {
		u.SourcePostgresUpdateSSHTunnelMethodNoTunnel = sourcePostgresUpdateSSHTunnelMethodNoTunnel
		u.Type = SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication := new(SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication = sourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication := new(SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication); err == nil {
		u.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication = sourcePostgresUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = SourcePostgresUpdateSSHTunnelMethodTypeSourcePostgresUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePostgresUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePostgresUpdateSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.SourcePostgresUpdateSSHTunnelMethodNoTunnel)
	}

	if u.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.SourcePostgresUpdateSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.SourcePostgresUpdateSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type SourcePostgresUpdate struct {
	// Name of the database.
	Database string `json:"database"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// Port of the database.
	Port int64 `json:"port"`
	// Configures how data is extracted from the database.
	ReplicationMethod *SourcePostgresUpdateUpdateMethod `json:"replication_method,omitempty"`
	// The list of schemas (case sensitive) to sync from. Defaults to public.
	Schemas []string `json:"schemas,omitempty"`
	// SSL connection modes.
	//   Read more <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
	SslMode *SourcePostgresUpdateSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourcePostgresUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to access the database.
	Username string `json:"username"`
}
