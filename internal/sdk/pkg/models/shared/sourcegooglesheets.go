// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceGoogleSheetsSchemasAuthType string

const (
	SourceGoogleSheetsSchemasAuthTypeService SourceGoogleSheetsSchemasAuthType = "Service"
)

func (e SourceGoogleSheetsSchemasAuthType) ToPointer() *SourceGoogleSheetsSchemasAuthType {
	return &e
}

func (e *SourceGoogleSheetsSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSheetsSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsSchemasAuthType: %v", v)
	}
}

// SourceGoogleSheetsServiceAccountKeyAuthentication - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsServiceAccountKeyAuthentication struct {
	authType SourceGoogleSheetsSchemasAuthType `const:"Service" json:"auth_type"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

func (s SourceGoogleSheetsServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsServiceAccountKeyAuthentication) GetAuthType() SourceGoogleSheetsSchemasAuthType {
	return SourceGoogleSheetsSchemasAuthTypeService
}

func (o *SourceGoogleSheetsServiceAccountKeyAuthentication) GetServiceAccountInfo() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccountInfo
}

type SourceGoogleSheetsAuthType string

const (
	SourceGoogleSheetsAuthTypeClient SourceGoogleSheetsAuthType = "Client"
)

func (e SourceGoogleSheetsAuthType) ToPointer() *SourceGoogleSheetsAuthType {
	return &e
}

func (e *SourceGoogleSheetsAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSheetsAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsAuthType: %v", v)
	}
}

// SourceGoogleSheetsAuthenticateViaGoogleOAuth - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsAuthenticateViaGoogleOAuth struct {
	authType SourceGoogleSheetsAuthType `const:"Client" json:"auth_type"`
	// Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientID string `json:"client_id"`
	// Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientSecret string `json:"client_secret"`
	// Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleSheetsAuthenticateViaGoogleOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsAuthenticateViaGoogleOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsAuthenticateViaGoogleOAuth) GetAuthType() SourceGoogleSheetsAuthType {
	return SourceGoogleSheetsAuthTypeClient
}

func (o *SourceGoogleSheetsAuthenticateViaGoogleOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleSheetsAuthenticateViaGoogleOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleSheetsAuthenticateViaGoogleOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleSheetsAuthenticationType string

const (
	SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsAuthenticateViaGoogleOAuth      SourceGoogleSheetsAuthenticationType = "source-google-sheets_Authenticate via Google (OAuth)"
	SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsServiceAccountKeyAuthentication SourceGoogleSheetsAuthenticationType = "source-google-sheets_Service Account Key Authentication"
)

type SourceGoogleSheetsAuthentication struct {
	SourceGoogleSheetsAuthenticateViaGoogleOAuth      *SourceGoogleSheetsAuthenticateViaGoogleOAuth
	SourceGoogleSheetsServiceAccountKeyAuthentication *SourceGoogleSheetsServiceAccountKeyAuthentication

	Type SourceGoogleSheetsAuthenticationType
}

func CreateSourceGoogleSheetsAuthenticationSourceGoogleSheetsAuthenticateViaGoogleOAuth(sourceGoogleSheetsAuthenticateViaGoogleOAuth SourceGoogleSheetsAuthenticateViaGoogleOAuth) SourceGoogleSheetsAuthentication {
	typ := SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsAuthenticateViaGoogleOAuth

	return SourceGoogleSheetsAuthentication{
		SourceGoogleSheetsAuthenticateViaGoogleOAuth: &sourceGoogleSheetsAuthenticateViaGoogleOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSheetsAuthenticationSourceGoogleSheetsServiceAccountKeyAuthentication(sourceGoogleSheetsServiceAccountKeyAuthentication SourceGoogleSheetsServiceAccountKeyAuthentication) SourceGoogleSheetsAuthentication {
	typ := SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsServiceAccountKeyAuthentication

	return SourceGoogleSheetsAuthentication{
		SourceGoogleSheetsServiceAccountKeyAuthentication: &sourceGoogleSheetsServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSheetsAuthentication) UnmarshalJSON(data []byte) error {

	sourceGoogleSheetsServiceAccountKeyAuthentication := new(SourceGoogleSheetsServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleSheetsServiceAccountKeyAuthentication = sourceGoogleSheetsServiceAccountKeyAuthentication
		u.Type = SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleSheetsAuthenticateViaGoogleOAuth := new(SourceGoogleSheetsAuthenticateViaGoogleOAuth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsAuthenticateViaGoogleOAuth, "", true, true); err == nil {
		u.SourceGoogleSheetsAuthenticateViaGoogleOAuth = sourceGoogleSheetsAuthenticateViaGoogleOAuth
		u.Type = SourceGoogleSheetsAuthenticationTypeSourceGoogleSheetsAuthenticateViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSheetsAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSheetsAuthenticateViaGoogleOAuth != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsAuthenticateViaGoogleOAuth, "", true)
	}

	if u.SourceGoogleSheetsServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleSheetsGoogleSheets string

const (
	SourceGoogleSheetsGoogleSheetsGoogleSheets SourceGoogleSheetsGoogleSheets = "google-sheets"
)

func (e SourceGoogleSheetsGoogleSheets) ToPointer() *SourceGoogleSheetsGoogleSheets {
	return &e
}

func (e *SourceGoogleSheetsGoogleSheets) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-sheets":
		*e = SourceGoogleSheetsGoogleSheets(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsGoogleSheets: %v", v)
	}
}

type SourceGoogleSheets struct {
	// Credentials for connecting to the Google Sheets API
	Credentials SourceGoogleSheetsAuthentication `json:"credentials"`
	// Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' -> 'my_name'. Enable this option if your destination is SQL-based.
	NamesConversion *bool                          `default:"false" json:"names_conversion"`
	sourceType      SourceGoogleSheetsGoogleSheets `const:"google-sheets" json:"sourceType"`
	// Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.
	SpreadsheetID string `json:"spreadsheet_id"`
}

func (s SourceGoogleSheets) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheets) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheets) GetCredentials() SourceGoogleSheetsAuthentication {
	if o == nil {
		return SourceGoogleSheetsAuthentication{}
	}
	return o.Credentials
}

func (o *SourceGoogleSheets) GetNamesConversion() *bool {
	if o == nil {
		return nil
	}
	return o.NamesConversion
}

func (o *SourceGoogleSheets) GetSourceType() SourceGoogleSheetsGoogleSheets {
	return SourceGoogleSheetsGoogleSheetsGoogleSheets
}

func (o *SourceGoogleSheets) GetSpreadsheetID() string {
	if o == nil {
		return ""
	}
	return o.SpreadsheetID
}
