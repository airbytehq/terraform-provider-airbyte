// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationBigqueryUpdateDatasetLocation - The location of the dataset. Warning: Changes made after creation will not be applied. Read more <a href="https://cloud.google.com/bigquery/docs/locations">here</a>.
type DestinationBigqueryUpdateDatasetLocation string

const (
	DestinationBigqueryUpdateDatasetLocationUs                     DestinationBigqueryUpdateDatasetLocation = "US"
	DestinationBigqueryUpdateDatasetLocationEu                     DestinationBigqueryUpdateDatasetLocation = "EU"
	DestinationBigqueryUpdateDatasetLocationAsiaEast1              DestinationBigqueryUpdateDatasetLocation = "asia-east1"
	DestinationBigqueryUpdateDatasetLocationAsiaEast2              DestinationBigqueryUpdateDatasetLocation = "asia-east2"
	DestinationBigqueryUpdateDatasetLocationAsiaNortheast1         DestinationBigqueryUpdateDatasetLocation = "asia-northeast1"
	DestinationBigqueryUpdateDatasetLocationAsiaNortheast2         DestinationBigqueryUpdateDatasetLocation = "asia-northeast2"
	DestinationBigqueryUpdateDatasetLocationAsiaNortheast3         DestinationBigqueryUpdateDatasetLocation = "asia-northeast3"
	DestinationBigqueryUpdateDatasetLocationAsiaSouth1             DestinationBigqueryUpdateDatasetLocation = "asia-south1"
	DestinationBigqueryUpdateDatasetLocationAsiaSouth2             DestinationBigqueryUpdateDatasetLocation = "asia-south2"
	DestinationBigqueryUpdateDatasetLocationAsiaSoutheast1         DestinationBigqueryUpdateDatasetLocation = "asia-southeast1"
	DestinationBigqueryUpdateDatasetLocationAsiaSoutheast2         DestinationBigqueryUpdateDatasetLocation = "asia-southeast2"
	DestinationBigqueryUpdateDatasetLocationAustraliaSoutheast1    DestinationBigqueryUpdateDatasetLocation = "australia-southeast1"
	DestinationBigqueryUpdateDatasetLocationAustraliaSoutheast2    DestinationBigqueryUpdateDatasetLocation = "australia-southeast2"
	DestinationBigqueryUpdateDatasetLocationEuropeCentral1         DestinationBigqueryUpdateDatasetLocation = "europe-central1"
	DestinationBigqueryUpdateDatasetLocationEuropeCentral2         DestinationBigqueryUpdateDatasetLocation = "europe-central2"
	DestinationBigqueryUpdateDatasetLocationEuropeNorth1           DestinationBigqueryUpdateDatasetLocation = "europe-north1"
	DestinationBigqueryUpdateDatasetLocationEuropeSouthwest1       DestinationBigqueryUpdateDatasetLocation = "europe-southwest1"
	DestinationBigqueryUpdateDatasetLocationEuropeWest1            DestinationBigqueryUpdateDatasetLocation = "europe-west1"
	DestinationBigqueryUpdateDatasetLocationEuropeWest2            DestinationBigqueryUpdateDatasetLocation = "europe-west2"
	DestinationBigqueryUpdateDatasetLocationEuropeWest3            DestinationBigqueryUpdateDatasetLocation = "europe-west3"
	DestinationBigqueryUpdateDatasetLocationEuropeWest4            DestinationBigqueryUpdateDatasetLocation = "europe-west4"
	DestinationBigqueryUpdateDatasetLocationEuropeWest6            DestinationBigqueryUpdateDatasetLocation = "europe-west6"
	DestinationBigqueryUpdateDatasetLocationEuropeWest7            DestinationBigqueryUpdateDatasetLocation = "europe-west7"
	DestinationBigqueryUpdateDatasetLocationEuropeWest8            DestinationBigqueryUpdateDatasetLocation = "europe-west8"
	DestinationBigqueryUpdateDatasetLocationEuropeWest9            DestinationBigqueryUpdateDatasetLocation = "europe-west9"
	DestinationBigqueryUpdateDatasetLocationMeWest1                DestinationBigqueryUpdateDatasetLocation = "me-west1"
	DestinationBigqueryUpdateDatasetLocationNorthamericaNortheast1 DestinationBigqueryUpdateDatasetLocation = "northamerica-northeast1"
	DestinationBigqueryUpdateDatasetLocationNorthamericaNortheast2 DestinationBigqueryUpdateDatasetLocation = "northamerica-northeast2"
	DestinationBigqueryUpdateDatasetLocationSouthamericaEast1      DestinationBigqueryUpdateDatasetLocation = "southamerica-east1"
	DestinationBigqueryUpdateDatasetLocationSouthamericaWest1      DestinationBigqueryUpdateDatasetLocation = "southamerica-west1"
	DestinationBigqueryUpdateDatasetLocationUsCentral1             DestinationBigqueryUpdateDatasetLocation = "us-central1"
	DestinationBigqueryUpdateDatasetLocationUsEast1                DestinationBigqueryUpdateDatasetLocation = "us-east1"
	DestinationBigqueryUpdateDatasetLocationUsEast2                DestinationBigqueryUpdateDatasetLocation = "us-east2"
	DestinationBigqueryUpdateDatasetLocationUsEast3                DestinationBigqueryUpdateDatasetLocation = "us-east3"
	DestinationBigqueryUpdateDatasetLocationUsEast4                DestinationBigqueryUpdateDatasetLocation = "us-east4"
	DestinationBigqueryUpdateDatasetLocationUsEast5                DestinationBigqueryUpdateDatasetLocation = "us-east5"
	DestinationBigqueryUpdateDatasetLocationUsWest1                DestinationBigqueryUpdateDatasetLocation = "us-west1"
	DestinationBigqueryUpdateDatasetLocationUsWest2                DestinationBigqueryUpdateDatasetLocation = "us-west2"
	DestinationBigqueryUpdateDatasetLocationUsWest3                DestinationBigqueryUpdateDatasetLocation = "us-west3"
	DestinationBigqueryUpdateDatasetLocationUsWest4                DestinationBigqueryUpdateDatasetLocation = "us-west4"
)

func (e DestinationBigqueryUpdateDatasetLocation) ToPointer() *DestinationBigqueryUpdateDatasetLocation {
	return &e
}

func (e *DestinationBigqueryUpdateDatasetLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		fallthrough
	case "asia-east1":
		fallthrough
	case "asia-east2":
		fallthrough
	case "asia-northeast1":
		fallthrough
	case "asia-northeast2":
		fallthrough
	case "asia-northeast3":
		fallthrough
	case "asia-south1":
		fallthrough
	case "asia-south2":
		fallthrough
	case "asia-southeast1":
		fallthrough
	case "asia-southeast2":
		fallthrough
	case "australia-southeast1":
		fallthrough
	case "australia-southeast2":
		fallthrough
	case "europe-central1":
		fallthrough
	case "europe-central2":
		fallthrough
	case "europe-north1":
		fallthrough
	case "europe-southwest1":
		fallthrough
	case "europe-west1":
		fallthrough
	case "europe-west2":
		fallthrough
	case "europe-west3":
		fallthrough
	case "europe-west4":
		fallthrough
	case "europe-west6":
		fallthrough
	case "europe-west7":
		fallthrough
	case "europe-west8":
		fallthrough
	case "europe-west9":
		fallthrough
	case "me-west1":
		fallthrough
	case "northamerica-northeast1":
		fallthrough
	case "northamerica-northeast2":
		fallthrough
	case "southamerica-east1":
		fallthrough
	case "southamerica-west1":
		fallthrough
	case "us-central1":
		fallthrough
	case "us-east1":
		fallthrough
	case "us-east2":
		fallthrough
	case "us-east3":
		fallthrough
	case "us-east4":
		fallthrough
	case "us-east5":
		fallthrough
	case "us-west1":
		fallthrough
	case "us-west2":
		fallthrough
	case "us-west3":
		fallthrough
	case "us-west4":
		*e = DestinationBigqueryUpdateDatasetLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateDatasetLocation: %v", v)
	}
}

type DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType string

const (
	DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialTypeHmacKey DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType = "HMAC_KEY"
)

func (e DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType) ToPointer() *DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType {
	return &e
}

func (e *DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HMAC_KEY":
		*e = DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType: %v", v)
	}
}

// DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey - An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys">here</a>.
type DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey struct {
	CredentialType DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKeyCredentialType `json:"credential_type"`
	// HMAC key access ID. When linked to a service account, this ID is 61 characters long; when linked to a user account, it is 24 characters long.
	HmacKeyAccessID string `json:"hmac_key_access_id"`
	// The corresponding secret for the access ID. It is a 40-character base-64 encoded string.
	HmacKeySecret string `json:"hmac_key_secret"`
}

type DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialType string

const (
	DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialTypeDestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialType = "destination-bigquery-update_Loading Method_GCS Staging_Credential_HMAC key"
)

type DestinationBigqueryUpdateLoadingMethodGCSStagingCredential struct {
	DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey *DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey

	Type DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialType
}

func CreateDestinationBigqueryUpdateLoadingMethodGCSStagingCredentialDestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey(destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey) DestinationBigqueryUpdateLoadingMethodGCSStagingCredential {
	typ := DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialTypeDestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey

	return DestinationBigqueryUpdateLoadingMethodGCSStagingCredential{
		DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey: &destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey,
		Type: typ,
	}
}

func (u *DestinationBigqueryUpdateLoadingMethodGCSStagingCredential) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey := new(DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey); err == nil {
		u.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey = destinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey
		u.Type = DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialTypeDestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationBigqueryUpdateLoadingMethodGCSStagingCredential) MarshalJSON() ([]byte, error) {
	if u.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey != nil {
		return json.Marshal(u.DestinationBigqueryUpdateLoadingMethodGCSStagingCredentialHMACKey)
	}

	return nil, nil
}

// DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing - This upload method is supposed to temporary store records in GCS bucket. By this select you can chose if these records should be removed from GCS when migration has finished. The default "Delete all tmp files from GCS" value is used if not set explicitly.
type DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing string

const (
	DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingDeleteAllTmpFilesFromGcs DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing = "Delete all tmp files from GCS"
	DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingKeepAllTmpFilesInGcs     DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing = "Keep all tmp files in GCS"
)

func (e DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing) ToPointer() *DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing {
	return &e
}

func (e *DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Delete all tmp files from GCS":
		fallthrough
	case "Keep all tmp files in GCS":
		*e = DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing: %v", v)
	}
}

type DestinationBigqueryUpdateLoadingMethodGCSStagingMethod string

const (
	DestinationBigqueryUpdateLoadingMethodGCSStagingMethodGcsStaging DestinationBigqueryUpdateLoadingMethodGCSStagingMethod = "GCS Staging"
)

func (e DestinationBigqueryUpdateLoadingMethodGCSStagingMethod) ToPointer() *DestinationBigqueryUpdateLoadingMethodGCSStagingMethod {
	return &e
}

func (e *DestinationBigqueryUpdateLoadingMethodGCSStagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GCS Staging":
		*e = DestinationBigqueryUpdateLoadingMethodGCSStagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateLoadingMethodGCSStagingMethod: %v", v)
	}
}

// DestinationBigqueryUpdateLoadingMethodGCSStaging - Loading method used to send select the way data will be uploaded to BigQuery. <br/><b>Standard Inserts</b> - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. <br/><b>GCS Staging</b> - Writes large batches of records to a file, uploads the file to GCS, then uses <b>COPY INTO table</b> to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging <a href="https://docs.airbyte.com/integrations/destinations/bigquery#gcs-staging">here</a>.
type DestinationBigqueryUpdateLoadingMethodGCSStaging struct {
	// An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys">here</a>.
	Credential DestinationBigqueryUpdateLoadingMethodGCSStagingCredential `json:"credential"`
	// Number of file buffers allocated for writing data. Increasing this number is beneficial for connections using Change Data Capture (CDC) and up to the number of streams within a connection. Increasing the number of file buffers past the maximum number of streams has deteriorating effects
	FileBufferCount *int64 `json:"file_buffer_count,omitempty"`
	// The name of the GCS bucket. Read more <a href="https://cloud.google.com/storage/docs/naming-buckets">here</a>.
	GcsBucketName string `json:"gcs_bucket_name"`
	// Directory under the GCS bucket where data will be written.
	GcsBucketPath string `json:"gcs_bucket_path"`
	// This upload method is supposed to temporary store records in GCS bucket. By this select you can chose if these records should be removed from GCS when migration has finished. The default "Delete all tmp files from GCS" value is used if not set explicitly.
	KeepFilesInGcsBucket *DestinationBigqueryUpdateLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessing `json:"keep_files_in_gcs-bucket,omitempty"`
	Method               DestinationBigqueryUpdateLoadingMethodGCSStagingMethod                          `json:"method"`
}

type DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod string

const (
	DestinationBigqueryUpdateLoadingMethodStandardInsertsMethodStandard DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod = "Standard"
)

func (e DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod) ToPointer() *DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod {
	return &e
}

func (e *DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod: %v", v)
	}
}

// DestinationBigqueryUpdateLoadingMethodStandardInserts - Loading method used to send select the way data will be uploaded to BigQuery. <br/><b>Standard Inserts</b> - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. <br/><b>GCS Staging</b> - Writes large batches of records to a file, uploads the file to GCS, then uses <b>COPY INTO table</b> to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging <a href="https://docs.airbyte.com/integrations/destinations/bigquery#gcs-staging">here</a>.
type DestinationBigqueryUpdateLoadingMethodStandardInserts struct {
	Method DestinationBigqueryUpdateLoadingMethodStandardInsertsMethod `json:"method"`
}

type DestinationBigqueryUpdateLoadingMethodType string

const (
	DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodStandardInserts DestinationBigqueryUpdateLoadingMethodType = "destination-bigquery-update_Loading Method_Standard Inserts"
	DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodGCSStaging      DestinationBigqueryUpdateLoadingMethodType = "destination-bigquery-update_Loading Method_GCS Staging"
)

type DestinationBigqueryUpdateLoadingMethod struct {
	DestinationBigqueryUpdateLoadingMethodStandardInserts *DestinationBigqueryUpdateLoadingMethodStandardInserts
	DestinationBigqueryUpdateLoadingMethodGCSStaging      *DestinationBigqueryUpdateLoadingMethodGCSStaging

	Type DestinationBigqueryUpdateLoadingMethodType
}

func CreateDestinationBigqueryUpdateLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInserts(destinationBigqueryUpdateLoadingMethodStandardInserts DestinationBigqueryUpdateLoadingMethodStandardInserts) DestinationBigqueryUpdateLoadingMethod {
	typ := DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodStandardInserts

	return DestinationBigqueryUpdateLoadingMethod{
		DestinationBigqueryUpdateLoadingMethodStandardInserts: &destinationBigqueryUpdateLoadingMethodStandardInserts,
		Type: typ,
	}
}

func CreateDestinationBigqueryUpdateLoadingMethodDestinationBigqueryUpdateLoadingMethodGCSStaging(destinationBigqueryUpdateLoadingMethodGCSStaging DestinationBigqueryUpdateLoadingMethodGCSStaging) DestinationBigqueryUpdateLoadingMethod {
	typ := DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodGCSStaging

	return DestinationBigqueryUpdateLoadingMethod{
		DestinationBigqueryUpdateLoadingMethodGCSStaging: &destinationBigqueryUpdateLoadingMethodGCSStaging,
		Type: typ,
	}
}

func (u *DestinationBigqueryUpdateLoadingMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationBigqueryUpdateLoadingMethodStandardInserts := new(DestinationBigqueryUpdateLoadingMethodStandardInserts)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBigqueryUpdateLoadingMethodStandardInserts); err == nil {
		u.DestinationBigqueryUpdateLoadingMethodStandardInserts = destinationBigqueryUpdateLoadingMethodStandardInserts
		u.Type = DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodStandardInserts
		return nil
	}

	destinationBigqueryUpdateLoadingMethodGCSStaging := new(DestinationBigqueryUpdateLoadingMethodGCSStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBigqueryUpdateLoadingMethodGCSStaging); err == nil {
		u.DestinationBigqueryUpdateLoadingMethodGCSStaging = destinationBigqueryUpdateLoadingMethodGCSStaging
		u.Type = DestinationBigqueryUpdateLoadingMethodTypeDestinationBigqueryUpdateLoadingMethodGCSStaging
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationBigqueryUpdateLoadingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationBigqueryUpdateLoadingMethodStandardInserts != nil {
		return json.Marshal(u.DestinationBigqueryUpdateLoadingMethodStandardInserts)
	}

	if u.DestinationBigqueryUpdateLoadingMethodGCSStaging != nil {
		return json.Marshal(u.DestinationBigqueryUpdateLoadingMethodGCSStaging)
	}

	return nil, nil
}

// DestinationBigqueryUpdateTransformationQueryRunType - Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type <a href="https://cloud.google.com/bigquery/docs/running-queries#queries">here</a>. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries <a href="https://cloud.google.com/bigquery/docs/running-queries#batch">here</a>. The default "interactive" value is used if not set explicitly.
type DestinationBigqueryUpdateTransformationQueryRunType string

const (
	DestinationBigqueryUpdateTransformationQueryRunTypeInteractive DestinationBigqueryUpdateTransformationQueryRunType = "interactive"
	DestinationBigqueryUpdateTransformationQueryRunTypeBatch       DestinationBigqueryUpdateTransformationQueryRunType = "batch"
)

func (e DestinationBigqueryUpdateTransformationQueryRunType) ToPointer() *DestinationBigqueryUpdateTransformationQueryRunType {
	return &e
}

func (e *DestinationBigqueryUpdateTransformationQueryRunType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "interactive":
		fallthrough
	case "batch":
		*e = DestinationBigqueryUpdateTransformationQueryRunType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationBigqueryUpdateTransformationQueryRunType: %v", v)
	}
}

type DestinationBigqueryUpdate struct {
	// Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more <a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html">here</a>.
	BigQueryClientBufferSizeMb *int64 `json:"big_query_client_buffer_size_mb,omitempty"`
	// The contents of the JSON service account key. Check out the <a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key">docs</a> if you need help generating this key. Default credentials will be used if this field is left empty.
	CredentialsJSON *string `json:"credentials_json,omitempty"`
	// The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more <a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset">here</a>.
	DatasetID string `json:"dataset_id"`
	// The location of the dataset. Warning: Changes made after creation will not be applied. Read more <a href="https://cloud.google.com/bigquery/docs/locations">here</a>.
	DatasetLocation DestinationBigqueryUpdateDatasetLocation `json:"dataset_location"`
	// Loading method used to send select the way data will be uploaded to BigQuery. <br/><b>Standard Inserts</b> - Direct uploading using SQL INSERT statements. This method is extremely inefficient and provided only for quick testing. In almost all cases, you should use staging. <br/><b>GCS Staging</b> - Writes large batches of records to a file, uploads the file to GCS, then uses <b>COPY INTO table</b> to upload the file. Recommended for most workloads for better speed and scalability. Read more about GCS Staging <a href="https://docs.airbyte.com/integrations/destinations/bigquery#gcs-staging">here</a>.
	LoadingMethod *DestinationBigqueryUpdateLoadingMethod `json:"loading_method,omitempty"`
	// The GCP project ID for the project containing the target BigQuery dataset. Read more <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects">here</a>.
	ProjectID string `json:"project_id"`
	// (Early Access) The dataset to write raw tables into
	RawDataDataset *string `json:"raw_data_dataset,omitempty"`
	// Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type <a href="https://cloud.google.com/bigquery/docs/running-queries#queries">here</a>. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries <a href="https://cloud.google.com/bigquery/docs/running-queries#batch">here</a>. The default "interactive" value is used if not set explicitly.
	TransformationPriority *DestinationBigqueryUpdateTransformationQueryRunType `json:"transformation_priority,omitempty"`
	// (Early Access) Use <a href="https://docs.airbyte.com/understanding-airbyte/typing-deduping" target="_blank">Destinations V2</a>.
	Use1s1tFormat *bool `json:"use_1s1t_format,omitempty"`
}
