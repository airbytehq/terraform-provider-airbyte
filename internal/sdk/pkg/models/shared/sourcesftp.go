// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

// SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod - Connect through ssh key
type SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod string

const (
	SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethodSSHKeyAuth SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod = "SSH_KEY_AUTH"
)

func (e SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod) ToPointer() *SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod {
	return &e
}

func (e *SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod: %v", v)
	}
}

// SourceSftpAuthenticationWildcardSSHKeyAuthentication - The server authentication method
type SourceSftpAuthenticationWildcardSSHKeyAuthentication struct {
	// Connect through ssh key
	authMethod SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod `const:"SSH_KEY_AUTH" json:"auth_method"`
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	AuthSSHKey string `json:"auth_ssh_key"`
}

func (s SourceSftpAuthenticationWildcardSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftpAuthenticationWildcardSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftpAuthenticationWildcardSSHKeyAuthentication) GetAuthMethod() SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethod {
	return SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethodSSHKeyAuth
}

func (o *SourceSftpAuthenticationWildcardSSHKeyAuthentication) GetAuthSSHKey() string {
	if o == nil {
		return ""
	}
	return o.AuthSSHKey
}

// SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod - Connect through password authentication
type SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod string

const (
	SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethodSSHPasswordAuth SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod) ToPointer() *SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod {
	return &e
}

func (e *SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod: %v", v)
	}
}

// SourceSftpAuthenticationWildcardPasswordAuthentication - The server authentication method
type SourceSftpAuthenticationWildcardPasswordAuthentication struct {
	// Connect through password authentication
	authMethod SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod `const:"SSH_PASSWORD_AUTH" json:"auth_method"`
	// OS-level password for logging into the jump server host
	AuthUserPassword string `json:"auth_user_password"`
}

func (s SourceSftpAuthenticationWildcardPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftpAuthenticationWildcardPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftpAuthenticationWildcardPasswordAuthentication) GetAuthMethod() SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethod {
	return SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethodSSHPasswordAuth
}

func (o *SourceSftpAuthenticationWildcardPasswordAuthentication) GetAuthUserPassword() string {
	if o == nil {
		return ""
	}
	return o.AuthUserPassword
}

type SourceSftpAuthenticationWildcardType string

const (
	SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardPasswordAuthentication SourceSftpAuthenticationWildcardType = "source-sftp_Authentication *_Password Authentication"
	SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardSSHKeyAuthentication   SourceSftpAuthenticationWildcardType = "source-sftp_Authentication *_SSH Key Authentication"
)

type SourceSftpAuthenticationWildcard struct {
	SourceSftpAuthenticationWildcardPasswordAuthentication *SourceSftpAuthenticationWildcardPasswordAuthentication
	SourceSftpAuthenticationWildcardSSHKeyAuthentication   *SourceSftpAuthenticationWildcardSSHKeyAuthentication

	Type SourceSftpAuthenticationWildcardType
}

func CreateSourceSftpAuthenticationWildcardSourceSftpAuthenticationWildcardPasswordAuthentication(sourceSftpAuthenticationWildcardPasswordAuthentication SourceSftpAuthenticationWildcardPasswordAuthentication) SourceSftpAuthenticationWildcard {
	typ := SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardPasswordAuthentication

	return SourceSftpAuthenticationWildcard{
		SourceSftpAuthenticationWildcardPasswordAuthentication: &sourceSftpAuthenticationWildcardPasswordAuthentication,
		Type: typ,
	}
}

func CreateSourceSftpAuthenticationWildcardSourceSftpAuthenticationWildcardSSHKeyAuthentication(sourceSftpAuthenticationWildcardSSHKeyAuthentication SourceSftpAuthenticationWildcardSSHKeyAuthentication) SourceSftpAuthenticationWildcard {
	typ := SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardSSHKeyAuthentication

	return SourceSftpAuthenticationWildcard{
		SourceSftpAuthenticationWildcardSSHKeyAuthentication: &sourceSftpAuthenticationWildcardSSHKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceSftpAuthenticationWildcard) UnmarshalJSON(data []byte) error {

	sourceSftpAuthenticationWildcardPasswordAuthentication := new(SourceSftpAuthenticationWildcardPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSftpAuthenticationWildcardPasswordAuthentication, "", true, true); err == nil {
		u.SourceSftpAuthenticationWildcardPasswordAuthentication = sourceSftpAuthenticationWildcardPasswordAuthentication
		u.Type = SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardPasswordAuthentication
		return nil
	}

	sourceSftpAuthenticationWildcardSSHKeyAuthentication := new(SourceSftpAuthenticationWildcardSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSftpAuthenticationWildcardSSHKeyAuthentication, "", true, true); err == nil {
		u.SourceSftpAuthenticationWildcardSSHKeyAuthentication = sourceSftpAuthenticationWildcardSSHKeyAuthentication
		u.Type = SourceSftpAuthenticationWildcardTypeSourceSftpAuthenticationWildcardSSHKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSftpAuthenticationWildcard) MarshalJSON() ([]byte, error) {
	if u.SourceSftpAuthenticationWildcardPasswordAuthentication != nil {
		return utils.MarshalJSON(u.SourceSftpAuthenticationWildcardPasswordAuthentication, "", true)
	}

	if u.SourceSftpAuthenticationWildcardSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceSftpAuthenticationWildcardSSHKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSftpSftp string

const (
	SourceSftpSftpSftp SourceSftpSftp = "sftp"
)

func (e SourceSftpSftp) ToPointer() *SourceSftpSftp {
	return &e
}

func (e *SourceSftpSftp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sftp":
		*e = SourceSftpSftp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpSftp: %v", v)
	}
}

type SourceSftp struct {
	// The server authentication method
	Credentials *SourceSftpAuthenticationWildcard `json:"credentials,omitempty"`
	// The regular expression to specify files for sync in a chosen Folder Path
	FilePattern *string `default:"" json:"file_pattern"`
	// Coma separated file types. Currently only 'csv' and 'json' types are supported.
	FileTypes *string `default:"csv,json" json:"file_types"`
	// The directory to search files for sync
	FolderPath *string `default:"" json:"folder_path"`
	// The server host address
	Host string `json:"host"`
	// The server port
	Port       *int64         `default:"22" json:"port"`
	sourceType SourceSftpSftp `const:"sftp" json:"sourceType"`
	// The server user
	User string `json:"user"`
}

func (s SourceSftp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftp) GetCredentials() *SourceSftpAuthenticationWildcard {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSftp) GetFilePattern() *string {
	if o == nil {
		return nil
	}
	return o.FilePattern
}

func (o *SourceSftp) GetFileTypes() *string {
	if o == nil {
		return nil
	}
	return o.FileTypes
}

func (o *SourceSftp) GetFolderPath() *string {
	if o == nil {
		return nil
	}
	return o.FolderPath
}

func (o *SourceSftp) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceSftp) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceSftp) GetSourceType() SourceSftpSftp {
	return SourceSftpSftpSftp
}

func (o *SourceSftp) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}
