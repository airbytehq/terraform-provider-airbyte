// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type TestDestinationType string

const (
	TestDestinationTypeSilent TestDestinationType = "SILENT"
)

func (e TestDestinationType) ToPointer() *TestDestinationType {
	return &e
}

func (e *TestDestinationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SILENT":
		*e = TestDestinationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestDestinationType: %v", v)
	}
}

type Silent struct {
	testDestinationType *TestDestinationType `const:"SILENT" json:"test_destination_type"`
}

func (s Silent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Silent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Silent) GetTestDestinationType() *TestDestinationType {
	return TestDestinationTypeSilent.ToPointer()
}

type TestDestinationUnionType string

const (
	TestDestinationUnionTypeSilent TestDestinationUnionType = "Silent"
)

// TestDestination - The type of destination to be used
type TestDestination struct {
	Silent *Silent

	Type TestDestinationUnionType
}

func CreateTestDestinationSilent(silent Silent) TestDestination {
	typ := TestDestinationUnionTypeSilent

	return TestDestination{
		Silent: &silent,
		Type:   typ,
	}
}

func (u *TestDestination) UnmarshalJSON(data []byte) error {

	silent := new(Silent)
	if err := utils.UnmarshalJSON(data, &silent, "", true, true); err == nil {
		u.Silent = silent
		u.Type = TestDestinationUnionTypeSilent
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TestDestination) MarshalJSON() ([]byte, error) {
	if u.Silent != nil {
		return utils.MarshalJSON(u.Silent, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationDevNullUpdate struct {
	// The type of destination to be used
	TestDestination TestDestination `json:"test_destination"`
}

func (o *DestinationDevNullUpdate) GetTestDestination() TestDestination {
	if o == nil {
		return TestDestination{}
	}
	return o.TestDestination
}
