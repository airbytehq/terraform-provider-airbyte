// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod string

const (
	SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethodAPIKey SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod = "api_key"
)

func (e SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod) ToPointer() *SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod {
	return &e
}

func (e *SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_key":
		*e = SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod: %v", v)
	}
}

type SourceAirtableUpdateAuthenticationPersonalAccessToken struct {
	// The Personal Access Token for the Airtable account. See the <a href="https://airtable.com/developers/web/guides/personal-access-tokens">Support Guide</a> for more information on how to obtain this token.
	APIKey     string                                                           `json:"api_key"`
	AuthMethod *SourceAirtableUpdateAuthenticationPersonalAccessTokenAuthMethod `json:"auth_method,omitempty"`
}

type SourceAirtableUpdateAuthenticationOAuth20AuthMethod string

const (
	SourceAirtableUpdateAuthenticationOAuth20AuthMethodOauth20 SourceAirtableUpdateAuthenticationOAuth20AuthMethod = "oauth2.0"
)

func (e SourceAirtableUpdateAuthenticationOAuth20AuthMethod) ToPointer() *SourceAirtableUpdateAuthenticationOAuth20AuthMethod {
	return &e
}

func (e *SourceAirtableUpdateAuthenticationOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceAirtableUpdateAuthenticationOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAirtableUpdateAuthenticationOAuth20AuthMethod: %v", v)
	}
}

type SourceAirtableUpdateAuthenticationOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                              `json:"access_token,omitempty"`
	AuthMethod  *SourceAirtableUpdateAuthenticationOAuth20AuthMethod `json:"auth_method,omitempty"`
	// The client ID of the Airtable developer application.
	ClientID string `json:"client_id"`
	// The client secret the Airtable developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate *time.Time `json:"token_expiry_date,omitempty"`
}

type SourceAirtableUpdateAuthenticationType string

const (
	SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationOAuth20             SourceAirtableUpdateAuthenticationType = "source-airtable-update_Authentication_OAuth2.0"
	SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationPersonalAccessToken SourceAirtableUpdateAuthenticationType = "source-airtable-update_Authentication_Personal Access Token"
)

type SourceAirtableUpdateAuthentication struct {
	SourceAirtableUpdateAuthenticationOAuth20             *SourceAirtableUpdateAuthenticationOAuth20
	SourceAirtableUpdateAuthenticationPersonalAccessToken *SourceAirtableUpdateAuthenticationPersonalAccessToken

	Type SourceAirtableUpdateAuthenticationType
}

func CreateSourceAirtableUpdateAuthenticationSourceAirtableUpdateAuthenticationOAuth20(sourceAirtableUpdateAuthenticationOAuth20 SourceAirtableUpdateAuthenticationOAuth20) SourceAirtableUpdateAuthentication {
	typ := SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationOAuth20

	return SourceAirtableUpdateAuthentication{
		SourceAirtableUpdateAuthenticationOAuth20: &sourceAirtableUpdateAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceAirtableUpdateAuthenticationSourceAirtableUpdateAuthenticationPersonalAccessToken(sourceAirtableUpdateAuthenticationPersonalAccessToken SourceAirtableUpdateAuthenticationPersonalAccessToken) SourceAirtableUpdateAuthentication {
	typ := SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationPersonalAccessToken

	return SourceAirtableUpdateAuthentication{
		SourceAirtableUpdateAuthenticationPersonalAccessToken: &sourceAirtableUpdateAuthenticationPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceAirtableUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAirtableUpdateAuthenticationPersonalAccessToken := new(SourceAirtableUpdateAuthenticationPersonalAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAirtableUpdateAuthenticationPersonalAccessToken); err == nil {
		u.SourceAirtableUpdateAuthenticationPersonalAccessToken = sourceAirtableUpdateAuthenticationPersonalAccessToken
		u.Type = SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationPersonalAccessToken
		return nil
	}

	sourceAirtableUpdateAuthenticationOAuth20 := new(SourceAirtableUpdateAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAirtableUpdateAuthenticationOAuth20); err == nil {
		u.SourceAirtableUpdateAuthenticationOAuth20 = sourceAirtableUpdateAuthenticationOAuth20
		u.Type = SourceAirtableUpdateAuthenticationTypeSourceAirtableUpdateAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAirtableUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceAirtableUpdateAuthenticationPersonalAccessToken != nil {
		return json.Marshal(u.SourceAirtableUpdateAuthenticationPersonalAccessToken)
	}

	if u.SourceAirtableUpdateAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceAirtableUpdateAuthenticationOAuth20)
	}

	return nil, nil
}

type SourceAirtableUpdate struct {
	Credentials *SourceAirtableUpdateAuthentication `json:"credentials,omitempty"`
}
