// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskTalkAuthenticationOAuth20AuthType string

const (
	SourceZendeskTalkAuthenticationOAuth20AuthTypeOauth20 SourceZendeskTalkAuthenticationOAuth20AuthType = "oauth2.0"
)

func (e SourceZendeskTalkAuthenticationOAuth20AuthType) ToPointer() *SourceZendeskTalkAuthenticationOAuth20AuthType {
	return &e
}

func (e *SourceZendeskTalkAuthenticationOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskTalkAuthenticationOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkAuthenticationOAuth20AuthType: %v", v)
	}
}

// SourceZendeskTalkAuthenticationOAuth20 - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkAuthenticationOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	AccessToken string                                          `json:"access_token"`
	authType    *SourceZendeskTalkAuthenticationOAuth20AuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Client Secret
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceZendeskTalkAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkAuthenticationOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkAuthenticationOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkAuthenticationOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskTalkAuthenticationOAuth20) GetAuthType() *SourceZendeskTalkAuthenticationOAuth20AuthType {
	return SourceZendeskTalkAuthenticationOAuth20AuthTypeOauth20.ToPointer()
}

func (o *SourceZendeskTalkAuthenticationOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskTalkAuthenticationOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type SourceZendeskTalkAuthenticationAPITokenAuthType string

const (
	SourceZendeskTalkAuthenticationAPITokenAuthTypeAPIToken SourceZendeskTalkAuthenticationAPITokenAuthType = "api_token"
)

func (e SourceZendeskTalkAuthenticationAPITokenAuthType) ToPointer() *SourceZendeskTalkAuthenticationAPITokenAuthType {
	return &e
}

func (e *SourceZendeskTalkAuthenticationAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskTalkAuthenticationAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkAuthenticationAPITokenAuthType: %v", v)
	}
}

// SourceZendeskTalkAuthenticationAPIToken - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkAuthenticationAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	APIToken string                                           `json:"api_token"`
	authType *SourceZendeskTalkAuthenticationAPITokenAuthType `const:"api_token" json:"auth_type,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`
}

func (s SourceZendeskTalkAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkAuthenticationAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkAuthenticationAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskTalkAuthenticationAPIToken) GetAuthType() *SourceZendeskTalkAuthenticationAPITokenAuthType {
	return SourceZendeskTalkAuthenticationAPITokenAuthTypeAPIToken.ToPointer()
}

func (o *SourceZendeskTalkAuthenticationAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskTalkAuthenticationType string

const (
	SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationAPIToken SourceZendeskTalkAuthenticationType = "source-zendesk-talk_Authentication_API Token"
	SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationOAuth20  SourceZendeskTalkAuthenticationType = "source-zendesk-talk_Authentication_OAuth2.0"
)

type SourceZendeskTalkAuthentication struct {
	SourceZendeskTalkAuthenticationAPIToken *SourceZendeskTalkAuthenticationAPIToken
	SourceZendeskTalkAuthenticationOAuth20  *SourceZendeskTalkAuthenticationOAuth20

	Type SourceZendeskTalkAuthenticationType
}

func CreateSourceZendeskTalkAuthenticationSourceZendeskTalkAuthenticationAPIToken(sourceZendeskTalkAuthenticationAPIToken SourceZendeskTalkAuthenticationAPIToken) SourceZendeskTalkAuthentication {
	typ := SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationAPIToken

	return SourceZendeskTalkAuthentication{
		SourceZendeskTalkAuthenticationAPIToken: &sourceZendeskTalkAuthenticationAPIToken,
		Type:                                    typ,
	}
}

func CreateSourceZendeskTalkAuthenticationSourceZendeskTalkAuthenticationOAuth20(sourceZendeskTalkAuthenticationOAuth20 SourceZendeskTalkAuthenticationOAuth20) SourceZendeskTalkAuthentication {
	typ := SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationOAuth20

	return SourceZendeskTalkAuthentication{
		SourceZendeskTalkAuthenticationOAuth20: &sourceZendeskTalkAuthenticationOAuth20,
		Type:                                   typ,
	}
}

func (u *SourceZendeskTalkAuthentication) UnmarshalJSON(data []byte) error {

	sourceZendeskTalkAuthenticationAPIToken := new(SourceZendeskTalkAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkAuthenticationAPIToken, "", true, true); err == nil {
		u.SourceZendeskTalkAuthenticationAPIToken = sourceZendeskTalkAuthenticationAPIToken
		u.Type = SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationAPIToken
		return nil
	}

	sourceZendeskTalkAuthenticationOAuth20 := new(SourceZendeskTalkAuthenticationOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkAuthenticationOAuth20, "", true, true); err == nil {
		u.SourceZendeskTalkAuthenticationOAuth20 = sourceZendeskTalkAuthenticationOAuth20
		u.Type = SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskTalkAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskTalkAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkAuthenticationAPIToken, "", true)
	}

	if u.SourceZendeskTalkAuthenticationOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkAuthenticationOAuth20, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskTalkZendeskTalk string

const (
	SourceZendeskTalkZendeskTalkZendeskTalk SourceZendeskTalkZendeskTalk = "zendesk-talk"
)

func (e SourceZendeskTalkZendeskTalk) ToPointer() *SourceZendeskTalkZendeskTalk {
	return &e
}

func (e *SourceZendeskTalkZendeskTalk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-talk":
		*e = SourceZendeskTalkZendeskTalk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkZendeskTalk: %v", v)
	}
}

type SourceZendeskTalk struct {
	// Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
	Credentials *SourceZendeskTalkAuthentication `json:"credentials,omitempty"`
	sourceType  SourceZendeskTalkZendeskTalk     `const:"zendesk-talk" json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
	// This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskTalk) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalk) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalk) GetCredentials() *SourceZendeskTalkAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskTalk) GetSourceType() SourceZendeskTalkZendeskTalk {
	return SourceZendeskTalkZendeskTalkZendeskTalk
}

func (o *SourceZendeskTalk) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceZendeskTalk) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
