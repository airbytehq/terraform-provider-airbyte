// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceZendeskTalkSchemasAuthType string

const (
	SourceZendeskTalkSchemasAuthTypeOauth20 SourceZendeskTalkSchemasAuthType = "oauth2.0"
)

func (e SourceZendeskTalkSchemasAuthType) ToPointer() *SourceZendeskTalkSchemasAuthType {
	return &e
}

func (e *SourceZendeskTalkSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskTalkSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkSchemasAuthType: %v", v)
	}
}

type SourceZendeskTalkOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	AccessToken string                            `json:"access_token"`
	authType    *SourceZendeskTalkSchemasAuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Client Secret
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceZendeskTalkOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskTalkOAuth20) GetAuthType() *SourceZendeskTalkSchemasAuthType {
	return SourceZendeskTalkSchemasAuthTypeOauth20.ToPointer()
}

func (o *SourceZendeskTalkOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskTalkOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type SourceZendeskTalkAuthType string

const (
	SourceZendeskTalkAuthTypeAPIToken SourceZendeskTalkAuthType = "api_token"
)

func (e SourceZendeskTalkAuthType) ToPointer() *SourceZendeskTalkAuthType {
	return &e
}

func (e *SourceZendeskTalkAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskTalkAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskTalkAuthType: %v", v)
	}
}

type SourceZendeskTalkAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
	APIToken string                     `json:"api_token"`
	authType *SourceZendeskTalkAuthType `const:"api_token" json:"auth_type,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`
}

func (s SourceZendeskTalkAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalkAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalkAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskTalkAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskTalkAPIToken) GetAuthType() *SourceZendeskTalkAuthType {
	return SourceZendeskTalkAuthTypeAPIToken.ToPointer()
}

func (o *SourceZendeskTalkAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskTalkAuthenticationType string

const (
	SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAPIToken SourceZendeskTalkAuthenticationType = "source-zendesk-talk_API Token"
	SourceZendeskTalkAuthenticationTypeSourceZendeskTalkOAuth20  SourceZendeskTalkAuthenticationType = "source-zendesk-talk_OAuth2.0"
)

// SourceZendeskTalkAuthentication - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskTalkAuthentication struct {
	SourceZendeskTalkAPIToken *SourceZendeskTalkAPIToken
	SourceZendeskTalkOAuth20  *SourceZendeskTalkOAuth20

	Type SourceZendeskTalkAuthenticationType
}

func CreateSourceZendeskTalkAuthenticationSourceZendeskTalkAPIToken(sourceZendeskTalkAPIToken SourceZendeskTalkAPIToken) SourceZendeskTalkAuthentication {
	typ := SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAPIToken

	return SourceZendeskTalkAuthentication{
		SourceZendeskTalkAPIToken: &sourceZendeskTalkAPIToken,
		Type:                      typ,
	}
}

func CreateSourceZendeskTalkAuthenticationSourceZendeskTalkOAuth20(sourceZendeskTalkOAuth20 SourceZendeskTalkOAuth20) SourceZendeskTalkAuthentication {
	typ := SourceZendeskTalkAuthenticationTypeSourceZendeskTalkOAuth20

	return SourceZendeskTalkAuthentication{
		SourceZendeskTalkOAuth20: &sourceZendeskTalkOAuth20,
		Type:                     typ,
	}
}

func (u *SourceZendeskTalkAuthentication) UnmarshalJSON(data []byte) error {

	sourceZendeskTalkAPIToken := new(SourceZendeskTalkAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkAPIToken, "", true, true); err == nil {
		u.SourceZendeskTalkAPIToken = sourceZendeskTalkAPIToken
		u.Type = SourceZendeskTalkAuthenticationTypeSourceZendeskTalkAPIToken
		return nil
	}

	sourceZendeskTalkOAuth20 := new(SourceZendeskTalkOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskTalkOAuth20, "", true, true); err == nil {
		u.SourceZendeskTalkOAuth20 = sourceZendeskTalkOAuth20
		u.Type = SourceZendeskTalkAuthenticationTypeSourceZendeskTalkOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskTalkAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskTalkAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkAPIToken, "", true)
	}

	if u.SourceZendeskTalkOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskTalkOAuth20, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ZendeskTalk string

const (
	ZendeskTalkZendeskTalk ZendeskTalk = "zendesk-talk"
)

func (e ZendeskTalk) ToPointer() *ZendeskTalk {
	return &e
}

func (e *ZendeskTalk) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-talk":
		*e = ZendeskTalk(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZendeskTalk: %v", v)
	}
}

type SourceZendeskTalk struct {
	// Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
	Credentials *SourceZendeskTalkAuthentication `json:"credentials,omitempty"`
	sourceType  ZendeskTalk                      `const:"zendesk-talk" json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
	// This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskTalk) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskTalk) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskTalk) GetCredentials() *SourceZendeskTalkAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskTalk) GetSourceType() ZendeskTalk {
	return ZendeskTalkZendeskTalk
}

func (o *SourceZendeskTalk) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}

func (o *SourceZendeskTalk) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
