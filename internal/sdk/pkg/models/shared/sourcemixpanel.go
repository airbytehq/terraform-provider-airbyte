// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle string

const (
	SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleProjectSecret SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle = "Project Secret"
)

func (e SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle) ToPointer() *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle {
	return &e
}

func (e *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Project Secret":
		*e = SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle: %v", v)
	}
}

// SourceMixpanelAuthenticationWildcardProjectSecret - Choose how to authenticate to Mixpanel
type SourceMixpanelAuthenticationWildcardProjectSecret struct {
	// Mixpanel project secret. See the <a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret">docs</a> for more information on how to obtain this.
	APISecret   string                                                        `json:"api_secret"`
	optionTitle *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle `const:"Project Secret" json:"option_title,omitempty"`
}

func (s SourceMixpanelAuthenticationWildcardProjectSecret) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanelAuthenticationWildcardProjectSecret) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanelAuthenticationWildcardProjectSecret) GetAPISecret() string {
	if o == nil {
		return ""
	}
	return o.APISecret
}

func (o *SourceMixpanelAuthenticationWildcardProjectSecret) GetOptionTitle() *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitle {
	return SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleProjectSecret.ToPointer()
}

type SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle string

const (
	SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleServiceAccount SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle = "Service Account"
)

func (e SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle) ToPointer() *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle {
	return &e
}

func (e *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service Account":
		*e = SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle: %v", v)
	}
}

// SourceMixpanelAuthenticationWildcardServiceAccount - Choose how to authenticate to Mixpanel
type SourceMixpanelAuthenticationWildcardServiceAccount struct {
	optionTitle *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle `const:"Service Account" json:"option_title,omitempty"`
	// Mixpanel Service Account Secret. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Secret string `json:"secret"`
	// Mixpanel Service Account Username. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Username string `json:"username"`
}

func (s SourceMixpanelAuthenticationWildcardServiceAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanelAuthenticationWildcardServiceAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanelAuthenticationWildcardServiceAccount) GetOptionTitle() *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitle {
	return SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleServiceAccount.ToPointer()
}

func (o *SourceMixpanelAuthenticationWildcardServiceAccount) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *SourceMixpanelAuthenticationWildcardServiceAccount) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type SourceMixpanelAuthenticationWildcardType string

const (
	SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount SourceMixpanelAuthenticationWildcardType = "source-mixpanel_Authentication *_Service Account"
	SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret  SourceMixpanelAuthenticationWildcardType = "source-mixpanel_Authentication *_Project Secret"
)

type SourceMixpanelAuthenticationWildcard struct {
	SourceMixpanelAuthenticationWildcardServiceAccount *SourceMixpanelAuthenticationWildcardServiceAccount
	SourceMixpanelAuthenticationWildcardProjectSecret  *SourceMixpanelAuthenticationWildcardProjectSecret

	Type SourceMixpanelAuthenticationWildcardType
}

func CreateSourceMixpanelAuthenticationWildcardSourceMixpanelAuthenticationWildcardServiceAccount(sourceMixpanelAuthenticationWildcardServiceAccount SourceMixpanelAuthenticationWildcardServiceAccount) SourceMixpanelAuthenticationWildcard {
	typ := SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount

	return SourceMixpanelAuthenticationWildcard{
		SourceMixpanelAuthenticationWildcardServiceAccount: &sourceMixpanelAuthenticationWildcardServiceAccount,
		Type: typ,
	}
}

func CreateSourceMixpanelAuthenticationWildcardSourceMixpanelAuthenticationWildcardProjectSecret(sourceMixpanelAuthenticationWildcardProjectSecret SourceMixpanelAuthenticationWildcardProjectSecret) SourceMixpanelAuthenticationWildcard {
	typ := SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret

	return SourceMixpanelAuthenticationWildcard{
		SourceMixpanelAuthenticationWildcardProjectSecret: &sourceMixpanelAuthenticationWildcardProjectSecret,
		Type: typ,
	}
}

func (u *SourceMixpanelAuthenticationWildcard) UnmarshalJSON(data []byte) error {

	sourceMixpanelAuthenticationWildcardProjectSecret := new(SourceMixpanelAuthenticationWildcardProjectSecret)
	if err := utils.UnmarshalJSON(data, &sourceMixpanelAuthenticationWildcardProjectSecret, "", true, true); err == nil {
		u.SourceMixpanelAuthenticationWildcardProjectSecret = sourceMixpanelAuthenticationWildcardProjectSecret
		u.Type = SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret
		return nil
	}

	sourceMixpanelAuthenticationWildcardServiceAccount := new(SourceMixpanelAuthenticationWildcardServiceAccount)
	if err := utils.UnmarshalJSON(data, &sourceMixpanelAuthenticationWildcardServiceAccount, "", true, true); err == nil {
		u.SourceMixpanelAuthenticationWildcardServiceAccount = sourceMixpanelAuthenticationWildcardServiceAccount
		u.Type = SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMixpanelAuthenticationWildcard) MarshalJSON() ([]byte, error) {
	if u.SourceMixpanelAuthenticationWildcardServiceAccount != nil {
		return utils.MarshalJSON(u.SourceMixpanelAuthenticationWildcardServiceAccount, "", true)
	}

	if u.SourceMixpanelAuthenticationWildcardProjectSecret != nil {
		return utils.MarshalJSON(u.SourceMixpanelAuthenticationWildcardProjectSecret, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceMixpanelRegion - The region of mixpanel domain instance either US or EU.
type SourceMixpanelRegion string

const (
	SourceMixpanelRegionUs SourceMixpanelRegion = "US"
	SourceMixpanelRegionEu SourceMixpanelRegion = "EU"
)

func (e SourceMixpanelRegion) ToPointer() *SourceMixpanelRegion {
	return &e
}

func (e *SourceMixpanelRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		*e = SourceMixpanelRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelRegion: %v", v)
	}
}

type SourceMixpanelMixpanel string

const (
	SourceMixpanelMixpanelMixpanel SourceMixpanelMixpanel = "mixpanel"
)

func (e SourceMixpanelMixpanel) ToPointer() *SourceMixpanelMixpanel {
	return &e
}

func (e *SourceMixpanelMixpanel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mixpanel":
		*e = SourceMixpanelMixpanel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelMixpanel: %v", v)
	}
}

type SourceMixpanel struct {
	//  A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days.
	AttributionWindow *int64 `default:"5" json:"attribution_window"`
	// Choose how to authenticate to Mixpanel
	Credentials *SourceMixpanelAuthenticationWildcard `json:"credentials,omitempty"`
	// Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment.
	DateWindowSize *int64 `default:"30" json:"date_window_size"`
	// The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
	EndDate *types.Date `json:"end_date,omitempty"`
	// Your project ID number. See the <a href="https://help.mixpanel.com/hc/en-us/articles/115004490503-Project-Settings#project-id">docs</a> for more information on how to obtain this.
	ProjectID *int64 `json:"project_id,omitempty"`
	// Time zone in which integer date times are stored. The project timezone may be found in the project settings in the <a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel">Mixpanel console</a>.
	ProjectTimezone *string `default:"US/Pacific" json:"project_timezone"`
	// The region of mixpanel domain instance either US or EU.
	Region *SourceMixpanelRegion `default:"US" json:"region"`
	// Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
	SelectPropertiesByDefault *bool                   `default:"true" json:"select_properties_by_default"`
	sourceType                *SourceMixpanelMixpanel `const:"mixpanel" json:"sourceType,omitempty"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
	StartDate *types.Date `json:"start_date,omitempty"`
}

func (s SourceMixpanel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanel) GetAttributionWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.AttributionWindow
}

func (o *SourceMixpanel) GetCredentials() *SourceMixpanelAuthenticationWildcard {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceMixpanel) GetDateWindowSize() *int64 {
	if o == nil {
		return nil
	}
	return o.DateWindowSize
}

func (o *SourceMixpanel) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceMixpanel) GetProjectID() *int64 {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *SourceMixpanel) GetProjectTimezone() *string {
	if o == nil {
		return nil
	}
	return o.ProjectTimezone
}

func (o *SourceMixpanel) GetRegion() *SourceMixpanelRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceMixpanel) GetSelectPropertiesByDefault() *bool {
	if o == nil {
		return nil
	}
	return o.SelectPropertiesByDefault
}

func (o *SourceMixpanel) GetSourceType() *SourceMixpanelMixpanel {
	return SourceMixpanelMixpanelMixpanel.ToPointer()
}

func (o *SourceMixpanel) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
