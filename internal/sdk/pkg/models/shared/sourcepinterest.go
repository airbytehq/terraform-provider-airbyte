// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourcePinterestSchemasAuthMethod string

const (
	SourcePinterestSchemasAuthMethodAccessToken SourcePinterestSchemasAuthMethod = "access_token"
)

func (e SourcePinterestSchemasAuthMethod) ToPointer() *SourcePinterestSchemasAuthMethod {
	return &e
}

func (e *SourcePinterestSchemasAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourcePinterestSchemasAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestSchemasAuthMethod: %v", v)
	}
}

type SourcePinterestAccessToken struct {
	// The Access Token to make authenticated requests.
	AccessToken string                           `json:"access_token"`
	authMethod  SourcePinterestSchemasAuthMethod `const:"access_token" json:"auth_method"`
}

func (s SourcePinterestAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterestAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterestAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourcePinterestAccessToken) GetAuthMethod() SourcePinterestSchemasAuthMethod {
	return SourcePinterestSchemasAuthMethodAccessToken
}

type SourcePinterestAuthMethod string

const (
	SourcePinterestAuthMethodOauth20 SourcePinterestAuthMethod = "oauth2.0"
)

func (e SourcePinterestAuthMethod) ToPointer() *SourcePinterestAuthMethod {
	return &e
}

func (e *SourcePinterestAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourcePinterestAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestAuthMethod: %v", v)
	}
}

type SourcePinterestOAuth20 struct {
	authMethod SourcePinterestAuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of your OAuth application
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

func (s SourcePinterestOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterestOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterestOAuth20) GetAuthMethod() SourcePinterestAuthMethod {
	return SourcePinterestAuthMethodOauth20
}

func (o *SourcePinterestOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourcePinterestOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourcePinterestOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourcePinterestAuthorizationMethodType string

const (
	SourcePinterestAuthorizationMethodTypeSourcePinterestOAuth20     SourcePinterestAuthorizationMethodType = "source-pinterest_OAuth2.0"
	SourcePinterestAuthorizationMethodTypeSourcePinterestAccessToken SourcePinterestAuthorizationMethodType = "source-pinterest_Access Token"
)

type SourcePinterestAuthorizationMethod struct {
	SourcePinterestOAuth20     *SourcePinterestOAuth20
	SourcePinterestAccessToken *SourcePinterestAccessToken

	Type SourcePinterestAuthorizationMethodType
}

func CreateSourcePinterestAuthorizationMethodSourcePinterestOAuth20(sourcePinterestOAuth20 SourcePinterestOAuth20) SourcePinterestAuthorizationMethod {
	typ := SourcePinterestAuthorizationMethodTypeSourcePinterestOAuth20

	return SourcePinterestAuthorizationMethod{
		SourcePinterestOAuth20: &sourcePinterestOAuth20,
		Type:                   typ,
	}
}

func CreateSourcePinterestAuthorizationMethodSourcePinterestAccessToken(sourcePinterestAccessToken SourcePinterestAccessToken) SourcePinterestAuthorizationMethod {
	typ := SourcePinterestAuthorizationMethodTypeSourcePinterestAccessToken

	return SourcePinterestAuthorizationMethod{
		SourcePinterestAccessToken: &sourcePinterestAccessToken,
		Type:                       typ,
	}
}

func (u *SourcePinterestAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourcePinterestAccessToken := new(SourcePinterestAccessToken)
	if err := utils.UnmarshalJSON(data, &sourcePinterestAccessToken, "", true, true); err == nil {
		u.SourcePinterestAccessToken = sourcePinterestAccessToken
		u.Type = SourcePinterestAuthorizationMethodTypeSourcePinterestAccessToken
		return nil
	}

	sourcePinterestOAuth20 := new(SourcePinterestOAuth20)
	if err := utils.UnmarshalJSON(data, &sourcePinterestOAuth20, "", true, true); err == nil {
		u.SourcePinterestOAuth20 = sourcePinterestOAuth20
		u.Type = SourcePinterestAuthorizationMethodTypeSourcePinterestOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePinterestAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePinterestOAuth20 != nil {
		return utils.MarshalJSON(u.SourcePinterestOAuth20, "", true)
	}

	if u.SourcePinterestAccessToken != nil {
		return utils.MarshalJSON(u.SourcePinterestAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Pinterest string

const (
	PinterestPinterest Pinterest = "pinterest"
)

func (e Pinterest) ToPointer() *Pinterest {
	return &e
}

func (e *Pinterest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinterest":
		*e = Pinterest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pinterest: %v", v)
	}
}

type SourcePinterestStatus string

const (
	SourcePinterestStatusActive   SourcePinterestStatus = "ACTIVE"
	SourcePinterestStatusPaused   SourcePinterestStatus = "PAUSED"
	SourcePinterestStatusArchived SourcePinterestStatus = "ARCHIVED"
)

func (e SourcePinterestStatus) ToPointer() *SourcePinterestStatus {
	return &e
}

func (e *SourcePinterestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		fallthrough
	case "ARCHIVED":
		*e = SourcePinterestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestStatus: %v", v)
	}
}

type SourcePinterest struct {
	Credentials *SourcePinterestAuthorizationMethod `json:"credentials,omitempty"`
	sourceType  Pinterest                           `const:"pinterest" json:"sourceType"`
	// A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).
	StartDate types.Date `json:"start_date"`
	// Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.
	Status []SourcePinterestStatus `json:"status,omitempty"`
}

func (s SourcePinterest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterest) GetCredentials() *SourcePinterestAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourcePinterest) GetSourceType() Pinterest {
	return PinterestPinterest
}

func (o *SourcePinterest) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourcePinterest) GetStatus() []SourcePinterestStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
