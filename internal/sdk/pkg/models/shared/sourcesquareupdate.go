// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSquareUpdateAuthenticationAPIKeyAuthType string

const (
	SourceSquareUpdateAuthenticationAPIKeyAuthTypeAPIKey SourceSquareUpdateAuthenticationAPIKeyAuthType = "API Key"
)

func (e SourceSquareUpdateAuthenticationAPIKeyAuthType) ToPointer() *SourceSquareUpdateAuthenticationAPIKeyAuthType {
	return &e
}

func (e *SourceSquareUpdateAuthenticationAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Key":
		*e = SourceSquareUpdateAuthenticationAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareUpdateAuthenticationAPIKeyAuthType: %v", v)
	}
}

// SourceSquareUpdateAuthenticationAPIKey - Choose how to authenticate to Square.
type SourceSquareUpdateAuthenticationAPIKey struct {
	// The API key for a Square application
	APIKey   string                                         `json:"api_key"`
	authType SourceSquareUpdateAuthenticationAPIKeyAuthType `const:"API Key" json:"auth_type"`
}

func (s SourceSquareUpdateAuthenticationAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareUpdateAuthenticationAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareUpdateAuthenticationAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceSquareUpdateAuthenticationAPIKey) GetAuthType() SourceSquareUpdateAuthenticationAPIKeyAuthType {
	return SourceSquareUpdateAuthenticationAPIKeyAuthTypeAPIKey
}

type SourceSquareUpdateAuthenticationOauthAuthenticationAuthType string

const (
	SourceSquareUpdateAuthenticationOauthAuthenticationAuthTypeOAuth SourceSquareUpdateAuthenticationOauthAuthenticationAuthType = "OAuth"
)

func (e SourceSquareUpdateAuthenticationOauthAuthenticationAuthType) ToPointer() *SourceSquareUpdateAuthenticationOauthAuthenticationAuthType {
	return &e
}

func (e *SourceSquareUpdateAuthenticationOauthAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSquareUpdateAuthenticationOauthAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareUpdateAuthenticationOauthAuthenticationAuthType: %v", v)
	}
}

// SourceSquareUpdateAuthenticationOauthAuthentication - Choose how to authenticate to Square.
type SourceSquareUpdateAuthenticationOauthAuthentication struct {
	authType SourceSquareUpdateAuthenticationOauthAuthenticationAuthType `const:"OAuth" json:"auth_type"`
	// The Square-issued ID of your application
	ClientID string `json:"client_id"`
	// The Square-issued application secret for your application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`
}

func (s SourceSquareUpdateAuthenticationOauthAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareUpdateAuthenticationOauthAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareUpdateAuthenticationOauthAuthentication) GetAuthType() SourceSquareUpdateAuthenticationOauthAuthenticationAuthType {
	return SourceSquareUpdateAuthenticationOauthAuthenticationAuthTypeOAuth
}

func (o *SourceSquareUpdateAuthenticationOauthAuthentication) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSquareUpdateAuthenticationOauthAuthentication) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSquareUpdateAuthenticationOauthAuthentication) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceSquareUpdateAuthenticationType string

const (
	SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication SourceSquareUpdateAuthenticationType = "source-square-update_Authentication_Oauth authentication"
	SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey              SourceSquareUpdateAuthenticationType = "source-square-update_Authentication_API key"
)

type SourceSquareUpdateAuthentication struct {
	SourceSquareUpdateAuthenticationOauthAuthentication *SourceSquareUpdateAuthenticationOauthAuthentication
	SourceSquareUpdateAuthenticationAPIKey              *SourceSquareUpdateAuthenticationAPIKey

	Type SourceSquareUpdateAuthenticationType
}

func CreateSourceSquareUpdateAuthenticationSourceSquareUpdateAuthenticationOauthAuthentication(sourceSquareUpdateAuthenticationOauthAuthentication SourceSquareUpdateAuthenticationOauthAuthentication) SourceSquareUpdateAuthentication {
	typ := SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication

	return SourceSquareUpdateAuthentication{
		SourceSquareUpdateAuthenticationOauthAuthentication: &sourceSquareUpdateAuthenticationOauthAuthentication,
		Type: typ,
	}
}

func CreateSourceSquareUpdateAuthenticationSourceSquareUpdateAuthenticationAPIKey(sourceSquareUpdateAuthenticationAPIKey SourceSquareUpdateAuthenticationAPIKey) SourceSquareUpdateAuthentication {
	typ := SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey

	return SourceSquareUpdateAuthentication{
		SourceSquareUpdateAuthenticationAPIKey: &sourceSquareUpdateAuthenticationAPIKey,
		Type:                                   typ,
	}
}

func (u *SourceSquareUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceSquareUpdateAuthenticationAPIKey := new(SourceSquareUpdateAuthenticationAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceSquareUpdateAuthenticationAPIKey, "", true, true); err == nil {
		u.SourceSquareUpdateAuthenticationAPIKey = sourceSquareUpdateAuthenticationAPIKey
		u.Type = SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey
		return nil
	}

	sourceSquareUpdateAuthenticationOauthAuthentication := new(SourceSquareUpdateAuthenticationOauthAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSquareUpdateAuthenticationOauthAuthentication, "", true, true); err == nil {
		u.SourceSquareUpdateAuthenticationOauthAuthentication = sourceSquareUpdateAuthenticationOauthAuthentication
		u.Type = SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSquareUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceSquareUpdateAuthenticationOauthAuthentication != nil {
		return utils.MarshalJSON(u.SourceSquareUpdateAuthenticationOauthAuthentication, "", true)
	}

	if u.SourceSquareUpdateAuthenticationAPIKey != nil {
		return utils.MarshalJSON(u.SourceSquareUpdateAuthenticationAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSquareUpdate struct {
	// Choose how to authenticate to Square.
	Credentials *SourceSquareUpdateAuthentication `json:"credentials,omitempty"`
	// In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)
	IncludeDeletedObjects *bool `default:"false" json:"include_deleted_objects"`
	// Determines whether to use the sandbox or production environment.
	IsSandbox *bool `default:"false" json:"is_sandbox"`
	// UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.
	StartDate *types.Date `default:"2021-01-01" json:"start_date"`
}

func (s SourceSquareUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSquareUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSquareUpdate) GetCredentials() *SourceSquareUpdateAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSquareUpdate) GetIncludeDeletedObjects() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeDeletedObjects
}

func (o *SourceSquareUpdate) GetIsSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.IsSandbox
}

func (o *SourceSquareUpdate) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
