// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSquareUpdateAuthenticationAPIKeyAuthType string

const (
	SourceSquareUpdateAuthenticationAPIKeyAuthTypeAPIKey SourceSquareUpdateAuthenticationAPIKeyAuthType = "API Key"
)

func (e SourceSquareUpdateAuthenticationAPIKeyAuthType) ToPointer() *SourceSquareUpdateAuthenticationAPIKeyAuthType {
	return &e
}

func (e *SourceSquareUpdateAuthenticationAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Key":
		*e = SourceSquareUpdateAuthenticationAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareUpdateAuthenticationAPIKeyAuthType: %v", v)
	}
}

// SourceSquareUpdateAuthenticationAPIKey - Choose how to authenticate to Square.
type SourceSquareUpdateAuthenticationAPIKey struct {
	// The API key for a Square application
	APIKey   string                                         `json:"api_key"`
	AuthType SourceSquareUpdateAuthenticationAPIKeyAuthType `json:"auth_type"`
}

type SourceSquareUpdateAuthenticationOauthAuthenticationAuthType string

const (
	SourceSquareUpdateAuthenticationOauthAuthenticationAuthTypeOAuth SourceSquareUpdateAuthenticationOauthAuthenticationAuthType = "OAuth"
)

func (e SourceSquareUpdateAuthenticationOauthAuthenticationAuthType) ToPointer() *SourceSquareUpdateAuthenticationOauthAuthenticationAuthType {
	return &e
}

func (e *SourceSquareUpdateAuthenticationOauthAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSquareUpdateAuthenticationOauthAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSquareUpdateAuthenticationOauthAuthenticationAuthType: %v", v)
	}
}

// SourceSquareUpdateAuthenticationOauthAuthentication - Choose how to authenticate to Square.
type SourceSquareUpdateAuthenticationOauthAuthentication struct {
	AuthType SourceSquareUpdateAuthenticationOauthAuthenticationAuthType `json:"auth_type"`
	// The Square-issued ID of your application
	ClientID string `json:"client_id"`
	// The Square-issued application secret for your application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`
}

type SourceSquareUpdateAuthenticationType string

const (
	SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication SourceSquareUpdateAuthenticationType = "source-square-update_Authentication_Oauth authentication"
	SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey              SourceSquareUpdateAuthenticationType = "source-square-update_Authentication_API key"
)

type SourceSquareUpdateAuthentication struct {
	SourceSquareUpdateAuthenticationOauthAuthentication *SourceSquareUpdateAuthenticationOauthAuthentication
	SourceSquareUpdateAuthenticationAPIKey              *SourceSquareUpdateAuthenticationAPIKey

	Type SourceSquareUpdateAuthenticationType
}

func CreateSourceSquareUpdateAuthenticationSourceSquareUpdateAuthenticationOauthAuthentication(sourceSquareUpdateAuthenticationOauthAuthentication SourceSquareUpdateAuthenticationOauthAuthentication) SourceSquareUpdateAuthentication {
	typ := SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication

	return SourceSquareUpdateAuthentication{
		SourceSquareUpdateAuthenticationOauthAuthentication: &sourceSquareUpdateAuthenticationOauthAuthentication,
		Type: typ,
	}
}

func CreateSourceSquareUpdateAuthenticationSourceSquareUpdateAuthenticationAPIKey(sourceSquareUpdateAuthenticationAPIKey SourceSquareUpdateAuthenticationAPIKey) SourceSquareUpdateAuthentication {
	typ := SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey

	return SourceSquareUpdateAuthentication{
		SourceSquareUpdateAuthenticationAPIKey: &sourceSquareUpdateAuthenticationAPIKey,
		Type:                                   typ,
	}
}

func (u *SourceSquareUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSquareUpdateAuthenticationAPIKey := new(SourceSquareUpdateAuthenticationAPIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSquareUpdateAuthenticationAPIKey); err == nil {
		u.SourceSquareUpdateAuthenticationAPIKey = sourceSquareUpdateAuthenticationAPIKey
		u.Type = SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationAPIKey
		return nil
	}

	sourceSquareUpdateAuthenticationOauthAuthentication := new(SourceSquareUpdateAuthenticationOauthAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSquareUpdateAuthenticationOauthAuthentication); err == nil {
		u.SourceSquareUpdateAuthenticationOauthAuthentication = sourceSquareUpdateAuthenticationOauthAuthentication
		u.Type = SourceSquareUpdateAuthenticationTypeSourceSquareUpdateAuthenticationOauthAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSquareUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceSquareUpdateAuthenticationAPIKey != nil {
		return json.Marshal(u.SourceSquareUpdateAuthenticationAPIKey)
	}

	if u.SourceSquareUpdateAuthenticationOauthAuthentication != nil {
		return json.Marshal(u.SourceSquareUpdateAuthenticationOauthAuthentication)
	}

	return nil, nil
}

type SourceSquareUpdate struct {
	// Choose how to authenticate to Square.
	Credentials *SourceSquareUpdateAuthentication `json:"credentials,omitempty"`
	// In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes)
	IncludeDeletedObjects *bool `json:"include_deleted_objects,omitempty"`
	// Determines whether to use the sandbox or production environment.
	IsSandbox bool `json:"is_sandbox"`
	// UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated.
	StartDate *types.Date `json:"start_date,omitempty"`
}
