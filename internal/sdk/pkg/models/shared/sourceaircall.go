// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
	"time"
)

type SourceAircallAircall string

const (
	SourceAircallAircallAircall SourceAircallAircall = "aircall"
)

func (e SourceAircallAircall) ToPointer() *SourceAircallAircall {
	return &e
}

func (e *SourceAircallAircall) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aircall":
		*e = SourceAircallAircall(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAircallAircall: %v", v)
	}
}

type SourceAircall struct {
	// App ID found at settings https://dashboard.aircall.io/integrations/api-keys
	APIID string `json:"api_id"`
	// App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
	APIToken   string               `json:"api_token"`
	sourceType SourceAircallAircall `const:"aircall" json:"sourceType"`
	// Date time filter for incremental filter, Specify which date to extract from.
	StartDate time.Time `json:"start_date"`
}

func (s SourceAircall) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceAircall) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceAircall) GetAPIID() string {
	if o == nil {
		return ""
	}
	return o.APIID
}

func (o *SourceAircall) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceAircall) GetSourceType() SourceAircallAircall {
	return SourceAircallAircallAircall
}

func (o *SourceAircall) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
