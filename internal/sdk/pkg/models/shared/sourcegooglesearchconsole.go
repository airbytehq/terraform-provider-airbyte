// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthTypeService SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication struct {
	authType SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType `const:"Service" json:"auth_type"`
	// The email of the user which has permissions to access the Google Workspace Admin APIs.
	Email string `json:"email"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

func (s SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) GetAuthType() SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthType {
	return SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthTypeService
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) GetServiceAccountInfo() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccountInfo
}

type SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthTypeClient SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType = "Client"
)

func (e SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType) ToPointer() *SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType {
	return &e
}

func (e *SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType: %v", v)
	}
}

type SourceGoogleSearchConsoleAuthenticationTypeOAuth struct {
	// Access token for making authenticated requests. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	AccessToken *string                                                  `json:"access_token,omitempty"`
	authType    SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType `const:"Client" json:"auth_type"`
	// The client ID of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientID string `json:"client_id"`
	// The client secret of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleSearchConsoleAuthenticationTypeOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSearchConsoleAuthenticationTypeOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeOAuth) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeOAuth) GetAuthType() SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthType {
	return SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthTypeClient
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleSearchConsoleAuthenticationTypeOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleSearchConsoleAuthenticationTypeType string

const (
	SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth                           SourceGoogleSearchConsoleAuthenticationTypeType = "source-google-search-console_Authentication Type_OAuth"
	SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleAuthenticationTypeType = "source-google-search-console_Authentication Type_Service Account Key Authentication"
)

type SourceGoogleSearchConsoleAuthenticationType struct {
	SourceGoogleSearchConsoleAuthenticationTypeOAuth                           *SourceGoogleSearchConsoleAuthenticationTypeOAuth
	SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication *SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication

	Type SourceGoogleSearchConsoleAuthenticationTypeType
}

func CreateSourceGoogleSearchConsoleAuthenticationTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth(sourceGoogleSearchConsoleAuthenticationTypeOAuth SourceGoogleSearchConsoleAuthenticationTypeOAuth) SourceGoogleSearchConsoleAuthenticationType {
	typ := SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth

	return SourceGoogleSearchConsoleAuthenticationType{
		SourceGoogleSearchConsoleAuthenticationTypeOAuth: &sourceGoogleSearchConsoleAuthenticationTypeOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSearchConsoleAuthenticationTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication(sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication) SourceGoogleSearchConsoleAuthenticationType {
	typ := SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication

	return SourceGoogleSearchConsoleAuthenticationType{
		SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication: &sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSearchConsoleAuthenticationType) UnmarshalJSON(data []byte) error {

	sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication := new(SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication = sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication
		u.Type = SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleSearchConsoleAuthenticationTypeOAuth := new(SourceGoogleSearchConsoleAuthenticationTypeOAuth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSearchConsoleAuthenticationTypeOAuth, "", true, true); err == nil {
		u.SourceGoogleSearchConsoleAuthenticationTypeOAuth = sourceGoogleSearchConsoleAuthenticationTypeOAuth
		u.Type = SourceGoogleSearchConsoleAuthenticationTypeTypeSourceGoogleSearchConsoleAuthenticationTypeOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSearchConsoleAuthenticationType) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSearchConsoleAuthenticationTypeOAuth != nil {
		return utils.MarshalJSON(u.SourceGoogleSearchConsoleAuthenticationTypeOAuth, "", true)
	}

	if u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceGoogleSearchConsoleCustomReportConfigValidEnums - An enumeration of dimensions.
type SourceGoogleSearchConsoleCustomReportConfigValidEnums string

const (
	SourceGoogleSearchConsoleCustomReportConfigValidEnumsCountry SourceGoogleSearchConsoleCustomReportConfigValidEnums = "country"
	SourceGoogleSearchConsoleCustomReportConfigValidEnumsDate    SourceGoogleSearchConsoleCustomReportConfigValidEnums = "date"
	SourceGoogleSearchConsoleCustomReportConfigValidEnumsDevice  SourceGoogleSearchConsoleCustomReportConfigValidEnums = "device"
	SourceGoogleSearchConsoleCustomReportConfigValidEnumsPage    SourceGoogleSearchConsoleCustomReportConfigValidEnums = "page"
	SourceGoogleSearchConsoleCustomReportConfigValidEnumsQuery   SourceGoogleSearchConsoleCustomReportConfigValidEnums = "query"
)

func (e SourceGoogleSearchConsoleCustomReportConfigValidEnums) ToPointer() *SourceGoogleSearchConsoleCustomReportConfigValidEnums {
	return &e
}

func (e *SourceGoogleSearchConsoleCustomReportConfigValidEnums) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "country":
		fallthrough
	case "date":
		fallthrough
	case "device":
		fallthrough
	case "page":
		fallthrough
	case "query":
		*e = SourceGoogleSearchConsoleCustomReportConfigValidEnums(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleCustomReportConfigValidEnums: %v", v)
	}
}

type SourceGoogleSearchConsoleCustomReportConfig struct {
	// A list of dimensions (country, date, device, page, query)
	Dimensions []SourceGoogleSearchConsoleCustomReportConfigValidEnums `json:"dimensions"`
	// The name of the custom report, this name would be used as stream name
	Name string `json:"name"`
}

func (o *SourceGoogleSearchConsoleCustomReportConfig) GetDimensions() []SourceGoogleSearchConsoleCustomReportConfigValidEnums {
	if o == nil {
		return []SourceGoogleSearchConsoleCustomReportConfigValidEnums{}
	}
	return o.Dimensions
}

func (o *SourceGoogleSearchConsoleCustomReportConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// SourceGoogleSearchConsoleDataFreshness - If set to 'final', the returned data will include only finalized, stable data. If set to 'all', fresh data will be included. When using Incremental sync mode, we do not recommend setting this parameter to 'all' as it may cause data loss. More information can be found in our <a href='https://docs.airbyte.com/integrations/source/google-search-console'>full documentation</a>.
type SourceGoogleSearchConsoleDataFreshness string

const (
	SourceGoogleSearchConsoleDataFreshnessFinal SourceGoogleSearchConsoleDataFreshness = "final"
	SourceGoogleSearchConsoleDataFreshnessAll   SourceGoogleSearchConsoleDataFreshness = "all"
)

func (e SourceGoogleSearchConsoleDataFreshness) ToPointer() *SourceGoogleSearchConsoleDataFreshness {
	return &e
}

func (e *SourceGoogleSearchConsoleDataFreshness) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "final":
		fallthrough
	case "all":
		*e = SourceGoogleSearchConsoleDataFreshness(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleDataFreshness: %v", v)
	}
}

type SourceGoogleSearchConsoleGoogleSearchConsole string

const (
	SourceGoogleSearchConsoleGoogleSearchConsoleGoogleSearchConsole SourceGoogleSearchConsoleGoogleSearchConsole = "google-search-console"
)

func (e SourceGoogleSearchConsoleGoogleSearchConsole) ToPointer() *SourceGoogleSearchConsoleGoogleSearchConsole {
	return &e
}

func (e *SourceGoogleSearchConsoleGoogleSearchConsole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-search-console":
		*e = SourceGoogleSearchConsoleGoogleSearchConsole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSearchConsoleGoogleSearchConsole: %v", v)
	}
}

type SourceGoogleSearchConsole struct {
	Authorization SourceGoogleSearchConsoleAuthenticationType `json:"authorization"`
	// (DEPRCATED) A JSON array describing the custom reports you want to sync from Google Search Console. See our <a href='https://docs.airbyte.com/integrations/sources/google-search-console'>documentation</a> for more information on formulating custom reports.
	CustomReports *string `json:"custom_reports,omitempty"`
	// You can add your Custom Analytics report by creating one.
	CustomReportsArray []SourceGoogleSearchConsoleCustomReportConfig `json:"custom_reports_array,omitempty"`
	// If set to 'final', the returned data will include only finalized, stable data. If set to 'all', fresh data will be included. When using Incremental sync mode, we do not recommend setting this parameter to 'all' as it may cause data loss. More information can be found in our <a href='https://docs.airbyte.com/integrations/source/google-search-console'>full documentation</a>.
	DataState *SourceGoogleSearchConsoleDataFreshness `default:"final" json:"data_state"`
	// UTC date in the format YYYY-MM-DD. Any data created after this date will not be replicated. Must be greater or equal to the start date field. Leaving this field blank will replicate all data from the start date onward.
	EndDate *types.Date `json:"end_date,omitempty"`
	// The URLs of the website property attached to your GSC account. Learn more about properties <a href="https://support.google.com/webmasters/answer/34592?hl=en">here</a>.
	SiteUrls   []string                                     `json:"site_urls"`
	sourceType SourceGoogleSearchConsoleGoogleSearchConsole `const:"google-search-console" json:"sourceType"`
	// UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate *types.Date `default:"2021-01-01" json:"start_date"`
}

func (s SourceGoogleSearchConsole) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSearchConsole) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSearchConsole) GetAuthorization() SourceGoogleSearchConsoleAuthenticationType {
	if o == nil {
		return SourceGoogleSearchConsoleAuthenticationType{}
	}
	return o.Authorization
}

func (o *SourceGoogleSearchConsole) GetCustomReports() *string {
	if o == nil {
		return nil
	}
	return o.CustomReports
}

func (o *SourceGoogleSearchConsole) GetCustomReportsArray() []SourceGoogleSearchConsoleCustomReportConfig {
	if o == nil {
		return nil
	}
	return o.CustomReportsArray
}

func (o *SourceGoogleSearchConsole) GetDataState() *SourceGoogleSearchConsoleDataFreshness {
	if o == nil {
		return nil
	}
	return o.DataState
}

func (o *SourceGoogleSearchConsole) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceGoogleSearchConsole) GetSiteUrls() []string {
	if o == nil {
		return []string{}
	}
	return o.SiteUrls
}

func (o *SourceGoogleSearchConsole) GetSourceType() SourceGoogleSearchConsoleGoogleSearchConsole {
	return SourceGoogleSearchConsoleGoogleSearchConsoleGoogleSearchConsole
}

func (o *SourceGoogleSearchConsole) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
