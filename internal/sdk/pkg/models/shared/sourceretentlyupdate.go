// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType string

const (
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthTypeToken SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType = "Token"
)

func (e SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType) ToPointer() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType {
	return &e
}

func (e *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType: %v", v)
	}
}

// SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken - Choose how to authenticate to Retently
type SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken struct {
	// Retently API Token. See the <a href="https://app.retently.com/settings/api/tokens">docs</a> for more information on how to obtain this key.
	APIKey   string                                                                       `json:"api_key"`
	AuthType *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType `json:"auth_type,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken

func (c *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_key")
	delete(additionalFields, "auth_type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType string

const (
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeClient SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType = "Client"
)

func (e SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) ToPointer() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType {
	return &e
}

func (e *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType: %v", v)
	}
}

// SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth - Choose how to authenticate to Retently
type SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth struct {
	AuthType *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType `json:"auth_type,omitempty"`
	// The Client ID of your Retently developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Retently developer application.
	ClientSecret string `json:"client_secret"`
	// Retently Refresh Token which can be used to fetch new Bearer Tokens when the current one expires.
	RefreshToken string `json:"refresh_token"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth

func (c *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) UnmarshalJSON(bs []byte) error {
	data := _SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "auth_type")
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")
	delete(additionalFields, "refresh_token")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceRetentlyUpdateAuthenticationMechanismType string

const (
	SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyUpdateAuthenticationMechanismType = "source-retently-update_Authentication Mechanism_Authenticate via Retently (OAuth)"
	SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken     SourceRetentlyUpdateAuthenticationMechanismType = "source-retently-update_Authentication Mechanism_Authenticate with API Token"
)

type SourceRetentlyUpdateAuthenticationMechanism struct {
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken     *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken

	Type SourceRetentlyUpdateAuthenticationMechanismType
}

func CreateSourceRetentlyUpdateAuthenticationMechanismSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth(sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) SourceRetentlyUpdateAuthenticationMechanism {
	typ := SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth

	return SourceRetentlyUpdateAuthenticationMechanism{
		SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth: &sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth,
		Type: typ,
	}
}

func CreateSourceRetentlyUpdateAuthenticationMechanismSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken(sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) SourceRetentlyUpdateAuthenticationMechanism {
	typ := SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken

	return SourceRetentlyUpdateAuthenticationMechanism{
		SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken: &sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken,
		Type: typ,
	}
}

func (u *SourceRetentlyUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken := new(SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken); err == nil {
		u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken = sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken
		u.Type = SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken
		return nil
	}

	sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth := new(SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth); err == nil {
		u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth = sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
		u.Type = SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceRetentlyUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken != nil {
		return json.Marshal(u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken)
	}

	if u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		return json.Marshal(u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	}

	return nil, nil
}

type SourceRetentlyUpdate struct {
	// Choose how to authenticate to Retently
	Credentials *SourceRetentlyUpdateAuthenticationMechanism `json:"credentials,omitempty"`
}
