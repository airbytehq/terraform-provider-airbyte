// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType string

const (
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthTypeToken SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType = "Token"
)

func (e SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType) ToPointer() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType {
	return &e
}

func (e *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType: %v", v)
	}
}

// SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken - Choose how to authenticate to Retently
type SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Retently API Token. See the <a href="https://app.retently.com/settings/api/tokens">docs</a> for more information on how to obtain this key.
	APIKey   string                                                                       `json:"api_key"`
	authType *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType `const:"Token" json:"auth_type,omitempty"`
}

func (s SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) GetAuthType() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthType {
	return SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPITokenAuthTypeToken.ToPointer()
}

type SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType string

const (
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeClient SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType = "Client"
)

func (e SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) ToPointer() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType {
	return &e
}

func (e *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType: %v", v)
	}
}

// SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth - Choose how to authenticate to Retently
type SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth struct {
	AdditionalProperties interface{}                                                                      `additionalProperties:"true" json:"-"`
	authType             *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Retently developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Retently developer application.
	ClientSecret string `json:"client_secret"`
	// Retently Refresh Token which can be used to fetch new Bearer Tokens when the current one expires.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetAuthType() *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType {
	return SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeClient.ToPointer()
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceRetentlyUpdateAuthenticationMechanismType string

const (
	SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyUpdateAuthenticationMechanismType = "source-retently-update_Authentication Mechanism_Authenticate via Retently (OAuth)"
	SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken     SourceRetentlyUpdateAuthenticationMechanismType = "source-retently-update_Authentication Mechanism_Authenticate with API Token"
)

type SourceRetentlyUpdateAuthenticationMechanism struct {
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth *SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
	SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken     *SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken

	Type SourceRetentlyUpdateAuthenticationMechanismType
}

func CreateSourceRetentlyUpdateAuthenticationMechanismSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth(sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth) SourceRetentlyUpdateAuthenticationMechanism {
	typ := SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth

	return SourceRetentlyUpdateAuthenticationMechanism{
		SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth: &sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth,
		Type: typ,
	}
}

func CreateSourceRetentlyUpdateAuthenticationMechanismSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken(sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken) SourceRetentlyUpdateAuthenticationMechanism {
	typ := SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken

	return SourceRetentlyUpdateAuthenticationMechanism{
		SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken: &sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken,
		Type: typ,
	}
}

func (u *SourceRetentlyUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken := new(SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken, "", true, true); err == nil {
		u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken = sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken
		u.Type = SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken
		return nil
	}

	sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth := new(SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	if err := utils.UnmarshalJSON(data, &sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth, "", true, true); err == nil {
		u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth = sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
		u.Type = SourceRetentlyUpdateAuthenticationMechanismTypeSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceRetentlyUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		return utils.MarshalJSON(u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth, "", true)
	}

	if u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken != nil {
		return utils.MarshalJSON(u.SourceRetentlyUpdateAuthenticationMechanismAuthenticateWithAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceRetentlyUpdate struct {
	// Choose how to authenticate to Retently
	Credentials *SourceRetentlyUpdateAuthenticationMechanism `json:"credentials,omitempty"`
}

func (o *SourceRetentlyUpdate) GetCredentials() *SourceRetentlyUpdateAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}
