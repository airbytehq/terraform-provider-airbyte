// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceMondaySchemasAuthType string

const (
	SourceMondaySchemasAuthTypeAPIToken SourceMondaySchemasAuthType = "api_token"
)

func (e SourceMondaySchemasAuthType) ToPointer() *SourceMondaySchemasAuthType {
	return &e
}

func (e *SourceMondaySchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceMondaySchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMondaySchemasAuthType: %v", v)
	}
}

type SourceMondayAPIToken struct {
	// API Token for making authenticated requests.
	APIToken string                      `json:"api_token"`
	authType SourceMondaySchemasAuthType `const:"api_token" json:"auth_type"`
}

func (s SourceMondayAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMondayAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMondayAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceMondayAPIToken) GetAuthType() SourceMondaySchemasAuthType {
	return SourceMondaySchemasAuthTypeAPIToken
}

type SourceMondayAuthType string

const (
	SourceMondayAuthTypeOauth20 SourceMondayAuthType = "oauth2.0"
)

func (e SourceMondayAuthType) ToPointer() *SourceMondayAuthType {
	return &e
}

func (e *SourceMondayAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceMondayAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMondayAuthType: %v", v)
	}
}

type SourceMondayOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string               `json:"access_token"`
	authType    SourceMondayAuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
	// Slug/subdomain of the account, or the first part of the URL that comes before .monday.com
	Subdomain *string `default:"" json:"subdomain"`
}

func (s SourceMondayOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMondayOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMondayOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceMondayOAuth20) GetAuthType() SourceMondayAuthType {
	return SourceMondayAuthTypeOauth20
}

func (o *SourceMondayOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceMondayOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceMondayOAuth20) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}

type SourceMondayAuthorizationMethodType string

const (
	SourceMondayAuthorizationMethodTypeOAuth20  SourceMondayAuthorizationMethodType = "OAuth20"
	SourceMondayAuthorizationMethodTypeAPIToken SourceMondayAuthorizationMethodType = "APIToken"
)

type SourceMondayAuthorizationMethod struct {
	OAuth20  *SourceMondayOAuth20
	APIToken *SourceMondayAPIToken

	Type SourceMondayAuthorizationMethodType
}

func CreateSourceMondayAuthorizationMethodOAuth20(oAuth20 SourceMondayOAuth20) SourceMondayAuthorizationMethod {
	typ := SourceMondayAuthorizationMethodTypeOAuth20

	return SourceMondayAuthorizationMethod{
		OAuth20: &oAuth20,
		Type:    typ,
	}
}

func CreateSourceMondayAuthorizationMethodAPIToken(apiToken SourceMondayAPIToken) SourceMondayAuthorizationMethod {
	typ := SourceMondayAuthorizationMethodTypeAPIToken

	return SourceMondayAuthorizationMethod{
		APIToken: &apiToken,
		Type:     typ,
	}
}

func (u *SourceMondayAuthorizationMethod) UnmarshalJSON(data []byte) error {

	apiToken := new(SourceMondayAPIToken)
	if err := utils.UnmarshalJSON(data, &apiToken, "", true, true); err == nil {
		u.APIToken = apiToken
		u.Type = SourceMondayAuthorizationMethodTypeAPIToken
		return nil
	}

	oAuth20 := new(SourceMondayOAuth20)
	if err := utils.UnmarshalJSON(data, &oAuth20, "", true, true); err == nil {
		u.OAuth20 = oAuth20
		u.Type = SourceMondayAuthorizationMethodTypeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMondayAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.OAuth20 != nil {
		return utils.MarshalJSON(u.OAuth20, "", true)
	}

	if u.APIToken != nil {
		return utils.MarshalJSON(u.APIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Monday string

const (
	MondayMonday Monday = "monday"
)

func (e Monday) ToPointer() *Monday {
	return &e
}

func (e *Monday) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		*e = Monday(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Monday: %v", v)
	}
}

type SourceMonday struct {
	Credentials *SourceMondayAuthorizationMethod `json:"credentials,omitempty"`
	sourceType  Monday                           `const:"monday" json:"sourceType"`
}

func (s SourceMonday) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMonday) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMonday) GetCredentials() *SourceMondayAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceMonday) GetSourceType() Monday {
	return MondayMonday
}
