// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType string

const (
	SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthTypeAccessToken SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType = "access_token"
)

func (e SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType) ToPointer() *SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType {
	return &e
}

func (e *SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType: %v", v)
	}
}

type SourceTypeformUpdateAuthorizationMethodPrivateToken struct {
	// Log into your Typeform account and then generate a personal Access Token.
	AccessToken string                                                       `json:"access_token"`
	authType    *SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType `const:"access_token" json:"auth_type,omitempty"`
}

func (s SourceTypeformUpdateAuthorizationMethodPrivateToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceTypeformUpdateAuthorizationMethodPrivateToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceTypeformUpdateAuthorizationMethodPrivateToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceTypeformUpdateAuthorizationMethodPrivateToken) GetAuthType() *SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthType {
	return SourceTypeformUpdateAuthorizationMethodPrivateTokenAuthTypeAccessToken.ToPointer()
}

type SourceTypeformUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceTypeformUpdateAuthorizationMethodOAuth20AuthTypeOauth20 SourceTypeformUpdateAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceTypeformUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceTypeformUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceTypeformUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceTypeformUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTypeformUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceTypeformUpdateAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                                  `json:"access_token"`
	authType    *SourceTypeformUpdateAuthorizationMethodOAuth20AuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// The Client ID of the Typeform developer application.
	ClientID string `json:"client_id"`
	// The Client Secret the Typeform developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceTypeformUpdateAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceTypeformUpdateAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetAuthType() *SourceTypeformUpdateAuthorizationMethodOAuth20AuthType {
	return SourceTypeformUpdateAuthorizationMethodOAuth20AuthTypeOauth20.ToPointer()
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceTypeformUpdateAuthorizationMethodOAuth20) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceTypeformUpdateAuthorizationMethodType string

const (
	SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodOAuth20      SourceTypeformUpdateAuthorizationMethodType = "source-typeform-update_Authorization Method_OAuth2.0"
	SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodPrivateToken SourceTypeformUpdateAuthorizationMethodType = "source-typeform-update_Authorization Method_Private Token"
)

type SourceTypeformUpdateAuthorizationMethod struct {
	SourceTypeformUpdateAuthorizationMethodOAuth20      *SourceTypeformUpdateAuthorizationMethodOAuth20
	SourceTypeformUpdateAuthorizationMethodPrivateToken *SourceTypeformUpdateAuthorizationMethodPrivateToken

	Type SourceTypeformUpdateAuthorizationMethodType
}

func CreateSourceTypeformUpdateAuthorizationMethodSourceTypeformUpdateAuthorizationMethodOAuth20(sourceTypeformUpdateAuthorizationMethodOAuth20 SourceTypeformUpdateAuthorizationMethodOAuth20) SourceTypeformUpdateAuthorizationMethod {
	typ := SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodOAuth20

	return SourceTypeformUpdateAuthorizationMethod{
		SourceTypeformUpdateAuthorizationMethodOAuth20: &sourceTypeformUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceTypeformUpdateAuthorizationMethodSourceTypeformUpdateAuthorizationMethodPrivateToken(sourceTypeformUpdateAuthorizationMethodPrivateToken SourceTypeformUpdateAuthorizationMethodPrivateToken) SourceTypeformUpdateAuthorizationMethod {
	typ := SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodPrivateToken

	return SourceTypeformUpdateAuthorizationMethod{
		SourceTypeformUpdateAuthorizationMethodPrivateToken: &sourceTypeformUpdateAuthorizationMethodPrivateToken,
		Type: typ,
	}
}

func (u *SourceTypeformUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceTypeformUpdateAuthorizationMethodPrivateToken := new(SourceTypeformUpdateAuthorizationMethodPrivateToken)
	if err := utils.UnmarshalJSON(data, &sourceTypeformUpdateAuthorizationMethodPrivateToken, "", true, true); err == nil {
		u.SourceTypeformUpdateAuthorizationMethodPrivateToken = sourceTypeformUpdateAuthorizationMethodPrivateToken
		u.Type = SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodPrivateToken
		return nil
	}

	sourceTypeformUpdateAuthorizationMethodOAuth20 := new(SourceTypeformUpdateAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceTypeformUpdateAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceTypeformUpdateAuthorizationMethodOAuth20 = sourceTypeformUpdateAuthorizationMethodOAuth20
		u.Type = SourceTypeformUpdateAuthorizationMethodTypeSourceTypeformUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceTypeformUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceTypeformUpdateAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceTypeformUpdateAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceTypeformUpdateAuthorizationMethodPrivateToken != nil {
		return utils.MarshalJSON(u.SourceTypeformUpdateAuthorizationMethodPrivateToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceTypeformUpdate struct {
	Credentials SourceTypeformUpdateAuthorizationMethod `json:"credentials"`
	// When this parameter is set, the connector will replicate data only from the input forms. Otherwise, all forms in your Typeform account will be replicated. You can find form IDs in your form URLs. For example, in the URL "https://mysite.typeform.com/to/u6nXL7" the form_id is u6nXL7. You can find form URLs on Share panel
	FormIds []string `json:"form_ids,omitempty"`
	// The date from which you'd like to replicate data for Typeform API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
}

func (s SourceTypeformUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceTypeformUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceTypeformUpdate) GetCredentials() SourceTypeformUpdateAuthorizationMethod {
	if o == nil {
		return SourceTypeformUpdateAuthorizationMethod{}
	}
	return o.Credentials
}

func (o *SourceTypeformUpdate) GetFormIds() []string {
	if o == nil {
		return nil
	}
	return o.FormIds
}

func (o *SourceTypeformUpdate) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}
