// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceNotionAuthenticateUsingAccessTokenAuthType string

const (
	SourceNotionAuthenticateUsingAccessTokenAuthTypeToken SourceNotionAuthenticateUsingAccessTokenAuthType = "token"
)

func (e SourceNotionAuthenticateUsingAccessTokenAuthType) ToPointer() *SourceNotionAuthenticateUsingAccessTokenAuthType {
	return &e
}

func (e *SourceNotionAuthenticateUsingAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = SourceNotionAuthenticateUsingAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionAuthenticateUsingAccessTokenAuthType: %v", v)
	}
}

// SourceNotionAuthenticateUsingAccessToken - Pick an authentication method.
type SourceNotionAuthenticateUsingAccessToken struct {
	AuthType SourceNotionAuthenticateUsingAccessTokenAuthType `json:"auth_type"`
	// Notion API access token, see the <a href="https://developers.notion.com/docs/authorization">docs</a> for more information on how to obtain this token.
	Token string `json:"token"`
}

type SourceNotionAuthenticateUsingOAuth20AuthType string

const (
	SourceNotionAuthenticateUsingOAuth20AuthTypeOAuth20 SourceNotionAuthenticateUsingOAuth20AuthType = "OAuth2.0"
)

func (e SourceNotionAuthenticateUsingOAuth20AuthType) ToPointer() *SourceNotionAuthenticateUsingOAuth20AuthType {
	return &e
}

func (e *SourceNotionAuthenticateUsingOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = SourceNotionAuthenticateUsingOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionAuthenticateUsingOAuth20AuthType: %v", v)
	}
}

// SourceNotionAuthenticateUsingOAuth20 - Pick an authentication method.
type SourceNotionAuthenticateUsingOAuth20 struct {
	// Access Token is a token you received by complete the OauthWebFlow of Notion.
	AccessToken string                                       `json:"access_token"`
	AuthType    SourceNotionAuthenticateUsingOAuth20AuthType `json:"auth_type"`
	// The ClientID of your Notion integration.
	ClientID string `json:"client_id"`
	// The ClientSecret of your Notion integration.
	ClientSecret string `json:"client_secret"`
}

type SourceNotionAuthenticateUsingType string

const (
	SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingOAuth20     SourceNotionAuthenticateUsingType = "source-notion_Authenticate using_OAuth2.0"
	SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingAccessToken SourceNotionAuthenticateUsingType = "source-notion_Authenticate using_Access Token"
)

type SourceNotionAuthenticateUsing struct {
	SourceNotionAuthenticateUsingOAuth20     *SourceNotionAuthenticateUsingOAuth20
	SourceNotionAuthenticateUsingAccessToken *SourceNotionAuthenticateUsingAccessToken

	Type SourceNotionAuthenticateUsingType
}

func CreateSourceNotionAuthenticateUsingSourceNotionAuthenticateUsingOAuth20(sourceNotionAuthenticateUsingOAuth20 SourceNotionAuthenticateUsingOAuth20) SourceNotionAuthenticateUsing {
	typ := SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingOAuth20

	return SourceNotionAuthenticateUsing{
		SourceNotionAuthenticateUsingOAuth20: &sourceNotionAuthenticateUsingOAuth20,
		Type:                                 typ,
	}
}

func CreateSourceNotionAuthenticateUsingSourceNotionAuthenticateUsingAccessToken(sourceNotionAuthenticateUsingAccessToken SourceNotionAuthenticateUsingAccessToken) SourceNotionAuthenticateUsing {
	typ := SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingAccessToken

	return SourceNotionAuthenticateUsing{
		SourceNotionAuthenticateUsingAccessToken: &sourceNotionAuthenticateUsingAccessToken,
		Type:                                     typ,
	}
}

func (u *SourceNotionAuthenticateUsing) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceNotionAuthenticateUsingAccessToken := new(SourceNotionAuthenticateUsingAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceNotionAuthenticateUsingAccessToken); err == nil {
		u.SourceNotionAuthenticateUsingAccessToken = sourceNotionAuthenticateUsingAccessToken
		u.Type = SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingAccessToken
		return nil
	}

	sourceNotionAuthenticateUsingOAuth20 := new(SourceNotionAuthenticateUsingOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceNotionAuthenticateUsingOAuth20); err == nil {
		u.SourceNotionAuthenticateUsingOAuth20 = sourceNotionAuthenticateUsingOAuth20
		u.Type = SourceNotionAuthenticateUsingTypeSourceNotionAuthenticateUsingOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceNotionAuthenticateUsing) MarshalJSON() ([]byte, error) {
	if u.SourceNotionAuthenticateUsingAccessToken != nil {
		return json.Marshal(u.SourceNotionAuthenticateUsingAccessToken)
	}

	if u.SourceNotionAuthenticateUsingOAuth20 != nil {
		return json.Marshal(u.SourceNotionAuthenticateUsingOAuth20)
	}

	return nil, nil
}

type SourceNotionNotion string

const (
	SourceNotionNotionNotion SourceNotionNotion = "notion"
)

func (e SourceNotionNotion) ToPointer() *SourceNotionNotion {
	return &e
}

func (e *SourceNotionNotion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "notion":
		*e = SourceNotionNotion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceNotionNotion: %v", v)
	}
}

type SourceNotion struct {
	// Pick an authentication method.
	Credentials *SourceNotionAuthenticateUsing `json:"credentials,omitempty"`
	SourceType  SourceNotionNotion             `json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}
