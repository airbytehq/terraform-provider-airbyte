// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskSupportAuthenticationAPITokenCredentials string

const (
	SourceZendeskSupportAuthenticationAPITokenCredentialsAPIToken SourceZendeskSupportAuthenticationAPITokenCredentials = "api_token"
)

func (e SourceZendeskSupportAuthenticationAPITokenCredentials) ToPointer() *SourceZendeskSupportAuthenticationAPITokenCredentials {
	return &e
}

func (e *SourceZendeskSupportAuthenticationAPITokenCredentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSupportAuthenticationAPITokenCredentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportAuthenticationAPITokenCredentials: %v", v)
	}
}

// SourceZendeskSupportAuthenticationAPIToken - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportAuthenticationAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The value of the API token generated. See our <a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide">full documentation</a> for more information on generating this token.
	APIToken    string                                                 `json:"api_token"`
	credentials *SourceZendeskSupportAuthenticationAPITokenCredentials `const:"api_token" json:"credentials,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`
}

func (s SourceZendeskSupportAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupportAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupportAuthenticationAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskSupportAuthenticationAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceZendeskSupportAuthenticationAPIToken) GetCredentials() *SourceZendeskSupportAuthenticationAPITokenCredentials {
	return SourceZendeskSupportAuthenticationAPITokenCredentialsAPIToken.ToPointer()
}

func (o *SourceZendeskSupportAuthenticationAPIToken) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type SourceZendeskSupportAuthenticationOAuth20Credentials string

const (
	SourceZendeskSupportAuthenticationOAuth20CredentialsOauth20 SourceZendeskSupportAuthenticationOAuth20Credentials = "oauth2.0"
)

func (e SourceZendeskSupportAuthenticationOAuth20Credentials) ToPointer() *SourceZendeskSupportAuthenticationOAuth20Credentials {
	return &e
}

func (e *SourceZendeskSupportAuthenticationOAuth20Credentials) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSupportAuthenticationOAuth20Credentials(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportAuthenticationOAuth20Credentials: %v", v)
	}
}

// SourceZendeskSupportAuthenticationOAuth20 - Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
type SourceZendeskSupportAuthenticationOAuth20 struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The OAuth access token. See the <a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/">Zendesk docs</a> for more information on generating this token.
	AccessToken string `json:"access_token"`
	// The OAuth client's ID. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientID *string `json:"client_id,omitempty"`
	// The OAuth client secret. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
	ClientSecret *string                                               `json:"client_secret,omitempty"`
	credentials  *SourceZendeskSupportAuthenticationOAuth20Credentials `const:"oauth2.0" json:"credentials,omitempty"`
}

func (s SourceZendeskSupportAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupportAuthenticationOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupportAuthenticationOAuth20) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceZendeskSupportAuthenticationOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceZendeskSupportAuthenticationOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceZendeskSupportAuthenticationOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourceZendeskSupportAuthenticationOAuth20) GetCredentials() *SourceZendeskSupportAuthenticationOAuth20Credentials {
	return SourceZendeskSupportAuthenticationOAuth20CredentialsOauth20.ToPointer()
}

type SourceZendeskSupportAuthenticationType string

const (
	SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20  SourceZendeskSupportAuthenticationType = "source-zendesk-support_Authentication_OAuth2.0"
	SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken SourceZendeskSupportAuthenticationType = "source-zendesk-support_Authentication_API Token"
)

type SourceZendeskSupportAuthentication struct {
	SourceZendeskSupportAuthenticationOAuth20  *SourceZendeskSupportAuthenticationOAuth20
	SourceZendeskSupportAuthenticationAPIToken *SourceZendeskSupportAuthenticationAPIToken

	Type SourceZendeskSupportAuthenticationType
}

func CreateSourceZendeskSupportAuthenticationSourceZendeskSupportAuthenticationOAuth20(sourceZendeskSupportAuthenticationOAuth20 SourceZendeskSupportAuthenticationOAuth20) SourceZendeskSupportAuthentication {
	typ := SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20

	return SourceZendeskSupportAuthentication{
		SourceZendeskSupportAuthenticationOAuth20: &sourceZendeskSupportAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSupportAuthenticationSourceZendeskSupportAuthenticationAPIToken(sourceZendeskSupportAuthenticationAPIToken SourceZendeskSupportAuthenticationAPIToken) SourceZendeskSupportAuthentication {
	typ := SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken

	return SourceZendeskSupportAuthentication{
		SourceZendeskSupportAuthenticationAPIToken: &sourceZendeskSupportAuthenticationAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSupportAuthentication) UnmarshalJSON(data []byte) error {

	sourceZendeskSupportAuthenticationAPIToken := new(SourceZendeskSupportAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSupportAuthenticationAPIToken, "", true, true); err == nil {
		u.SourceZendeskSupportAuthenticationAPIToken = sourceZendeskSupportAuthenticationAPIToken
		u.Type = SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken
		return nil
	}

	sourceZendeskSupportAuthenticationOAuth20 := new(SourceZendeskSupportAuthenticationOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceZendeskSupportAuthenticationOAuth20, "", true, true); err == nil {
		u.SourceZendeskSupportAuthenticationOAuth20 = sourceZendeskSupportAuthenticationOAuth20
		u.Type = SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSupportAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSupportAuthenticationOAuth20 != nil {
		return utils.MarshalJSON(u.SourceZendeskSupportAuthenticationOAuth20, "", true)
	}

	if u.SourceZendeskSupportAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.SourceZendeskSupportAuthenticationAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceZendeskSupportZendeskSupport string

const (
	SourceZendeskSupportZendeskSupportZendeskSupport SourceZendeskSupportZendeskSupport = "zendesk-support"
)

func (e SourceZendeskSupportZendeskSupport) ToPointer() *SourceZendeskSupportZendeskSupport {
	return &e
}

func (e *SourceZendeskSupportZendeskSupport) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-support":
		*e = SourceZendeskSupportZendeskSupport(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportZendeskSupport: %v", v)
	}
}

type SourceZendeskSupport struct {
	// Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
	Credentials *SourceZendeskSupportAuthentication `json:"credentials,omitempty"`
	// Makes each stream read a single page of data.
	IgnorePagination *bool                              `default:"false" json:"ignore_pagination"`
	sourceType       SourceZendeskSupportZendeskSupport `const:"zendesk-support" json:"sourceType"`
	// The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}

func (s SourceZendeskSupport) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceZendeskSupport) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceZendeskSupport) GetCredentials() *SourceZendeskSupportAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceZendeskSupport) GetIgnorePagination() *bool {
	if o == nil {
		return nil
	}
	return o.IgnorePagination
}

func (o *SourceZendeskSupport) GetSourceType() SourceZendeskSupportZendeskSupport {
	return SourceZendeskSupportZendeskSupportZendeskSupport
}

func (o *SourceZendeskSupport) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceZendeskSupport) GetSubdomain() string {
	if o == nil {
		return ""
	}
	return o.Subdomain
}
