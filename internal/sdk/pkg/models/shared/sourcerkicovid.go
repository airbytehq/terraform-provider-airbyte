// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceRkiCovidRkiCovid string

const (
	SourceRkiCovidRkiCovidRkiCovid SourceRkiCovidRkiCovid = "rki-covid"
)

func (e SourceRkiCovidRkiCovid) ToPointer() *SourceRkiCovidRkiCovid {
	return &e
}

func (e *SourceRkiCovidRkiCovid) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rki-covid":
		*e = SourceRkiCovidRkiCovid(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRkiCovidRkiCovid: %v", v)
	}
}

type SourceRkiCovid struct {
	sourceType SourceRkiCovidRkiCovid `const:"rki-covid" json:"sourceType"`
	// UTC date in the format 2017-01-25. Any data before this date will not be replicated.
	StartDate string `json:"start_date"`
}

func (s SourceRkiCovid) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRkiCovid) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceRkiCovid) GetSourceType() SourceRkiCovidRkiCovid {
	return SourceRkiCovidRkiCovidRkiCovid
}

func (o *SourceRkiCovid) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
