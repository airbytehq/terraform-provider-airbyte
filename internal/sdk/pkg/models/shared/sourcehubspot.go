// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// SourceHubspotAuthenticationPrivateAppAuthType - Name of the credentials set
type SourceHubspotAuthenticationPrivateAppAuthType string

const (
	SourceHubspotAuthenticationPrivateAppAuthTypePrivateAppCredentials SourceHubspotAuthenticationPrivateAppAuthType = "Private App Credentials"
)

func (e SourceHubspotAuthenticationPrivateAppAuthType) ToPointer() *SourceHubspotAuthenticationPrivateAppAuthType {
	return &e
}

func (e *SourceHubspotAuthenticationPrivateAppAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Private App Credentials":
		*e = SourceHubspotAuthenticationPrivateAppAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHubspotAuthenticationPrivateAppAuthType: %v", v)
	}
}

// SourceHubspotAuthenticationPrivateApp - Choose how to authenticate to HubSpot.
type SourceHubspotAuthenticationPrivateApp struct {
	// HubSpot Access token. See the <a href="https://developers.hubspot.com/docs/api/private-apps">Hubspot docs</a> if you need help finding this token.
	AccessToken string `json:"access_token"`
	// Name of the credentials set
	credentialsTitle SourceHubspotAuthenticationPrivateAppAuthType `const:"Private App Credentials" json:"credentials_title"`
}

func (s SourceHubspotAuthenticationPrivateApp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspotAuthenticationPrivateApp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspotAuthenticationPrivateApp) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceHubspotAuthenticationPrivateApp) GetCredentialsTitle() SourceHubspotAuthenticationPrivateAppAuthType {
	return SourceHubspotAuthenticationPrivateAppAuthTypePrivateAppCredentials
}

// SourceHubspotAuthenticationOAuthAuthType - Name of the credentials
type SourceHubspotAuthenticationOAuthAuthType string

const (
	SourceHubspotAuthenticationOAuthAuthTypeOAuthCredentials SourceHubspotAuthenticationOAuthAuthType = "OAuth Credentials"
)

func (e SourceHubspotAuthenticationOAuthAuthType) ToPointer() *SourceHubspotAuthenticationOAuthAuthType {
	return &e
}

func (e *SourceHubspotAuthenticationOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth Credentials":
		*e = SourceHubspotAuthenticationOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHubspotAuthenticationOAuthAuthType: %v", v)
	}
}

// SourceHubspotAuthenticationOAuth - Choose how to authenticate to HubSpot.
type SourceHubspotAuthenticationOAuth struct {
	// The Client ID of your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this ID.
	ClientID string `json:"client_id"`
	// The client secret for your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this secret.
	ClientSecret string `json:"client_secret"`
	// Name of the credentials
	credentialsTitle SourceHubspotAuthenticationOAuthAuthType `const:"OAuth Credentials" json:"credentials_title"`
	// Refresh token to renew an expired access token. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceHubspotAuthenticationOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspotAuthenticationOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspotAuthenticationOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceHubspotAuthenticationOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceHubspotAuthenticationOAuth) GetCredentialsTitle() SourceHubspotAuthenticationOAuthAuthType {
	return SourceHubspotAuthenticationOAuthAuthTypeOAuthCredentials
}

func (o *SourceHubspotAuthenticationOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceHubspotAuthenticationType string

const (
	SourceHubspotAuthenticationTypeSourceHubspotAuthenticationOAuth      SourceHubspotAuthenticationType = "source-hubspot_Authentication_OAuth"
	SourceHubspotAuthenticationTypeSourceHubspotAuthenticationPrivateApp SourceHubspotAuthenticationType = "source-hubspot_Authentication_Private App"
)

type SourceHubspotAuthentication struct {
	SourceHubspotAuthenticationOAuth      *SourceHubspotAuthenticationOAuth
	SourceHubspotAuthenticationPrivateApp *SourceHubspotAuthenticationPrivateApp

	Type SourceHubspotAuthenticationType
}

func CreateSourceHubspotAuthenticationSourceHubspotAuthenticationOAuth(sourceHubspotAuthenticationOAuth SourceHubspotAuthenticationOAuth) SourceHubspotAuthentication {
	typ := SourceHubspotAuthenticationTypeSourceHubspotAuthenticationOAuth

	return SourceHubspotAuthentication{
		SourceHubspotAuthenticationOAuth: &sourceHubspotAuthenticationOAuth,
		Type:                             typ,
	}
}

func CreateSourceHubspotAuthenticationSourceHubspotAuthenticationPrivateApp(sourceHubspotAuthenticationPrivateApp SourceHubspotAuthenticationPrivateApp) SourceHubspotAuthentication {
	typ := SourceHubspotAuthenticationTypeSourceHubspotAuthenticationPrivateApp

	return SourceHubspotAuthentication{
		SourceHubspotAuthenticationPrivateApp: &sourceHubspotAuthenticationPrivateApp,
		Type:                                  typ,
	}
}

func (u *SourceHubspotAuthentication) UnmarshalJSON(data []byte) error {

	sourceHubspotAuthenticationPrivateApp := new(SourceHubspotAuthenticationPrivateApp)
	if err := utils.UnmarshalJSON(data, &sourceHubspotAuthenticationPrivateApp, "", true, true); err == nil {
		u.SourceHubspotAuthenticationPrivateApp = sourceHubspotAuthenticationPrivateApp
		u.Type = SourceHubspotAuthenticationTypeSourceHubspotAuthenticationPrivateApp
		return nil
	}

	sourceHubspotAuthenticationOAuth := new(SourceHubspotAuthenticationOAuth)
	if err := utils.UnmarshalJSON(data, &sourceHubspotAuthenticationOAuth, "", true, true); err == nil {
		u.SourceHubspotAuthenticationOAuth = sourceHubspotAuthenticationOAuth
		u.Type = SourceHubspotAuthenticationTypeSourceHubspotAuthenticationOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceHubspotAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceHubspotAuthenticationOAuth != nil {
		return utils.MarshalJSON(u.SourceHubspotAuthenticationOAuth, "", true)
	}

	if u.SourceHubspotAuthenticationPrivateApp != nil {
		return utils.MarshalJSON(u.SourceHubspotAuthenticationPrivateApp, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceHubspotHubspot string

const (
	SourceHubspotHubspotHubspot SourceHubspotHubspot = "hubspot"
)

func (e SourceHubspotHubspot) ToPointer() *SourceHubspotHubspot {
	return &e
}

func (e *SourceHubspotHubspot) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hubspot":
		*e = SourceHubspotHubspot(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHubspotHubspot: %v", v)
	}
}

type SourceHubspot struct {
	// Choose how to authenticate to HubSpot.
	Credentials SourceHubspotAuthentication `json:"credentials"`
	sourceType  SourceHubspotHubspot        `const:"hubspot" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceHubspot) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHubspot) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceHubspot) GetCredentials() SourceHubspotAuthentication {
	if o == nil {
		return SourceHubspotAuthentication{}
	}
	return o.Credentials
}

func (o *SourceHubspot) GetSourceType() SourceHubspotHubspot {
	return SourceHubspotHubspotHubspot
}

func (o *SourceHubspot) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
