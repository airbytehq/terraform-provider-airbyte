// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType string

const (
	SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeToken SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType = "Token"
)

func (e SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType) ToPointer() *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType {
	return &e
}

func (e *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType: %v", v)
	}
}

// SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken - Choose how to authenticate to Harvest.
type SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Log into Harvest and then create new <a href="https://id.getharvest.com/developers"> personal access token</a>.
	APIToken string                                                                                 `json:"api_token"`
	authType *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType `const:"Token" json:"auth_type,omitempty"`
}

func (s SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAuthType() *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType {
	return SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeToken.ToPointer()
}

type SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType string

const (
	SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeClient SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType = "Client"
)

func (e SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType) ToPointer() *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType {
	return &e
}

func (e *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType: %v", v)
	}
}

// SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth - Choose how to authenticate to Harvest.
type SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth struct {
	AdditionalProperties interface{}                                                                    `additionalProperties:"true" json:"-"`
	authType             *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Harvest developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Harvest developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) GetAuthType() *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType {
	return SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeClient.ToPointer()
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceHarvestUpdateAuthenticationMechanismType string

const (
	SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth         SourceHarvestUpdateAuthenticationMechanismType = "source-harvest-update_Authentication mechanism_Authenticate via Harvest (OAuth)"
	SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestUpdateAuthenticationMechanismType = "source-harvest-update_Authentication mechanism_Authenticate with Personal Access Token"
)

type SourceHarvestUpdateAuthenticationMechanism struct {
	SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth         *SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth
	SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken *SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken

	Type SourceHarvestUpdateAuthenticationMechanismType
}

func CreateSourceHarvestUpdateAuthenticationMechanismSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth(sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth) SourceHarvestUpdateAuthenticationMechanism {
	typ := SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth

	return SourceHarvestUpdateAuthenticationMechanism{
		SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth: &sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth,
		Type: typ,
	}
}

func CreateSourceHarvestUpdateAuthenticationMechanismSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken(sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken) SourceHarvestUpdateAuthenticationMechanism {
	typ := SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken

	return SourceHarvestUpdateAuthenticationMechanism{
		SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken: &sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceHarvestUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken := new(SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	if err := utils.UnmarshalJSON(data, &sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken, "", true, true); err == nil {
		u.SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken = sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken
		u.Type = SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken
		return nil
	}

	sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth := new(SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth)
	if err := utils.UnmarshalJSON(data, &sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth, "", true, true); err == nil {
		u.SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth = sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth
		u.Type = SourceHarvestUpdateAuthenticationMechanismTypeSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceHarvestUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
		return utils.MarshalJSON(u.SourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth, "", true)
	}

	if u.SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		return utils.MarshalJSON(u.SourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceHarvestUpdate struct {
	// Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
	AccountID string `json:"account_id"`
	// Choose how to authenticate to Harvest.
	Credentials *SourceHarvestUpdateAuthenticationMechanism `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *time.Time `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	ReplicationStartDate time.Time `json:"replication_start_date"`
}

func (s SourceHarvestUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestUpdate) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *SourceHarvestUpdate) GetCredentials() *SourceHarvestUpdateAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceHarvestUpdate) GetReplicationEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationEndDate
}

func (o *SourceHarvestUpdate) GetReplicationStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ReplicationStartDate
}
