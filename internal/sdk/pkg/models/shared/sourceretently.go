// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType string

const (
	SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeToken SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType = "Token"
)

func (e SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType) ToPointer() *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType {
	return &e
}

func (e *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType: %v", v)
	}
}

// SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken - Choose how to authenticate to Retently
type SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Retently API Token. See the <a href="https://app.retently.com/settings/api/tokens">docs</a> for more information on how to obtain this key.
	APIKey   string                                                                 `json:"api_key"`
	authType *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType `const:"Token" json:"auth_type,omitempty"`
}

func (s SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) GetAuthType() *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthType {
	return SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeToken.ToPointer()
}

type SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType string

const (
	SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeClient SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType = "Client"
)

func (e SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) ToPointer() *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType {
	return &e
}

func (e *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType: %v", v)
	}
}

// SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth - Choose how to authenticate to Retently
type SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth struct {
	AdditionalProperties interface{}                                                                `additionalProperties:"true" json:"-"`
	authType             *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Retently developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Retently developer application.
	ClientSecret string `json:"client_secret"`
	// Retently Refresh Token which can be used to fetch new Bearer Tokens when the current one expires.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetAuthType() *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthType {
	return SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeClient.ToPointer()
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceRetentlyAuthenticationMechanismType string

const (
	SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyAuthenticationMechanismType = "source-retently_Authentication Mechanism_Authenticate via Retently (OAuth)"
	SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken     SourceRetentlyAuthenticationMechanismType = "source-retently_Authentication Mechanism_Authenticate with API Token"
)

type SourceRetentlyAuthenticationMechanism struct {
	SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
	SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken     *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken

	Type SourceRetentlyAuthenticationMechanismType
}

func CreateSourceRetentlyAuthenticationMechanismSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth(sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) SourceRetentlyAuthenticationMechanism {
	typ := SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth

	return SourceRetentlyAuthenticationMechanism{
		SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth: &sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth,
		Type: typ,
	}
}

func CreateSourceRetentlyAuthenticationMechanismSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken(sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) SourceRetentlyAuthenticationMechanism {
	typ := SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken

	return SourceRetentlyAuthenticationMechanism{
		SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken: &sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken,
		Type: typ,
	}
}

func (u *SourceRetentlyAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken := new(SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken, "", true, true); err == nil {
		u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken = sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
		u.Type = SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
		return nil
	}

	sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth := new(SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	if err := utils.UnmarshalJSON(data, &sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth, "", true, true); err == nil {
		u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth = sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
		u.Type = SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceRetentlyAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		return utils.MarshalJSON(u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth, "", true)
	}

	if u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
		return utils.MarshalJSON(u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceRetentlyRetently string

const (
	SourceRetentlyRetentlyRetently SourceRetentlyRetently = "retently"
)

func (e SourceRetentlyRetently) ToPointer() *SourceRetentlyRetently {
	return &e
}

func (e *SourceRetentlyRetently) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retently":
		*e = SourceRetentlyRetently(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyRetently: %v", v)
	}
}

type SourceRetently struct {
	// Choose how to authenticate to Retently
	Credentials *SourceRetentlyAuthenticationMechanism `json:"credentials,omitempty"`
	sourceType  *SourceRetentlyRetently                `const:"retently" json:"sourceType,omitempty"`
}

func (s SourceRetently) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceRetently) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceRetently) GetCredentials() *SourceRetentlyAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceRetently) GetSourceType() *SourceRetentlyRetently {
	return SourceRetentlyRetentlyRetently.ToPointer()
}
