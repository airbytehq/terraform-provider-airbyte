// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMondayUpdateAuthorizationMethodAPITokenAuthType string

const (
	SourceMondayUpdateAuthorizationMethodAPITokenAuthTypeAPIToken SourceMondayUpdateAuthorizationMethodAPITokenAuthType = "api_token"
)

func (e SourceMondayUpdateAuthorizationMethodAPITokenAuthType) ToPointer() *SourceMondayUpdateAuthorizationMethodAPITokenAuthType {
	return &e
}

func (e *SourceMondayUpdateAuthorizationMethodAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceMondayUpdateAuthorizationMethodAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMondayUpdateAuthorizationMethodAPITokenAuthType: %v", v)
	}
}

type SourceMondayUpdateAuthorizationMethodAPIToken struct {
	// API Token for making authenticated requests.
	APIToken string                                                `json:"api_token"`
	authType SourceMondayUpdateAuthorizationMethodAPITokenAuthType `const:"api_token" json:"auth_type"`
}

func (s SourceMondayUpdateAuthorizationMethodAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMondayUpdateAuthorizationMethodAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMondayUpdateAuthorizationMethodAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceMondayUpdateAuthorizationMethodAPIToken) GetAuthType() SourceMondayUpdateAuthorizationMethodAPITokenAuthType {
	return SourceMondayUpdateAuthorizationMethodAPITokenAuthTypeAPIToken
}

type SourceMondayUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceMondayUpdateAuthorizationMethodOAuth20AuthTypeOauth20 SourceMondayUpdateAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceMondayUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceMondayUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceMondayUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceMondayUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMondayUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceMondayUpdateAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                               `json:"access_token"`
	authType    SourceMondayUpdateAuthorizationMethodOAuth20AuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
	// Slug/subdomain of the account, or the first part of the URL that comes before .monday.com
	Subdomain *string `default:"" json:"subdomain"`
}

func (s SourceMondayUpdateAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMondayUpdateAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMondayUpdateAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceMondayUpdateAuthorizationMethodOAuth20) GetAuthType() SourceMondayUpdateAuthorizationMethodOAuth20AuthType {
	return SourceMondayUpdateAuthorizationMethodOAuth20AuthTypeOauth20
}

func (o *SourceMondayUpdateAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceMondayUpdateAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceMondayUpdateAuthorizationMethodOAuth20) GetSubdomain() *string {
	if o == nil {
		return nil
	}
	return o.Subdomain
}

type SourceMondayUpdateAuthorizationMethodType string

const (
	SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodOAuth20  SourceMondayUpdateAuthorizationMethodType = "source-monday-update_Authorization Method_OAuth2.0"
	SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodAPIToken SourceMondayUpdateAuthorizationMethodType = "source-monday-update_Authorization Method_API Token"
)

type SourceMondayUpdateAuthorizationMethod struct {
	SourceMondayUpdateAuthorizationMethodOAuth20  *SourceMondayUpdateAuthorizationMethodOAuth20
	SourceMondayUpdateAuthorizationMethodAPIToken *SourceMondayUpdateAuthorizationMethodAPIToken

	Type SourceMondayUpdateAuthorizationMethodType
}

func CreateSourceMondayUpdateAuthorizationMethodSourceMondayUpdateAuthorizationMethodOAuth20(sourceMondayUpdateAuthorizationMethodOAuth20 SourceMondayUpdateAuthorizationMethodOAuth20) SourceMondayUpdateAuthorizationMethod {
	typ := SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodOAuth20

	return SourceMondayUpdateAuthorizationMethod{
		SourceMondayUpdateAuthorizationMethodOAuth20: &sourceMondayUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceMondayUpdateAuthorizationMethodSourceMondayUpdateAuthorizationMethodAPIToken(sourceMondayUpdateAuthorizationMethodAPIToken SourceMondayUpdateAuthorizationMethodAPIToken) SourceMondayUpdateAuthorizationMethod {
	typ := SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodAPIToken

	return SourceMondayUpdateAuthorizationMethod{
		SourceMondayUpdateAuthorizationMethodAPIToken: &sourceMondayUpdateAuthorizationMethodAPIToken,
		Type: typ,
	}
}

func (u *SourceMondayUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceMondayUpdateAuthorizationMethodAPIToken := new(SourceMondayUpdateAuthorizationMethodAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceMondayUpdateAuthorizationMethodAPIToken, "", true, true); err == nil {
		u.SourceMondayUpdateAuthorizationMethodAPIToken = sourceMondayUpdateAuthorizationMethodAPIToken
		u.Type = SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodAPIToken
		return nil
	}

	sourceMondayUpdateAuthorizationMethodOAuth20 := new(SourceMondayUpdateAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceMondayUpdateAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceMondayUpdateAuthorizationMethodOAuth20 = sourceMondayUpdateAuthorizationMethodOAuth20
		u.Type = SourceMondayUpdateAuthorizationMethodTypeSourceMondayUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMondayUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceMondayUpdateAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceMondayUpdateAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceMondayUpdateAuthorizationMethodAPIToken != nil {
		return utils.MarshalJSON(u.SourceMondayUpdateAuthorizationMethodAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceMondayUpdate struct {
	Credentials *SourceMondayUpdateAuthorizationMethod `json:"credentials,omitempty"`
}

func (o *SourceMondayUpdate) GetCredentials() *SourceMondayUpdateAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}
