// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceGridlyGridly string

const (
	SourceGridlyGridlyGridly SourceGridlyGridly = "gridly"
)

func (e SourceGridlyGridly) ToPointer() *SourceGridlyGridly {
	return &e
}

func (e *SourceGridlyGridly) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gridly":
		*e = SourceGridlyGridly(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGridlyGridly: %v", v)
	}
}

type SourceGridly struct {
	APIKey string `json:"api_key"`
	// ID of a grid, or can be ID of a branch
	GridID     string             `json:"grid_id"`
	sourceType SourceGridlyGridly `const:"gridly" json:"sourceType"`
}

func (s SourceGridly) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGridly) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGridly) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceGridly) GetGridID() string {
	if o == nil {
		return ""
	}
	return o.GridID
}

func (o *SourceGridly) GetSourceType() SourceGridlyGridly {
	return SourceGridlyGridlyGridly
}
