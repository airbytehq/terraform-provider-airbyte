// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthTypeService SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication struct {
	AuthType SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType `json:"auth_type"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

type SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType string

const (
	SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthTypeClient SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType = "Client"
)

func (e SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType) ToPointer() *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth struct {
	AuthType SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType `json:"auth_type"`
	// Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientID string `json:"client_id"`
	// Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientSecret string `json:"client_secret"`
	// Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	RefreshToken string `json:"refresh_token"`
}

type SourceGoogleSheetsUpdateAuthenticationType string

const (
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth      SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Authentication_Authenticate via Google (OAuth)"
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Authentication_Service Account Key Authentication"
)

type SourceGoogleSheetsUpdateAuthentication struct {
	SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth      *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
	SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication

	Type SourceGoogleSheetsUpdateAuthenticationType
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth(sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth: &sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication(sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication: &sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSheetsUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication := new(SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication); err == nil {
		u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication = sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth := new(SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth); err == nil {
		u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth = sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSheetsUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication != nil {
		return json.Marshal(u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication)
	}

	if u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth != nil {
		return json.Marshal(u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth)
	}

	return nil, nil
}

type SourceGoogleSheetsUpdate struct {
	// Credentials for connecting to the Google Sheets API
	Credentials SourceGoogleSheetsUpdateAuthentication `json:"credentials"`
	// Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' -> 'my_name'. Enable this option if your destination is SQL-based.
	NamesConversion *bool `json:"names_conversion,omitempty"`
	// Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.
	SpreadsheetID string `json:"spreadsheet_id"`
}
