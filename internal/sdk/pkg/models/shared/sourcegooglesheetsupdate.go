// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthTypeService SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication struct {
	authType SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType `const:"Service" json:"auth_type"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

func (s SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) GetAuthType() SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthType {
	return SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationAuthTypeService
}

func (o *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) GetServiceAccountInfo() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccountInfo
}

type SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType string

const (
	SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthTypeClient SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType = "Client"
)

func (e SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType) ToPointer() *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth struct {
	authType SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType `const:"Client" json:"auth_type"`
	// Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientID string `json:"client_id"`
	// Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientSecret string `json:"client_secret"`
	// Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) GetAuthType() SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthType {
	return SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthAuthTypeClient
}

func (o *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleSheetsUpdateAuthenticationType string

const (
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth      SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Authentication_Authenticate via Google (OAuth)"
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Authentication_Service Account Key Authentication"
)

type SourceGoogleSheetsUpdateAuthentication struct {
	SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth      *SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
	SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication *SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication

	Type SourceGoogleSheetsUpdateAuthenticationType
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth(sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth: &sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication(sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication: &sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSheetsUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication := new(SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication = sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth := new(SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth, "", true, true); err == nil {
		u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth = sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSheetsUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth, "", true)
	}

	if u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleSheetsUpdate struct {
	// Credentials for connecting to the Google Sheets API
	Credentials SourceGoogleSheetsUpdateAuthentication `json:"credentials"`
	// Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' -> 'my_name'. Enable this option if your destination is SQL-based.
	NamesConversion *bool `default:"false" json:"names_conversion"`
	// Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.
	SpreadsheetID string `json:"spreadsheet_id"`
}

func (s SourceGoogleSheetsUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdate) GetCredentials() SourceGoogleSheetsUpdateAuthentication {
	if o == nil {
		return SourceGoogleSheetsUpdateAuthentication{}
	}
	return o.Credentials
}

func (o *SourceGoogleSheetsUpdate) GetNamesConversion() *bool {
	if o == nil {
		return nil
	}
	return o.NamesConversion
}

func (o *SourceGoogleSheetsUpdate) GetSpreadsheetID() string {
	if o == nil {
		return ""
	}
	return o.SpreadsheetID
}
