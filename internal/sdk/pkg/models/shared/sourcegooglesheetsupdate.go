// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceGoogleSheetsUpdateSchemasAuthType string

const (
	SourceGoogleSheetsUpdateSchemasAuthTypeService SourceGoogleSheetsUpdateSchemasAuthType = "Service"
)

func (e SourceGoogleSheetsUpdateSchemasAuthType) ToPointer() *SourceGoogleSheetsUpdateSchemasAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleSheetsUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateSchemasAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateServiceAccountKeyAuthentication - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateServiceAccountKeyAuthentication struct {
	authType SourceGoogleSheetsUpdateSchemasAuthType `const:"Service" json:"auth_type"`
	// The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
	ServiceAccountInfo string `json:"service_account_info"`
}

func (s SourceGoogleSheetsUpdateServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdateServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdateServiceAccountKeyAuthentication) GetAuthType() SourceGoogleSheetsUpdateSchemasAuthType {
	return SourceGoogleSheetsUpdateSchemasAuthTypeService
}

func (o *SourceGoogleSheetsUpdateServiceAccountKeyAuthentication) GetServiceAccountInfo() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccountInfo
}

type SourceGoogleSheetsUpdateAuthType string

const (
	SourceGoogleSheetsUpdateAuthTypeClient SourceGoogleSheetsUpdateAuthType = "Client"
)

func (e SourceGoogleSheetsUpdateAuthType) ToPointer() *SourceGoogleSheetsUpdateAuthType {
	return &e
}

func (e *SourceGoogleSheetsUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleSheetsUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleSheetsUpdateAuthType: %v", v)
	}
}

// SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth - Credentials for connecting to the Google Sheets API
type SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth struct {
	authType SourceGoogleSheetsUpdateAuthType `const:"Client" json:"auth_type"`
	// Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientID string `json:"client_id"`
	// Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	ClientSecret string `json:"client_secret"`
	// Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) GetAuthType() SourceGoogleSheetsUpdateAuthType {
	return SourceGoogleSheetsUpdateAuthTypeClient
}

func (o *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleSheetsUpdateAuthenticationType string

const (
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth      SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Authenticate via Google (OAuth)"
	SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateServiceAccountKeyAuthentication SourceGoogleSheetsUpdateAuthenticationType = "source-google-sheets-update_Service Account Key Authentication"
)

type SourceGoogleSheetsUpdateAuthentication struct {
	SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth      *SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth
	SourceGoogleSheetsUpdateServiceAccountKeyAuthentication *SourceGoogleSheetsUpdateServiceAccountKeyAuthentication

	Type SourceGoogleSheetsUpdateAuthenticationType
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth(sourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth: &sourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth,
		Type: typ,
	}
}

func CreateSourceGoogleSheetsUpdateAuthenticationSourceGoogleSheetsUpdateServiceAccountKeyAuthentication(sourceGoogleSheetsUpdateServiceAccountKeyAuthentication SourceGoogleSheetsUpdateServiceAccountKeyAuthentication) SourceGoogleSheetsUpdateAuthentication {
	typ := SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateServiceAccountKeyAuthentication

	return SourceGoogleSheetsUpdateAuthentication{
		SourceGoogleSheetsUpdateServiceAccountKeyAuthentication: &sourceGoogleSheetsUpdateServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleSheetsUpdateAuthentication) UnmarshalJSON(data []byte) error {

	sourceGoogleSheetsUpdateServiceAccountKeyAuthentication := new(SourceGoogleSheetsUpdateServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsUpdateServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleSheetsUpdateServiceAccountKeyAuthentication = sourceGoogleSheetsUpdateServiceAccountKeyAuthentication
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth := new(SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth, "", true, true); err == nil {
		u.SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth = sourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth
		u.Type = SourceGoogleSheetsUpdateAuthenticationTypeSourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleSheetsUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsUpdateAuthenticateViaGoogleOAuth, "", true)
	}

	if u.SourceGoogleSheetsUpdateServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleSheetsUpdateServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleSheetsUpdate struct {
	// Credentials for connecting to the Google Sheets API
	Credentials SourceGoogleSheetsUpdateAuthentication `json:"credentials"`
	// Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' -> 'my_name'. Enable this option if your destination is SQL-based.
	NamesConversion *bool `default:"false" json:"names_conversion"`
	// Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.
	SpreadsheetID string `json:"spreadsheet_id"`
}

func (s SourceGoogleSheetsUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleSheetsUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleSheetsUpdate) GetCredentials() SourceGoogleSheetsUpdateAuthentication {
	if o == nil {
		return SourceGoogleSheetsUpdateAuthentication{}
	}
	return o.Credentials
}

func (o *SourceGoogleSheetsUpdate) GetNamesConversion() *bool {
	if o == nil {
		return nil
	}
	return o.NamesConversion
}

func (o *SourceGoogleSheetsUpdate) GetSpreadsheetID() string {
	if o == nil {
		return ""
	}
	return o.SpreadsheetID
}
