// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type Mssql string

const (
	MssqlMssql Mssql = "mssql"
)

func (e Mssql) ToPointer() *Mssql {
	return &e
}

func (e *Mssql) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mssql":
		*e = Mssql(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mssql: %v", v)
	}
}

type DestinationMssqlSchemasSslMethodSslMethod string

const (
	DestinationMssqlSchemasSslMethodSslMethodEncryptedVerifyCertificate DestinationMssqlSchemasSslMethodSslMethod = "encrypted_verify_certificate"
)

func (e DestinationMssqlSchemasSslMethodSslMethod) ToPointer() *DestinationMssqlSchemasSslMethodSslMethod {
	return &e
}

func (e *DestinationMssqlSchemasSslMethodSslMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_verify_certificate":
		*e = DestinationMssqlSchemasSslMethodSslMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasSslMethodSslMethod: %v", v)
	}
}

// DestinationMssqlEncryptedVerifyCertificate - Verify and use the certificate provided by the server.
type DestinationMssqlEncryptedVerifyCertificate struct {
	// Specifies the host name of the server. The value of this property must match the subject property of the certificate.
	HostNameInCertificate *string                                    `json:"hostNameInCertificate,omitempty"`
	sslMethod             *DestinationMssqlSchemasSslMethodSslMethod `const:"encrypted_verify_certificate" json:"ssl_method"`
}

func (d DestinationMssqlEncryptedVerifyCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlEncryptedVerifyCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlEncryptedVerifyCertificate) GetHostNameInCertificate() *string {
	if o == nil {
		return nil
	}
	return o.HostNameInCertificate
}

func (o *DestinationMssqlEncryptedVerifyCertificate) GetSslMethod() *DestinationMssqlSchemasSslMethodSslMethod {
	return DestinationMssqlSchemasSslMethodSslMethodEncryptedVerifyCertificate.ToPointer()
}

type DestinationMssqlSchemasSslMethod string

const (
	DestinationMssqlSchemasSslMethodEncryptedTrustServerCertificate DestinationMssqlSchemasSslMethod = "encrypted_trust_server_certificate"
)

func (e DestinationMssqlSchemasSslMethod) ToPointer() *DestinationMssqlSchemasSslMethod {
	return &e
}

func (e *DestinationMssqlSchemasSslMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted_trust_server_certificate":
		*e = DestinationMssqlSchemasSslMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasSslMethod: %v", v)
	}
}

// DestinationMssqlEncryptedTrustServerCertificate - Use the certificate provided by the server without verification. (For testing purposes only!)
type DestinationMssqlEncryptedTrustServerCertificate struct {
	sslMethod *DestinationMssqlSchemasSslMethod `const:"encrypted_trust_server_certificate" json:"ssl_method"`
}

func (d DestinationMssqlEncryptedTrustServerCertificate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlEncryptedTrustServerCertificate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlEncryptedTrustServerCertificate) GetSslMethod() *DestinationMssqlSchemasSslMethod {
	return DestinationMssqlSchemasSslMethodEncryptedTrustServerCertificate.ToPointer()
}

type DestinationMssqlSSLMethodType string

const (
	DestinationMssqlSSLMethodTypeEncryptedTrustServerCertificate DestinationMssqlSSLMethodType = "EncryptedTrustServerCertificate"
	DestinationMssqlSSLMethodTypeEncryptedVerifyCertificate      DestinationMssqlSSLMethodType = "EncryptedVerifyCertificate"
)

type DestinationMssqlSSLMethod struct {
	EncryptedTrustServerCertificate *DestinationMssqlEncryptedTrustServerCertificate
	EncryptedVerifyCertificate      *DestinationMssqlEncryptedVerifyCertificate

	Type DestinationMssqlSSLMethodType
}

func CreateDestinationMssqlSSLMethodEncryptedTrustServerCertificate(encryptedTrustServerCertificate DestinationMssqlEncryptedTrustServerCertificate) DestinationMssqlSSLMethod {
	typ := DestinationMssqlSSLMethodTypeEncryptedTrustServerCertificate

	return DestinationMssqlSSLMethod{
		EncryptedTrustServerCertificate: &encryptedTrustServerCertificate,
		Type:                            typ,
	}
}

func CreateDestinationMssqlSSLMethodEncryptedVerifyCertificate(encryptedVerifyCertificate DestinationMssqlEncryptedVerifyCertificate) DestinationMssqlSSLMethod {
	typ := DestinationMssqlSSLMethodTypeEncryptedVerifyCertificate

	return DestinationMssqlSSLMethod{
		EncryptedVerifyCertificate: &encryptedVerifyCertificate,
		Type:                       typ,
	}
}

func (u *DestinationMssqlSSLMethod) UnmarshalJSON(data []byte) error {

	encryptedTrustServerCertificate := new(DestinationMssqlEncryptedTrustServerCertificate)
	if err := utils.UnmarshalJSON(data, &encryptedTrustServerCertificate, "", true, true); err == nil {
		u.EncryptedTrustServerCertificate = encryptedTrustServerCertificate
		u.Type = DestinationMssqlSSLMethodTypeEncryptedTrustServerCertificate
		return nil
	}

	encryptedVerifyCertificate := new(DestinationMssqlEncryptedVerifyCertificate)
	if err := utils.UnmarshalJSON(data, &encryptedVerifyCertificate, "", true, true); err == nil {
		u.EncryptedVerifyCertificate = encryptedVerifyCertificate
		u.Type = DestinationMssqlSSLMethodTypeEncryptedVerifyCertificate
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMssqlSSLMethod) MarshalJSON() ([]byte, error) {
	if u.EncryptedTrustServerCertificate != nil {
		return utils.MarshalJSON(u.EncryptedTrustServerCertificate, "", true)
	}

	if u.EncryptedVerifyCertificate != nil {
		return utils.MarshalJSON(u.EncryptedVerifyCertificate, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMssqlSchemasTunnelMethodTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationMssqlSchemasTunnelMethodTunnelMethod string

const (
	DestinationMssqlSchemasTunnelMethodTunnelMethodSSHPasswordAuth DestinationMssqlSchemasTunnelMethodTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationMssqlSchemasTunnelMethodTunnelMethod) ToPointer() *DestinationMssqlSchemasTunnelMethodTunnelMethod {
	return &e
}

func (e *DestinationMssqlSchemasTunnelMethodTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMssqlSchemasTunnelMethodTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasTunnelMethodTunnelMethod: %v", v)
	}
}

// DestinationMssqlPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMssqlPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationMssqlSchemasTunnelMethodTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationMssqlPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelMethod() DestinationMssqlSchemasTunnelMethodTunnelMethod {
	return DestinationMssqlSchemasTunnelMethodTunnelMethodSSHPasswordAuth
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationMssqlPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationMssqlSchemasTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationMssqlSchemasTunnelMethod string

const (
	DestinationMssqlSchemasTunnelMethodSSHKeyAuth DestinationMssqlSchemasTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationMssqlSchemasTunnelMethod) ToPointer() *DestinationMssqlSchemasTunnelMethod {
	return &e
}

func (e *DestinationMssqlSchemasTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationMssqlSchemasTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlSchemasTunnelMethod: %v", v)
	}
}

// DestinationMssqlSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMssqlSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationMssqlSchemasTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationMssqlSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelMethod() DestinationMssqlSchemasTunnelMethod {
	return DestinationMssqlSchemasTunnelMethodSSHKeyAuth
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationMssqlSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationMssqlTunnelMethod - No ssh tunnel needed to connect to database
type DestinationMssqlTunnelMethod string

const (
	DestinationMssqlTunnelMethodNoTunnel DestinationMssqlTunnelMethod = "NO_TUNNEL"
)

func (e DestinationMssqlTunnelMethod) ToPointer() *DestinationMssqlTunnelMethod {
	return &e
}

func (e *DestinationMssqlTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationMssqlTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMssqlTunnelMethod: %v", v)
	}
}

// DestinationMssqlNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMssqlNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationMssqlTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationMssqlNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssqlNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssqlNoTunnel) GetTunnelMethod() DestinationMssqlTunnelMethod {
	return DestinationMssqlTunnelMethodNoTunnel
}

type DestinationMssqlSSHTunnelMethodType string

const (
	DestinationMssqlSSHTunnelMethodTypeNoTunnel               DestinationMssqlSSHTunnelMethodType = "NoTunnel"
	DestinationMssqlSSHTunnelMethodTypeSSHKeyAuthentication   DestinationMssqlSSHTunnelMethodType = "SSHKeyAuthentication"
	DestinationMssqlSSHTunnelMethodTypePasswordAuthentication DestinationMssqlSSHTunnelMethodType = "PasswordAuthentication"
)

type DestinationMssqlSSHTunnelMethod struct {
	NoTunnel               *DestinationMssqlNoTunnel
	SSHKeyAuthentication   *DestinationMssqlSSHKeyAuthentication
	PasswordAuthentication *DestinationMssqlPasswordAuthentication

	Type DestinationMssqlSSHTunnelMethodType
}

func CreateDestinationMssqlSSHTunnelMethodNoTunnel(noTunnel DestinationMssqlNoTunnel) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypeNoTunnel

	return DestinationMssqlSSHTunnelMethod{
		NoTunnel: &noTunnel,
		Type:     typ,
	}
}

func CreateDestinationMssqlSSHTunnelMethodSSHKeyAuthentication(sshKeyAuthentication DestinationMssqlSSHKeyAuthentication) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypeSSHKeyAuthentication

	return DestinationMssqlSSHTunnelMethod{
		SSHKeyAuthentication: &sshKeyAuthentication,
		Type:                 typ,
	}
}

func CreateDestinationMssqlSSHTunnelMethodPasswordAuthentication(passwordAuthentication DestinationMssqlPasswordAuthentication) DestinationMssqlSSHTunnelMethod {
	typ := DestinationMssqlSSHTunnelMethodTypePasswordAuthentication

	return DestinationMssqlSSHTunnelMethod{
		PasswordAuthentication: &passwordAuthentication,
		Type:                   typ,
	}
}

func (u *DestinationMssqlSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	noTunnel := new(DestinationMssqlNoTunnel)
	if err := utils.UnmarshalJSON(data, &noTunnel, "", true, true); err == nil {
		u.NoTunnel = noTunnel
		u.Type = DestinationMssqlSSHTunnelMethodTypeNoTunnel
		return nil
	}

	sshKeyAuthentication := new(DestinationMssqlSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sshKeyAuthentication, "", true, true); err == nil {
		u.SSHKeyAuthentication = sshKeyAuthentication
		u.Type = DestinationMssqlSSHTunnelMethodTypeSSHKeyAuthentication
		return nil
	}

	passwordAuthentication := new(DestinationMssqlPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &passwordAuthentication, "", true, true); err == nil {
		u.PasswordAuthentication = passwordAuthentication
		u.Type = DestinationMssqlSSHTunnelMethodTypePasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMssqlSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.NoTunnel != nil {
		return utils.MarshalJSON(u.NoTunnel, "", true)
	}

	if u.SSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SSHKeyAuthentication, "", true)
	}

	if u.PasswordAuthentication != nil {
		return utils.MarshalJSON(u.PasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMssql struct {
	// The name of the MSSQL database.
	Database        string `json:"database"`
	destinationType Mssql  `const:"mssql" json:"destinationType"`
	// The host name of the MSSQL database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the MSSQL database.
	Port *int64 `default:"1433" json:"port"`
	// The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public".
	Schema *string `default:"public" json:"schema"`
	// The encryption method which is used to communicate with the database.
	SslMethod *DestinationMssqlSSLMethod `json:"ssl_method,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMssqlSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}

func (d DestinationMssql) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMssql) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMssql) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationMssql) GetDestinationType() Mssql {
	return MssqlMssql
}

func (o *DestinationMssql) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMssql) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationMssql) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationMssql) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationMssql) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *DestinationMssql) GetSslMethod() *DestinationMssqlSSLMethod {
	if o == nil {
		return nil
	}
	return o.SslMethod
}

func (o *DestinationMssql) GetTunnelMethod() *DestinationMssqlSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *DestinationMssql) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
