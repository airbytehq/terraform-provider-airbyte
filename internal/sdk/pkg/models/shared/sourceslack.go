// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceSlackAuthenticationMechanismAPITokenOptionTitle string

const (
	SourceSlackAuthenticationMechanismAPITokenOptionTitleAPITokenCredentials SourceSlackAuthenticationMechanismAPITokenOptionTitle = "API Token Credentials"
)

func (e SourceSlackAuthenticationMechanismAPITokenOptionTitle) ToPointer() *SourceSlackAuthenticationMechanismAPITokenOptionTitle {
	return &e
}

func (e *SourceSlackAuthenticationMechanismAPITokenOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Token Credentials":
		*e = SourceSlackAuthenticationMechanismAPITokenOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackAuthenticationMechanismAPITokenOptionTitle: %v", v)
	}
}

// SourceSlackAuthenticationMechanismAPIToken - Choose how to authenticate into Slack
type SourceSlackAuthenticationMechanismAPIToken struct {
	// A Slack bot token. See the <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> for instructions on how to generate it.
	APIToken    string                                                `json:"api_token"`
	optionTitle SourceSlackAuthenticationMechanismAPITokenOptionTitle `const:"API Token Credentials" json:"option_title"`
}

func (s SourceSlackAuthenticationMechanismAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSlackAuthenticationMechanismAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSlackAuthenticationMechanismAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceSlackAuthenticationMechanismAPIToken) GetOptionTitle() SourceSlackAuthenticationMechanismAPITokenOptionTitle {
	return SourceSlackAuthenticationMechanismAPITokenOptionTitleAPITokenCredentials
}

type SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle string

const (
	SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleDefaultOAuth20Authorization SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle = "Default OAuth2.0 authorization"
)

func (e SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle) ToPointer() *SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle {
	return &e
}

func (e *SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Default OAuth2.0 authorization":
		*e = SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle: %v", v)
	}
}

// SourceSlackAuthenticationMechanismSignInViaSlackOAuth - Choose how to authenticate into Slack
type SourceSlackAuthenticationMechanismSignInViaSlackOAuth struct {
	// Slack access_token. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help generating the token.
	AccessToken string `json:"access_token"`
	// Slack client_id. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this id.
	ClientID string `json:"client_id"`
	// Slack client_secret. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this secret.
	ClientSecret string                                                           `json:"client_secret"`
	optionTitle  SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle `const:"Default OAuth2.0 authorization" json:"option_title"`
}

func (s SourceSlackAuthenticationMechanismSignInViaSlackOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSlackAuthenticationMechanismSignInViaSlackOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSlackAuthenticationMechanismSignInViaSlackOAuth) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSlackAuthenticationMechanismSignInViaSlackOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceSlackAuthenticationMechanismSignInViaSlackOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceSlackAuthenticationMechanismSignInViaSlackOAuth) GetOptionTitle() SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitle {
	return SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleDefaultOAuth20Authorization
}

type SourceSlackAuthenticationMechanismType string

const (
	SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth SourceSlackAuthenticationMechanismType = "source-slack_Authentication mechanism_Sign in via Slack (OAuth)"
	SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken            SourceSlackAuthenticationMechanismType = "source-slack_Authentication mechanism_API Token"
)

type SourceSlackAuthenticationMechanism struct {
	SourceSlackAuthenticationMechanismSignInViaSlackOAuth *SourceSlackAuthenticationMechanismSignInViaSlackOAuth
	SourceSlackAuthenticationMechanismAPIToken            *SourceSlackAuthenticationMechanismAPIToken

	Type SourceSlackAuthenticationMechanismType
}

func CreateSourceSlackAuthenticationMechanismSourceSlackAuthenticationMechanismSignInViaSlackOAuth(sourceSlackAuthenticationMechanismSignInViaSlackOAuth SourceSlackAuthenticationMechanismSignInViaSlackOAuth) SourceSlackAuthenticationMechanism {
	typ := SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth

	return SourceSlackAuthenticationMechanism{
		SourceSlackAuthenticationMechanismSignInViaSlackOAuth: &sourceSlackAuthenticationMechanismSignInViaSlackOAuth,
		Type: typ,
	}
}

func CreateSourceSlackAuthenticationMechanismSourceSlackAuthenticationMechanismAPIToken(sourceSlackAuthenticationMechanismAPIToken SourceSlackAuthenticationMechanismAPIToken) SourceSlackAuthenticationMechanism {
	typ := SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken

	return SourceSlackAuthenticationMechanism{
		SourceSlackAuthenticationMechanismAPIToken: &sourceSlackAuthenticationMechanismAPIToken,
		Type: typ,
	}
}

func (u *SourceSlackAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceSlackAuthenticationMechanismAPIToken := new(SourceSlackAuthenticationMechanismAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceSlackAuthenticationMechanismAPIToken, "", true, true); err == nil {
		u.SourceSlackAuthenticationMechanismAPIToken = sourceSlackAuthenticationMechanismAPIToken
		u.Type = SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken
		return nil
	}

	sourceSlackAuthenticationMechanismSignInViaSlackOAuth := new(SourceSlackAuthenticationMechanismSignInViaSlackOAuth)
	if err := utils.UnmarshalJSON(data, &sourceSlackAuthenticationMechanismSignInViaSlackOAuth, "", true, true); err == nil {
		u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth = sourceSlackAuthenticationMechanismSignInViaSlackOAuth
		u.Type = SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSlackAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
		return utils.MarshalJSON(u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth, "", true)
	}

	if u.SourceSlackAuthenticationMechanismAPIToken != nil {
		return utils.MarshalJSON(u.SourceSlackAuthenticationMechanismAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSlackSlack string

const (
	SourceSlackSlackSlack SourceSlackSlack = "slack"
)

func (e SourceSlackSlack) ToPointer() *SourceSlackSlack {
	return &e
}

func (e *SourceSlackSlack) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slack":
		*e = SourceSlackSlack(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackSlack: %v", v)
	}
}

type SourceSlack struct {
	// A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.
	ChannelFilter []string `json:"channel_filter,omitempty"`
	// Choose how to authenticate into Slack
	Credentials *SourceSlackAuthenticationMechanism `json:"credentials,omitempty"`
	// Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages.
	JoinChannels *bool `default:"true" json:"join_channels"`
	// How far into the past to look for messages in threads, default is 0 days
	LookbackWindow *int64           `default:"0" json:"lookback_window"`
	sourceType     SourceSlackSlack `const:"slack" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceSlack) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSlack) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSlack) GetChannelFilter() []string {
	if o == nil {
		return nil
	}
	return o.ChannelFilter
}

func (o *SourceSlack) GetCredentials() *SourceSlackAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSlack) GetJoinChannels() *bool {
	if o == nil {
		return nil
	}
	return o.JoinChannels
}

func (o *SourceSlack) GetLookbackWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.LookbackWindow
}

func (o *SourceSlack) GetSourceType() SourceSlackSlack {
	return SourceSlackSlackSlack
}

func (o *SourceSlack) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
