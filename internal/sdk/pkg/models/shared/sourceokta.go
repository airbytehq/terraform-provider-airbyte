// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceOktaAuthorizationMethodAPITokenAuthType string

const (
	SourceOktaAuthorizationMethodAPITokenAuthTypeAPIToken SourceOktaAuthorizationMethodAPITokenAuthType = "api_token"
)

func (e SourceOktaAuthorizationMethodAPITokenAuthType) ToPointer() *SourceOktaAuthorizationMethodAPITokenAuthType {
	return &e
}

func (e *SourceOktaAuthorizationMethodAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceOktaAuthorizationMethodAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaAuthorizationMethodAPITokenAuthType: %v", v)
	}
}

type SourceOktaAuthorizationMethodAPIToken struct {
	// An Okta token. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to generate it.
	APIToken string                                        `json:"api_token"`
	authType SourceOktaAuthorizationMethodAPITokenAuthType `const:"api_token" json:"auth_type"`
}

func (s SourceOktaAuthorizationMethodAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOktaAuthorizationMethodAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOktaAuthorizationMethodAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceOktaAuthorizationMethodAPIToken) GetAuthType() SourceOktaAuthorizationMethodAPITokenAuthType {
	return SourceOktaAuthorizationMethodAPITokenAuthTypeAPIToken
}

type SourceOktaAuthorizationMethodOAuth20AuthType string

const (
	SourceOktaAuthorizationMethodOAuth20AuthTypeOauth20 SourceOktaAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceOktaAuthorizationMethodOAuth20AuthType) ToPointer() *SourceOktaAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceOktaAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceOktaAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceOktaAuthorizationMethodOAuth20 struct {
	authType SourceOktaAuthorizationMethodOAuth20AuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceOktaAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOktaAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOktaAuthorizationMethodOAuth20) GetAuthType() SourceOktaAuthorizationMethodOAuth20AuthType {
	return SourceOktaAuthorizationMethodOAuth20AuthTypeOauth20
}

func (o *SourceOktaAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceOktaAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceOktaAuthorizationMethodOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceOktaAuthorizationMethodType string

const (
	SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodOAuth20  SourceOktaAuthorizationMethodType = "source-okta_Authorization Method_OAuth2.0"
	SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodAPIToken SourceOktaAuthorizationMethodType = "source-okta_Authorization Method_API Token"
)

type SourceOktaAuthorizationMethod struct {
	SourceOktaAuthorizationMethodOAuth20  *SourceOktaAuthorizationMethodOAuth20
	SourceOktaAuthorizationMethodAPIToken *SourceOktaAuthorizationMethodAPIToken

	Type SourceOktaAuthorizationMethodType
}

func CreateSourceOktaAuthorizationMethodSourceOktaAuthorizationMethodOAuth20(sourceOktaAuthorizationMethodOAuth20 SourceOktaAuthorizationMethodOAuth20) SourceOktaAuthorizationMethod {
	typ := SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodOAuth20

	return SourceOktaAuthorizationMethod{
		SourceOktaAuthorizationMethodOAuth20: &sourceOktaAuthorizationMethodOAuth20,
		Type:                                 typ,
	}
}

func CreateSourceOktaAuthorizationMethodSourceOktaAuthorizationMethodAPIToken(sourceOktaAuthorizationMethodAPIToken SourceOktaAuthorizationMethodAPIToken) SourceOktaAuthorizationMethod {
	typ := SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodAPIToken

	return SourceOktaAuthorizationMethod{
		SourceOktaAuthorizationMethodAPIToken: &sourceOktaAuthorizationMethodAPIToken,
		Type:                                  typ,
	}
}

func (u *SourceOktaAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceOktaAuthorizationMethodAPIToken := new(SourceOktaAuthorizationMethodAPIToken)
	if err := utils.UnmarshalJSON(data, &sourceOktaAuthorizationMethodAPIToken, "", true, true); err == nil {
		u.SourceOktaAuthorizationMethodAPIToken = sourceOktaAuthorizationMethodAPIToken
		u.Type = SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodAPIToken
		return nil
	}

	sourceOktaAuthorizationMethodOAuth20 := new(SourceOktaAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceOktaAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceOktaAuthorizationMethodOAuth20 = sourceOktaAuthorizationMethodOAuth20
		u.Type = SourceOktaAuthorizationMethodTypeSourceOktaAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceOktaAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceOktaAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceOktaAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceOktaAuthorizationMethodAPIToken != nil {
		return utils.MarshalJSON(u.SourceOktaAuthorizationMethodAPIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceOktaOkta string

const (
	SourceOktaOktaOkta SourceOktaOkta = "okta"
)

func (e SourceOktaOkta) ToPointer() *SourceOktaOkta {
	return &e
}

func (e *SourceOktaOkta) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "okta":
		*e = SourceOktaOkta(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaOkta: %v", v)
	}
}

type SourceOkta struct {
	Credentials *SourceOktaAuthorizationMethod `json:"credentials,omitempty"`
	// The Okta domain. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to find it.
	Domain     *string        `json:"domain,omitempty"`
	sourceType SourceOktaOkta `const:"okta" json:"sourceType"`
	// UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.
	StartDate *string `json:"start_date,omitempty"`
}

func (s SourceOkta) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOkta) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceOkta) GetCredentials() *SourceOktaAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceOkta) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *SourceOkta) GetSourceType() SourceOktaOkta {
	return SourceOktaOktaOkta
}

func (o *SourceOkta) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}
