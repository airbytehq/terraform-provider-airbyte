// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceGitlabAuthorizationMethodPrivateTokenAuthType string

const (
	SourceGitlabAuthorizationMethodPrivateTokenAuthTypeAccessToken SourceGitlabAuthorizationMethodPrivateTokenAuthType = "access_token"
)

func (e SourceGitlabAuthorizationMethodPrivateTokenAuthType) ToPointer() *SourceGitlabAuthorizationMethodPrivateTokenAuthType {
	return &e
}

func (e *SourceGitlabAuthorizationMethodPrivateTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceGitlabAuthorizationMethodPrivateTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabAuthorizationMethodPrivateTokenAuthType: %v", v)
	}
}

type SourceGitlabAuthorizationMethodPrivateToken struct {
	// Log into your Gitlab account and then generate a personal Access Token.
	AccessToken string                                               `json:"access_token"`
	authType    *SourceGitlabAuthorizationMethodPrivateTokenAuthType `const:"access_token" json:"auth_type,omitempty"`
}

func (s SourceGitlabAuthorizationMethodPrivateToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGitlabAuthorizationMethodPrivateToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGitlabAuthorizationMethodPrivateToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceGitlabAuthorizationMethodPrivateToken) GetAuthType() *SourceGitlabAuthorizationMethodPrivateTokenAuthType {
	return SourceGitlabAuthorizationMethodPrivateTokenAuthTypeAccessToken.ToPointer()
}

type SourceGitlabAuthorizationMethodOAuth20AuthType string

const (
	SourceGitlabAuthorizationMethodOAuth20AuthTypeOauth20 SourceGitlabAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceGitlabAuthorizationMethodOAuth20AuthType) ToPointer() *SourceGitlabAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceGitlabAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceGitlabAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceGitlabAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                          `json:"access_token"`
	authType    *SourceGitlabAuthorizationMethodOAuth20AuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// The API ID of the Gitlab developer application.
	ClientID string `json:"client_id"`
	// The API Secret the Gitlab developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceGitlabAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGitlabAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetAuthType() *SourceGitlabAuthorizationMethodOAuth20AuthType {
	return SourceGitlabAuthorizationMethodOAuth20AuthTypeOauth20.ToPointer()
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceGitlabAuthorizationMethodOAuth20) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceGitlabAuthorizationMethodType string

const (
	SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodOAuth20      SourceGitlabAuthorizationMethodType = "source-gitlab_Authorization Method_OAuth2.0"
	SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodPrivateToken SourceGitlabAuthorizationMethodType = "source-gitlab_Authorization Method_Private Token"
)

type SourceGitlabAuthorizationMethod struct {
	SourceGitlabAuthorizationMethodOAuth20      *SourceGitlabAuthorizationMethodOAuth20
	SourceGitlabAuthorizationMethodPrivateToken *SourceGitlabAuthorizationMethodPrivateToken

	Type SourceGitlabAuthorizationMethodType
}

func CreateSourceGitlabAuthorizationMethodSourceGitlabAuthorizationMethodOAuth20(sourceGitlabAuthorizationMethodOAuth20 SourceGitlabAuthorizationMethodOAuth20) SourceGitlabAuthorizationMethod {
	typ := SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodOAuth20

	return SourceGitlabAuthorizationMethod{
		SourceGitlabAuthorizationMethodOAuth20: &sourceGitlabAuthorizationMethodOAuth20,
		Type:                                   typ,
	}
}

func CreateSourceGitlabAuthorizationMethodSourceGitlabAuthorizationMethodPrivateToken(sourceGitlabAuthorizationMethodPrivateToken SourceGitlabAuthorizationMethodPrivateToken) SourceGitlabAuthorizationMethod {
	typ := SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodPrivateToken

	return SourceGitlabAuthorizationMethod{
		SourceGitlabAuthorizationMethodPrivateToken: &sourceGitlabAuthorizationMethodPrivateToken,
		Type: typ,
	}
}

func (u *SourceGitlabAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceGitlabAuthorizationMethodPrivateToken := new(SourceGitlabAuthorizationMethodPrivateToken)
	if err := utils.UnmarshalJSON(data, &sourceGitlabAuthorizationMethodPrivateToken, "", true, true); err == nil {
		u.SourceGitlabAuthorizationMethodPrivateToken = sourceGitlabAuthorizationMethodPrivateToken
		u.Type = SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodPrivateToken
		return nil
	}

	sourceGitlabAuthorizationMethodOAuth20 := new(SourceGitlabAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceGitlabAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceGitlabAuthorizationMethodOAuth20 = sourceGitlabAuthorizationMethodOAuth20
		u.Type = SourceGitlabAuthorizationMethodTypeSourceGitlabAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGitlabAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceGitlabAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceGitlabAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceGitlabAuthorizationMethodPrivateToken != nil {
		return utils.MarshalJSON(u.SourceGitlabAuthorizationMethodPrivateToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGitlabGitlab string

const (
	SourceGitlabGitlabGitlab SourceGitlabGitlab = "gitlab"
)

func (e SourceGitlabGitlab) ToPointer() *SourceGitlabGitlab {
	return &e
}

func (e *SourceGitlabGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = SourceGitlabGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabGitlab: %v", v)
	}
}

type SourceGitlab struct {
	// Please enter your basic URL from GitLab instance.
	APIURL      *string                         `default:"gitlab.com" json:"api_url"`
	Credentials SourceGitlabAuthorizationMethod `json:"credentials"`
	// Space-delimited list of groups. e.g. airbyte.io.
	Groups *string `json:"groups,omitempty"`
	// Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.
	Projects   *string            `json:"projects,omitempty"`
	sourceType SourceGitlabGitlab `const:"gitlab" json:"sourceType"`
	// The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceGitlab) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGitlab) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGitlab) GetAPIURL() *string {
	if o == nil {
		return nil
	}
	return o.APIURL
}

func (o *SourceGitlab) GetCredentials() SourceGitlabAuthorizationMethod {
	if o == nil {
		return SourceGitlabAuthorizationMethod{}
	}
	return o.Credentials
}

func (o *SourceGitlab) GetGroups() *string {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *SourceGitlab) GetProjects() *string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *SourceGitlab) GetSourceType() SourceGitlabGitlab {
	return SourceGitlabGitlabGitlab
}

func (o *SourceGitlab) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
