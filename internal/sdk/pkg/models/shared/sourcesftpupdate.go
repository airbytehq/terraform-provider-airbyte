// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

// SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod - Connect through ssh key
type SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod string

const (
	SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethodSSHKeyAuth SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod = "SSH_KEY_AUTH"
)

func (e SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod) ToPointer() *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod {
	return &e
}

func (e *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod: %v", v)
	}
}

// SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication - The server authentication method
type SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication struct {
	// Connect through ssh key
	authMethod SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod `const:"SSH_KEY_AUTH" json:"auth_method"`
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	AuthSSHKey string `json:"auth_ssh_key"`
}

func (s SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication) GetAuthMethod() SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethod {
	return SourceSftpUpdateAuthenticationWildcardSSHKeyAuthenticationAuthMethodSSHKeyAuth
}

func (o *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication) GetAuthSSHKey() string {
	if o == nil {
		return ""
	}
	return o.AuthSSHKey
}

// SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod - Connect through password authentication
type SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod string

const (
	SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethodSSHPasswordAuth SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod) ToPointer() *SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod {
	return &e
}

func (e *SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod: %v", v)
	}
}

// SourceSftpUpdateAuthenticationWildcardPasswordAuthentication - The server authentication method
type SourceSftpUpdateAuthenticationWildcardPasswordAuthentication struct {
	// Connect through password authentication
	authMethod SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod `const:"SSH_PASSWORD_AUTH" json:"auth_method"`
	// OS-level password for logging into the jump server host
	AuthUserPassword string `json:"auth_user_password"`
}

func (s SourceSftpUpdateAuthenticationWildcardPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftpUpdateAuthenticationWildcardPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftpUpdateAuthenticationWildcardPasswordAuthentication) GetAuthMethod() SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethod {
	return SourceSftpUpdateAuthenticationWildcardPasswordAuthenticationAuthMethodSSHPasswordAuth
}

func (o *SourceSftpUpdateAuthenticationWildcardPasswordAuthentication) GetAuthUserPassword() string {
	if o == nil {
		return ""
	}
	return o.AuthUserPassword
}

type SourceSftpUpdateAuthenticationWildcardType string

const (
	SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardPasswordAuthentication SourceSftpUpdateAuthenticationWildcardType = "source-sftp-update_Authentication *_Password Authentication"
	SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication   SourceSftpUpdateAuthenticationWildcardType = "source-sftp-update_Authentication *_SSH Key Authentication"
)

type SourceSftpUpdateAuthenticationWildcard struct {
	SourceSftpUpdateAuthenticationWildcardPasswordAuthentication *SourceSftpUpdateAuthenticationWildcardPasswordAuthentication
	SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication   *SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication

	Type SourceSftpUpdateAuthenticationWildcardType
}

func CreateSourceSftpUpdateAuthenticationWildcardSourceSftpUpdateAuthenticationWildcardPasswordAuthentication(sourceSftpUpdateAuthenticationWildcardPasswordAuthentication SourceSftpUpdateAuthenticationWildcardPasswordAuthentication) SourceSftpUpdateAuthenticationWildcard {
	typ := SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardPasswordAuthentication

	return SourceSftpUpdateAuthenticationWildcard{
		SourceSftpUpdateAuthenticationWildcardPasswordAuthentication: &sourceSftpUpdateAuthenticationWildcardPasswordAuthentication,
		Type: typ,
	}
}

func CreateSourceSftpUpdateAuthenticationWildcardSourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication(sourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication) SourceSftpUpdateAuthenticationWildcard {
	typ := SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication

	return SourceSftpUpdateAuthenticationWildcard{
		SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication: &sourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceSftpUpdateAuthenticationWildcard) UnmarshalJSON(data []byte) error {

	sourceSftpUpdateAuthenticationWildcardPasswordAuthentication := new(SourceSftpUpdateAuthenticationWildcardPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSftpUpdateAuthenticationWildcardPasswordAuthentication, "", true, true); err == nil {
		u.SourceSftpUpdateAuthenticationWildcardPasswordAuthentication = sourceSftpUpdateAuthenticationWildcardPasswordAuthentication
		u.Type = SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardPasswordAuthentication
		return nil
	}

	sourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication := new(SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication, "", true, true); err == nil {
		u.SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication = sourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication
		u.Type = SourceSftpUpdateAuthenticationWildcardTypeSourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSftpUpdateAuthenticationWildcard) MarshalJSON() ([]byte, error) {
	if u.SourceSftpUpdateAuthenticationWildcardPasswordAuthentication != nil {
		return utils.MarshalJSON(u.SourceSftpUpdateAuthenticationWildcardPasswordAuthentication, "", true)
	}

	if u.SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceSftpUpdateAuthenticationWildcardSSHKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSftpUpdate struct {
	// The server authentication method
	Credentials *SourceSftpUpdateAuthenticationWildcard `json:"credentials,omitempty"`
	// The regular expression to specify files for sync in a chosen Folder Path
	FilePattern *string `default:"" json:"file_pattern"`
	// Coma separated file types. Currently only 'csv' and 'json' types are supported.
	FileTypes *string `default:"csv,json" json:"file_types"`
	// The directory to search files for sync
	FolderPath *string `default:"" json:"folder_path"`
	// The server host address
	Host string `json:"host"`
	// The server port
	Port *int64 `default:"22" json:"port"`
	// The server user
	User string `json:"user"`
}

func (s SourceSftpUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSftpUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceSftpUpdate) GetCredentials() *SourceSftpUpdateAuthenticationWildcard {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceSftpUpdate) GetFilePattern() *string {
	if o == nil {
		return nil
	}
	return o.FilePattern
}

func (o *SourceSftpUpdate) GetFileTypes() *string {
	if o == nil {
		return nil
	}
	return o.FileTypes
}

func (o *SourceSftpUpdate) GetFolderPath() *string {
	if o == nil {
		return nil
	}
	return o.FolderPath
}

func (o *SourceSftpUpdate) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceSftpUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceSftpUpdate) GetUser() string {
	if o == nil {
		return ""
	}
	return o.User
}
