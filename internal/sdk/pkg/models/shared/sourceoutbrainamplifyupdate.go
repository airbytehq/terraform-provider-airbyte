// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest string

const (
	SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequestUsernamePassword SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest = "username_password"
)

func (e SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest) ToPointer() *SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest {
	return &e
}

func (e *SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest: %v", v)
	}
}

// SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword - Credentials for making authenticated requests requires either username/password or access_token.
type SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword struct {
	// Add Password for authentication.
	Password string                                                                                                                   `json:"password"`
	Type     SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordBothUsernameAndPasswordIsRequiredForAuthenticationRequest `json:"type"`
	// Add Username for authentication.
	Username string `json:"username"`
}

type SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests string

const (
	SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequestsAccessToken SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests = "access_token"
)

func (e SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests) ToPointer() *SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests {
	return &e
}

func (e *SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests: %v", v)
	}
}

// SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken - Credentials for making authenticated requests requires either username/password or access_token.
type SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken struct {
	// Access Token for making authenticated requests.
	AccessToken string                                                                                                   `json:"access_token"`
	Type        SourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenAccessTokenIsRequiredForAuthenticationRequests `json:"type"`
}

type SourceOutbrainAmplifyUpdateAuthenticationMethodType string

const (
	SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken      SourceOutbrainAmplifyUpdateAuthenticationMethodType = "source-outbrain-amplify-update_Authentication Method_Access token"
	SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword SourceOutbrainAmplifyUpdateAuthenticationMethodType = "source-outbrain-amplify-update_Authentication Method_Username Password"
)

type SourceOutbrainAmplifyUpdateAuthenticationMethod struct {
	SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken      *SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken
	SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword *SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword

	Type SourceOutbrainAmplifyUpdateAuthenticationMethodType
}

func CreateSourceOutbrainAmplifyUpdateAuthenticationMethodSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken(sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken) SourceOutbrainAmplifyUpdateAuthenticationMethod {
	typ := SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken

	return SourceOutbrainAmplifyUpdateAuthenticationMethod{
		SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken: &sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken,
		Type: typ,
	}
}

func CreateSourceOutbrainAmplifyUpdateAuthenticationMethodSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword(sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword) SourceOutbrainAmplifyUpdateAuthenticationMethod {
	typ := SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword

	return SourceOutbrainAmplifyUpdateAuthenticationMethod{
		SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword: &sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword,
		Type: typ,
	}
}

func (u *SourceOutbrainAmplifyUpdateAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken := new(SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken); err == nil {
		u.SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken = sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken
		u.Type = SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken
		return nil
	}

	sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword := new(SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword); err == nil {
		u.SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword = sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword
		u.Type = SourceOutbrainAmplifyUpdateAuthenticationMethodTypeSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceOutbrainAmplifyUpdateAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken != nil {
		return json.Marshal(u.SourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken)
	}

	if u.SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword != nil {
		return json.Marshal(u.SourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword)
	}

	return nil, nil
}

// SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion - The granularity used for geo location data in reports.
type SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion string

const (
	SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegionCountry   SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion = "country"
	SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegionRegion    SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion = "region"
	SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegionSubregion SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion = "subregion"
)

func (e SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion) ToPointer() *SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion {
	return &e
}

func (e *SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "country":
		fallthrough
	case "region":
		fallthrough
	case "subregion":
		*e = SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion: %v", v)
	}
}

// SourceOutbrainAmplifyUpdateGranularityForPeriodicReports - The granularity used for periodic data in reports. See <a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown">the docs</a>.
type SourceOutbrainAmplifyUpdateGranularityForPeriodicReports string

const (
	SourceOutbrainAmplifyUpdateGranularityForPeriodicReportsDaily   SourceOutbrainAmplifyUpdateGranularityForPeriodicReports = "daily"
	SourceOutbrainAmplifyUpdateGranularityForPeriodicReportsWeekly  SourceOutbrainAmplifyUpdateGranularityForPeriodicReports = "weekly"
	SourceOutbrainAmplifyUpdateGranularityForPeriodicReportsMonthly SourceOutbrainAmplifyUpdateGranularityForPeriodicReports = "monthly"
)

func (e SourceOutbrainAmplifyUpdateGranularityForPeriodicReports) ToPointer() *SourceOutbrainAmplifyUpdateGranularityForPeriodicReports {
	return &e
}

func (e *SourceOutbrainAmplifyUpdateGranularityForPeriodicReports) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "monthly":
		*e = SourceOutbrainAmplifyUpdateGranularityForPeriodicReports(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOutbrainAmplifyUpdateGranularityForPeriodicReports: %v", v)
	}
}

type SourceOutbrainAmplifyUpdate struct {
	// Credentials for making authenticated requests requires either username/password or access_token.
	Credentials SourceOutbrainAmplifyUpdateAuthenticationMethod `json:"credentials"`
	// Date in the format YYYY-MM-DD.
	EndDate *string `json:"end_date,omitempty"`
	// The granularity used for geo location data in reports.
	GeoLocationBreakdown *SourceOutbrainAmplifyUpdateGranularityForGeoLocationRegion `json:"geo_location_breakdown,omitempty"`
	// The granularity used for periodic data in reports. See <a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown">the docs</a>.
	ReportGranularity *SourceOutbrainAmplifyUpdateGranularityForPeriodicReports `json:"report_granularity,omitempty"`
	// Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
	StartDate string `json:"start_date"`
}
