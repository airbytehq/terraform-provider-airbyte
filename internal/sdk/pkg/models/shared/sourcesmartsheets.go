// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType string

const (
	SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthTypeAccessToken SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType = "access_token"
)

func (e SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType) ToPointer() *SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType {
	return &e
}

func (e *SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType: %v", v)
	}
}

type SourceSmartsheetsAuthorizationMethodAPIAccessToken struct {
	// The access token to use for accessing your data from Smartsheets. This access token must be generated by a user with at least read access to the data you'd like to replicate. Generate an access token in the Smartsheets main menu by clicking Account > Apps & Integrations > API Access. See the <a href="https://docs.airbyte.com/integrations/sources/smartsheets/#setup-guide">setup guide</a> for information on how to obtain this token.
	AccessToken string                                                      `json:"access_token"`
	AuthType    *SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthType `json:"auth_type,omitempty"`
}

type SourceSmartsheetsAuthorizationMethodOAuth20AuthType string

const (
	SourceSmartsheetsAuthorizationMethodOAuth20AuthTypeOauth20 SourceSmartsheetsAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceSmartsheetsAuthorizationMethodOAuth20AuthType) ToPointer() *SourceSmartsheetsAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceSmartsheetsAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceSmartsheetsAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSmartsheetsAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceSmartsheetsAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                               `json:"access_token"`
	AuthType    *SourceSmartsheetsAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// The API ID of the SmartSheets developer application.
	ClientID string `json:"client_id"`
	// The API Secret the SmartSheets developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

type SourceSmartsheetsAuthorizationMethodType string

const (
	SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodOAuth20        SourceSmartsheetsAuthorizationMethodType = "source-smartsheets_Authorization Method_OAuth2.0"
	SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodAPIAccessToken SourceSmartsheetsAuthorizationMethodType = "source-smartsheets_Authorization Method_API Access Token"
)

type SourceSmartsheetsAuthorizationMethod struct {
	SourceSmartsheetsAuthorizationMethodOAuth20        *SourceSmartsheetsAuthorizationMethodOAuth20
	SourceSmartsheetsAuthorizationMethodAPIAccessToken *SourceSmartsheetsAuthorizationMethodAPIAccessToken

	Type SourceSmartsheetsAuthorizationMethodType
}

func CreateSourceSmartsheetsAuthorizationMethodSourceSmartsheetsAuthorizationMethodOAuth20(sourceSmartsheetsAuthorizationMethodOAuth20 SourceSmartsheetsAuthorizationMethodOAuth20) SourceSmartsheetsAuthorizationMethod {
	typ := SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodOAuth20

	return SourceSmartsheetsAuthorizationMethod{
		SourceSmartsheetsAuthorizationMethodOAuth20: &sourceSmartsheetsAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceSmartsheetsAuthorizationMethodSourceSmartsheetsAuthorizationMethodAPIAccessToken(sourceSmartsheetsAuthorizationMethodAPIAccessToken SourceSmartsheetsAuthorizationMethodAPIAccessToken) SourceSmartsheetsAuthorizationMethod {
	typ := SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodAPIAccessToken

	return SourceSmartsheetsAuthorizationMethod{
		SourceSmartsheetsAuthorizationMethodAPIAccessToken: &sourceSmartsheetsAuthorizationMethodAPIAccessToken,
		Type: typ,
	}
}

func (u *SourceSmartsheetsAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSmartsheetsAuthorizationMethodAPIAccessToken := new(SourceSmartsheetsAuthorizationMethodAPIAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSmartsheetsAuthorizationMethodAPIAccessToken); err == nil {
		u.SourceSmartsheetsAuthorizationMethodAPIAccessToken = sourceSmartsheetsAuthorizationMethodAPIAccessToken
		u.Type = SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodAPIAccessToken
		return nil
	}

	sourceSmartsheetsAuthorizationMethodOAuth20 := new(SourceSmartsheetsAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSmartsheetsAuthorizationMethodOAuth20); err == nil {
		u.SourceSmartsheetsAuthorizationMethodOAuth20 = sourceSmartsheetsAuthorizationMethodOAuth20
		u.Type = SourceSmartsheetsAuthorizationMethodTypeSourceSmartsheetsAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSmartsheetsAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
		return json.Marshal(u.SourceSmartsheetsAuthorizationMethodAPIAccessToken)
	}

	if u.SourceSmartsheetsAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceSmartsheetsAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceSmartsheetsValidenums string

const (
	SourceSmartsheetsValidenumsSheetcreatedAt   SourceSmartsheetsValidenums = "sheetcreatedAt"
	SourceSmartsheetsValidenumsSheetid          SourceSmartsheetsValidenums = "sheetid"
	SourceSmartsheetsValidenumsSheetmodifiedAt  SourceSmartsheetsValidenums = "sheetmodifiedAt"
	SourceSmartsheetsValidenumsSheetname        SourceSmartsheetsValidenums = "sheetname"
	SourceSmartsheetsValidenumsSheetpermalink   SourceSmartsheetsValidenums = "sheetpermalink"
	SourceSmartsheetsValidenumsSheetversion     SourceSmartsheetsValidenums = "sheetversion"
	SourceSmartsheetsValidenumsSheetaccessLevel SourceSmartsheetsValidenums = "sheetaccess_level"
	SourceSmartsheetsValidenumsRowID            SourceSmartsheetsValidenums = "row_id"
	SourceSmartsheetsValidenumsRowAccessLevel   SourceSmartsheetsValidenums = "row_access_level"
	SourceSmartsheetsValidenumsRowCreatedAt     SourceSmartsheetsValidenums = "row_created_at"
	SourceSmartsheetsValidenumsRowCreatedBy     SourceSmartsheetsValidenums = "row_created_by"
	SourceSmartsheetsValidenumsRowExpanded      SourceSmartsheetsValidenums = "row_expanded"
	SourceSmartsheetsValidenumsRowModifiedBy    SourceSmartsheetsValidenums = "row_modified_by"
	SourceSmartsheetsValidenumsRowParentID      SourceSmartsheetsValidenums = "row_parent_id"
	SourceSmartsheetsValidenumsRowPermalink     SourceSmartsheetsValidenums = "row_permalink"
	SourceSmartsheetsValidenumsRowNumber        SourceSmartsheetsValidenums = "row_number"
	SourceSmartsheetsValidenumsRowVersion       SourceSmartsheetsValidenums = "row_version"
)

func (e SourceSmartsheetsValidenums) ToPointer() *SourceSmartsheetsValidenums {
	return &e
}

func (e *SourceSmartsheetsValidenums) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sheetcreatedAt":
		fallthrough
	case "sheetid":
		fallthrough
	case "sheetmodifiedAt":
		fallthrough
	case "sheetname":
		fallthrough
	case "sheetpermalink":
		fallthrough
	case "sheetversion":
		fallthrough
	case "sheetaccess_level":
		fallthrough
	case "row_id":
		fallthrough
	case "row_access_level":
		fallthrough
	case "row_created_at":
		fallthrough
	case "row_created_by":
		fallthrough
	case "row_expanded":
		fallthrough
	case "row_modified_by":
		fallthrough
	case "row_parent_id":
		fallthrough
	case "row_permalink":
		fallthrough
	case "row_number":
		fallthrough
	case "row_version":
		*e = SourceSmartsheetsValidenums(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSmartsheetsValidenums: %v", v)
	}
}

type SourceSmartsheetsSmartsheets string

const (
	SourceSmartsheetsSmartsheetsSmartsheets SourceSmartsheetsSmartsheets = "smartsheets"
)

func (e SourceSmartsheetsSmartsheets) ToPointer() *SourceSmartsheetsSmartsheets {
	return &e
}

func (e *SourceSmartsheetsSmartsheets) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smartsheets":
		*e = SourceSmartsheetsSmartsheets(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSmartsheetsSmartsheets: %v", v)
	}
}

type SourceSmartsheets struct {
	Credentials SourceSmartsheetsAuthorizationMethod `json:"credentials"`
	// A List of available columns which metadata can be pulled from.
	MetadataFields []SourceSmartsheetsValidenums `json:"metadata_fields,omitempty"`
	SourceType     SourceSmartsheetsSmartsheets  `json:"sourceType"`
	// The spreadsheet ID. Find it by opening the spreadsheet then navigating to File > Properties
	SpreadsheetID string `json:"spreadsheet_id"`
	// Only rows modified after this date/time will be replicated. This should be an ISO 8601 string, for instance: `2000-01-01T13:00:00`
	StartDatetime *time.Time `json:"start_datetime,omitempty"`
}
