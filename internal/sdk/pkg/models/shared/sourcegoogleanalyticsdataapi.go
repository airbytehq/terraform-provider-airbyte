// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthTypeService SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

// SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication - Credentials for the service
type SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication struct {
	authType *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType `const:"Service" json:"auth_type,omitempty"`
	// The JSON key linked to the service account used for authorization. For steps on obtaining this key, refer to <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api/#setup-guide">the setup guide</a>.
	CredentialsJSON string `json:"credentials_json"`
}

func (s SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication) GetAuthType() *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthType {
	return SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthTypeService.ToPointer()
}

func (o *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication) GetCredentialsJSON() string {
	if o == nil {
		return ""
	}
	return o.CredentialsJSON
}

type SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType string

const (
	SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthTypeClient SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType = "Client"
)

func (e SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType) ToPointer() *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType {
	return &e
}

func (e *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType: %v", v)
	}
}

// SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth - Credentials for the service
type SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                                                    `json:"access_token,omitempty"`
	authType    *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Google Analytics developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Google Analytics developer application.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) GetAuthType() *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthType {
	return SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthTypeClient.ToPointer()
}

func (o *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleAnalyticsDataAPICredentialsType string

const (
	SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth      SourceGoogleAnalyticsDataAPICredentialsType = "source-google-analytics-data-api_Credentials_Authenticate via Google (Oauth)"
	SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsDataAPICredentialsType = "source-google-analytics-data-api_Credentials_Service Account Key Authentication"
)

type SourceGoogleAnalyticsDataAPICredentials struct {
	SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth      *SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth
	SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication *SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication

	Type SourceGoogleAnalyticsDataAPICredentialsType
}

func CreateSourceGoogleAnalyticsDataAPICredentialsSourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth(sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth) SourceGoogleAnalyticsDataAPICredentials {
	typ := SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth

	return SourceGoogleAnalyticsDataAPICredentials{
		SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth: &sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth,
		Type: typ,
	}
}

func CreateSourceGoogleAnalyticsDataAPICredentialsSourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication(sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication) SourceGoogleAnalyticsDataAPICredentials {
	typ := SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication

	return SourceGoogleAnalyticsDataAPICredentials{
		SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication: &sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleAnalyticsDataAPICredentials) UnmarshalJSON(data []byte) error {

	sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication := new(SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication = sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication
		u.Type = SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth := new(SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth, "", true, true); err == nil {
		u.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth = sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth
		u.Type = SourceGoogleAnalyticsDataAPICredentialsTypeSourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleAnalyticsDataAPICredentials) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth != nil {
		return utils.MarshalJSON(u.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth, "", true)
	}

	if u.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI string

const (
	SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI = "google-analytics-data-api"
)

func (e SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI) ToPointer() *SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI {
	return &e
}

func (e *SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-analytics-data-api":
		*e = SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI: %v", v)
	}
}

type SourceGoogleAnalyticsDataAPI struct {
	// Credentials for the service
	Credentials *SourceGoogleAnalyticsDataAPICredentials `json:"credentials,omitempty"`
	// A JSON array describing the custom reports you want to sync from Google Analytics. See <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api/#custom-reports">the documentation</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string `json:"custom_reports,omitempty"`
	// The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
	DateRangesStartDate types.Date `json:"date_ranges_start_date"`
	// The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the <a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'>Google Analytics documentation</a> to locate your property ID.
	PropertyID string                                             `json:"property_id"`
	sourceType SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI `const:"google-analytics-data-api" json:"sourceType"`
	// The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api">the documentation</a>.
	WindowInDays *int64 `default:"1" json:"window_in_days"`
}

func (s SourceGoogleAnalyticsDataAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsDataAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsDataAPI) GetCredentials() *SourceGoogleAnalyticsDataAPICredentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceGoogleAnalyticsDataAPI) GetCustomReports() *string {
	if o == nil {
		return nil
	}
	return o.CustomReports
}

func (o *SourceGoogleAnalyticsDataAPI) GetDateRangesStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.DateRangesStartDate
}

func (o *SourceGoogleAnalyticsDataAPI) GetPropertyID() string {
	if o == nil {
		return ""
	}
	return o.PropertyID
}

func (o *SourceGoogleAnalyticsDataAPI) GetSourceType() SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI {
	return SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPIGoogleAnalyticsDataAPI
}

func (o *SourceGoogleAnalyticsDataAPI) GetWindowInDays() *int64 {
	if o == nil {
		return nil
	}
	return o.WindowInDays
}
