// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type Pokeapi string

const (
	PokeapiPokeapi Pokeapi = "pokeapi"
)

func (e Pokeapi) ToPointer() *Pokeapi {
	return &e
}

func (e *Pokeapi) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pokeapi":
		*e = Pokeapi(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pokeapi: %v", v)
	}
}

type SourcePokeapi struct {
	// Pokemon requested from the API.
	PokemonName string  `json:"pokemon_name"`
	sourceType  Pokeapi `const:"pokeapi" json:"sourceType"`
}

func (s SourcePokeapi) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePokeapi) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePokeapi) GetPokemonName() string {
	if o == nil {
		return ""
	}
	return o.PokemonName
}

func (o *SourcePokeapi) GetSourceType() Pokeapi {
	return PokeapiPokeapi
}
