// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceAlloydbReplicationMethodStandardMethod string

const (
	SourceAlloydbReplicationMethodStandardMethodStandard SourceAlloydbReplicationMethodStandardMethod = "Standard"
)

func (e SourceAlloydbReplicationMethodStandardMethod) ToPointer() *SourceAlloydbReplicationMethodStandardMethod {
	return &e
}

func (e *SourceAlloydbReplicationMethodStandardMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = SourceAlloydbReplicationMethodStandardMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbReplicationMethodStandardMethod: %v", v)
	}
}

// SourceAlloydbReplicationMethodStandard - Standard replication requires no setup on the DB side but will not be able to represent deletions incrementally.
type SourceAlloydbReplicationMethodStandard struct {
	Method SourceAlloydbReplicationMethodStandardMethod `json:"method"`
}

// SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour - Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
type SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour string

const (
	SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourWhileReadingData                 SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour = "While reading Data"
	SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourAfterLoadingDataInTheDestination SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour = "After loading Data in the destination"
)

func (e SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour) ToPointer() *SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour {
	return &e
}

func (e *SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "While reading Data":
		fallthrough
	case "After loading Data in the destination":
		*e = SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour: %v", v)
	}
}

type SourceAlloydbReplicationMethodLogicalReplicationCDCMethod string

const (
	SourceAlloydbReplicationMethodLogicalReplicationCDCMethodCdc SourceAlloydbReplicationMethodLogicalReplicationCDCMethod = "CDC"
)

func (e SourceAlloydbReplicationMethodLogicalReplicationCDCMethod) ToPointer() *SourceAlloydbReplicationMethodLogicalReplicationCDCMethod {
	return &e
}

func (e *SourceAlloydbReplicationMethodLogicalReplicationCDCMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CDC":
		*e = SourceAlloydbReplicationMethodLogicalReplicationCDCMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbReplicationMethodLogicalReplicationCDCMethod: %v", v)
	}
}

// SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin - A logical decoding plugin installed on the PostgreSQL server.
type SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin string

const (
	SourceAlloydbReplicationMethodLogicalReplicationCDCPluginPgoutput SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin = "pgoutput"
)

func (e SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin) ToPointer() *SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin {
	return &e
}

func (e *SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pgoutput":
		*e = SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin: %v", v)
	}
}

// SourceAlloydbReplicationMethodLogicalReplicationCDC - Logical replication uses the Postgres write-ahead log (WAL) to detect inserts, updates, and deletes. This needs to be configured on the source database itself. Only available on Postgres 10 and above. Read the <a href="https://docs.airbyte.com/integrations/sources/postgres">docs</a>.
type SourceAlloydbReplicationMethodLogicalReplicationCDC struct {
	// The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-5-optional-set-up-initial-waiting-time">initial waiting time</a>.
	InitialWaitingSeconds *int64 `json:"initial_waiting_seconds,omitempty"`
	// Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
	LsnCommitBehaviour *SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviour `json:"lsn_commit_behaviour,omitempty"`
	Method             SourceAlloydbReplicationMethodLogicalReplicationCDCMethod              `json:"method"`
	// A logical decoding plugin installed on the PostgreSQL server.
	Plugin *SourceAlloydbReplicationMethodLogicalReplicationCDCPlugin `json:"plugin,omitempty"`
	// A Postgres publication used for consuming changes. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables">publications and replication identities</a>.
	Publication string `json:"publication"`
	// The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful.
	QueueSize *int64 `json:"queue_size,omitempty"`
	// A plugin logical replication slot. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot">replication slots</a>.
	ReplicationSlot string `json:"replication_slot"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbReplicationMethodLogicalReplicationCDC SourceAlloydbReplicationMethodLogicalReplicationCDC

func (c *SourceAlloydbReplicationMethodLogicalReplicationCDC) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbReplicationMethodLogicalReplicationCDC{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbReplicationMethodLogicalReplicationCDC(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "initial_waiting_seconds")
	delete(additionalFields, "lsn_commit_behaviour")
	delete(additionalFields, "method")
	delete(additionalFields, "plugin")
	delete(additionalFields, "publication")
	delete(additionalFields, "queue_size")
	delete(additionalFields, "replication_slot")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbReplicationMethodLogicalReplicationCDC) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbReplicationMethodLogicalReplicationCDC(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbReplicationMethodStandardXminMethod string

const (
	SourceAlloydbReplicationMethodStandardXminMethodXmin SourceAlloydbReplicationMethodStandardXminMethod = "Xmin"
)

func (e SourceAlloydbReplicationMethodStandardXminMethod) ToPointer() *SourceAlloydbReplicationMethodStandardXminMethod {
	return &e
}

func (e *SourceAlloydbReplicationMethodStandardXminMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Xmin":
		*e = SourceAlloydbReplicationMethodStandardXminMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbReplicationMethodStandardXminMethod: %v", v)
	}
}

// SourceAlloydbReplicationMethodStandardXmin - Xmin replication requires no setup on the DB side but will not be able to represent deletions incrementally.
type SourceAlloydbReplicationMethodStandardXmin struct {
	Method SourceAlloydbReplicationMethodStandardXminMethod `json:"method"`
}

type SourceAlloydbReplicationMethodType string

const (
	SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandardXmin          SourceAlloydbReplicationMethodType = "source-alloydb_Replication Method_Standard (Xmin)"
	SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodLogicalReplicationCDC SourceAlloydbReplicationMethodType = "source-alloydb_Replication Method_Logical Replication (CDC)"
	SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandard              SourceAlloydbReplicationMethodType = "source-alloydb_Replication Method_Standard"
)

type SourceAlloydbReplicationMethod struct {
	SourceAlloydbReplicationMethodStandardXmin          *SourceAlloydbReplicationMethodStandardXmin
	SourceAlloydbReplicationMethodLogicalReplicationCDC *SourceAlloydbReplicationMethodLogicalReplicationCDC
	SourceAlloydbReplicationMethodStandard              *SourceAlloydbReplicationMethodStandard

	Type SourceAlloydbReplicationMethodType
}

func CreateSourceAlloydbReplicationMethodSourceAlloydbReplicationMethodStandardXmin(sourceAlloydbReplicationMethodStandardXmin SourceAlloydbReplicationMethodStandardXmin) SourceAlloydbReplicationMethod {
	typ := SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandardXmin

	return SourceAlloydbReplicationMethod{
		SourceAlloydbReplicationMethodStandardXmin: &sourceAlloydbReplicationMethodStandardXmin,
		Type: typ,
	}
}

func CreateSourceAlloydbReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCDC(sourceAlloydbReplicationMethodLogicalReplicationCDC SourceAlloydbReplicationMethodLogicalReplicationCDC) SourceAlloydbReplicationMethod {
	typ := SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodLogicalReplicationCDC

	return SourceAlloydbReplicationMethod{
		SourceAlloydbReplicationMethodLogicalReplicationCDC: &sourceAlloydbReplicationMethodLogicalReplicationCDC,
		Type: typ,
	}
}

func CreateSourceAlloydbReplicationMethodSourceAlloydbReplicationMethodStandard(sourceAlloydbReplicationMethodStandard SourceAlloydbReplicationMethodStandard) SourceAlloydbReplicationMethod {
	typ := SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandard

	return SourceAlloydbReplicationMethod{
		SourceAlloydbReplicationMethodStandard: &sourceAlloydbReplicationMethodStandard,
		Type:                                   typ,
	}
}

func (u *SourceAlloydbReplicationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbReplicationMethodStandardXmin := new(SourceAlloydbReplicationMethodStandardXmin)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbReplicationMethodStandardXmin); err == nil {
		u.SourceAlloydbReplicationMethodStandardXmin = sourceAlloydbReplicationMethodStandardXmin
		u.Type = SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandardXmin
		return nil
	}

	sourceAlloydbReplicationMethodLogicalReplicationCDC := new(SourceAlloydbReplicationMethodLogicalReplicationCDC)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbReplicationMethodLogicalReplicationCDC); err == nil {
		u.SourceAlloydbReplicationMethodLogicalReplicationCDC = sourceAlloydbReplicationMethodLogicalReplicationCDC
		u.Type = SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodLogicalReplicationCDC
		return nil
	}

	sourceAlloydbReplicationMethodStandard := new(SourceAlloydbReplicationMethodStandard)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbReplicationMethodStandard); err == nil {
		u.SourceAlloydbReplicationMethodStandard = sourceAlloydbReplicationMethodStandard
		u.Type = SourceAlloydbReplicationMethodTypeSourceAlloydbReplicationMethodStandard
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbReplicationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbReplicationMethodStandardXmin != nil {
		return json.Marshal(u.SourceAlloydbReplicationMethodStandardXmin)
	}

	if u.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
		return json.Marshal(u.SourceAlloydbReplicationMethodLogicalReplicationCDC)
	}

	if u.SourceAlloydbReplicationMethodStandard != nil {
		return json.Marshal(u.SourceAlloydbReplicationMethodStandard)
	}

	return nil, nil
}

type SourceAlloydbAlloydb string

const (
	SourceAlloydbAlloydbAlloydb SourceAlloydbAlloydb = "alloydb"
)

func (e SourceAlloydbAlloydb) ToPointer() *SourceAlloydbAlloydb {
	return &e
}

func (e *SourceAlloydbAlloydb) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alloydb":
		*e = SourceAlloydbAlloydb(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbAlloydb: %v", v)
	}
}

type SourceAlloydbSSLModesVerifyFullMode string

const (
	SourceAlloydbSSLModesVerifyFullModeVerifyFull SourceAlloydbSSLModesVerifyFullMode = "verify-full"
)

func (e SourceAlloydbSSLModesVerifyFullMode) ToPointer() *SourceAlloydbSSLModesVerifyFullMode {
	return &e
}

func (e *SourceAlloydbSSLModesVerifyFullMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-full":
		*e = SourceAlloydbSSLModesVerifyFullMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesVerifyFullMode: %v", v)
	}
}

// SourceAlloydbSSLModesVerifyFull - This is the most secure mode. Always require encryption and verifies the identity of the source database server.
type SourceAlloydbSSLModesVerifyFull struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                             `json:"client_key_password,omitempty"`
	Mode              SourceAlloydbSSLModesVerifyFullMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesVerifyFull SourceAlloydbSSLModesVerifyFull

func (c *SourceAlloydbSSLModesVerifyFull) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesVerifyFull{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesVerifyFull(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesVerifyFull) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesVerifyFull(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesVerifyCaMode string

const (
	SourceAlloydbSSLModesVerifyCaModeVerifyCa SourceAlloydbSSLModesVerifyCaMode = "verify-ca"
)

func (e SourceAlloydbSSLModesVerifyCaMode) ToPointer() *SourceAlloydbSSLModesVerifyCaMode {
	return &e
}

func (e *SourceAlloydbSSLModesVerifyCaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-ca":
		*e = SourceAlloydbSSLModesVerifyCaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesVerifyCaMode: %v", v)
	}
}

// SourceAlloydbSSLModesVerifyCa - Always require encryption and verifies that the source database server has a valid SSL certificate.
type SourceAlloydbSSLModesVerifyCa struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                           `json:"client_key_password,omitempty"`
	Mode              SourceAlloydbSSLModesVerifyCaMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesVerifyCa SourceAlloydbSSLModesVerifyCa

func (c *SourceAlloydbSSLModesVerifyCa) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesVerifyCa{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesVerifyCa(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesVerifyCa) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesVerifyCa(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesRequireMode string

const (
	SourceAlloydbSSLModesRequireModeRequire SourceAlloydbSSLModesRequireMode = "require"
)

func (e SourceAlloydbSSLModesRequireMode) ToPointer() *SourceAlloydbSSLModesRequireMode {
	return &e
}

func (e *SourceAlloydbSSLModesRequireMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "require":
		*e = SourceAlloydbSSLModesRequireMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesRequireMode: %v", v)
	}
}

// SourceAlloydbSSLModesRequire - Always require encryption. If the source database server does not support encryption, connection will fail.
type SourceAlloydbSSLModesRequire struct {
	Mode SourceAlloydbSSLModesRequireMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesRequire SourceAlloydbSSLModesRequire

func (c *SourceAlloydbSSLModesRequire) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesRequire{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesRequire(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesRequire) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesRequire(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesPreferMode string

const (
	SourceAlloydbSSLModesPreferModePrefer SourceAlloydbSSLModesPreferMode = "prefer"
)

func (e SourceAlloydbSSLModesPreferMode) ToPointer() *SourceAlloydbSSLModesPreferMode {
	return &e
}

func (e *SourceAlloydbSSLModesPreferMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prefer":
		*e = SourceAlloydbSSLModesPreferMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesPreferMode: %v", v)
	}
}

// SourceAlloydbSSLModesPrefer - Allows unencrypted connection only if the source database does not support encryption.
type SourceAlloydbSSLModesPrefer struct {
	Mode SourceAlloydbSSLModesPreferMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesPrefer SourceAlloydbSSLModesPrefer

func (c *SourceAlloydbSSLModesPrefer) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesPrefer{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesPrefer(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesPrefer) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesPrefer(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesAllowMode string

const (
	SourceAlloydbSSLModesAllowModeAllow SourceAlloydbSSLModesAllowMode = "allow"
)

func (e SourceAlloydbSSLModesAllowMode) ToPointer() *SourceAlloydbSSLModesAllowMode {
	return &e
}

func (e *SourceAlloydbSSLModesAllowMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		*e = SourceAlloydbSSLModesAllowMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesAllowMode: %v", v)
	}
}

// SourceAlloydbSSLModesAllow - Enables encryption only when required by the source database.
type SourceAlloydbSSLModesAllow struct {
	Mode SourceAlloydbSSLModesAllowMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesAllow SourceAlloydbSSLModesAllow

func (c *SourceAlloydbSSLModesAllow) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesAllow{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesAllow(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesAllow) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesAllow(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesDisableMode string

const (
	SourceAlloydbSSLModesDisableModeDisable SourceAlloydbSSLModesDisableMode = "disable"
)

func (e SourceAlloydbSSLModesDisableMode) ToPointer() *SourceAlloydbSSLModesDisableMode {
	return &e
}

func (e *SourceAlloydbSSLModesDisableMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disable":
		*e = SourceAlloydbSSLModesDisableMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSLModesDisableMode: %v", v)
	}
}

// SourceAlloydbSSLModesDisable - Disables encryption of communication between Airbyte and source database.
type SourceAlloydbSSLModesDisable struct {
	Mode SourceAlloydbSSLModesDisableMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbSSLModesDisable SourceAlloydbSSLModesDisable

func (c *SourceAlloydbSSLModesDisable) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbSSLModesDisable{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbSSLModesDisable(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbSSLModesDisable) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbSSLModesDisable(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbSSLModesType string

const (
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesDisable    SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_disable"
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesAllow      SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_allow"
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesPrefer     SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_prefer"
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesRequire    SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_require"
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyCa   SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_verify-ca"
	SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyFull SourceAlloydbSSLModesType = "source-alloydb_SSL Modes_verify-full"
)

type SourceAlloydbSSLModes struct {
	SourceAlloydbSSLModesDisable    *SourceAlloydbSSLModesDisable
	SourceAlloydbSSLModesAllow      *SourceAlloydbSSLModesAllow
	SourceAlloydbSSLModesPrefer     *SourceAlloydbSSLModesPrefer
	SourceAlloydbSSLModesRequire    *SourceAlloydbSSLModesRequire
	SourceAlloydbSSLModesVerifyCa   *SourceAlloydbSSLModesVerifyCa
	SourceAlloydbSSLModesVerifyFull *SourceAlloydbSSLModesVerifyFull

	Type SourceAlloydbSSLModesType
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesDisable(sourceAlloydbSSLModesDisable SourceAlloydbSSLModesDisable) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesDisable

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesDisable: &sourceAlloydbSSLModesDisable,
		Type:                         typ,
	}
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesAllow(sourceAlloydbSSLModesAllow SourceAlloydbSSLModesAllow) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesAllow

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesAllow: &sourceAlloydbSSLModesAllow,
		Type:                       typ,
	}
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesPrefer(sourceAlloydbSSLModesPrefer SourceAlloydbSSLModesPrefer) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesPrefer

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesPrefer: &sourceAlloydbSSLModesPrefer,
		Type:                        typ,
	}
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesRequire(sourceAlloydbSSLModesRequire SourceAlloydbSSLModesRequire) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesRequire

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesRequire: &sourceAlloydbSSLModesRequire,
		Type:                         typ,
	}
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesVerifyCa(sourceAlloydbSSLModesVerifyCa SourceAlloydbSSLModesVerifyCa) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyCa

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesVerifyCa: &sourceAlloydbSSLModesVerifyCa,
		Type:                          typ,
	}
}

func CreateSourceAlloydbSSLModesSourceAlloydbSSLModesVerifyFull(sourceAlloydbSSLModesVerifyFull SourceAlloydbSSLModesVerifyFull) SourceAlloydbSSLModes {
	typ := SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyFull

	return SourceAlloydbSSLModes{
		SourceAlloydbSSLModesVerifyFull: &sourceAlloydbSSLModesVerifyFull,
		Type:                            typ,
	}
}

func (u *SourceAlloydbSSLModes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbSSLModesDisable := new(SourceAlloydbSSLModesDisable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesDisable); err == nil {
		u.SourceAlloydbSSLModesDisable = sourceAlloydbSSLModesDisable
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesDisable
		return nil
	}

	sourceAlloydbSSLModesAllow := new(SourceAlloydbSSLModesAllow)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesAllow); err == nil {
		u.SourceAlloydbSSLModesAllow = sourceAlloydbSSLModesAllow
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesAllow
		return nil
	}

	sourceAlloydbSSLModesPrefer := new(SourceAlloydbSSLModesPrefer)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesPrefer); err == nil {
		u.SourceAlloydbSSLModesPrefer = sourceAlloydbSSLModesPrefer
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesPrefer
		return nil
	}

	sourceAlloydbSSLModesRequire := new(SourceAlloydbSSLModesRequire)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesRequire); err == nil {
		u.SourceAlloydbSSLModesRequire = sourceAlloydbSSLModesRequire
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesRequire
		return nil
	}

	sourceAlloydbSSLModesVerifyCa := new(SourceAlloydbSSLModesVerifyCa)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesVerifyCa); err == nil {
		u.SourceAlloydbSSLModesVerifyCa = sourceAlloydbSSLModesVerifyCa
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyCa
		return nil
	}

	sourceAlloydbSSLModesVerifyFull := new(SourceAlloydbSSLModesVerifyFull)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSLModesVerifyFull); err == nil {
		u.SourceAlloydbSSLModesVerifyFull = sourceAlloydbSSLModesVerifyFull
		u.Type = SourceAlloydbSSLModesTypeSourceAlloydbSSLModesVerifyFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbSSLModes) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbSSLModesDisable != nil {
		return json.Marshal(u.SourceAlloydbSSLModesDisable)
	}

	if u.SourceAlloydbSSLModesAllow != nil {
		return json.Marshal(u.SourceAlloydbSSLModesAllow)
	}

	if u.SourceAlloydbSSLModesPrefer != nil {
		return json.Marshal(u.SourceAlloydbSSLModesPrefer)
	}

	if u.SourceAlloydbSSLModesRequire != nil {
		return json.Marshal(u.SourceAlloydbSSLModesRequire)
	}

	if u.SourceAlloydbSSLModesVerifyCa != nil {
		return json.Marshal(u.SourceAlloydbSSLModesVerifyCa)
	}

	if u.SourceAlloydbSSLModesVerifyFull != nil {
		return json.Marshal(u.SourceAlloydbSSLModesVerifyFull)
	}

	return nil, nil
}

// SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// SourceAlloydbSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// SourceAlloydbSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod string

const (
	SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethodNoTunnel SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// SourceAlloydbSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type SourceAlloydbSSHTunnelMethodType string

const (
	SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodNoTunnel               SourceAlloydbSSHTunnelMethodType = "source-alloydb_SSH Tunnel Method_No Tunnel"
	SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodSSHKeyAuthentication   SourceAlloydbSSHTunnelMethodType = "source-alloydb_SSH Tunnel Method_SSH Key Authentication"
	SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodPasswordAuthentication SourceAlloydbSSHTunnelMethodType = "source-alloydb_SSH Tunnel Method_Password Authentication"
)

type SourceAlloydbSSHTunnelMethod struct {
	SourceAlloydbSSHTunnelMethodNoTunnel               *SourceAlloydbSSHTunnelMethodNoTunnel
	SourceAlloydbSSHTunnelMethodSSHKeyAuthentication   *SourceAlloydbSSHTunnelMethodSSHKeyAuthentication
	SourceAlloydbSSHTunnelMethodPasswordAuthentication *SourceAlloydbSSHTunnelMethodPasswordAuthentication

	Type SourceAlloydbSSHTunnelMethodType
}

func CreateSourceAlloydbSSHTunnelMethodSourceAlloydbSSHTunnelMethodNoTunnel(sourceAlloydbSSHTunnelMethodNoTunnel SourceAlloydbSSHTunnelMethodNoTunnel) SourceAlloydbSSHTunnelMethod {
	typ := SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodNoTunnel

	return SourceAlloydbSSHTunnelMethod{
		SourceAlloydbSSHTunnelMethodNoTunnel: &sourceAlloydbSSHTunnelMethodNoTunnel,
		Type:                                 typ,
	}
}

func CreateSourceAlloydbSSHTunnelMethodSourceAlloydbSSHTunnelMethodSSHKeyAuthentication(sourceAlloydbSSHTunnelMethodSSHKeyAuthentication SourceAlloydbSSHTunnelMethodSSHKeyAuthentication) SourceAlloydbSSHTunnelMethod {
	typ := SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodSSHKeyAuthentication

	return SourceAlloydbSSHTunnelMethod{
		SourceAlloydbSSHTunnelMethodSSHKeyAuthentication: &sourceAlloydbSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateSourceAlloydbSSHTunnelMethodSourceAlloydbSSHTunnelMethodPasswordAuthentication(sourceAlloydbSSHTunnelMethodPasswordAuthentication SourceAlloydbSSHTunnelMethodPasswordAuthentication) SourceAlloydbSSHTunnelMethod {
	typ := SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodPasswordAuthentication

	return SourceAlloydbSSHTunnelMethod{
		SourceAlloydbSSHTunnelMethodPasswordAuthentication: &sourceAlloydbSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *SourceAlloydbSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbSSHTunnelMethodNoTunnel := new(SourceAlloydbSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSHTunnelMethodNoTunnel); err == nil {
		u.SourceAlloydbSSHTunnelMethodNoTunnel = sourceAlloydbSSHTunnelMethodNoTunnel
		u.Type = SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodNoTunnel
		return nil
	}

	sourceAlloydbSSHTunnelMethodSSHKeyAuthentication := new(SourceAlloydbSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication = sourceAlloydbSSHTunnelMethodSSHKeyAuthentication
		u.Type = SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	sourceAlloydbSSHTunnelMethodPasswordAuthentication := new(SourceAlloydbSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbSSHTunnelMethodPasswordAuthentication); err == nil {
		u.SourceAlloydbSSHTunnelMethodPasswordAuthentication = sourceAlloydbSSHTunnelMethodPasswordAuthentication
		u.Type = SourceAlloydbSSHTunnelMethodTypeSourceAlloydbSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.SourceAlloydbSSHTunnelMethodNoTunnel)
	}

	if u.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.SourceAlloydbSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type SourceAlloydb struct {
	// Name of the database.
	Database string `json:"database"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// Port of the database.
	Port int64 `json:"port"`
	// Replication method for extracting data from the database.
	ReplicationMethod *SourceAlloydbReplicationMethod `json:"replication_method,omitempty"`
	// The list of schemas (case sensitive) to sync from. Defaults to public.
	Schemas    []string             `json:"schemas,omitempty"`
	SourceType SourceAlloydbAlloydb `json:"sourceType"`
	// SSL connection modes.
	//   Read more <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
	SslMode *SourceAlloydbSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceAlloydbSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to access the database.
	Username string `json:"username"`
}
