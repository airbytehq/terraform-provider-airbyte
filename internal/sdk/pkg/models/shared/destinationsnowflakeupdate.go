// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType = "Username and Password"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword struct {
	authType *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType `const:"Username and Password" json:"auth_type"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

func (d DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) GetAuthType() *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType {
	return DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword.ToPointer()
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType = "Key Pair Authentication"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication struct {
	authType *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType `const:"Key Pair Authentication" json:"auth_type"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

func (d DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) GetAuthType() *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType {
	return DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication.ToPointer()
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) GetPrivateKey() string {
	if o == nil {
		return ""
	}
	return o.PrivateKey
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) GetPrivateKeyPassword() *string {
	if o == nil {
		return nil
	}
	return o.PrivateKeyPassword
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthTypeOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType = "OAuth2.0"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                        `json:"access_token"`
	authType    *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType `const:"OAuth2.0" json:"auth_type"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

func (d DestinationSnowflakeUpdateAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) GetAuthType() *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType {
	return DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthTypeOAuth20.ToPointer()
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *DestinationSnowflakeUpdateAuthorizationMethodOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type DestinationSnowflakeUpdateAuthorizationMethodType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20               DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_OAuth2.0"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Username and Password"
)

type DestinationSnowflakeUpdateAuthorizationMethod struct {
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20               *DestinationSnowflakeUpdateAuthorizationMethodOAuth20
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeUpdateAuthorizationMethodType
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodOAuth20(destinationSnowflakeUpdateAuthorizationMethodOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodOAuth20: &destinationSnowflakeUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication(destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword(destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword: &destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword, "", true, true); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword = destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication, "", true, true); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication = destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodOAuth20 := new(DestinationSnowflakeUpdateAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeUpdateAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 = destinationSnowflakeUpdateAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20, "", true)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication, "", true)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationSnowflakeUpdate struct {
	Credentials *DestinationSnowflakeUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database string `json:"database"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The schema to write raw tables into
	RawDataSchema *string `json:"raw_data_schema,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}

func (o *DestinationSnowflakeUpdate) GetCredentials() *DestinationSnowflakeUpdateAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *DestinationSnowflakeUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationSnowflakeUpdate) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationSnowflakeUpdate) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationSnowflakeUpdate) GetRawDataSchema() *string {
	if o == nil {
		return nil
	}
	return o.RawDataSchema
}

func (o *DestinationSnowflakeUpdate) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *DestinationSnowflakeUpdate) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *DestinationSnowflakeUpdate) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *DestinationSnowflakeUpdate) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}
