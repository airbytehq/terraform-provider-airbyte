// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType = "Username and Password"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword struct {
	AuthType *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType `json:"auth_type,omitempty"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType = "Key Pair Authentication"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication struct {
	AuthType *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType `json:"auth_type,omitempty"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthTypeOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType = "OAuth2.0"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                        `json:"access_token"`
	AuthType    *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

type DestinationSnowflakeUpdateAuthorizationMethodType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20               DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_OAuth2.0"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Username and Password"
)

type DestinationSnowflakeUpdateAuthorizationMethod struct {
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20               *DestinationSnowflakeUpdateAuthorizationMethodOAuth20
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeUpdateAuthorizationMethodType
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodOAuth20(destinationSnowflakeUpdateAuthorizationMethodOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodOAuth20: &destinationSnowflakeUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication(destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword(destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword: &destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeUpdateAuthorizationMethodOAuth20 := new(DestinationSnowflakeUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodOAuth20); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 = destinationSnowflakeUpdateAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication = destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword = destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	}

	return nil, nil
}

type DestinationSnowflakeUpdate struct {
	Credentials *DestinationSnowflakeUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database string `json:"database"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// (Beta) The schema to write raw tables into
	RawDataSchema *string `json:"raw_data_schema,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// (Beta) Use <a href="https://github.com/airbytehq/airbyte/issues/26028" target="_blank">Destinations V2</a>. Contact Airbyte Support to participate in the beta program.
	Use1s1tFormat *bool `json:"use_1s1t_format,omitempty"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}
