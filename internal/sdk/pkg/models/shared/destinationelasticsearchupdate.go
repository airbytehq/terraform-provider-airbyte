// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type DestinationElasticsearchUpdateSchemasMethod string

const (
	DestinationElasticsearchUpdateSchemasMethodBasic DestinationElasticsearchUpdateSchemasMethod = "basic"
)

func (e DestinationElasticsearchUpdateSchemasMethod) ToPointer() *DestinationElasticsearchUpdateSchemasMethod {
	return &e
}

func (e *DestinationElasticsearchUpdateSchemasMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = DestinationElasticsearchUpdateSchemasMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchUpdateSchemasMethod: %v", v)
	}
}

// UsernamePassword - Basic auth header with a username and password
type UsernamePassword struct {
	method DestinationElasticsearchUpdateSchemasMethod `const:"basic" json:"method"`
	// Basic auth password to access a secure Elasticsearch server
	Password string `json:"password"`
	// Basic auth username to access a secure Elasticsearch server
	Username string `json:"username"`
}

func (u UsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *UsernamePassword) GetMethod() DestinationElasticsearchUpdateSchemasMethod {
	return DestinationElasticsearchUpdateSchemasMethodBasic
}

func (o *UsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *UsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationElasticsearchUpdateMethod string

const (
	DestinationElasticsearchUpdateMethodSecret DestinationElasticsearchUpdateMethod = "secret"
)

func (e DestinationElasticsearchUpdateMethod) ToPointer() *DestinationElasticsearchUpdateMethod {
	return &e
}

func (e *DestinationElasticsearchUpdateMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		*e = DestinationElasticsearchUpdateMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchUpdateMethod: %v", v)
	}
}

// APIKeySecret - Use a api key and secret combination to authenticate
type APIKeySecret struct {
	// The Key ID to used when accessing an enterprise Elasticsearch instance.
	APIKeyID string `json:"apiKeyId"`
	// The secret associated with the API Key ID.
	APIKeySecret string                               `json:"apiKeySecret"`
	method       DestinationElasticsearchUpdateMethod `const:"secret" json:"method"`
}

func (a APIKeySecret) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIKeySecret) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *APIKeySecret) GetAPIKeyID() string {
	if o == nil {
		return ""
	}
	return o.APIKeyID
}

func (o *APIKeySecret) GetAPIKeySecret() string {
	if o == nil {
		return ""
	}
	return o.APIKeySecret
}

func (o *APIKeySecret) GetMethod() DestinationElasticsearchUpdateMethod {
	return DestinationElasticsearchUpdateMethodSecret
}

type AuthenticationMethodType string

const (
	AuthenticationMethodTypeAPIKeySecret     AuthenticationMethodType = "Api Key/Secret"
	AuthenticationMethodTypeUsernamePassword AuthenticationMethodType = "Username/Password"
)

// AuthenticationMethod - The type of authentication to be used
type AuthenticationMethod struct {
	APIKeySecret     *APIKeySecret
	UsernamePassword *UsernamePassword

	Type AuthenticationMethodType
}

func CreateAuthenticationMethodAPIKeySecret(apiKeySecret APIKeySecret) AuthenticationMethod {
	typ := AuthenticationMethodTypeAPIKeySecret

	return AuthenticationMethod{
		APIKeySecret: &apiKeySecret,
		Type:         typ,
	}
}

func CreateAuthenticationMethodUsernamePassword(usernamePassword UsernamePassword) AuthenticationMethod {
	typ := AuthenticationMethodTypeUsernamePassword

	return AuthenticationMethod{
		UsernamePassword: &usernamePassword,
		Type:             typ,
	}
}

func (u *AuthenticationMethod) UnmarshalJSON(data []byte) error {

	apiKeySecret := new(APIKeySecret)
	if err := utils.UnmarshalJSON(data, &apiKeySecret, "", true, true); err == nil {
		u.APIKeySecret = apiKeySecret
		u.Type = AuthenticationMethodTypeAPIKeySecret
		return nil
	}

	usernamePassword := new(UsernamePassword)
	if err := utils.UnmarshalJSON(data, &usernamePassword, "", true, true); err == nil {
		u.UsernamePassword = usernamePassword
		u.Type = AuthenticationMethodTypeUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.APIKeySecret != nil {
		return utils.MarshalJSON(u.APIKeySecret, "", true)
	}

	if u.UsernamePassword != nil {
		return utils.MarshalJSON(u.UsernamePassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationElasticsearchUpdate struct {
	// The type of authentication to be used
	AuthenticationMethod *AuthenticationMethod `json:"authenticationMethod,omitempty"`
	// CA certificate
	CaCertificate *string `json:"ca_certificate,omitempty"`
	// The full url of the Elasticsearch server
	Endpoint string `json:"endpoint"`
	// If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys.
	Upsert *bool `default:"true" json:"upsert"`
}

func (d DestinationElasticsearchUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationElasticsearchUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationElasticsearchUpdate) GetAuthenticationMethod() *AuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthenticationMethod
}

func (o *DestinationElasticsearchUpdate) GetCaCertificate() *string {
	if o == nil {
		return nil
	}
	return o.CaCertificate
}

func (o *DestinationElasticsearchUpdate) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *DestinationElasticsearchUpdate) GetUpsert() *bool {
	if o == nil {
		return nil
	}
	return o.Upsert
}
