// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType string

const (
	DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType = "Username and Password"
)

func (e DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodUsernameAndPassword struct {
	authType *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType `const:"Username and Password" json:"auth_type"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

func (d DestinationSnowflakeAuthorizationMethodUsernameAndPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeAuthorizationMethodUsernameAndPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeAuthorizationMethodUsernameAndPassword) GetAuthType() *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType {
	return DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword.ToPointer()
}

func (o *DestinationSnowflakeAuthorizationMethodUsernameAndPassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType string

const (
	DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType = "Key Pair Authentication"
)

func (e DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthentication struct {
	authType *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType `const:"Key Pair Authentication" json:"auth_type"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

func (d DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) GetAuthType() *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType {
	return DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication.ToPointer()
}

func (o *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) GetPrivateKey() string {
	if o == nil {
		return ""
	}
	return o.PrivateKey
}

func (o *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) GetPrivateKeyPassword() *string {
	if o == nil {
		return nil
	}
	return o.PrivateKeyPassword
}

type DestinationSnowflakeAuthorizationMethodOAuth20AuthType string

const (
	DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20AuthType = "OAuth2.0"
)

func (e DestinationSnowflakeAuthorizationMethodOAuth20AuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                  `json:"access_token"`
	authType    *DestinationSnowflakeAuthorizationMethodOAuth20AuthType `const:"OAuth2.0" json:"auth_type"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

func (d DestinationSnowflakeAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflakeAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflakeAuthorizationMethodOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *DestinationSnowflakeAuthorizationMethodOAuth20) GetAuthType() *DestinationSnowflakeAuthorizationMethodOAuth20AuthType {
	return DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeOAuth20.ToPointer()
}

func (o *DestinationSnowflakeAuthorizationMethodOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *DestinationSnowflakeAuthorizationMethodOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *DestinationSnowflakeAuthorizationMethodOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type DestinationSnowflakeAuthorizationMethodType string

const (
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20               DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_OAuth2.0"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword   DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Username and Password"
)

type DestinationSnowflakeAuthorizationMethod struct {
	DestinationSnowflakeAuthorizationMethodOAuth20               *DestinationSnowflakeAuthorizationMethodOAuth20
	DestinationSnowflakeAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeAuthorizationMethodType
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodOAuth20(destinationSnowflakeAuthorizationMethodOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodOAuth20: &destinationSnowflakeAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodKeyPairAuthentication(destinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodUsernameAndPassword(destinationSnowflakeAuthorizationMethodUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPassword) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodUsernameAndPassword: &destinationSnowflakeAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeAuthorizationMethod) UnmarshalJSON(data []byte) error {

	destinationSnowflakeAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeAuthorizationMethodUsernameAndPassword)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeAuthorizationMethodUsernameAndPassword, "", true, true); err == nil {
		u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword = destinationSnowflakeAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword
		return nil
	}

	destinationSnowflakeAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeAuthorizationMethodKeyPairAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeAuthorizationMethodKeyPairAuthentication, "", true, true); err == nil {
		u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication = destinationSnowflakeAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeAuthorizationMethodOAuth20 := new(DestinationSnowflakeAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &destinationSnowflakeAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.DestinationSnowflakeAuthorizationMethodOAuth20 = destinationSnowflakeAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeAuthorizationMethodOAuth20, "", true)
	}

	if u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication, "", true)
	}

	if u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
		return utils.MarshalJSON(u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationSnowflakeSnowflake string

const (
	DestinationSnowflakeSnowflakeSnowflake DestinationSnowflakeSnowflake = "snowflake"
)

func (e DestinationSnowflakeSnowflake) ToPointer() *DestinationSnowflakeSnowflake {
	return &e
}

func (e *DestinationSnowflakeSnowflake) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snowflake":
		*e = DestinationSnowflakeSnowflake(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeSnowflake: %v", v)
	}
}

type DestinationSnowflake struct {
	Credentials *DestinationSnowflakeAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database        string                        `json:"database"`
	destinationType DestinationSnowflakeSnowflake `const:"snowflake" json:"destinationType"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The schema to write raw tables into
	RawDataSchema *string `json:"raw_data_schema,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}

func (d DestinationSnowflake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationSnowflake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationSnowflake) GetCredentials() *DestinationSnowflakeAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *DestinationSnowflake) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationSnowflake) GetDestinationType() DestinationSnowflakeSnowflake {
	return DestinationSnowflakeSnowflakeSnowflake
}

func (o *DestinationSnowflake) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationSnowflake) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationSnowflake) GetRawDataSchema() *string {
	if o == nil {
		return nil
	}
	return o.RawDataSchema
}

func (o *DestinationSnowflake) GetRole() string {
	if o == nil {
		return ""
	}
	return o.Role
}

func (o *DestinationSnowflake) GetSchema() string {
	if o == nil {
		return ""
	}
	return o.Schema
}

func (o *DestinationSnowflake) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *DestinationSnowflake) GetWarehouse() string {
	if o == nil {
		return ""
	}
	return o.Warehouse
}
