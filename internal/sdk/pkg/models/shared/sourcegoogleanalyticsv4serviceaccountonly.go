// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType string

const (
	SourceGoogleAnalyticsV4ServiceAccountOnlyAuthTypeService SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType = "Service"
)

func (e SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType) ToPointer() *SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType {
	return &e
}

func (e *SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType: %v", v)
	}
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication struct {
	authType *SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType `const:"Service" json:"auth_type,omitempty"`
	// The JSON key of the service account to use for authorization
	CredentialsJSON string `json:"credentials_json"`
}

func (s SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication) GetAuthType() *SourceGoogleAnalyticsV4ServiceAccountOnlyAuthType {
	return SourceGoogleAnalyticsV4ServiceAccountOnlyAuthTypeService.ToPointer()
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication) GetCredentialsJSON() string {
	if o == nil {
		return ""
	}
	return o.CredentialsJSON
}

type SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsType string

const (
	SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsTypeSourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsType = "source-google-analytics-v4-service-account-only_Service Account Key Authentication"
)

// SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials - Credentials for the service
type SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials struct {
	SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication *SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication

	Type SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsType
}

func CreateSourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsSourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication(sourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication) SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials {
	typ := SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsTypeSourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication

	return SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials{
		SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication: &sourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials) UnmarshalJSON(data []byte) error {

	sourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication := new(SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication = sourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication
		u.Type = SourceGoogleAnalyticsV4ServiceAccountOnlyCredentialsTypeSourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleAnalyticsV4ServiceAccountOnlyServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type GoogleAnalyticsV4ServiceAccountOnly string

const (
	GoogleAnalyticsV4ServiceAccountOnlyGoogleAnalyticsV4ServiceAccountOnly GoogleAnalyticsV4ServiceAccountOnly = "google-analytics-v4-service-account-only"
)

func (e GoogleAnalyticsV4ServiceAccountOnly) ToPointer() *GoogleAnalyticsV4ServiceAccountOnly {
	return &e
}

func (e *GoogleAnalyticsV4ServiceAccountOnly) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google-analytics-v4-service-account-only":
		*e = GoogleAnalyticsV4ServiceAccountOnly(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleAnalyticsV4ServiceAccountOnly: %v", v)
	}
}

type SourceGoogleAnalyticsV4ServiceAccountOnly struct {
	// Credentials for the service
	Credentials *SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials `json:"credentials,omitempty"`
	// A JSON array describing the custom reports you want to sync from Google Analytics. See <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4#data-processing-latency">the docs</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string `json:"custom_reports,omitempty"`
	// The date in the format YYYY-MM-DD. Any data after this date will not be replicated.
	EndDate    *types.Date                         `json:"end_date,omitempty"`
	sourceType GoogleAnalyticsV4ServiceAccountOnly `const:"google-analytics-v4-service-account-only" json:"sourceType"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate types.Date `json:"start_date"`
	// The ID for the Google Analytics View you want to fetch data from. This can be found from the <a href="https://ga-dev-tools.appspot.com/account-explorer/">Google Analytics Account Explorer</a>.
	ViewID string `json:"view_id"`
	// The time increment used by the connector when requesting data from the Google Analytics API. More information is available in the <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4/#sampling-in-reports">the docs</a>. The bigger this value is, the faster the sync will be, but the more likely that sampling will be applied to your data, potentially causing inaccuracies in the returned results. We recommend setting this to 1 unless you have a hard requirement to make the sync faster at the expense of accuracy. The minimum allowed value for this field is 1, and the maximum is 364.
	WindowInDays *int64 `default:"1" json:"window_in_days"`
}

func (s SourceGoogleAnalyticsV4ServiceAccountOnly) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsV4ServiceAccountOnly) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetCredentials() *SourceGoogleAnalyticsV4ServiceAccountOnlyCredentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetCustomReports() *string {
	if o == nil {
		return nil
	}
	return o.CustomReports
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetSourceType() GoogleAnalyticsV4ServiceAccountOnly {
	return GoogleAnalyticsV4ServiceAccountOnlyGoogleAnalyticsV4ServiceAccountOnly
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetViewID() string {
	if o == nil {
		return ""
	}
	return o.ViewID
}

func (o *SourceGoogleAnalyticsV4ServiceAccountOnly) GetWindowInDays() *int64 {
	if o == nil {
		return nil
	}
	return o.WindowInDays
}
