// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode string

const (
	SourceFaunaUpdateCollectionDeletionModeEnabledDeletionModeDeletedField SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode = "deleted_field"
)

func (e SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode) ToPointer() *SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode {
	return &e
}

func (e *SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deleted_field":
		*e = SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode: %v", v)
	}
}

// SourceFaunaUpdateCollectionDeletionModeEnabled - <b>This only applies to incremental syncs.</b> <br>
// Enabling deletion mode informs your destination of deleted documents.<br>
// Disabled - Leave this feature disabled, and ignore deleted documents.<br>
// Enabled - Enables this feature. When a document is deleted, the connector exports a record with a "deleted at" column containing the time that the document was deleted.
type SourceFaunaUpdateCollectionDeletionModeEnabled struct {
	// Name of the "deleted at" column.
	Column       *string                                                    `default:"deleted_at" json:"column"`
	deletionMode SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode `const:"deleted_field" json:"deletion_mode"`
}

func (s SourceFaunaUpdateCollectionDeletionModeEnabled) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceFaunaUpdateCollectionDeletionModeEnabled) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceFaunaUpdateCollectionDeletionModeEnabled) GetColumn() *string {
	if o == nil {
		return nil
	}
	return o.Column
}

func (o *SourceFaunaUpdateCollectionDeletionModeEnabled) GetDeletionMode() SourceFaunaUpdateCollectionDeletionModeEnabledDeletionMode {
	return SourceFaunaUpdateCollectionDeletionModeEnabledDeletionModeDeletedField
}

type SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode string

const (
	SourceFaunaUpdateCollectionDeletionModeDisabledDeletionModeIgnore SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode = "ignore"
)

func (e SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode) ToPointer() *SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode {
	return &e
}

func (e *SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ignore":
		*e = SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode: %v", v)
	}
}

// SourceFaunaUpdateCollectionDeletionModeDisabled - <b>This only applies to incremental syncs.</b> <br>
// Enabling deletion mode informs your destination of deleted documents.<br>
// Disabled - Leave this feature disabled, and ignore deleted documents.<br>
// Enabled - Enables this feature. When a document is deleted, the connector exports a record with a "deleted at" column containing the time that the document was deleted.
type SourceFaunaUpdateCollectionDeletionModeDisabled struct {
	deletionMode SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode `const:"ignore" json:"deletion_mode"`
}

func (s SourceFaunaUpdateCollectionDeletionModeDisabled) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceFaunaUpdateCollectionDeletionModeDisabled) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceFaunaUpdateCollectionDeletionModeDisabled) GetDeletionMode() SourceFaunaUpdateCollectionDeletionModeDisabledDeletionMode {
	return SourceFaunaUpdateCollectionDeletionModeDisabledDeletionModeIgnore
}

type SourceFaunaUpdateCollectionDeletionModeType string

const (
	SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeDisabled SourceFaunaUpdateCollectionDeletionModeType = "source-fauna-update_Collection_Deletion Mode_Disabled"
	SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeEnabled  SourceFaunaUpdateCollectionDeletionModeType = "source-fauna-update_Collection_Deletion Mode_Enabled"
)

type SourceFaunaUpdateCollectionDeletionMode struct {
	SourceFaunaUpdateCollectionDeletionModeDisabled *SourceFaunaUpdateCollectionDeletionModeDisabled
	SourceFaunaUpdateCollectionDeletionModeEnabled  *SourceFaunaUpdateCollectionDeletionModeEnabled

	Type SourceFaunaUpdateCollectionDeletionModeType
}

func CreateSourceFaunaUpdateCollectionDeletionModeSourceFaunaUpdateCollectionDeletionModeDisabled(sourceFaunaUpdateCollectionDeletionModeDisabled SourceFaunaUpdateCollectionDeletionModeDisabled) SourceFaunaUpdateCollectionDeletionMode {
	typ := SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeDisabled

	return SourceFaunaUpdateCollectionDeletionMode{
		SourceFaunaUpdateCollectionDeletionModeDisabled: &sourceFaunaUpdateCollectionDeletionModeDisabled,
		Type: typ,
	}
}

func CreateSourceFaunaUpdateCollectionDeletionModeSourceFaunaUpdateCollectionDeletionModeEnabled(sourceFaunaUpdateCollectionDeletionModeEnabled SourceFaunaUpdateCollectionDeletionModeEnabled) SourceFaunaUpdateCollectionDeletionMode {
	typ := SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeEnabled

	return SourceFaunaUpdateCollectionDeletionMode{
		SourceFaunaUpdateCollectionDeletionModeEnabled: &sourceFaunaUpdateCollectionDeletionModeEnabled,
		Type: typ,
	}
}

func (u *SourceFaunaUpdateCollectionDeletionMode) UnmarshalJSON(data []byte) error {

	sourceFaunaUpdateCollectionDeletionModeDisabled := new(SourceFaunaUpdateCollectionDeletionModeDisabled)
	if err := utils.UnmarshalJSON(data, &sourceFaunaUpdateCollectionDeletionModeDisabled, "", true, true); err == nil {
		u.SourceFaunaUpdateCollectionDeletionModeDisabled = sourceFaunaUpdateCollectionDeletionModeDisabled
		u.Type = SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeDisabled
		return nil
	}

	sourceFaunaUpdateCollectionDeletionModeEnabled := new(SourceFaunaUpdateCollectionDeletionModeEnabled)
	if err := utils.UnmarshalJSON(data, &sourceFaunaUpdateCollectionDeletionModeEnabled, "", true, true); err == nil {
		u.SourceFaunaUpdateCollectionDeletionModeEnabled = sourceFaunaUpdateCollectionDeletionModeEnabled
		u.Type = SourceFaunaUpdateCollectionDeletionModeTypeSourceFaunaUpdateCollectionDeletionModeEnabled
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceFaunaUpdateCollectionDeletionMode) MarshalJSON() ([]byte, error) {
	if u.SourceFaunaUpdateCollectionDeletionModeDisabled != nil {
		return utils.MarshalJSON(u.SourceFaunaUpdateCollectionDeletionModeDisabled, "", true)
	}

	if u.SourceFaunaUpdateCollectionDeletionModeEnabled != nil {
		return utils.MarshalJSON(u.SourceFaunaUpdateCollectionDeletionModeEnabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceFaunaUpdateCollection - Settings for the Fauna Collection.
type SourceFaunaUpdateCollection struct {
	// <b>This only applies to incremental syncs.</b> <br>
	// Enabling deletion mode informs your destination of deleted documents.<br>
	// Disabled - Leave this feature disabled, and ignore deleted documents.<br>
	// Enabled - Enables this feature. When a document is deleted, the connector exports a record with a "deleted at" column containing the time that the document was deleted.
	Deletions SourceFaunaUpdateCollectionDeletionMode `json:"deletions"`
	// The page size used when reading documents from the database. The larger the page size, the faster the connector processes documents. However, if a page is too large, the connector may fail. <br>
	// Choose your page size based on how large the documents are. <br>
	// See <a href="https://docs.fauna.com/fauna/current/learn/understanding/types#page">the docs</a>.
	PageSize *int64 `default:"64" json:"page_size"`
}

func (s SourceFaunaUpdateCollection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceFaunaUpdateCollection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceFaunaUpdateCollection) GetDeletions() SourceFaunaUpdateCollectionDeletionMode {
	if o == nil {
		return SourceFaunaUpdateCollectionDeletionMode{}
	}
	return o.Deletions
}

func (o *SourceFaunaUpdateCollection) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type SourceFaunaUpdate struct {
	// Settings for the Fauna Collection.
	Collection *SourceFaunaUpdateCollection `json:"collection,omitempty"`
	// Domain of Fauna to query. Defaults db.fauna.com. See <a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups>the docs</a>.
	Domain *string `default:"db.fauna.com" json:"domain"`
	// Endpoint port.
	Port *int64 `default:"443" json:"port"`
	// URL scheme.
	Scheme *string `default:"https" json:"scheme"`
	// Fauna secret, used when authenticating with the database.
	Secret string `json:"secret"`
}

func (s SourceFaunaUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceFaunaUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceFaunaUpdate) GetCollection() *SourceFaunaUpdateCollection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *SourceFaunaUpdate) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *SourceFaunaUpdate) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SourceFaunaUpdate) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *SourceFaunaUpdate) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}
