// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type Milvus string

const (
	MilvusMilvus Milvus = "milvus"
)

func (e Milvus) ToPointer() *Milvus {
	return &e
}

func (e *Milvus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "milvus":
		*e = Milvus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Milvus: %v", v)
	}
}

type DestinationMilvusSchemasEmbeddingEmbeddingMode string

const (
	DestinationMilvusSchemasEmbeddingEmbeddingModeFromField DestinationMilvusSchemasEmbeddingEmbeddingMode = "from_field"
)

func (e DestinationMilvusSchemasEmbeddingEmbeddingMode) ToPointer() *DestinationMilvusSchemasEmbeddingEmbeddingMode {
	return &e
}

func (e *DestinationMilvusSchemasEmbeddingEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "from_field":
		*e = DestinationMilvusSchemasEmbeddingEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasEmbeddingEmbeddingMode: %v", v)
	}
}

// DestinationMilvusFromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
type DestinationMilvusFromField struct {
	// The number of dimensions the embedding model is generating
	Dimensions int64 `json:"dimensions"`
	// Name of the field in the record that contains the embedding
	FieldName string                                          `json:"field_name"`
	mode      *DestinationMilvusSchemasEmbeddingEmbeddingMode `const:"from_field" json:"mode"`
}

func (d DestinationMilvusFromField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusFromField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusFromField) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *DestinationMilvusFromField) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *DestinationMilvusFromField) GetMode() *DestinationMilvusSchemasEmbeddingEmbeddingMode {
	return DestinationMilvusSchemasEmbeddingEmbeddingModeFromField.ToPointer()
}

type DestinationMilvusSchemasEmbeddingMode string

const (
	DestinationMilvusSchemasEmbeddingModeFake DestinationMilvusSchemasEmbeddingMode = "fake"
)

func (e DestinationMilvusSchemasEmbeddingMode) ToPointer() *DestinationMilvusSchemasEmbeddingMode {
	return &e
}

func (e *DestinationMilvusSchemasEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationMilvusSchemasEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasEmbeddingMode: %v", v)
	}
}

// DestinationMilvusFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationMilvusFake struct {
	mode *DestinationMilvusSchemasEmbeddingMode `const:"fake" json:"mode"`
}

func (d DestinationMilvusFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusFake) GetMode() *DestinationMilvusSchemasEmbeddingMode {
	return DestinationMilvusSchemasEmbeddingModeFake.ToPointer()
}

type DestinationMilvusSchemasMode string

const (
	DestinationMilvusSchemasModeCohere DestinationMilvusSchemasMode = "cohere"
)

func (e DestinationMilvusSchemasMode) ToPointer() *DestinationMilvusSchemasMode {
	return &e
}

func (e *DestinationMilvusSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationMilvusSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasMode: %v", v)
	}
}

// DestinationMilvusCohere - Use the Cohere API to embed text.
type DestinationMilvusCohere struct {
	CohereKey string                        `json:"cohere_key"`
	mode      *DestinationMilvusSchemasMode `const:"cohere" json:"mode"`
}

func (d DestinationMilvusCohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusCohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusCohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *DestinationMilvusCohere) GetMode() *DestinationMilvusSchemasMode {
	return DestinationMilvusSchemasModeCohere.ToPointer()
}

type DestinationMilvusMode string

const (
	DestinationMilvusModeOpenai DestinationMilvusMode = "openai"
)

func (e DestinationMilvusMode) ToPointer() *DestinationMilvusMode {
	return &e
}

func (e *DestinationMilvusMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationMilvusMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusMode: %v", v)
	}
}

// DestinationMilvusOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationMilvusOpenAI struct {
	mode      *DestinationMilvusMode `const:"openai" json:"mode"`
	OpenaiKey string                 `json:"openai_key"`
}

func (d DestinationMilvusOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusOpenAI) GetMode() *DestinationMilvusMode {
	return DestinationMilvusModeOpenai.ToPointer()
}

func (o *DestinationMilvusOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationMilvusEmbeddingType string

const (
	DestinationMilvusEmbeddingTypeOpenAI    DestinationMilvusEmbeddingType = "OpenAI"
	DestinationMilvusEmbeddingTypeCohere    DestinationMilvusEmbeddingType = "Cohere"
	DestinationMilvusEmbeddingTypeFake      DestinationMilvusEmbeddingType = "Fake"
	DestinationMilvusEmbeddingTypeFromField DestinationMilvusEmbeddingType = "FromField"
)

type DestinationMilvusEmbedding struct {
	OpenAI    *DestinationMilvusOpenAI
	Cohere    *DestinationMilvusCohere
	Fake      *DestinationMilvusFake
	FromField *DestinationMilvusFromField

	Type DestinationMilvusEmbeddingType
}

func CreateDestinationMilvusEmbeddingOpenAI(openAI DestinationMilvusOpenAI) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeOpenAI

	return DestinationMilvusEmbedding{
		OpenAI: &openAI,
		Type:   typ,
	}
}

func CreateDestinationMilvusEmbeddingCohere(cohere DestinationMilvusCohere) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeCohere

	return DestinationMilvusEmbedding{
		Cohere: &cohere,
		Type:   typ,
	}
}

func CreateDestinationMilvusEmbeddingFake(fake DestinationMilvusFake) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeFake

	return DestinationMilvusEmbedding{
		Fake: &fake,
		Type: typ,
	}
}

func CreateDestinationMilvusEmbeddingFromField(fromField DestinationMilvusFromField) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeFromField

	return DestinationMilvusEmbedding{
		FromField: &fromField,
		Type:      typ,
	}
}

func (u *DestinationMilvusEmbedding) UnmarshalJSON(data []byte) error {

	fake := new(DestinationMilvusFake)
	if err := utils.UnmarshalJSON(data, &fake, "", true, true); err == nil {
		u.Fake = fake
		u.Type = DestinationMilvusEmbeddingTypeFake
		return nil
	}

	openAI := new(DestinationMilvusOpenAI)
	if err := utils.UnmarshalJSON(data, &openAI, "", true, true); err == nil {
		u.OpenAI = openAI
		u.Type = DestinationMilvusEmbeddingTypeOpenAI
		return nil
	}

	cohere := new(DestinationMilvusCohere)
	if err := utils.UnmarshalJSON(data, &cohere, "", true, true); err == nil {
		u.Cohere = cohere
		u.Type = DestinationMilvusEmbeddingTypeCohere
		return nil
	}

	fromField := new(DestinationMilvusFromField)
	if err := utils.UnmarshalJSON(data, &fromField, "", true, true); err == nil {
		u.FromField = fromField
		u.Type = DestinationMilvusEmbeddingTypeFromField
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusEmbedding) MarshalJSON() ([]byte, error) {
	if u.OpenAI != nil {
		return utils.MarshalJSON(u.OpenAI, "", true)
	}

	if u.Cohere != nil {
		return utils.MarshalJSON(u.Cohere, "", true)
	}

	if u.Fake != nil {
		return utils.MarshalJSON(u.Fake, "", true)
	}

	if u.FromField != nil {
		return utils.MarshalJSON(u.FromField, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMilvusSchemasIndexingAuthAuthenticationMode string

const (
	DestinationMilvusSchemasIndexingAuthAuthenticationModeNoAuth DestinationMilvusSchemasIndexingAuthAuthenticationMode = "no_auth"
)

func (e DestinationMilvusSchemasIndexingAuthAuthenticationMode) ToPointer() *DestinationMilvusSchemasIndexingAuthAuthenticationMode {
	return &e
}

func (e *DestinationMilvusSchemasIndexingAuthAuthenticationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_auth":
		*e = DestinationMilvusSchemasIndexingAuthAuthenticationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasIndexingAuthAuthenticationMode: %v", v)
	}
}

// DestinationMilvusNoAuth - Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
type DestinationMilvusNoAuth struct {
	mode *DestinationMilvusSchemasIndexingAuthAuthenticationMode `const:"no_auth" json:"mode"`
}

func (d DestinationMilvusNoAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusNoAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusNoAuth) GetMode() *DestinationMilvusSchemasIndexingAuthAuthenticationMode {
	return DestinationMilvusSchemasIndexingAuthAuthenticationModeNoAuth.ToPointer()
}

type DestinationMilvusSchemasIndexingAuthMode string

const (
	DestinationMilvusSchemasIndexingAuthModeUsernamePassword DestinationMilvusSchemasIndexingAuthMode = "username_password"
)

func (e DestinationMilvusSchemasIndexingAuthMode) ToPointer() *DestinationMilvusSchemasIndexingAuthMode {
	return &e
}

func (e *DestinationMilvusSchemasIndexingAuthMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = DestinationMilvusSchemasIndexingAuthMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasIndexingAuthMode: %v", v)
	}
}

// DestinationMilvusUsernamePassword - Authenticate using username and password (suitable for self-managed Milvus clusters)
type DestinationMilvusUsernamePassword struct {
	mode *DestinationMilvusSchemasIndexingAuthMode `const:"username_password" json:"mode"`
	// Password for the Milvus instance
	Password string `json:"password"`
	// Username for the Milvus instance
	Username string `json:"username"`
}

func (d DestinationMilvusUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUsernamePassword) GetMode() *DestinationMilvusSchemasIndexingAuthMode {
	return DestinationMilvusSchemasIndexingAuthModeUsernamePassword.ToPointer()
}

func (o *DestinationMilvusUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationMilvusUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationMilvusSchemasIndexingMode string

const (
	DestinationMilvusSchemasIndexingModeToken DestinationMilvusSchemasIndexingMode = "token"
)

func (e DestinationMilvusSchemasIndexingMode) ToPointer() *DestinationMilvusSchemasIndexingMode {
	return &e
}

func (e *DestinationMilvusSchemasIndexingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = DestinationMilvusSchemasIndexingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusSchemasIndexingMode: %v", v)
	}
}

// DestinationMilvusAPIToken - Authenticate using an API token (suitable for Zilliz Cloud)
type DestinationMilvusAPIToken struct {
	mode *DestinationMilvusSchemasIndexingMode `const:"token" json:"mode"`
	// API Token for the Milvus instance
	Token string `json:"token"`
}

func (d DestinationMilvusAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusAPIToken) GetMode() *DestinationMilvusSchemasIndexingMode {
	return DestinationMilvusSchemasIndexingModeToken.ToPointer()
}

func (o *DestinationMilvusAPIToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type DestinationMilvusAuthenticationType string

const (
	DestinationMilvusAuthenticationTypeAPIToken         DestinationMilvusAuthenticationType = "APIToken"
	DestinationMilvusAuthenticationTypeUsernamePassword DestinationMilvusAuthenticationType = "UsernamePassword"
	DestinationMilvusAuthenticationTypeNoAuth           DestinationMilvusAuthenticationType = "NoAuth"
)

type DestinationMilvusAuthentication struct {
	APIToken         *DestinationMilvusAPIToken
	UsernamePassword *DestinationMilvusUsernamePassword
	NoAuth           *DestinationMilvusNoAuth

	Type DestinationMilvusAuthenticationType
}

func CreateDestinationMilvusAuthenticationAPIToken(apiToken DestinationMilvusAPIToken) DestinationMilvusAuthentication {
	typ := DestinationMilvusAuthenticationTypeAPIToken

	return DestinationMilvusAuthentication{
		APIToken: &apiToken,
		Type:     typ,
	}
}

func CreateDestinationMilvusAuthenticationUsernamePassword(usernamePassword DestinationMilvusUsernamePassword) DestinationMilvusAuthentication {
	typ := DestinationMilvusAuthenticationTypeUsernamePassword

	return DestinationMilvusAuthentication{
		UsernamePassword: &usernamePassword,
		Type:             typ,
	}
}

func CreateDestinationMilvusAuthenticationNoAuth(noAuth DestinationMilvusNoAuth) DestinationMilvusAuthentication {
	typ := DestinationMilvusAuthenticationTypeNoAuth

	return DestinationMilvusAuthentication{
		NoAuth: &noAuth,
		Type:   typ,
	}
}

func (u *DestinationMilvusAuthentication) UnmarshalJSON(data []byte) error {

	noAuth := new(DestinationMilvusNoAuth)
	if err := utils.UnmarshalJSON(data, &noAuth, "", true, true); err == nil {
		u.NoAuth = noAuth
		u.Type = DestinationMilvusAuthenticationTypeNoAuth
		return nil
	}

	apiToken := new(DestinationMilvusAPIToken)
	if err := utils.UnmarshalJSON(data, &apiToken, "", true, true); err == nil {
		u.APIToken = apiToken
		u.Type = DestinationMilvusAuthenticationTypeAPIToken
		return nil
	}

	usernamePassword := new(DestinationMilvusUsernamePassword)
	if err := utils.UnmarshalJSON(data, &usernamePassword, "", true, true); err == nil {
		u.UsernamePassword = usernamePassword
		u.Type = DestinationMilvusAuthenticationTypeUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusAuthentication) MarshalJSON() ([]byte, error) {
	if u.APIToken != nil {
		return utils.MarshalJSON(u.APIToken, "", true)
	}

	if u.UsernamePassword != nil {
		return utils.MarshalJSON(u.UsernamePassword, "", true)
	}

	if u.NoAuth != nil {
		return utils.MarshalJSON(u.NoAuth, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMilvusIndexing - Indexing configuration
type DestinationMilvusIndexing struct {
	// Authentication method
	Auth DestinationMilvusAuthentication `json:"auth"`
	// The collection to load data into
	Collection string `json:"collection"`
	// The database to connect to
	Db *string `default:"" json:"db"`
	// The public endpoint of the Milvus instance.
	Host string `json:"host"`
	// The field in the entity that contains the embedded text
	TextField *string `default:"text" json:"text_field"`
	// The field in the entity that contains the vector
	VectorField *string `default:"vector" json:"vector_field"`
}

func (d DestinationMilvusIndexing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusIndexing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusIndexing) GetAuth() DestinationMilvusAuthentication {
	if o == nil {
		return DestinationMilvusAuthentication{}
	}
	return o.Auth
}

func (o *DestinationMilvusIndexing) GetCollection() string {
	if o == nil {
		return ""
	}
	return o.Collection
}

func (o *DestinationMilvusIndexing) GetDb() *string {
	if o == nil {
		return nil
	}
	return o.Db
}

func (o *DestinationMilvusIndexing) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMilvusIndexing) GetTextField() *string {
	if o == nil {
		return nil
	}
	return o.TextField
}

func (o *DestinationMilvusIndexing) GetVectorField() *string {
	if o == nil {
		return nil
	}
	return o.VectorField
}

type DestinationMilvusProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
}

func (d DestinationMilvusProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationMilvusProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationMilvusProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationMilvusProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

type DestinationMilvus struct {
	destinationType Milvus `const:"milvus" json:"destinationType"`
	// Embedding configuration
	Embedding DestinationMilvusEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationMilvusIndexing              `json:"indexing"`
	Processing DestinationMilvusProcessingConfigModel `json:"processing"`
}

func (d DestinationMilvus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvus) GetDestinationType() Milvus {
	return MilvusMilvus
}

func (o *DestinationMilvus) GetEmbedding() DestinationMilvusEmbedding {
	if o == nil {
		return DestinationMilvusEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationMilvus) GetIndexing() DestinationMilvusIndexing {
	if o == nil {
		return DestinationMilvusIndexing{}
	}
	return o.Indexing
}

func (o *DestinationMilvus) GetProcessing() DestinationMilvusProcessingConfigModel {
	if o == nil {
		return DestinationMilvusProcessingConfigModel{}
	}
	return o.Processing
}
