// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationMilvusMilvus string

const (
	DestinationMilvusMilvusMilvus DestinationMilvusMilvus = "milvus"
)

func (e DestinationMilvusMilvus) ToPointer() *DestinationMilvusMilvus {
	return &e
}

func (e *DestinationMilvusMilvus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "milvus":
		*e = DestinationMilvusMilvus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusMilvus: %v", v)
	}
}

type DestinationMilvusEmbeddingFromFieldMode string

const (
	DestinationMilvusEmbeddingFromFieldModeFromField DestinationMilvusEmbeddingFromFieldMode = "from_field"
)

func (e DestinationMilvusEmbeddingFromFieldMode) ToPointer() *DestinationMilvusEmbeddingFromFieldMode {
	return &e
}

func (e *DestinationMilvusEmbeddingFromFieldMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "from_field":
		*e = DestinationMilvusEmbeddingFromFieldMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusEmbeddingFromFieldMode: %v", v)
	}
}

// DestinationMilvusEmbeddingFromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
type DestinationMilvusEmbeddingFromField struct {
	// The number of dimensions the embedding model is generating
	Dimensions int64 `json:"dimensions"`
	// Name of the field in the record that contains the embedding
	FieldName string                                   `json:"field_name"`
	mode      *DestinationMilvusEmbeddingFromFieldMode `const:"from_field" json:"mode"`
}

func (d DestinationMilvusEmbeddingFromField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusEmbeddingFromField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusEmbeddingFromField) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *DestinationMilvusEmbeddingFromField) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *DestinationMilvusEmbeddingFromField) GetMode() *DestinationMilvusEmbeddingFromFieldMode {
	return DestinationMilvusEmbeddingFromFieldModeFromField.ToPointer()
}

type DestinationMilvusEmbeddingFakeMode string

const (
	DestinationMilvusEmbeddingFakeModeFake DestinationMilvusEmbeddingFakeMode = "fake"
)

func (e DestinationMilvusEmbeddingFakeMode) ToPointer() *DestinationMilvusEmbeddingFakeMode {
	return &e
}

func (e *DestinationMilvusEmbeddingFakeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationMilvusEmbeddingFakeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusEmbeddingFakeMode: %v", v)
	}
}

// DestinationMilvusEmbeddingFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationMilvusEmbeddingFake struct {
	mode *DestinationMilvusEmbeddingFakeMode `const:"fake" json:"mode"`
}

func (d DestinationMilvusEmbeddingFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusEmbeddingFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusEmbeddingFake) GetMode() *DestinationMilvusEmbeddingFakeMode {
	return DestinationMilvusEmbeddingFakeModeFake.ToPointer()
}

type DestinationMilvusEmbeddingCohereMode string

const (
	DestinationMilvusEmbeddingCohereModeCohere DestinationMilvusEmbeddingCohereMode = "cohere"
)

func (e DestinationMilvusEmbeddingCohereMode) ToPointer() *DestinationMilvusEmbeddingCohereMode {
	return &e
}

func (e *DestinationMilvusEmbeddingCohereMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationMilvusEmbeddingCohereMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusEmbeddingCohereMode: %v", v)
	}
}

// DestinationMilvusEmbeddingCohere - Use the Cohere API to embed text.
type DestinationMilvusEmbeddingCohere struct {
	CohereKey string                                `json:"cohere_key"`
	mode      *DestinationMilvusEmbeddingCohereMode `const:"cohere" json:"mode"`
}

func (d DestinationMilvusEmbeddingCohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusEmbeddingCohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusEmbeddingCohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *DestinationMilvusEmbeddingCohere) GetMode() *DestinationMilvusEmbeddingCohereMode {
	return DestinationMilvusEmbeddingCohereModeCohere.ToPointer()
}

type DestinationMilvusEmbeddingOpenAIMode string

const (
	DestinationMilvusEmbeddingOpenAIModeOpenai DestinationMilvusEmbeddingOpenAIMode = "openai"
)

func (e DestinationMilvusEmbeddingOpenAIMode) ToPointer() *DestinationMilvusEmbeddingOpenAIMode {
	return &e
}

func (e *DestinationMilvusEmbeddingOpenAIMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationMilvusEmbeddingOpenAIMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusEmbeddingOpenAIMode: %v", v)
	}
}

// DestinationMilvusEmbeddingOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationMilvusEmbeddingOpenAI struct {
	mode      *DestinationMilvusEmbeddingOpenAIMode `const:"openai" json:"mode"`
	OpenaiKey string                                `json:"openai_key"`
}

func (d DestinationMilvusEmbeddingOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusEmbeddingOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusEmbeddingOpenAI) GetMode() *DestinationMilvusEmbeddingOpenAIMode {
	return DestinationMilvusEmbeddingOpenAIModeOpenai.ToPointer()
}

func (o *DestinationMilvusEmbeddingOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationMilvusEmbeddingType string

const (
	DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingOpenAI    DestinationMilvusEmbeddingType = "destination-milvus_Embedding_OpenAI"
	DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingCohere    DestinationMilvusEmbeddingType = "destination-milvus_Embedding_Cohere"
	DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFake      DestinationMilvusEmbeddingType = "destination-milvus_Embedding_Fake"
	DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFromField DestinationMilvusEmbeddingType = "destination-milvus_Embedding_From Field"
)

type DestinationMilvusEmbedding struct {
	DestinationMilvusEmbeddingOpenAI    *DestinationMilvusEmbeddingOpenAI
	DestinationMilvusEmbeddingCohere    *DestinationMilvusEmbeddingCohere
	DestinationMilvusEmbeddingFake      *DestinationMilvusEmbeddingFake
	DestinationMilvusEmbeddingFromField *DestinationMilvusEmbeddingFromField

	Type DestinationMilvusEmbeddingType
}

func CreateDestinationMilvusEmbeddingDestinationMilvusEmbeddingOpenAI(destinationMilvusEmbeddingOpenAI DestinationMilvusEmbeddingOpenAI) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingOpenAI

	return DestinationMilvusEmbedding{
		DestinationMilvusEmbeddingOpenAI: &destinationMilvusEmbeddingOpenAI,
		Type:                             typ,
	}
}

func CreateDestinationMilvusEmbeddingDestinationMilvusEmbeddingCohere(destinationMilvusEmbeddingCohere DestinationMilvusEmbeddingCohere) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingCohere

	return DestinationMilvusEmbedding{
		DestinationMilvusEmbeddingCohere: &destinationMilvusEmbeddingCohere,
		Type:                             typ,
	}
}

func CreateDestinationMilvusEmbeddingDestinationMilvusEmbeddingFake(destinationMilvusEmbeddingFake DestinationMilvusEmbeddingFake) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFake

	return DestinationMilvusEmbedding{
		DestinationMilvusEmbeddingFake: &destinationMilvusEmbeddingFake,
		Type:                           typ,
	}
}

func CreateDestinationMilvusEmbeddingDestinationMilvusEmbeddingFromField(destinationMilvusEmbeddingFromField DestinationMilvusEmbeddingFromField) DestinationMilvusEmbedding {
	typ := DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFromField

	return DestinationMilvusEmbedding{
		DestinationMilvusEmbeddingFromField: &destinationMilvusEmbeddingFromField,
		Type:                                typ,
	}
}

func (u *DestinationMilvusEmbedding) UnmarshalJSON(data []byte) error {

	destinationMilvusEmbeddingFake := new(DestinationMilvusEmbeddingFake)
	if err := utils.UnmarshalJSON(data, &destinationMilvusEmbeddingFake, "", true, true); err == nil {
		u.DestinationMilvusEmbeddingFake = destinationMilvusEmbeddingFake
		u.Type = DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFake
		return nil
	}

	destinationMilvusEmbeddingOpenAI := new(DestinationMilvusEmbeddingOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationMilvusEmbeddingOpenAI, "", true, true); err == nil {
		u.DestinationMilvusEmbeddingOpenAI = destinationMilvusEmbeddingOpenAI
		u.Type = DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingOpenAI
		return nil
	}

	destinationMilvusEmbeddingCohere := new(DestinationMilvusEmbeddingCohere)
	if err := utils.UnmarshalJSON(data, &destinationMilvusEmbeddingCohere, "", true, true); err == nil {
		u.DestinationMilvusEmbeddingCohere = destinationMilvusEmbeddingCohere
		u.Type = DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingCohere
		return nil
	}

	destinationMilvusEmbeddingFromField := new(DestinationMilvusEmbeddingFromField)
	if err := utils.UnmarshalJSON(data, &destinationMilvusEmbeddingFromField, "", true, true); err == nil {
		u.DestinationMilvusEmbeddingFromField = destinationMilvusEmbeddingFromField
		u.Type = DestinationMilvusEmbeddingTypeDestinationMilvusEmbeddingFromField
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusEmbeddingOpenAI != nil {
		return utils.MarshalJSON(u.DestinationMilvusEmbeddingOpenAI, "", true)
	}

	if u.DestinationMilvusEmbeddingCohere != nil {
		return utils.MarshalJSON(u.DestinationMilvusEmbeddingCohere, "", true)
	}

	if u.DestinationMilvusEmbeddingFake != nil {
		return utils.MarshalJSON(u.DestinationMilvusEmbeddingFake, "", true)
	}

	if u.DestinationMilvusEmbeddingFromField != nil {
		return utils.MarshalJSON(u.DestinationMilvusEmbeddingFromField, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMilvusIndexingAuthenticationNoAuthMode string

const (
	DestinationMilvusIndexingAuthenticationNoAuthModeNoAuth DestinationMilvusIndexingAuthenticationNoAuthMode = "no_auth"
)

func (e DestinationMilvusIndexingAuthenticationNoAuthMode) ToPointer() *DestinationMilvusIndexingAuthenticationNoAuthMode {
	return &e
}

func (e *DestinationMilvusIndexingAuthenticationNoAuthMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_auth":
		*e = DestinationMilvusIndexingAuthenticationNoAuthMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusIndexingAuthenticationNoAuthMode: %v", v)
	}
}

// DestinationMilvusIndexingAuthenticationNoAuth - Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
type DestinationMilvusIndexingAuthenticationNoAuth struct {
	mode *DestinationMilvusIndexingAuthenticationNoAuthMode `const:"no_auth" json:"mode"`
}

func (d DestinationMilvusIndexingAuthenticationNoAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusIndexingAuthenticationNoAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusIndexingAuthenticationNoAuth) GetMode() *DestinationMilvusIndexingAuthenticationNoAuthMode {
	return DestinationMilvusIndexingAuthenticationNoAuthModeNoAuth.ToPointer()
}

type DestinationMilvusIndexingAuthenticationUsernamePasswordMode string

const (
	DestinationMilvusIndexingAuthenticationUsernamePasswordModeUsernamePassword DestinationMilvusIndexingAuthenticationUsernamePasswordMode = "username_password"
)

func (e DestinationMilvusIndexingAuthenticationUsernamePasswordMode) ToPointer() *DestinationMilvusIndexingAuthenticationUsernamePasswordMode {
	return &e
}

func (e *DestinationMilvusIndexingAuthenticationUsernamePasswordMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = DestinationMilvusIndexingAuthenticationUsernamePasswordMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusIndexingAuthenticationUsernamePasswordMode: %v", v)
	}
}

// DestinationMilvusIndexingAuthenticationUsernamePassword - Authenticate using username and password (suitable for self-managed Milvus clusters)
type DestinationMilvusIndexingAuthenticationUsernamePassword struct {
	mode *DestinationMilvusIndexingAuthenticationUsernamePasswordMode `const:"username_password" json:"mode"`
	// Password for the Milvus instance
	Password string `json:"password"`
	// Username for the Milvus instance
	Username string `json:"username"`
}

func (d DestinationMilvusIndexingAuthenticationUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusIndexingAuthenticationUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusIndexingAuthenticationUsernamePassword) GetMode() *DestinationMilvusIndexingAuthenticationUsernamePasswordMode {
	return DestinationMilvusIndexingAuthenticationUsernamePasswordModeUsernamePassword.ToPointer()
}

func (o *DestinationMilvusIndexingAuthenticationUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationMilvusIndexingAuthenticationUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationMilvusIndexingAuthenticationAPITokenMode string

const (
	DestinationMilvusIndexingAuthenticationAPITokenModeToken DestinationMilvusIndexingAuthenticationAPITokenMode = "token"
)

func (e DestinationMilvusIndexingAuthenticationAPITokenMode) ToPointer() *DestinationMilvusIndexingAuthenticationAPITokenMode {
	return &e
}

func (e *DestinationMilvusIndexingAuthenticationAPITokenMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = DestinationMilvusIndexingAuthenticationAPITokenMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusIndexingAuthenticationAPITokenMode: %v", v)
	}
}

// DestinationMilvusIndexingAuthenticationAPIToken - Authenticate using an API token (suitable for Zilliz Cloud)
type DestinationMilvusIndexingAuthenticationAPIToken struct {
	mode *DestinationMilvusIndexingAuthenticationAPITokenMode `const:"token" json:"mode"`
	// API Token for the Milvus instance
	Token string `json:"token"`
}

func (d DestinationMilvusIndexingAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusIndexingAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusIndexingAuthenticationAPIToken) GetMode() *DestinationMilvusIndexingAuthenticationAPITokenMode {
	return DestinationMilvusIndexingAuthenticationAPITokenModeToken.ToPointer()
}

func (o *DestinationMilvusIndexingAuthenticationAPIToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type DestinationMilvusIndexingAuthenticationType string

const (
	DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationAPIToken         DestinationMilvusIndexingAuthenticationType = "destination-milvus_Indexing_Authentication_API Token"
	DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationUsernamePassword DestinationMilvusIndexingAuthenticationType = "destination-milvus_Indexing_Authentication_Username/Password"
	DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationNoAuth           DestinationMilvusIndexingAuthenticationType = "destination-milvus_Indexing_Authentication_No auth"
)

type DestinationMilvusIndexingAuthentication struct {
	DestinationMilvusIndexingAuthenticationAPIToken         *DestinationMilvusIndexingAuthenticationAPIToken
	DestinationMilvusIndexingAuthenticationUsernamePassword *DestinationMilvusIndexingAuthenticationUsernamePassword
	DestinationMilvusIndexingAuthenticationNoAuth           *DestinationMilvusIndexingAuthenticationNoAuth

	Type DestinationMilvusIndexingAuthenticationType
}

func CreateDestinationMilvusIndexingAuthenticationDestinationMilvusIndexingAuthenticationAPIToken(destinationMilvusIndexingAuthenticationAPIToken DestinationMilvusIndexingAuthenticationAPIToken) DestinationMilvusIndexingAuthentication {
	typ := DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationAPIToken

	return DestinationMilvusIndexingAuthentication{
		DestinationMilvusIndexingAuthenticationAPIToken: &destinationMilvusIndexingAuthenticationAPIToken,
		Type: typ,
	}
}

func CreateDestinationMilvusIndexingAuthenticationDestinationMilvusIndexingAuthenticationUsernamePassword(destinationMilvusIndexingAuthenticationUsernamePassword DestinationMilvusIndexingAuthenticationUsernamePassword) DestinationMilvusIndexingAuthentication {
	typ := DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationUsernamePassword

	return DestinationMilvusIndexingAuthentication{
		DestinationMilvusIndexingAuthenticationUsernamePassword: &destinationMilvusIndexingAuthenticationUsernamePassword,
		Type: typ,
	}
}

func CreateDestinationMilvusIndexingAuthenticationDestinationMilvusIndexingAuthenticationNoAuth(destinationMilvusIndexingAuthenticationNoAuth DestinationMilvusIndexingAuthenticationNoAuth) DestinationMilvusIndexingAuthentication {
	typ := DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationNoAuth

	return DestinationMilvusIndexingAuthentication{
		DestinationMilvusIndexingAuthenticationNoAuth: &destinationMilvusIndexingAuthenticationNoAuth,
		Type: typ,
	}
}

func (u *DestinationMilvusIndexingAuthentication) UnmarshalJSON(data []byte) error {

	destinationMilvusIndexingAuthenticationNoAuth := new(DestinationMilvusIndexingAuthenticationNoAuth)
	if err := utils.UnmarshalJSON(data, &destinationMilvusIndexingAuthenticationNoAuth, "", true, true); err == nil {
		u.DestinationMilvusIndexingAuthenticationNoAuth = destinationMilvusIndexingAuthenticationNoAuth
		u.Type = DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationNoAuth
		return nil
	}

	destinationMilvusIndexingAuthenticationAPIToken := new(DestinationMilvusIndexingAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &destinationMilvusIndexingAuthenticationAPIToken, "", true, true); err == nil {
		u.DestinationMilvusIndexingAuthenticationAPIToken = destinationMilvusIndexingAuthenticationAPIToken
		u.Type = DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationAPIToken
		return nil
	}

	destinationMilvusIndexingAuthenticationUsernamePassword := new(DestinationMilvusIndexingAuthenticationUsernamePassword)
	if err := utils.UnmarshalJSON(data, &destinationMilvusIndexingAuthenticationUsernamePassword, "", true, true); err == nil {
		u.DestinationMilvusIndexingAuthenticationUsernamePassword = destinationMilvusIndexingAuthenticationUsernamePassword
		u.Type = DestinationMilvusIndexingAuthenticationTypeDestinationMilvusIndexingAuthenticationUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusIndexingAuthentication) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusIndexingAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.DestinationMilvusIndexingAuthenticationAPIToken, "", true)
	}

	if u.DestinationMilvusIndexingAuthenticationUsernamePassword != nil {
		return utils.MarshalJSON(u.DestinationMilvusIndexingAuthenticationUsernamePassword, "", true)
	}

	if u.DestinationMilvusIndexingAuthenticationNoAuth != nil {
		return utils.MarshalJSON(u.DestinationMilvusIndexingAuthenticationNoAuth, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMilvusIndexing - Indexing configuration
type DestinationMilvusIndexing struct {
	// Authentication method
	Auth DestinationMilvusIndexingAuthentication `json:"auth"`
	// The collection to load data into
	Collection string `json:"collection"`
	// The database to connect to
	Db *string `default:"" json:"db"`
	// The public endpoint of the Milvus instance.
	Host string `json:"host"`
	// The field in the entity that contains the embedded text
	TextField *string `default:"text" json:"text_field"`
	// The field in the entity that contains the vector
	VectorField *string `default:"vector" json:"vector_field"`
}

func (d DestinationMilvusIndexing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusIndexing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusIndexing) GetAuth() DestinationMilvusIndexingAuthentication {
	if o == nil {
		return DestinationMilvusIndexingAuthentication{}
	}
	return o.Auth
}

func (o *DestinationMilvusIndexing) GetCollection() string {
	if o == nil {
		return ""
	}
	return o.Collection
}

func (o *DestinationMilvusIndexing) GetDb() *string {
	if o == nil {
		return nil
	}
	return o.Db
}

func (o *DestinationMilvusIndexing) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMilvusIndexing) GetTextField() *string {
	if o == nil {
		return nil
	}
	return o.TextField
}

func (o *DestinationMilvusIndexing) GetVectorField() *string {
	if o == nil {
		return nil
	}
	return o.VectorField
}

type DestinationMilvusProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
}

func (d DestinationMilvusProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationMilvusProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationMilvusProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationMilvusProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

type DestinationMilvus struct {
	destinationType DestinationMilvusMilvus `const:"milvus" json:"destinationType"`
	// Embedding configuration
	Embedding DestinationMilvusEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationMilvusIndexing              `json:"indexing"`
	Processing DestinationMilvusProcessingConfigModel `json:"processing"`
}

func (d DestinationMilvus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvus) GetDestinationType() DestinationMilvusMilvus {
	return DestinationMilvusMilvusMilvus
}

func (o *DestinationMilvus) GetEmbedding() DestinationMilvusEmbedding {
	if o == nil {
		return DestinationMilvusEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationMilvus) GetIndexing() DestinationMilvusIndexing {
	if o == nil {
		return DestinationMilvusIndexing{}
	}
	return o.Indexing
}

func (o *DestinationMilvus) GetProcessing() DestinationMilvusProcessingConfigModel {
	if o == nil {
		return DestinationMilvusProcessingConfigModel{}
	}
	return o.Processing
}
