// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType string

const (
	SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthTypeApikey SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType = "apikey"
)

func (e SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType) ToPointer() *SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType {
	return &e
}

func (e *SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apikey":
		*e = SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType: %v", v)
	}
}

// SourceTrustpilotUpdateAuthorizationMethodAPIKey - The API key authentication method gives you access to only the streams which are part of the Public API. When you want to get streams available via the Consumer API (e.g. the private reviews) you need to use authentication method OAuth 2.0.
type SourceTrustpilotUpdateAuthorizationMethodAPIKey struct {
	AuthType *SourceTrustpilotUpdateAuthorizationMethodAPIKeyAuthType `json:"auth_type,omitempty"`
	// The API key of the Trustpilot API application.
	ClientID string `json:"client_id"`
}

type SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthTypeOauth20 SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceTrustpilotUpdateAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                                    `json:"access_token"`
	AuthType    *SourceTrustpilotUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// The API key of the Trustpilot API application. (represents the OAuth Client ID)
	ClientID string `json:"client_id"`
	// The Secret of the Trustpilot API application. (represents the OAuth Client Secret)
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

type SourceTrustpilotUpdateAuthorizationMethodType string

const (
	SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodOAuth20 SourceTrustpilotUpdateAuthorizationMethodType = "source-trustpilot-update_Authorization Method_OAuth 2.0"
	SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodAPIKey  SourceTrustpilotUpdateAuthorizationMethodType = "source-trustpilot-update_Authorization Method_API Key"
)

type SourceTrustpilotUpdateAuthorizationMethod struct {
	SourceTrustpilotUpdateAuthorizationMethodOAuth20 *SourceTrustpilotUpdateAuthorizationMethodOAuth20
	SourceTrustpilotUpdateAuthorizationMethodAPIKey  *SourceTrustpilotUpdateAuthorizationMethodAPIKey

	Type SourceTrustpilotUpdateAuthorizationMethodType
}

func CreateSourceTrustpilotUpdateAuthorizationMethodSourceTrustpilotUpdateAuthorizationMethodOAuth20(sourceTrustpilotUpdateAuthorizationMethodOAuth20 SourceTrustpilotUpdateAuthorizationMethodOAuth20) SourceTrustpilotUpdateAuthorizationMethod {
	typ := SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodOAuth20

	return SourceTrustpilotUpdateAuthorizationMethod{
		SourceTrustpilotUpdateAuthorizationMethodOAuth20: &sourceTrustpilotUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceTrustpilotUpdateAuthorizationMethodSourceTrustpilotUpdateAuthorizationMethodAPIKey(sourceTrustpilotUpdateAuthorizationMethodAPIKey SourceTrustpilotUpdateAuthorizationMethodAPIKey) SourceTrustpilotUpdateAuthorizationMethod {
	typ := SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodAPIKey

	return SourceTrustpilotUpdateAuthorizationMethod{
		SourceTrustpilotUpdateAuthorizationMethodAPIKey: &sourceTrustpilotUpdateAuthorizationMethodAPIKey,
		Type: typ,
	}
}

func (u *SourceTrustpilotUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceTrustpilotUpdateAuthorizationMethodAPIKey := new(SourceTrustpilotUpdateAuthorizationMethodAPIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrustpilotUpdateAuthorizationMethodAPIKey); err == nil {
		u.SourceTrustpilotUpdateAuthorizationMethodAPIKey = sourceTrustpilotUpdateAuthorizationMethodAPIKey
		u.Type = SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodAPIKey
		return nil
	}

	sourceTrustpilotUpdateAuthorizationMethodOAuth20 := new(SourceTrustpilotUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrustpilotUpdateAuthorizationMethodOAuth20); err == nil {
		u.SourceTrustpilotUpdateAuthorizationMethodOAuth20 = sourceTrustpilotUpdateAuthorizationMethodOAuth20
		u.Type = SourceTrustpilotUpdateAuthorizationMethodTypeSourceTrustpilotUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceTrustpilotUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceTrustpilotUpdateAuthorizationMethodAPIKey != nil {
		return json.Marshal(u.SourceTrustpilotUpdateAuthorizationMethodAPIKey)
	}

	if u.SourceTrustpilotUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceTrustpilotUpdateAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceTrustpilotUpdate struct {
	// The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
	BusinessUnits []string                                  `json:"business_units"`
	Credentials   SourceTrustpilotUpdateAuthorizationMethod `json:"credentials"`
	// For streams with sync. method incremental the start date time to be used
	StartDate string `json:"start_date"`
}
