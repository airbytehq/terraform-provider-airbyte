// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod string

const (
	DestinationElasticsearchAuthenticationMethodUsernamePasswordMethodBasic DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod = "basic"
)

func (e DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod) ToPointer() *DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod {
	return &e
}

func (e *DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod: %v", v)
	}
}

// DestinationElasticsearchAuthenticationMethodUsernamePassword - Basic auth header with a username and password
type DestinationElasticsearchAuthenticationMethodUsernamePassword struct {
	method DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod `const:"basic" json:"method"`
	// Basic auth password to access a secure Elasticsearch server
	Password string `json:"password"`
	// Basic auth username to access a secure Elasticsearch server
	Username string `json:"username"`
}

func (d DestinationElasticsearchAuthenticationMethodUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationElasticsearchAuthenticationMethodUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationElasticsearchAuthenticationMethodUsernamePassword) GetMethod() DestinationElasticsearchAuthenticationMethodUsernamePasswordMethod {
	return DestinationElasticsearchAuthenticationMethodUsernamePasswordMethodBasic
}

func (o *DestinationElasticsearchAuthenticationMethodUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationElasticsearchAuthenticationMethodUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod string

const (
	DestinationElasticsearchAuthenticationMethodAPIKeySecretMethodSecret DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod = "secret"
)

func (e DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod) ToPointer() *DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod {
	return &e
}

func (e *DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		*e = DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod: %v", v)
	}
}

// DestinationElasticsearchAuthenticationMethodAPIKeySecret - Use a api key and secret combination to authenticate
type DestinationElasticsearchAuthenticationMethodAPIKeySecret struct {
	// The Key ID to used when accessing an enterprise Elasticsearch instance.
	APIKeyID string `json:"apiKeyId"`
	// The secret associated with the API Key ID.
	APIKeySecret string                                                         `json:"apiKeySecret"`
	method       DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod `const:"secret" json:"method"`
}

func (d DestinationElasticsearchAuthenticationMethodAPIKeySecret) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationElasticsearchAuthenticationMethodAPIKeySecret) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationElasticsearchAuthenticationMethodAPIKeySecret) GetAPIKeyID() string {
	if o == nil {
		return ""
	}
	return o.APIKeyID
}

func (o *DestinationElasticsearchAuthenticationMethodAPIKeySecret) GetAPIKeySecret() string {
	if o == nil {
		return ""
	}
	return o.APIKeySecret
}

func (o *DestinationElasticsearchAuthenticationMethodAPIKeySecret) GetMethod() DestinationElasticsearchAuthenticationMethodAPIKeySecretMethod {
	return DestinationElasticsearchAuthenticationMethodAPIKeySecretMethodSecret
}

type DestinationElasticsearchAuthenticationMethodType string

const (
	DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodAPIKeySecret     DestinationElasticsearchAuthenticationMethodType = "destination-elasticsearch_Authentication Method_Api Key/Secret"
	DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodUsernamePassword DestinationElasticsearchAuthenticationMethodType = "destination-elasticsearch_Authentication Method_Username/Password"
)

type DestinationElasticsearchAuthenticationMethod struct {
	DestinationElasticsearchAuthenticationMethodAPIKeySecret     *DestinationElasticsearchAuthenticationMethodAPIKeySecret
	DestinationElasticsearchAuthenticationMethodUsernamePassword *DestinationElasticsearchAuthenticationMethodUsernamePassword

	Type DestinationElasticsearchAuthenticationMethodType
}

func CreateDestinationElasticsearchAuthenticationMethodDestinationElasticsearchAuthenticationMethodAPIKeySecret(destinationElasticsearchAuthenticationMethodAPIKeySecret DestinationElasticsearchAuthenticationMethodAPIKeySecret) DestinationElasticsearchAuthenticationMethod {
	typ := DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodAPIKeySecret

	return DestinationElasticsearchAuthenticationMethod{
		DestinationElasticsearchAuthenticationMethodAPIKeySecret: &destinationElasticsearchAuthenticationMethodAPIKeySecret,
		Type: typ,
	}
}

func CreateDestinationElasticsearchAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePassword(destinationElasticsearchAuthenticationMethodUsernamePassword DestinationElasticsearchAuthenticationMethodUsernamePassword) DestinationElasticsearchAuthenticationMethod {
	typ := DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodUsernamePassword

	return DestinationElasticsearchAuthenticationMethod{
		DestinationElasticsearchAuthenticationMethodUsernamePassword: &destinationElasticsearchAuthenticationMethodUsernamePassword,
		Type: typ,
	}
}

func (u *DestinationElasticsearchAuthenticationMethod) UnmarshalJSON(data []byte) error {

	destinationElasticsearchAuthenticationMethodAPIKeySecret := new(DestinationElasticsearchAuthenticationMethodAPIKeySecret)
	if err := utils.UnmarshalJSON(data, &destinationElasticsearchAuthenticationMethodAPIKeySecret, "", true, true); err == nil {
		u.DestinationElasticsearchAuthenticationMethodAPIKeySecret = destinationElasticsearchAuthenticationMethodAPIKeySecret
		u.Type = DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodAPIKeySecret
		return nil
	}

	destinationElasticsearchAuthenticationMethodUsernamePassword := new(DestinationElasticsearchAuthenticationMethodUsernamePassword)
	if err := utils.UnmarshalJSON(data, &destinationElasticsearchAuthenticationMethodUsernamePassword, "", true, true); err == nil {
		u.DestinationElasticsearchAuthenticationMethodUsernamePassword = destinationElasticsearchAuthenticationMethodUsernamePassword
		u.Type = DestinationElasticsearchAuthenticationMethodTypeDestinationElasticsearchAuthenticationMethodUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationElasticsearchAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationElasticsearchAuthenticationMethodAPIKeySecret != nil {
		return utils.MarshalJSON(u.DestinationElasticsearchAuthenticationMethodAPIKeySecret, "", true)
	}

	if u.DestinationElasticsearchAuthenticationMethodUsernamePassword != nil {
		return utils.MarshalJSON(u.DestinationElasticsearchAuthenticationMethodUsernamePassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationElasticsearchElasticsearch string

const (
	DestinationElasticsearchElasticsearchElasticsearch DestinationElasticsearchElasticsearch = "elasticsearch"
)

func (e DestinationElasticsearchElasticsearch) ToPointer() *DestinationElasticsearchElasticsearch {
	return &e
}

func (e *DestinationElasticsearchElasticsearch) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "elasticsearch":
		*e = DestinationElasticsearchElasticsearch(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchElasticsearch: %v", v)
	}
}

type DestinationElasticsearch struct {
	// The type of authentication to be used
	AuthenticationMethod *DestinationElasticsearchAuthenticationMethod `json:"authenticationMethod,omitempty"`
	// CA certificate
	CaCertificate   *string                               `json:"ca_certificate,omitempty"`
	destinationType DestinationElasticsearchElasticsearch `const:"elasticsearch" json:"destinationType"`
	// The full url of the Elasticsearch server
	Endpoint string `json:"endpoint"`
	// If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys.
	Upsert *bool `default:"true" json:"upsert"`
}

func (d DestinationElasticsearch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationElasticsearch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationElasticsearch) GetAuthenticationMethod() *DestinationElasticsearchAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthenticationMethod
}

func (o *DestinationElasticsearch) GetCaCertificate() *string {
	if o == nil {
		return nil
	}
	return o.CaCertificate
}

func (o *DestinationElasticsearch) GetDestinationType() DestinationElasticsearchElasticsearch {
	return DestinationElasticsearchElasticsearchElasticsearch
}

func (o *DestinationElasticsearch) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *DestinationElasticsearch) GetUpsert() *bool {
	if o == nil {
		return nil
	}
	return o.Upsert
}
