// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationClickhouseClickhouse string

const (
	DestinationClickhouseClickhouseClickhouse DestinationClickhouseClickhouse = "clickhouse"
)

func (e DestinationClickhouseClickhouse) ToPointer() *DestinationClickhouseClickhouse {
	return &e
}

func (e *DestinationClickhouseClickhouse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = DestinationClickhouseClickhouse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseClickhouse: %v", v)
	}
}

// DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationClickhouseSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	tunnelMethod DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod `const:"SSH_PASSWORD_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

func (d DestinationClickhouseSSHTunnelMethodPasswordAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) GetTunnelMethod() DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth
}

func (o *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

func (o *DestinationClickhouseSSHTunnelMethodPasswordAuthentication) GetTunnelUserPassword() string {
	if o == nil {
		return ""
	}
	return o.TunnelUserPassword
}

// DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	tunnelMethod DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `const:"SSH_KEY_AUTH" json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort *int64 `default:"22" json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

func (d DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) GetSSHKey() string {
	if o == nil {
		return ""
	}
	return o.SSHKey
}

func (o *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) GetTunnelHost() string {
	if o == nil {
		return ""
	}
	return o.TunnelHost
}

func (o *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) GetTunnelMethod() DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth
}

func (o *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) GetTunnelPort() *int64 {
	if o == nil {
		return nil
	}
	return o.TunnelPort
}

func (o *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) GetTunnelUser() string {
	if o == nil {
		return ""
	}
	return o.TunnelUser
}

// DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationClickhouseSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationClickhouseSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	tunnelMethod DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod `const:"NO_TUNNEL" json:"tunnel_method"`
}

func (d DestinationClickhouseSSHTunnelMethodNoTunnel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouseSSHTunnelMethodNoTunnel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouseSSHTunnelMethodNoTunnel) GetTunnelMethod() DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethod {
	return DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethodNoTunnel
}

type DestinationClickhouseSSHTunnelMethodType string

const (
	DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodNoTunnel               DestinationClickhouseSSHTunnelMethodType = "destination-clickhouse_SSH Tunnel Method_No Tunnel"
	DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodSSHKeyAuthentication   DestinationClickhouseSSHTunnelMethodType = "destination-clickhouse_SSH Tunnel Method_SSH Key Authentication"
	DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodPasswordAuthentication DestinationClickhouseSSHTunnelMethodType = "destination-clickhouse_SSH Tunnel Method_Password Authentication"
)

type DestinationClickhouseSSHTunnelMethod struct {
	DestinationClickhouseSSHTunnelMethodNoTunnel               *DestinationClickhouseSSHTunnelMethodNoTunnel
	DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication   *DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication
	DestinationClickhouseSSHTunnelMethodPasswordAuthentication *DestinationClickhouseSSHTunnelMethodPasswordAuthentication

	Type DestinationClickhouseSSHTunnelMethodType
}

func CreateDestinationClickhouseSSHTunnelMethodDestinationClickhouseSSHTunnelMethodNoTunnel(destinationClickhouseSSHTunnelMethodNoTunnel DestinationClickhouseSSHTunnelMethodNoTunnel) DestinationClickhouseSSHTunnelMethod {
	typ := DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodNoTunnel

	return DestinationClickhouseSSHTunnelMethod{
		DestinationClickhouseSSHTunnelMethodNoTunnel: &destinationClickhouseSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateDestinationClickhouseSSHTunnelMethodDestinationClickhouseSSHTunnelMethodSSHKeyAuthentication(destinationClickhouseSSHTunnelMethodSSHKeyAuthentication DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication) DestinationClickhouseSSHTunnelMethod {
	typ := DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodSSHKeyAuthentication

	return DestinationClickhouseSSHTunnelMethod{
		DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication: &destinationClickhouseSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationClickhouseSSHTunnelMethodDestinationClickhouseSSHTunnelMethodPasswordAuthentication(destinationClickhouseSSHTunnelMethodPasswordAuthentication DestinationClickhouseSSHTunnelMethodPasswordAuthentication) DestinationClickhouseSSHTunnelMethod {
	typ := DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodPasswordAuthentication

	return DestinationClickhouseSSHTunnelMethod{
		DestinationClickhouseSSHTunnelMethodPasswordAuthentication: &destinationClickhouseSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationClickhouseSSHTunnelMethod) UnmarshalJSON(data []byte) error {

	destinationClickhouseSSHTunnelMethodNoTunnel := new(DestinationClickhouseSSHTunnelMethodNoTunnel)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseSSHTunnelMethodNoTunnel, "", true, true); err == nil {
		u.DestinationClickhouseSSHTunnelMethodNoTunnel = destinationClickhouseSSHTunnelMethodNoTunnel
		u.Type = DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodNoTunnel
		return nil
	}

	destinationClickhouseSSHTunnelMethodSSHKeyAuthentication := new(DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseSSHTunnelMethodSSHKeyAuthentication, "", true, true); err == nil {
		u.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication = destinationClickhouseSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationClickhouseSSHTunnelMethodPasswordAuthentication := new(DestinationClickhouseSSHTunnelMethodPasswordAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationClickhouseSSHTunnelMethodPasswordAuthentication, "", true, true); err == nil {
		u.DestinationClickhouseSSHTunnelMethodPasswordAuthentication = destinationClickhouseSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationClickhouseSSHTunnelMethodTypeDestinationClickhouseSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationClickhouseSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationClickhouseSSHTunnelMethodNoTunnel != nil {
		return utils.MarshalJSON(u.DestinationClickhouseSSHTunnelMethodNoTunnel, "", true)
	}

	if u.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
		return utils.MarshalJSON(u.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication, "", true)
	}

	if u.DestinationClickhouseSSHTunnelMethodPasswordAuthentication != nil {
		return utils.MarshalJSON(u.DestinationClickhouseSSHTunnelMethodPasswordAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationClickhouse struct {
	// Name of the database.
	Database        string                          `json:"database"`
	destinationType DestinationClickhouseClickhouse `const:"clickhouse" json:"destinationType"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// HTTP port of the database.
	Port *int64 `default:"8123" json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationClickhouseSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to use to access the database.
	Username string `json:"username"`
}

func (d DestinationClickhouse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationClickhouse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationClickhouse) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *DestinationClickhouse) GetDestinationType() DestinationClickhouseClickhouse {
	return DestinationClickhouseClickhouseClickhouse
}

func (o *DestinationClickhouse) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationClickhouse) GetJdbcURLParams() *string {
	if o == nil {
		return nil
	}
	return o.JdbcURLParams
}

func (o *DestinationClickhouse) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *DestinationClickhouse) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DestinationClickhouse) GetTunnelMethod() *DestinationClickhouseSSHTunnelMethod {
	if o == nil {
		return nil
	}
	return o.TunnelMethod
}

func (o *DestinationClickhouse) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}
