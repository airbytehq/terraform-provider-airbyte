// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMailchimpAuthenticationAPIKeyAuthType string

const (
	SourceMailchimpAuthenticationAPIKeyAuthTypeApikey SourceMailchimpAuthenticationAPIKeyAuthType = "apikey"
)

func (e SourceMailchimpAuthenticationAPIKeyAuthType) ToPointer() *SourceMailchimpAuthenticationAPIKeyAuthType {
	return &e
}

func (e *SourceMailchimpAuthenticationAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apikey":
		*e = SourceMailchimpAuthenticationAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMailchimpAuthenticationAPIKeyAuthType: %v", v)
	}
}

type SourceMailchimpAuthenticationAPIKey struct {
	// Mailchimp API Key. See the <a href="https://docs.airbyte.com/integrations/sources/mailchimp">docs</a> for information on how to generate this key.
	Apikey   string                                      `json:"apikey"`
	authType SourceMailchimpAuthenticationAPIKeyAuthType `const:"apikey" json:"auth_type"`
}

func (s SourceMailchimpAuthenticationAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMailchimpAuthenticationAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMailchimpAuthenticationAPIKey) GetApikey() string {
	if o == nil {
		return ""
	}
	return o.Apikey
}

func (o *SourceMailchimpAuthenticationAPIKey) GetAuthType() SourceMailchimpAuthenticationAPIKeyAuthType {
	return SourceMailchimpAuthenticationAPIKeyAuthTypeApikey
}

type SourceMailchimpAuthenticationOAuth20AuthType string

const (
	SourceMailchimpAuthenticationOAuth20AuthTypeOauth20 SourceMailchimpAuthenticationOAuth20AuthType = "oauth2.0"
)

func (e SourceMailchimpAuthenticationOAuth20AuthType) ToPointer() *SourceMailchimpAuthenticationOAuth20AuthType {
	return &e
}

func (e *SourceMailchimpAuthenticationOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceMailchimpAuthenticationOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMailchimpAuthenticationOAuth20AuthType: %v", v)
	}
}

type SourceMailchimpAuthenticationOAuth20 struct {
	// An access token generated using the above client ID and secret.
	AccessToken string                                       `json:"access_token"`
	authType    SourceMailchimpAuthenticationOAuth20AuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceMailchimpAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMailchimpAuthenticationOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMailchimpAuthenticationOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceMailchimpAuthenticationOAuth20) GetAuthType() SourceMailchimpAuthenticationOAuth20AuthType {
	return SourceMailchimpAuthenticationOAuth20AuthTypeOauth20
}

func (o *SourceMailchimpAuthenticationOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceMailchimpAuthenticationOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type SourceMailchimpAuthenticationType string

const (
	SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationOAuth20 SourceMailchimpAuthenticationType = "source-mailchimp_Authentication_OAuth2.0"
	SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationAPIKey  SourceMailchimpAuthenticationType = "source-mailchimp_Authentication_API Key"
)

type SourceMailchimpAuthentication struct {
	SourceMailchimpAuthenticationOAuth20 *SourceMailchimpAuthenticationOAuth20
	SourceMailchimpAuthenticationAPIKey  *SourceMailchimpAuthenticationAPIKey

	Type SourceMailchimpAuthenticationType
}

func CreateSourceMailchimpAuthenticationSourceMailchimpAuthenticationOAuth20(sourceMailchimpAuthenticationOAuth20 SourceMailchimpAuthenticationOAuth20) SourceMailchimpAuthentication {
	typ := SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationOAuth20

	return SourceMailchimpAuthentication{
		SourceMailchimpAuthenticationOAuth20: &sourceMailchimpAuthenticationOAuth20,
		Type:                                 typ,
	}
}

func CreateSourceMailchimpAuthenticationSourceMailchimpAuthenticationAPIKey(sourceMailchimpAuthenticationAPIKey SourceMailchimpAuthenticationAPIKey) SourceMailchimpAuthentication {
	typ := SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationAPIKey

	return SourceMailchimpAuthentication{
		SourceMailchimpAuthenticationAPIKey: &sourceMailchimpAuthenticationAPIKey,
		Type:                                typ,
	}
}

func (u *SourceMailchimpAuthentication) UnmarshalJSON(data []byte) error {

	sourceMailchimpAuthenticationAPIKey := new(SourceMailchimpAuthenticationAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceMailchimpAuthenticationAPIKey, "", true, true); err == nil {
		u.SourceMailchimpAuthenticationAPIKey = sourceMailchimpAuthenticationAPIKey
		u.Type = SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationAPIKey
		return nil
	}

	sourceMailchimpAuthenticationOAuth20 := new(SourceMailchimpAuthenticationOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceMailchimpAuthenticationOAuth20, "", true, true); err == nil {
		u.SourceMailchimpAuthenticationOAuth20 = sourceMailchimpAuthenticationOAuth20
		u.Type = SourceMailchimpAuthenticationTypeSourceMailchimpAuthenticationOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMailchimpAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceMailchimpAuthenticationOAuth20 != nil {
		return utils.MarshalJSON(u.SourceMailchimpAuthenticationOAuth20, "", true)
	}

	if u.SourceMailchimpAuthenticationAPIKey != nil {
		return utils.MarshalJSON(u.SourceMailchimpAuthenticationAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceMailchimpMailchimp string

const (
	SourceMailchimpMailchimpMailchimp SourceMailchimpMailchimp = "mailchimp"
)

func (e SourceMailchimpMailchimp) ToPointer() *SourceMailchimpMailchimp {
	return &e
}

func (e *SourceMailchimpMailchimp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mailchimp":
		*e = SourceMailchimpMailchimp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMailchimpMailchimp: %v", v)
	}
}

type SourceMailchimp struct {
	CampaignID  *string                        `json:"campaign_id,omitempty"`
	Credentials *SourceMailchimpAuthentication `json:"credentials,omitempty"`
	sourceType  SourceMailchimpMailchimp       `const:"mailchimp" json:"sourceType"`
}

func (s SourceMailchimp) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMailchimp) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMailchimp) GetCampaignID() *string {
	if o == nil {
		return nil
	}
	return o.CampaignID
}

func (o *SourceMailchimp) GetCredentials() *SourceMailchimpAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceMailchimp) GetSourceType() SourceMailchimpMailchimp {
	return SourceMailchimpMailchimpMailchimp
}
