// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceS3SchemasFormatFileFormatFiletype string

const (
	SourceS3SchemasFormatFileFormatFiletypeJsonl SourceS3SchemasFormatFileFormatFiletype = "jsonl"
)

func (e SourceS3SchemasFormatFileFormatFiletype) ToPointer() *SourceS3SchemasFormatFileFormatFiletype {
	return &e
}

func (e *SourceS3SchemasFormatFileFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceS3SchemasFormatFileFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasFormatFileFormatFiletype: %v", v)
	}
}

// SourceS3UnexpectedFieldBehavior - How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
type SourceS3UnexpectedFieldBehavior string

const (
	SourceS3UnexpectedFieldBehaviorIgnore SourceS3UnexpectedFieldBehavior = "ignore"
	SourceS3UnexpectedFieldBehaviorInfer  SourceS3UnexpectedFieldBehavior = "infer"
	SourceS3UnexpectedFieldBehaviorError  SourceS3UnexpectedFieldBehavior = "error"
)

func (e SourceS3UnexpectedFieldBehavior) ToPointer() *SourceS3UnexpectedFieldBehavior {
	return &e
}

func (e *SourceS3UnexpectedFieldBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ignore":
		fallthrough
	case "infer":
		fallthrough
	case "error":
		*e = SourceS3UnexpectedFieldBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UnexpectedFieldBehavior: %v", v)
	}
}

// SourceS3Jsonl - This connector uses <a href="https://arrow.apache.org/docs/python/json.html" target="_blank">PyArrow</a> for JSON Lines (jsonl) file parsing.
type SourceS3Jsonl struct {
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64                                   `default:"0" json:"block_size"`
	filetype  *SourceS3SchemasFormatFileFormatFiletype `const:"jsonl" json:"filetype"`
	// Whether newline characters are allowed in JSON values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `default:"false" json:"newlines_in_values"`
	// How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
	UnexpectedFieldBehavior *SourceS3UnexpectedFieldBehavior `default:"infer" json:"unexpected_field_behavior"`
}

func (s SourceS3Jsonl) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3Jsonl) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3Jsonl) GetBlockSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BlockSize
}

func (o *SourceS3Jsonl) GetFiletype() *SourceS3SchemasFormatFileFormatFiletype {
	return SourceS3SchemasFormatFileFormatFiletypeJsonl.ToPointer()
}

func (o *SourceS3Jsonl) GetNewlinesInValues() *bool {
	if o == nil {
		return nil
	}
	return o.NewlinesInValues
}

func (o *SourceS3Jsonl) GetUnexpectedFieldBehavior() *SourceS3UnexpectedFieldBehavior {
	if o == nil {
		return nil
	}
	return o.UnexpectedFieldBehavior
}

type SourceS3SchemasFormatFiletype string

const (
	SourceS3SchemasFormatFiletypeAvro SourceS3SchemasFormatFiletype = "avro"
)

func (e SourceS3SchemasFormatFiletype) ToPointer() *SourceS3SchemasFormatFiletype {
	return &e
}

func (e *SourceS3SchemasFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceS3SchemasFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasFormatFiletype: %v", v)
	}
}

// SourceS3Avro - This connector utilises <a href="https://fastavro.readthedocs.io/en/latest/" target="_blank">fastavro</a> for Avro parsing.
type SourceS3Avro struct {
	filetype *SourceS3SchemasFormatFiletype `const:"avro" json:"filetype"`
}

func (s SourceS3Avro) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3Avro) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3Avro) GetFiletype() *SourceS3SchemasFormatFiletype {
	return SourceS3SchemasFormatFiletypeAvro.ToPointer()
}

type SourceS3SchemasFiletype string

const (
	SourceS3SchemasFiletypeParquet SourceS3SchemasFiletype = "parquet"
)

func (e SourceS3SchemasFiletype) ToPointer() *SourceS3SchemasFiletype {
	return &e
}

func (e *SourceS3SchemasFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceS3SchemasFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasFiletype: %v", v)
	}
}

// SourceS3Parquet - This connector utilises <a href="https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetFile.html" target="_blank">PyArrow (Apache Arrow)</a> for Parquet parsing.
type SourceS3Parquet struct {
	// Maximum number of records per batch read from the input files. Batches may be smaller if there arenâ€™t enough rows in the file. This option can help avoid out-of-memory errors if your data is particularly wide.
	BatchSize *int64 `default:"65536" json:"batch_size"`
	// Perform read buffering when deserializing individual column chunks. By default every group column will be loaded fully to memory. This option can help avoid out-of-memory errors if your data is particularly wide.
	BufferSize *int64 `default:"2" json:"buffer_size"`
	// If you only want to sync a subset of the columns from the file(s), add the columns you want here as a comma-delimited list. Leave it empty to sync all columns.
	Columns  []string                 `json:"columns,omitempty"`
	filetype *SourceS3SchemasFiletype `const:"parquet" json:"filetype"`
}

func (s SourceS3Parquet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3Parquet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3Parquet) GetBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSize
}

func (o *SourceS3Parquet) GetBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BufferSize
}

func (o *SourceS3Parquet) GetColumns() []string {
	if o == nil {
		return nil
	}
	return o.Columns
}

func (o *SourceS3Parquet) GetFiletype() *SourceS3SchemasFiletype {
	return SourceS3SchemasFiletypeParquet.ToPointer()
}

type SourceS3Filetype string

const (
	SourceS3FiletypeCsv SourceS3Filetype = "csv"
)

func (e SourceS3Filetype) ToPointer() *SourceS3Filetype {
	return &e
}

func (e *SourceS3Filetype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceS3Filetype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3Filetype: %v", v)
	}
}

// SourceS3CSV - This connector utilises <a href="https: // arrow.apache.org/docs/python/generated/pyarrow.csv.open_csv.html" target="_blank">PyArrow (Apache Arrow)</a> for CSV parsing.
type SourceS3CSV struct {
	// Optionally add a valid JSON string here to provide additional options to the csv reader. Mappings must correspond to options <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ConvertOptions.html#pyarrow.csv.ConvertOptions" target="_blank">detailed here</a>. 'column_types' is used internally to handle schema so overriding that would likely cause problems.
	AdditionalReaderOptions *string `json:"additional_reader_options,omitempty"`
	// Optionally add a valid JSON string here to provide additional <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ReadOptions.html#pyarrow.csv.ReadOptions" target="_blank">Pyarrow ReadOptions</a>. Specify 'column_names' here if your CSV doesn't have header, or if you want to use custom column names. 'block_size' and 'encoding' are already used above, specify them again here will override the values above.
	AdvancedOptions *string `json:"advanced_options,omitempty"`
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64 `default:"10000" json:"block_size"`
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `default:"," json:"delimiter"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `default:"true" json:"double_quote"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `default:"utf8" json:"encoding"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string           `json:"escape_char,omitempty"`
	filetype   *SourceS3Filetype `const:"csv" json:"filetype"`
	// Configures whether a schema for the source should be inferred from the current data or not. If set to false and a custom schema is set, then the manually enforced schema is used. If a schema is not manually set, and this is set to false, then all fields will be read as strings
	InferDatatypes *bool `default:"true" json:"infer_datatypes"`
	// Whether newline characters are allowed in CSV values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `default:"false" json:"newlines_in_values"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `default:""" json:"quote_char"`
}

func (s SourceS3CSV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3CSV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3CSV) GetAdditionalReaderOptions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalReaderOptions
}

func (o *SourceS3CSV) GetAdvancedOptions() *string {
	if o == nil {
		return nil
	}
	return o.AdvancedOptions
}

func (o *SourceS3CSV) GetBlockSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BlockSize
}

func (o *SourceS3CSV) GetDelimiter() *string {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *SourceS3CSV) GetDoubleQuote() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleQuote
}

func (o *SourceS3CSV) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *SourceS3CSV) GetEscapeChar() *string {
	if o == nil {
		return nil
	}
	return o.EscapeChar
}

func (o *SourceS3CSV) GetFiletype() *SourceS3Filetype {
	return SourceS3FiletypeCsv.ToPointer()
}

func (o *SourceS3CSV) GetInferDatatypes() *bool {
	if o == nil {
		return nil
	}
	return o.InferDatatypes
}

func (o *SourceS3CSV) GetNewlinesInValues() *bool {
	if o == nil {
		return nil
	}
	return o.NewlinesInValues
}

func (o *SourceS3CSV) GetQuoteChar() *string {
	if o == nil {
		return nil
	}
	return o.QuoteChar
}

type SourceS3FileFormatType string

const (
	SourceS3FileFormatTypeCsv     SourceS3FileFormatType = "Csv"
	SourceS3FileFormatTypeParquet SourceS3FileFormatType = "Parquet"
	SourceS3FileFormatTypeAvro    SourceS3FileFormatType = "Avro"
	SourceS3FileFormatTypeJsonl   SourceS3FileFormatType = "Jsonl"
)

type SourceS3FileFormat struct {
	Csv     *SourceS3CSV
	Parquet *SourceS3Parquet
	Avro    *SourceS3Avro
	Jsonl   *SourceS3Jsonl

	Type SourceS3FileFormatType
}

func CreateSourceS3FileFormatCsv(csv SourceS3CSV) SourceS3FileFormat {
	typ := SourceS3FileFormatTypeCsv

	return SourceS3FileFormat{
		Csv:  &csv,
		Type: typ,
	}
}

func CreateSourceS3FileFormatParquet(parquet SourceS3Parquet) SourceS3FileFormat {
	typ := SourceS3FileFormatTypeParquet

	return SourceS3FileFormat{
		Parquet: &parquet,
		Type:    typ,
	}
}

func CreateSourceS3FileFormatAvro(avro SourceS3Avro) SourceS3FileFormat {
	typ := SourceS3FileFormatTypeAvro

	return SourceS3FileFormat{
		Avro: &avro,
		Type: typ,
	}
}

func CreateSourceS3FileFormatJsonl(jsonl SourceS3Jsonl) SourceS3FileFormat {
	typ := SourceS3FileFormatTypeJsonl

	return SourceS3FileFormat{
		Jsonl: &jsonl,
		Type:  typ,
	}
}

func (u *SourceS3FileFormat) UnmarshalJSON(data []byte) error {

	avro := new(SourceS3Avro)
	if err := utils.UnmarshalJSON(data, &avro, "", true, true); err == nil {
		u.Avro = avro
		u.Type = SourceS3FileFormatTypeAvro
		return nil
	}

	parquet := new(SourceS3Parquet)
	if err := utils.UnmarshalJSON(data, &parquet, "", true, true); err == nil {
		u.Parquet = parquet
		u.Type = SourceS3FileFormatTypeParquet
		return nil
	}

	jsonl := new(SourceS3Jsonl)
	if err := utils.UnmarshalJSON(data, &jsonl, "", true, true); err == nil {
		u.Jsonl = jsonl
		u.Type = SourceS3FileFormatTypeJsonl
		return nil
	}

	csv := new(SourceS3CSV)
	if err := utils.UnmarshalJSON(data, &csv, "", true, true); err == nil {
		u.Csv = csv
		u.Type = SourceS3FileFormatTypeCsv
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3FileFormat) MarshalJSON() ([]byte, error) {
	if u.Csv != nil {
		return utils.MarshalJSON(u.Csv, "", true)
	}

	if u.Parquet != nil {
		return utils.MarshalJSON(u.Parquet, "", true)
	}

	if u.Avro != nil {
		return utils.MarshalJSON(u.Avro, "", true)
	}

	if u.Jsonl != nil {
		return utils.MarshalJSON(u.Jsonl, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceS3S3AmazonWebServices - Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
type SourceS3S3AmazonWebServices struct {
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Name of the S3 bucket where the file(s) exist.
	Bucket *string `json:"bucket,omitempty"`
	// Endpoint to an S3 compatible service. Leave empty to use AWS.
	Endpoint *string `default:"" json:"endpoint"`
	// By providing a path-like prefix (e.g. myFolder/thisTable/) under which all the relevant files sit, we can optimize finding these in S3. This is optional but recommended if your bucket contains many folders/files which you don't need to replicate.
	PathPrefix *string `default:"" json:"path_prefix"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
}

func (s SourceS3S3AmazonWebServices) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3S3AmazonWebServices) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3S3AmazonWebServices) GetAwsAccessKeyID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccessKeyID
}

func (o *SourceS3S3AmazonWebServices) GetAwsSecretAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretAccessKey
}

func (o *SourceS3S3AmazonWebServices) GetBucket() *string {
	if o == nil {
		return nil
	}
	return o.Bucket
}

func (o *SourceS3S3AmazonWebServices) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *SourceS3S3AmazonWebServices) GetPathPrefix() *string {
	if o == nil {
		return nil
	}
	return o.PathPrefix
}

func (o *SourceS3S3AmazonWebServices) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

type SourceS3S3 string

const (
	SourceS3S3S3 SourceS3S3 = "s3"
)

func (e SourceS3S3) ToPointer() *SourceS3S3 {
	return &e
}

func (e *SourceS3S3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s3":
		*e = SourceS3S3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3S3: %v", v)
	}
}

type SourceS3SchemasStreamsFormatFormat4Filetype string

const (
	SourceS3SchemasStreamsFormatFormat4FiletypeParquet SourceS3SchemasStreamsFormatFormat4Filetype = "parquet"
)

func (e SourceS3SchemasStreamsFormatFormat4Filetype) ToPointer() *SourceS3SchemasStreamsFormatFormat4Filetype {
	return &e
}

func (e *SourceS3SchemasStreamsFormatFormat4Filetype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceS3SchemasStreamsFormatFormat4Filetype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasStreamsFormatFormat4Filetype: %v", v)
	}
}

// SourceS3ParquetFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3ParquetFormat struct {
	// Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended.
	DecimalAsFloat *bool                                        `default:"false" json:"decimal_as_float"`
	filetype       *SourceS3SchemasStreamsFormatFormat4Filetype `const:"parquet" json:"filetype"`
}

func (s SourceS3ParquetFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3ParquetFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3ParquetFormat) GetDecimalAsFloat() *bool {
	if o == nil {
		return nil
	}
	return o.DecimalAsFloat
}

func (o *SourceS3ParquetFormat) GetFiletype() *SourceS3SchemasStreamsFormatFormat4Filetype {
	return SourceS3SchemasStreamsFormatFormat4FiletypeParquet.ToPointer()
}

type SourceS3SchemasStreamsFormatFormatFiletype string

const (
	SourceS3SchemasStreamsFormatFormatFiletypeJsonl SourceS3SchemasStreamsFormatFormatFiletype = "jsonl"
)

func (e SourceS3SchemasStreamsFormatFormatFiletype) ToPointer() *SourceS3SchemasStreamsFormatFormatFiletype {
	return &e
}

func (e *SourceS3SchemasStreamsFormatFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceS3SchemasStreamsFormatFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasStreamsFormatFormatFiletype: %v", v)
	}
}

// SourceS3JsonlFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3JsonlFormat struct {
	filetype *SourceS3SchemasStreamsFormatFormatFiletype `const:"jsonl" json:"filetype"`
}

func (s SourceS3JsonlFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3JsonlFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3JsonlFormat) GetFiletype() *SourceS3SchemasStreamsFormatFormatFiletype {
	return SourceS3SchemasStreamsFormatFormatFiletypeJsonl.ToPointer()
}

type SourceS3SchemasStreamsFormatFiletype string

const (
	SourceS3SchemasStreamsFormatFiletypeCsv SourceS3SchemasStreamsFormatFiletype = "csv"
)

func (e SourceS3SchemasStreamsFormatFiletype) ToPointer() *SourceS3SchemasStreamsFormatFiletype {
	return &e
}

func (e *SourceS3SchemasStreamsFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceS3SchemasStreamsFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasStreamsFormatFiletype: %v", v)
	}
}

type SourceS3SchemasStreamsHeaderDefinitionType string

const (
	SourceS3SchemasStreamsHeaderDefinitionTypeUserProvided SourceS3SchemasStreamsHeaderDefinitionType = "User Provided"
)

func (e SourceS3SchemasStreamsHeaderDefinitionType) ToPointer() *SourceS3SchemasStreamsHeaderDefinitionType {
	return &e
}

func (e *SourceS3SchemasStreamsHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User Provided":
		*e = SourceS3SchemasStreamsHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasStreamsHeaderDefinitionType: %v", v)
	}
}

// SourceS3UserProvided - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3UserProvided struct {
	// The column names that will be used while emitting the CSV records
	ColumnNames          []string                                    `json:"column_names"`
	headerDefinitionType *SourceS3SchemasStreamsHeaderDefinitionType `const:"User Provided" json:"header_definition_type"`
}

func (s SourceS3UserProvided) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3UserProvided) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3UserProvided) GetColumnNames() []string {
	if o == nil {
		return []string{}
	}
	return o.ColumnNames
}

func (o *SourceS3UserProvided) GetHeaderDefinitionType() *SourceS3SchemasStreamsHeaderDefinitionType {
	return SourceS3SchemasStreamsHeaderDefinitionTypeUserProvided.ToPointer()
}

type SourceS3SchemasHeaderDefinitionType string

const (
	SourceS3SchemasHeaderDefinitionTypeAutogenerated SourceS3SchemasHeaderDefinitionType = "Autogenerated"
)

func (e SourceS3SchemasHeaderDefinitionType) ToPointer() *SourceS3SchemasHeaderDefinitionType {
	return &e
}

func (e *SourceS3SchemasHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Autogenerated":
		*e = SourceS3SchemasHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasHeaderDefinitionType: %v", v)
	}
}

// SourceS3Autogenerated - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3Autogenerated struct {
	headerDefinitionType *SourceS3SchemasHeaderDefinitionType `const:"Autogenerated" json:"header_definition_type"`
}

func (s SourceS3Autogenerated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3Autogenerated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3Autogenerated) GetHeaderDefinitionType() *SourceS3SchemasHeaderDefinitionType {
	return SourceS3SchemasHeaderDefinitionTypeAutogenerated.ToPointer()
}

type SourceS3HeaderDefinitionType string

const (
	SourceS3HeaderDefinitionTypeFromCsv SourceS3HeaderDefinitionType = "From CSV"
)

func (e SourceS3HeaderDefinitionType) ToPointer() *SourceS3HeaderDefinitionType {
	return &e
}

func (e *SourceS3HeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "From CSV":
		*e = SourceS3HeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3HeaderDefinitionType: %v", v)
	}
}

// SourceS3FromCSV - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3FromCSV struct {
	headerDefinitionType *SourceS3HeaderDefinitionType `const:"From CSV" json:"header_definition_type"`
}

func (s SourceS3FromCSV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3FromCSV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3FromCSV) GetHeaderDefinitionType() *SourceS3HeaderDefinitionType {
	return SourceS3HeaderDefinitionTypeFromCsv.ToPointer()
}

type SourceS3CSVHeaderDefinitionType string

const (
	SourceS3CSVHeaderDefinitionTypeFromCSV       SourceS3CSVHeaderDefinitionType = "FromCSV"
	SourceS3CSVHeaderDefinitionTypeAutogenerated SourceS3CSVHeaderDefinitionType = "Autogenerated"
	SourceS3CSVHeaderDefinitionTypeUserProvided  SourceS3CSVHeaderDefinitionType = "UserProvided"
)

type SourceS3CSVHeaderDefinition struct {
	FromCSV       *SourceS3FromCSV
	Autogenerated *SourceS3Autogenerated
	UserProvided  *SourceS3UserProvided

	Type SourceS3CSVHeaderDefinitionType
}

func CreateSourceS3CSVHeaderDefinitionFromCSV(fromCSV SourceS3FromCSV) SourceS3CSVHeaderDefinition {
	typ := SourceS3CSVHeaderDefinitionTypeFromCSV

	return SourceS3CSVHeaderDefinition{
		FromCSV: &fromCSV,
		Type:    typ,
	}
}

func CreateSourceS3CSVHeaderDefinitionAutogenerated(autogenerated SourceS3Autogenerated) SourceS3CSVHeaderDefinition {
	typ := SourceS3CSVHeaderDefinitionTypeAutogenerated

	return SourceS3CSVHeaderDefinition{
		Autogenerated: &autogenerated,
		Type:          typ,
	}
}

func CreateSourceS3CSVHeaderDefinitionUserProvided(userProvided SourceS3UserProvided) SourceS3CSVHeaderDefinition {
	typ := SourceS3CSVHeaderDefinitionTypeUserProvided

	return SourceS3CSVHeaderDefinition{
		UserProvided: &userProvided,
		Type:         typ,
	}
}

func (u *SourceS3CSVHeaderDefinition) UnmarshalJSON(data []byte) error {

	fromCSV := new(SourceS3FromCSV)
	if err := utils.UnmarshalJSON(data, &fromCSV, "", true, true); err == nil {
		u.FromCSV = fromCSV
		u.Type = SourceS3CSVHeaderDefinitionTypeFromCSV
		return nil
	}

	autogenerated := new(SourceS3Autogenerated)
	if err := utils.UnmarshalJSON(data, &autogenerated, "", true, true); err == nil {
		u.Autogenerated = autogenerated
		u.Type = SourceS3CSVHeaderDefinitionTypeAutogenerated
		return nil
	}

	userProvided := new(SourceS3UserProvided)
	if err := utils.UnmarshalJSON(data, &userProvided, "", true, true); err == nil {
		u.UserProvided = userProvided
		u.Type = SourceS3CSVHeaderDefinitionTypeUserProvided
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3CSVHeaderDefinition) MarshalJSON() ([]byte, error) {
	if u.FromCSV != nil {
		return utils.MarshalJSON(u.FromCSV, "", true)
	}

	if u.Autogenerated != nil {
		return utils.MarshalJSON(u.Autogenerated, "", true)
	}

	if u.UserProvided != nil {
		return utils.MarshalJSON(u.UserProvided, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceS3InferenceType - How to infer the types of the columns. If none, inference default to strings.
type SourceS3InferenceType string

const (
	SourceS3InferenceTypeNone               SourceS3InferenceType = "None"
	SourceS3InferenceTypePrimitiveTypesOnly SourceS3InferenceType = "Primitive Types Only"
)

func (e SourceS3InferenceType) ToPointer() *SourceS3InferenceType {
	return &e
}

func (e *SourceS3InferenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Primitive Types Only":
		*e = SourceS3InferenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3InferenceType: %v", v)
	}
}

// SourceS3CSVFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3CSVFormat struct {
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `default:"," json:"delimiter"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `default:"true" json:"double_quote"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `default:"utf8" json:"encoding"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string `json:"escape_char,omitempty"`
	// A set of case-sensitive strings that should be interpreted as false values.
	FalseValues []string                              `json:"false_values,omitempty"`
	filetype    *SourceS3SchemasStreamsFormatFiletype `const:"csv" json:"filetype"`
	// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
	HeaderDefinition *SourceS3CSVHeaderDefinition `json:"header_definition,omitempty"`
	// How to infer the types of the columns. If none, inference default to strings.
	InferenceType *SourceS3InferenceType `default:"None" json:"inference_type"`
	// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
	NullValues []string `json:"null_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `default:""" json:"quote_char"`
	// The number of rows to skip after the header row.
	SkipRowsAfterHeader *int64 `default:"0" json:"skip_rows_after_header"`
	// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
	SkipRowsBeforeHeader *int64 `default:"0" json:"skip_rows_before_header"`
	// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
	StringsCanBeNull *bool `default:"true" json:"strings_can_be_null"`
	// A set of case-sensitive strings that should be interpreted as true values.
	TrueValues []string `json:"true_values,omitempty"`
}

func (s SourceS3CSVFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3CSVFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3CSVFormat) GetDelimiter() *string {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *SourceS3CSVFormat) GetDoubleQuote() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleQuote
}

func (o *SourceS3CSVFormat) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *SourceS3CSVFormat) GetEscapeChar() *string {
	if o == nil {
		return nil
	}
	return o.EscapeChar
}

func (o *SourceS3CSVFormat) GetFalseValues() []string {
	if o == nil {
		return nil
	}
	return o.FalseValues
}

func (o *SourceS3CSVFormat) GetFiletype() *SourceS3SchemasStreamsFormatFiletype {
	return SourceS3SchemasStreamsFormatFiletypeCsv.ToPointer()
}

func (o *SourceS3CSVFormat) GetHeaderDefinition() *SourceS3CSVHeaderDefinition {
	if o == nil {
		return nil
	}
	return o.HeaderDefinition
}

func (o *SourceS3CSVFormat) GetInferenceType() *SourceS3InferenceType {
	if o == nil {
		return nil
	}
	return o.InferenceType
}

func (o *SourceS3CSVFormat) GetNullValues() []string {
	if o == nil {
		return nil
	}
	return o.NullValues
}

func (o *SourceS3CSVFormat) GetQuoteChar() *string {
	if o == nil {
		return nil
	}
	return o.QuoteChar
}

func (o *SourceS3CSVFormat) GetSkipRowsAfterHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsAfterHeader
}

func (o *SourceS3CSVFormat) GetSkipRowsBeforeHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsBeforeHeader
}

func (o *SourceS3CSVFormat) GetStringsCanBeNull() *bool {
	if o == nil {
		return nil
	}
	return o.StringsCanBeNull
}

func (o *SourceS3CSVFormat) GetTrueValues() []string {
	if o == nil {
		return nil
	}
	return o.TrueValues
}

type SourceS3SchemasStreamsFiletype string

const (
	SourceS3SchemasStreamsFiletypeAvro SourceS3SchemasStreamsFiletype = "avro"
)

func (e SourceS3SchemasStreamsFiletype) ToPointer() *SourceS3SchemasStreamsFiletype {
	return &e
}

func (e *SourceS3SchemasStreamsFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceS3SchemasStreamsFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3SchemasStreamsFiletype: %v", v)
	}
}

// SourceS3AvroFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3AvroFormat struct {
	// Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers.
	DoubleAsString *bool                           `default:"false" json:"double_as_string"`
	filetype       *SourceS3SchemasStreamsFiletype `const:"avro" json:"filetype"`
}

func (s SourceS3AvroFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3AvroFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3AvroFormat) GetDoubleAsString() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleAsString
}

func (o *SourceS3AvroFormat) GetFiletype() *SourceS3SchemasStreamsFiletype {
	return SourceS3SchemasStreamsFiletypeAvro.ToPointer()
}

type SourceS3FormatType string

const (
	SourceS3FormatTypeAvroFormat    SourceS3FormatType = "AvroFormat"
	SourceS3FormatTypeCSVFormat     SourceS3FormatType = "CSVFormat"
	SourceS3FormatTypeJsonlFormat   SourceS3FormatType = "JsonlFormat"
	SourceS3FormatTypeParquetFormat SourceS3FormatType = "ParquetFormat"
)

type SourceS3Format struct {
	AvroFormat    *SourceS3AvroFormat
	CSVFormat     *SourceS3CSVFormat
	JsonlFormat   *SourceS3JsonlFormat
	ParquetFormat *SourceS3ParquetFormat

	Type SourceS3FormatType
}

func CreateSourceS3FormatAvroFormat(avroFormat SourceS3AvroFormat) SourceS3Format {
	typ := SourceS3FormatTypeAvroFormat

	return SourceS3Format{
		AvroFormat: &avroFormat,
		Type:       typ,
	}
}

func CreateSourceS3FormatCSVFormat(csvFormat SourceS3CSVFormat) SourceS3Format {
	typ := SourceS3FormatTypeCSVFormat

	return SourceS3Format{
		CSVFormat: &csvFormat,
		Type:      typ,
	}
}

func CreateSourceS3FormatJsonlFormat(jsonlFormat SourceS3JsonlFormat) SourceS3Format {
	typ := SourceS3FormatTypeJsonlFormat

	return SourceS3Format{
		JsonlFormat: &jsonlFormat,
		Type:        typ,
	}
}

func CreateSourceS3FormatParquetFormat(parquetFormat SourceS3ParquetFormat) SourceS3Format {
	typ := SourceS3FormatTypeParquetFormat

	return SourceS3Format{
		ParquetFormat: &parquetFormat,
		Type:          typ,
	}
}

func (u *SourceS3Format) UnmarshalJSON(data []byte) error {

	jsonlFormat := new(SourceS3JsonlFormat)
	if err := utils.UnmarshalJSON(data, &jsonlFormat, "", true, true); err == nil {
		u.JsonlFormat = jsonlFormat
		u.Type = SourceS3FormatTypeJsonlFormat
		return nil
	}

	avroFormat := new(SourceS3AvroFormat)
	if err := utils.UnmarshalJSON(data, &avroFormat, "", true, true); err == nil {
		u.AvroFormat = avroFormat
		u.Type = SourceS3FormatTypeAvroFormat
		return nil
	}

	parquetFormat := new(SourceS3ParquetFormat)
	if err := utils.UnmarshalJSON(data, &parquetFormat, "", true, true); err == nil {
		u.ParquetFormat = parquetFormat
		u.Type = SourceS3FormatTypeParquetFormat
		return nil
	}

	csvFormat := new(SourceS3CSVFormat)
	if err := utils.UnmarshalJSON(data, &csvFormat, "", true, true); err == nil {
		u.CSVFormat = csvFormat
		u.Type = SourceS3FormatTypeCSVFormat
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3Format) MarshalJSON() ([]byte, error) {
	if u.AvroFormat != nil {
		return utils.MarshalJSON(u.AvroFormat, "", true)
	}

	if u.CSVFormat != nil {
		return utils.MarshalJSON(u.CSVFormat, "", true)
	}

	if u.JsonlFormat != nil {
		return utils.MarshalJSON(u.JsonlFormat, "", true)
	}

	if u.ParquetFormat != nil {
		return utils.MarshalJSON(u.ParquetFormat, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceS3ValidationPolicy - The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
type SourceS3ValidationPolicy string

const (
	SourceS3ValidationPolicyEmitRecord      SourceS3ValidationPolicy = "Emit Record"
	SourceS3ValidationPolicySkipRecord      SourceS3ValidationPolicy = "Skip Record"
	SourceS3ValidationPolicyWaitForDiscover SourceS3ValidationPolicy = "Wait for Discover"
)

func (e SourceS3ValidationPolicy) ToPointer() *SourceS3ValidationPolicy {
	return &e
}

func (e *SourceS3ValidationPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Emit Record":
		fallthrough
	case "Skip Record":
		fallthrough
	case "Wait for Discover":
		*e = SourceS3ValidationPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3ValidationPolicy: %v", v)
	}
}

type SourceS3FileBasedStreamConfig struct {
	// When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.
	DaysToSyncIfHistoryIsFull *int64 `default:"3" json:"days_to_sync_if_history_is_full"`
	// The data file type that is being extracted for a stream.
	FileType string `json:"file_type"`
	// The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
	Format *SourceS3Format `json:"format,omitempty"`
	// The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
	Globs []string `json:"globs,omitempty"`
	// The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
	InputSchema *string `json:"input_schema,omitempty"`
	// The path prefix configured in v3 versions of the S3 connector. This option is deprecated in favor of a single glob.
	LegacyPrefix *string `json:"legacy_prefix,omitempty"`
	// The name of the stream.
	Name string `json:"name"`
	// The column or columns (for a composite key) that serves as the unique identifier of a record.
	PrimaryKey *string `json:"primary_key,omitempty"`
	// When enabled, syncs will not validate or structure records against the stream's schema.
	Schemaless *bool `default:"false" json:"schemaless"`
	// The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
	ValidationPolicy *SourceS3ValidationPolicy `default:"Emit Record" json:"validation_policy"`
}

func (s SourceS3FileBasedStreamConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3FileBasedStreamConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3FileBasedStreamConfig) GetDaysToSyncIfHistoryIsFull() *int64 {
	if o == nil {
		return nil
	}
	return o.DaysToSyncIfHistoryIsFull
}

func (o *SourceS3FileBasedStreamConfig) GetFileType() string {
	if o == nil {
		return ""
	}
	return o.FileType
}

func (o *SourceS3FileBasedStreamConfig) GetFormat() *SourceS3Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *SourceS3FileBasedStreamConfig) GetGlobs() []string {
	if o == nil {
		return nil
	}
	return o.Globs
}

func (o *SourceS3FileBasedStreamConfig) GetInputSchema() *string {
	if o == nil {
		return nil
	}
	return o.InputSchema
}

func (o *SourceS3FileBasedStreamConfig) GetLegacyPrefix() *string {
	if o == nil {
		return nil
	}
	return o.LegacyPrefix
}

func (o *SourceS3FileBasedStreamConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceS3FileBasedStreamConfig) GetPrimaryKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *SourceS3FileBasedStreamConfig) GetSchemaless() *bool {
	if o == nil {
		return nil
	}
	return o.Schemaless
}

func (o *SourceS3FileBasedStreamConfig) GetValidationPolicy() *SourceS3ValidationPolicy {
	if o == nil {
		return nil
	}
	return o.ValidationPolicy
}

// SourceS3 - NOTE: When this Spec is changed, legacy_config_transformer.py must also be modified to uptake the changes
// because it is responsible for converting legacy S3 v3 configs into v4 configs using the File-Based CDK.
type SourceS3 struct {
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Name of the S3 bucket where the file(s) exist.
	Bucket string `json:"bucket"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.name instead. The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.
	Dataset *string `json:"dataset,omitempty"`
	// Endpoint to an S3 compatible service. Leave empty to use AWS.
	Endpoint *string `default:"" json:"endpoint"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.format instead. The format of the files you'd like to replicate
	Format *SourceS3FileFormat `json:"format,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.globs instead. A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See <a href="https://facelessuser.github.io/wcmatch/glob/" target="_blank">this page</a> to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern <strong>**</strong> to pick up all files.
	PathPattern *string `json:"path_pattern,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
	Provider *SourceS3S3AmazonWebServices `json:"provider,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.input_schema instead. Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of <strong>{ "column" : "type" }</strong>, where types are valid <a href="https://json-schema.org/understanding-json-schema/reference/type.html" target="_blank">JSON Schema datatypes</a>. Leave as {} to auto-infer the schema.
	Schema     *string    `default:"{}" json:"schema"`
	sourceType SourceS3S3 `const:"s3" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
	Streams []SourceS3FileBasedStreamConfig `json:"streams"`
}

func (s SourceS3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceS3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceS3) GetAwsAccessKeyID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccessKeyID
}

func (o *SourceS3) GetAwsSecretAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretAccessKey
}

func (o *SourceS3) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *SourceS3) GetDataset() *string {
	if o == nil {
		return nil
	}
	return o.Dataset
}

func (o *SourceS3) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *SourceS3) GetFormat() *SourceS3FileFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *SourceS3) GetPathPattern() *string {
	if o == nil {
		return nil
	}
	return o.PathPattern
}

func (o *SourceS3) GetProvider() *SourceS3S3AmazonWebServices {
	if o == nil {
		return nil
	}
	return o.Provider
}

func (o *SourceS3) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *SourceS3) GetSourceType() SourceS3S3 {
	return SourceS3S3S3
}

func (o *SourceS3) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceS3) GetStreams() []SourceS3FileBasedStreamConfig {
	if o == nil {
		return []SourceS3FileBasedStreamConfig{}
	}
	return o.Streams
}
