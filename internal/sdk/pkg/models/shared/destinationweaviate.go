// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type Weaviate string

const (
	WeaviateWeaviate Weaviate = "weaviate"
)

func (e Weaviate) ToPointer() *Weaviate {
	return &e
}

func (e *Weaviate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "weaviate":
		*e = Weaviate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Weaviate: %v", v)
	}
}

type DestinationWeaviateSchemasEmbeddingEmbedding7Mode string

const (
	DestinationWeaviateSchemasEmbeddingEmbedding7ModeOpenaiCompatible DestinationWeaviateSchemasEmbeddingEmbedding7Mode = "openai_compatible"
)

func (e DestinationWeaviateSchemasEmbeddingEmbedding7Mode) ToPointer() *DestinationWeaviateSchemasEmbeddingEmbedding7Mode {
	return &e
}

func (e *DestinationWeaviateSchemasEmbeddingEmbedding7Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai_compatible":
		*e = DestinationWeaviateSchemasEmbeddingEmbedding7Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasEmbeddingEmbedding7Mode: %v", v)
	}
}

// DestinationWeaviateOpenAICompatible - Use a service that's compatible with the OpenAI API to embed text.
type DestinationWeaviateOpenAICompatible struct {
	APIKey *string `default:"" json:"api_key"`
	// The base URL for your OpenAI-compatible service
	BaseURL string `json:"base_url"`
	// The number of dimensions the embedding model is generating
	Dimensions int64                                              `json:"dimensions"`
	mode       *DestinationWeaviateSchemasEmbeddingEmbedding7Mode `const:"openai_compatible" json:"mode"`
	// The name of the model to use for embedding
	ModelName *string `default:"text-embedding-ada-002" json:"model_name"`
}

func (d DestinationWeaviateOpenAICompatible) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateOpenAICompatible) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateOpenAICompatible) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *DestinationWeaviateOpenAICompatible) GetBaseURL() string {
	if o == nil {
		return ""
	}
	return o.BaseURL
}

func (o *DestinationWeaviateOpenAICompatible) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *DestinationWeaviateOpenAICompatible) GetMode() *DestinationWeaviateSchemasEmbeddingEmbedding7Mode {
	return DestinationWeaviateSchemasEmbeddingEmbedding7ModeOpenaiCompatible.ToPointer()
}

func (o *DestinationWeaviateOpenAICompatible) GetModelName() *string {
	if o == nil {
		return nil
	}
	return o.ModelName
}

type DestinationWeaviateSchemasEmbeddingEmbedding6Mode string

const (
	DestinationWeaviateSchemasEmbeddingEmbedding6ModeFake DestinationWeaviateSchemasEmbeddingEmbedding6Mode = "fake"
)

func (e DestinationWeaviateSchemasEmbeddingEmbedding6Mode) ToPointer() *DestinationWeaviateSchemasEmbeddingEmbedding6Mode {
	return &e
}

func (e *DestinationWeaviateSchemasEmbeddingEmbedding6Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationWeaviateSchemasEmbeddingEmbedding6Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasEmbeddingEmbedding6Mode: %v", v)
	}
}

// DestinationWeaviateFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationWeaviateFake struct {
	mode *DestinationWeaviateSchemasEmbeddingEmbedding6Mode `const:"fake" json:"mode"`
}

func (d DestinationWeaviateFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateFake) GetMode() *DestinationWeaviateSchemasEmbeddingEmbedding6Mode {
	return DestinationWeaviateSchemasEmbeddingEmbedding6ModeFake.ToPointer()
}

type DestinationWeaviateSchemasEmbeddingEmbedding5Mode string

const (
	DestinationWeaviateSchemasEmbeddingEmbedding5ModeFromField DestinationWeaviateSchemasEmbeddingEmbedding5Mode = "from_field"
)

func (e DestinationWeaviateSchemasEmbeddingEmbedding5Mode) ToPointer() *DestinationWeaviateSchemasEmbeddingEmbedding5Mode {
	return &e
}

func (e *DestinationWeaviateSchemasEmbeddingEmbedding5Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "from_field":
		*e = DestinationWeaviateSchemasEmbeddingEmbedding5Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasEmbeddingEmbedding5Mode: %v", v)
	}
}

// DestinationWeaviateFromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
type DestinationWeaviateFromField struct {
	// The number of dimensions the embedding model is generating
	Dimensions int64 `json:"dimensions"`
	// Name of the field in the record that contains the embedding
	FieldName string                                             `json:"field_name"`
	mode      *DestinationWeaviateSchemasEmbeddingEmbedding5Mode `const:"from_field" json:"mode"`
}

func (d DestinationWeaviateFromField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateFromField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateFromField) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *DestinationWeaviateFromField) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *DestinationWeaviateFromField) GetMode() *DestinationWeaviateSchemasEmbeddingEmbedding5Mode {
	return DestinationWeaviateSchemasEmbeddingEmbedding5ModeFromField.ToPointer()
}

type DestinationWeaviateSchemasEmbeddingEmbeddingMode string

const (
	DestinationWeaviateSchemasEmbeddingEmbeddingModeCohere DestinationWeaviateSchemasEmbeddingEmbeddingMode = "cohere"
)

func (e DestinationWeaviateSchemasEmbeddingEmbeddingMode) ToPointer() *DestinationWeaviateSchemasEmbeddingEmbeddingMode {
	return &e
}

func (e *DestinationWeaviateSchemasEmbeddingEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationWeaviateSchemasEmbeddingEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasEmbeddingEmbeddingMode: %v", v)
	}
}

// DestinationWeaviateCohere - Use the Cohere API to embed text.
type DestinationWeaviateCohere struct {
	CohereKey string                                            `json:"cohere_key"`
	mode      *DestinationWeaviateSchemasEmbeddingEmbeddingMode `const:"cohere" json:"mode"`
}

func (d DestinationWeaviateCohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateCohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateCohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *DestinationWeaviateCohere) GetMode() *DestinationWeaviateSchemasEmbeddingEmbeddingMode {
	return DestinationWeaviateSchemasEmbeddingEmbeddingModeCohere.ToPointer()
}

type DestinationWeaviateSchemasEmbeddingMode string

const (
	DestinationWeaviateSchemasEmbeddingModeOpenai DestinationWeaviateSchemasEmbeddingMode = "openai"
)

func (e DestinationWeaviateSchemasEmbeddingMode) ToPointer() *DestinationWeaviateSchemasEmbeddingMode {
	return &e
}

func (e *DestinationWeaviateSchemasEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationWeaviateSchemasEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasEmbeddingMode: %v", v)
	}
}

// DestinationWeaviateOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationWeaviateOpenAI struct {
	mode      *DestinationWeaviateSchemasEmbeddingMode `const:"openai" json:"mode"`
	OpenaiKey string                                   `json:"openai_key"`
}

func (d DestinationWeaviateOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateOpenAI) GetMode() *DestinationWeaviateSchemasEmbeddingMode {
	return DestinationWeaviateSchemasEmbeddingModeOpenai.ToPointer()
}

func (o *DestinationWeaviateOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationWeaviateSchemasMode string

const (
	DestinationWeaviateSchemasModeAzureOpenai DestinationWeaviateSchemasMode = "azure_openai"
)

func (e DestinationWeaviateSchemasMode) ToPointer() *DestinationWeaviateSchemasMode {
	return &e
}

func (e *DestinationWeaviateSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure_openai":
		*e = DestinationWeaviateSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasMode: %v", v)
	}
}

// DestinationWeaviateAzureOpenAI - Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationWeaviateAzureOpenAI struct {
	// The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
	APIBase string `json:"api_base"`
	// The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
	Deployment string                          `json:"deployment"`
	mode       *DestinationWeaviateSchemasMode `const:"azure_openai" json:"mode"`
	// The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
	OpenaiKey string `json:"openai_key"`
}

func (d DestinationWeaviateAzureOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateAzureOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateAzureOpenAI) GetAPIBase() string {
	if o == nil {
		return ""
	}
	return o.APIBase
}

func (o *DestinationWeaviateAzureOpenAI) GetDeployment() string {
	if o == nil {
		return ""
	}
	return o.Deployment
}

func (o *DestinationWeaviateAzureOpenAI) GetMode() *DestinationWeaviateSchemasMode {
	return DestinationWeaviateSchemasModeAzureOpenai.ToPointer()
}

func (o *DestinationWeaviateAzureOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationWeaviateMode string

const (
	DestinationWeaviateModeNoEmbedding DestinationWeaviateMode = "no_embedding"
)

func (e DestinationWeaviateMode) ToPointer() *DestinationWeaviateMode {
	return &e
}

func (e *DestinationWeaviateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_embedding":
		*e = DestinationWeaviateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateMode: %v", v)
	}
}

// DestinationWeaviateNoExternalEmbedding - Do not calculate and pass embeddings to Weaviate. Suitable for clusters with configured vectorizers to calculate embeddings within Weaviate or for classes that should only support regular text search.
type DestinationWeaviateNoExternalEmbedding struct {
	mode *DestinationWeaviateMode `const:"no_embedding" json:"mode"`
}

func (d DestinationWeaviateNoExternalEmbedding) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateNoExternalEmbedding) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateNoExternalEmbedding) GetMode() *DestinationWeaviateMode {
	return DestinationWeaviateModeNoEmbedding.ToPointer()
}

type DestinationWeaviateEmbeddingType string

const (
	DestinationWeaviateEmbeddingTypeDestinationWeaviateNoExternalEmbedding DestinationWeaviateEmbeddingType = "destination-weaviate_No external embedding"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateAzureOpenAI         DestinationWeaviateEmbeddingType = "destination-weaviate_Azure OpenAI"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAI              DestinationWeaviateEmbeddingType = "destination-weaviate_OpenAI"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateCohere              DestinationWeaviateEmbeddingType = "destination-weaviate_Cohere"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateFromField           DestinationWeaviateEmbeddingType = "destination-weaviate_From Field"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateFake                DestinationWeaviateEmbeddingType = "destination-weaviate_Fake"
	DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAICompatible    DestinationWeaviateEmbeddingType = "destination-weaviate_OpenAI-compatible"
)

type DestinationWeaviateEmbedding struct {
	DestinationWeaviateNoExternalEmbedding *DestinationWeaviateNoExternalEmbedding
	DestinationWeaviateAzureOpenAI         *DestinationWeaviateAzureOpenAI
	DestinationWeaviateOpenAI              *DestinationWeaviateOpenAI
	DestinationWeaviateCohere              *DestinationWeaviateCohere
	DestinationWeaviateFromField           *DestinationWeaviateFromField
	DestinationWeaviateFake                *DestinationWeaviateFake
	DestinationWeaviateOpenAICompatible    *DestinationWeaviateOpenAICompatible

	Type DestinationWeaviateEmbeddingType
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateNoExternalEmbedding(destinationWeaviateNoExternalEmbedding DestinationWeaviateNoExternalEmbedding) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateNoExternalEmbedding

	return DestinationWeaviateEmbedding{
		DestinationWeaviateNoExternalEmbedding: &destinationWeaviateNoExternalEmbedding,
		Type:                                   typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateAzureOpenAI(destinationWeaviateAzureOpenAI DestinationWeaviateAzureOpenAI) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateAzureOpenAI

	return DestinationWeaviateEmbedding{
		DestinationWeaviateAzureOpenAI: &destinationWeaviateAzureOpenAI,
		Type:                           typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateOpenAI(destinationWeaviateOpenAI DestinationWeaviateOpenAI) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAI

	return DestinationWeaviateEmbedding{
		DestinationWeaviateOpenAI: &destinationWeaviateOpenAI,
		Type:                      typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateCohere(destinationWeaviateCohere DestinationWeaviateCohere) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateCohere

	return DestinationWeaviateEmbedding{
		DestinationWeaviateCohere: &destinationWeaviateCohere,
		Type:                      typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateFromField(destinationWeaviateFromField DestinationWeaviateFromField) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateFromField

	return DestinationWeaviateEmbedding{
		DestinationWeaviateFromField: &destinationWeaviateFromField,
		Type:                         typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateFake(destinationWeaviateFake DestinationWeaviateFake) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateFake

	return DestinationWeaviateEmbedding{
		DestinationWeaviateFake: &destinationWeaviateFake,
		Type:                    typ,
	}
}

func CreateDestinationWeaviateEmbeddingDestinationWeaviateOpenAICompatible(destinationWeaviateOpenAICompatible DestinationWeaviateOpenAICompatible) DestinationWeaviateEmbedding {
	typ := DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAICompatible

	return DestinationWeaviateEmbedding{
		DestinationWeaviateOpenAICompatible: &destinationWeaviateOpenAICompatible,
		Type:                                typ,
	}
}

func (u *DestinationWeaviateEmbedding) UnmarshalJSON(data []byte) error {

	destinationWeaviateNoExternalEmbedding := new(DestinationWeaviateNoExternalEmbedding)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateNoExternalEmbedding, "", true, true); err == nil {
		u.DestinationWeaviateNoExternalEmbedding = destinationWeaviateNoExternalEmbedding
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateNoExternalEmbedding
		return nil
	}

	destinationWeaviateFake := new(DestinationWeaviateFake)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateFake, "", true, true); err == nil {
		u.DestinationWeaviateFake = destinationWeaviateFake
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateFake
		return nil
	}

	destinationWeaviateOpenAI := new(DestinationWeaviateOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateOpenAI, "", true, true); err == nil {
		u.DestinationWeaviateOpenAI = destinationWeaviateOpenAI
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAI
		return nil
	}

	destinationWeaviateCohere := new(DestinationWeaviateCohere)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateCohere, "", true, true); err == nil {
		u.DestinationWeaviateCohere = destinationWeaviateCohere
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateCohere
		return nil
	}

	destinationWeaviateFromField := new(DestinationWeaviateFromField)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateFromField, "", true, true); err == nil {
		u.DestinationWeaviateFromField = destinationWeaviateFromField
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateFromField
		return nil
	}

	destinationWeaviateAzureOpenAI := new(DestinationWeaviateAzureOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateAzureOpenAI, "", true, true); err == nil {
		u.DestinationWeaviateAzureOpenAI = destinationWeaviateAzureOpenAI
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateAzureOpenAI
		return nil
	}

	destinationWeaviateOpenAICompatible := new(DestinationWeaviateOpenAICompatible)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateOpenAICompatible, "", true, true); err == nil {
		u.DestinationWeaviateOpenAICompatible = destinationWeaviateOpenAICompatible
		u.Type = DestinationWeaviateEmbeddingTypeDestinationWeaviateOpenAICompatible
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationWeaviateEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationWeaviateNoExternalEmbedding != nil {
		return utils.MarshalJSON(u.DestinationWeaviateNoExternalEmbedding, "", true)
	}

	if u.DestinationWeaviateAzureOpenAI != nil {
		return utils.MarshalJSON(u.DestinationWeaviateAzureOpenAI, "", true)
	}

	if u.DestinationWeaviateOpenAI != nil {
		return utils.MarshalJSON(u.DestinationWeaviateOpenAI, "", true)
	}

	if u.DestinationWeaviateCohere != nil {
		return utils.MarshalJSON(u.DestinationWeaviateCohere, "", true)
	}

	if u.DestinationWeaviateFromField != nil {
		return utils.MarshalJSON(u.DestinationWeaviateFromField, "", true)
	}

	if u.DestinationWeaviateFake != nil {
		return utils.MarshalJSON(u.DestinationWeaviateFake, "", true)
	}

	if u.DestinationWeaviateOpenAICompatible != nil {
		return utils.MarshalJSON(u.DestinationWeaviateOpenAICompatible, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationWeaviateHeader struct {
	HeaderKey string `json:"header_key"`
	Value     string `json:"value"`
}

func (o *DestinationWeaviateHeader) GetHeaderKey() string {
	if o == nil {
		return ""
	}
	return o.HeaderKey
}

func (o *DestinationWeaviateHeader) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type DestinationWeaviateSchemasIndexingAuthAuthenticationMode string

const (
	DestinationWeaviateSchemasIndexingAuthAuthenticationModeNoAuth DestinationWeaviateSchemasIndexingAuthAuthenticationMode = "no_auth"
)

func (e DestinationWeaviateSchemasIndexingAuthAuthenticationMode) ToPointer() *DestinationWeaviateSchemasIndexingAuthAuthenticationMode {
	return &e
}

func (e *DestinationWeaviateSchemasIndexingAuthAuthenticationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_auth":
		*e = DestinationWeaviateSchemasIndexingAuthAuthenticationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasIndexingAuthAuthenticationMode: %v", v)
	}
}

// DestinationWeaviateNoAuthentication - Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
type DestinationWeaviateNoAuthentication struct {
	mode *DestinationWeaviateSchemasIndexingAuthAuthenticationMode `const:"no_auth" json:"mode"`
}

func (d DestinationWeaviateNoAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateNoAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateNoAuthentication) GetMode() *DestinationWeaviateSchemasIndexingAuthAuthenticationMode {
	return DestinationWeaviateSchemasIndexingAuthAuthenticationModeNoAuth.ToPointer()
}

type DestinationWeaviateSchemasIndexingAuthMode string

const (
	DestinationWeaviateSchemasIndexingAuthModeUsernamePassword DestinationWeaviateSchemasIndexingAuthMode = "username_password"
)

func (e DestinationWeaviateSchemasIndexingAuthMode) ToPointer() *DestinationWeaviateSchemasIndexingAuthMode {
	return &e
}

func (e *DestinationWeaviateSchemasIndexingAuthMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = DestinationWeaviateSchemasIndexingAuthMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasIndexingAuthMode: %v", v)
	}
}

// DestinationWeaviateUsernamePassword - Authenticate using username and password (suitable for self-managed Weaviate clusters)
type DestinationWeaviateUsernamePassword struct {
	mode *DestinationWeaviateSchemasIndexingAuthMode `const:"username_password" json:"mode"`
	// Password for the Weaviate cluster
	Password string `json:"password"`
	// Username for the Weaviate cluster
	Username string `json:"username"`
}

func (d DestinationWeaviateUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateUsernamePassword) GetMode() *DestinationWeaviateSchemasIndexingAuthMode {
	return DestinationWeaviateSchemasIndexingAuthModeUsernamePassword.ToPointer()
}

func (o *DestinationWeaviateUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationWeaviateUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationWeaviateSchemasIndexingMode string

const (
	DestinationWeaviateSchemasIndexingModeToken DestinationWeaviateSchemasIndexingMode = "token"
)

func (e DestinationWeaviateSchemasIndexingMode) ToPointer() *DestinationWeaviateSchemasIndexingMode {
	return &e
}

func (e *DestinationWeaviateSchemasIndexingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = DestinationWeaviateSchemasIndexingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasIndexingMode: %v", v)
	}
}

// DestinationWeaviateAPIToken - Authenticate using an API token (suitable for Weaviate Cloud)
type DestinationWeaviateAPIToken struct {
	mode *DestinationWeaviateSchemasIndexingMode `const:"token" json:"mode"`
	// API Token for the Weaviate instance
	Token string `json:"token"`
}

func (d DestinationWeaviateAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateAPIToken) GetMode() *DestinationWeaviateSchemasIndexingMode {
	return DestinationWeaviateSchemasIndexingModeToken.ToPointer()
}

func (o *DestinationWeaviateAPIToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type DestinationWeaviateAuthenticationType string

const (
	DestinationWeaviateAuthenticationTypeDestinationWeaviateAPIToken         DestinationWeaviateAuthenticationType = "destination-weaviate_API Token"
	DestinationWeaviateAuthenticationTypeDestinationWeaviateUsernamePassword DestinationWeaviateAuthenticationType = "destination-weaviate_Username/Password"
	DestinationWeaviateAuthenticationTypeDestinationWeaviateNoAuthentication DestinationWeaviateAuthenticationType = "destination-weaviate_No Authentication"
)

type DestinationWeaviateAuthentication struct {
	DestinationWeaviateAPIToken         *DestinationWeaviateAPIToken
	DestinationWeaviateUsernamePassword *DestinationWeaviateUsernamePassword
	DestinationWeaviateNoAuthentication *DestinationWeaviateNoAuthentication

	Type DestinationWeaviateAuthenticationType
}

func CreateDestinationWeaviateAuthenticationDestinationWeaviateAPIToken(destinationWeaviateAPIToken DestinationWeaviateAPIToken) DestinationWeaviateAuthentication {
	typ := DestinationWeaviateAuthenticationTypeDestinationWeaviateAPIToken

	return DestinationWeaviateAuthentication{
		DestinationWeaviateAPIToken: &destinationWeaviateAPIToken,
		Type:                        typ,
	}
}

func CreateDestinationWeaviateAuthenticationDestinationWeaviateUsernamePassword(destinationWeaviateUsernamePassword DestinationWeaviateUsernamePassword) DestinationWeaviateAuthentication {
	typ := DestinationWeaviateAuthenticationTypeDestinationWeaviateUsernamePassword

	return DestinationWeaviateAuthentication{
		DestinationWeaviateUsernamePassword: &destinationWeaviateUsernamePassword,
		Type:                                typ,
	}
}

func CreateDestinationWeaviateAuthenticationDestinationWeaviateNoAuthentication(destinationWeaviateNoAuthentication DestinationWeaviateNoAuthentication) DestinationWeaviateAuthentication {
	typ := DestinationWeaviateAuthenticationTypeDestinationWeaviateNoAuthentication

	return DestinationWeaviateAuthentication{
		DestinationWeaviateNoAuthentication: &destinationWeaviateNoAuthentication,
		Type:                                typ,
	}
}

func (u *DestinationWeaviateAuthentication) UnmarshalJSON(data []byte) error {

	destinationWeaviateNoAuthentication := new(DestinationWeaviateNoAuthentication)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateNoAuthentication, "", true, true); err == nil {
		u.DestinationWeaviateNoAuthentication = destinationWeaviateNoAuthentication
		u.Type = DestinationWeaviateAuthenticationTypeDestinationWeaviateNoAuthentication
		return nil
	}

	destinationWeaviateAPIToken := new(DestinationWeaviateAPIToken)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateAPIToken, "", true, true); err == nil {
		u.DestinationWeaviateAPIToken = destinationWeaviateAPIToken
		u.Type = DestinationWeaviateAuthenticationTypeDestinationWeaviateAPIToken
		return nil
	}

	destinationWeaviateUsernamePassword := new(DestinationWeaviateUsernamePassword)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateUsernamePassword, "", true, true); err == nil {
		u.DestinationWeaviateUsernamePassword = destinationWeaviateUsernamePassword
		u.Type = DestinationWeaviateAuthenticationTypeDestinationWeaviateUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationWeaviateAuthentication) MarshalJSON() ([]byte, error) {
	if u.DestinationWeaviateAPIToken != nil {
		return utils.MarshalJSON(u.DestinationWeaviateAPIToken, "", true)
	}

	if u.DestinationWeaviateUsernamePassword != nil {
		return utils.MarshalJSON(u.DestinationWeaviateUsernamePassword, "", true)
	}

	if u.DestinationWeaviateNoAuthentication != nil {
		return utils.MarshalJSON(u.DestinationWeaviateNoAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationWeaviateDefaultVectorizer - The vectorizer to use if new classes need to be created
type DestinationWeaviateDefaultVectorizer string

const (
	DestinationWeaviateDefaultVectorizerNone                  DestinationWeaviateDefaultVectorizer = "none"
	DestinationWeaviateDefaultVectorizerText2vecCohere        DestinationWeaviateDefaultVectorizer = "text2vec-cohere"
	DestinationWeaviateDefaultVectorizerText2vecHuggingface   DestinationWeaviateDefaultVectorizer = "text2vec-huggingface"
	DestinationWeaviateDefaultVectorizerText2vecOpenai        DestinationWeaviateDefaultVectorizer = "text2vec-openai"
	DestinationWeaviateDefaultVectorizerText2vecPalm          DestinationWeaviateDefaultVectorizer = "text2vec-palm"
	DestinationWeaviateDefaultVectorizerText2vecContextionary DestinationWeaviateDefaultVectorizer = "text2vec-contextionary"
	DestinationWeaviateDefaultVectorizerText2vecTransformers  DestinationWeaviateDefaultVectorizer = "text2vec-transformers"
	DestinationWeaviateDefaultVectorizerText2vecGpt4all       DestinationWeaviateDefaultVectorizer = "text2vec-gpt4all"
)

func (e DestinationWeaviateDefaultVectorizer) ToPointer() *DestinationWeaviateDefaultVectorizer {
	return &e
}

func (e *DestinationWeaviateDefaultVectorizer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "text2vec-cohere":
		fallthrough
	case "text2vec-huggingface":
		fallthrough
	case "text2vec-openai":
		fallthrough
	case "text2vec-palm":
		fallthrough
	case "text2vec-contextionary":
		fallthrough
	case "text2vec-transformers":
		fallthrough
	case "text2vec-gpt4all":
		*e = DestinationWeaviateDefaultVectorizer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateDefaultVectorizer: %v", v)
	}
}

// DestinationWeaviateIndexing - Indexing configuration
type DestinationWeaviateIndexing struct {
	// Additional HTTP headers to send with every request.
	AdditionalHeaders []DestinationWeaviateHeader `json:"additional_headers,omitempty"`
	// Authentication method
	Auth DestinationWeaviateAuthentication `json:"auth"`
	// The number of records to send to Weaviate in each batch
	BatchSize *int64 `default:"128" json:"batch_size"`
	// The vectorizer to use if new classes need to be created
	DefaultVectorizer *DestinationWeaviateDefaultVectorizer `default:"none" json:"default_vectorizer"`
	// The public endpoint of the Weaviate cluster.
	Host string `json:"host"`
	// The field in the object that contains the embedded text
	TextField *string `default:"text" json:"text_field"`
}

func (d DestinationWeaviateIndexing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateIndexing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateIndexing) GetAdditionalHeaders() []DestinationWeaviateHeader {
	if o == nil {
		return nil
	}
	return o.AdditionalHeaders
}

func (o *DestinationWeaviateIndexing) GetAuth() DestinationWeaviateAuthentication {
	if o == nil {
		return DestinationWeaviateAuthentication{}
	}
	return o.Auth
}

func (o *DestinationWeaviateIndexing) GetBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSize
}

func (o *DestinationWeaviateIndexing) GetDefaultVectorizer() *DestinationWeaviateDefaultVectorizer {
	if o == nil {
		return nil
	}
	return o.DefaultVectorizer
}

func (o *DestinationWeaviateIndexing) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationWeaviateIndexing) GetTextField() *string {
	if o == nil {
		return nil
	}
	return o.TextField
}

type DestinationWeaviateFieldNameMappingConfigModel struct {
	// The field name in the source
	FromField string `json:"from_field"`
	// The field name to use in the destination
	ToField string `json:"to_field"`
}

func (o *DestinationWeaviateFieldNameMappingConfigModel) GetFromField() string {
	if o == nil {
		return ""
	}
	return o.FromField
}

func (o *DestinationWeaviateFieldNameMappingConfigModel) GetToField() string {
	if o == nil {
		return ""
	}
	return o.ToField
}

// DestinationWeaviateLanguage - Split code in suitable places based on the programming language
type DestinationWeaviateLanguage string

const (
	DestinationWeaviateLanguageCpp      DestinationWeaviateLanguage = "cpp"
	DestinationWeaviateLanguageGo       DestinationWeaviateLanguage = "go"
	DestinationWeaviateLanguageJava     DestinationWeaviateLanguage = "java"
	DestinationWeaviateLanguageJs       DestinationWeaviateLanguage = "js"
	DestinationWeaviateLanguagePhp      DestinationWeaviateLanguage = "php"
	DestinationWeaviateLanguageProto    DestinationWeaviateLanguage = "proto"
	DestinationWeaviateLanguagePython   DestinationWeaviateLanguage = "python"
	DestinationWeaviateLanguageRst      DestinationWeaviateLanguage = "rst"
	DestinationWeaviateLanguageRuby     DestinationWeaviateLanguage = "ruby"
	DestinationWeaviateLanguageRust     DestinationWeaviateLanguage = "rust"
	DestinationWeaviateLanguageScala    DestinationWeaviateLanguage = "scala"
	DestinationWeaviateLanguageSwift    DestinationWeaviateLanguage = "swift"
	DestinationWeaviateLanguageMarkdown DestinationWeaviateLanguage = "markdown"
	DestinationWeaviateLanguageLatex    DestinationWeaviateLanguage = "latex"
	DestinationWeaviateLanguageHTML     DestinationWeaviateLanguage = "html"
	DestinationWeaviateLanguageSol      DestinationWeaviateLanguage = "sol"
)

func (e DestinationWeaviateLanguage) ToPointer() *DestinationWeaviateLanguage {
	return &e
}

func (e *DestinationWeaviateLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cpp":
		fallthrough
	case "go":
		fallthrough
	case "java":
		fallthrough
	case "js":
		fallthrough
	case "php":
		fallthrough
	case "proto":
		fallthrough
	case "python":
		fallthrough
	case "rst":
		fallthrough
	case "ruby":
		fallthrough
	case "rust":
		fallthrough
	case "scala":
		fallthrough
	case "swift":
		fallthrough
	case "markdown":
		fallthrough
	case "latex":
		fallthrough
	case "html":
		fallthrough
	case "sol":
		*e = DestinationWeaviateLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateLanguage: %v", v)
	}
}

type DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode string

const (
	DestinationWeaviateSchemasProcessingTextSplitterTextSplitterModeCode DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode = "code"
)

func (e DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode) ToPointer() *DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode {
	return &e
}

func (e *DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code":
		*e = DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode: %v", v)
	}
}

// DestinationWeaviateByProgrammingLanguage - Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
type DestinationWeaviateByProgrammingLanguage struct {
	// Split code in suitable places based on the programming language
	Language DestinationWeaviateLanguage                                       `json:"language"`
	mode     *DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode `const:"code" json:"mode"`
}

func (d DestinationWeaviateByProgrammingLanguage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateByProgrammingLanguage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateByProgrammingLanguage) GetLanguage() DestinationWeaviateLanguage {
	if o == nil {
		return DestinationWeaviateLanguage("")
	}
	return o.Language
}

func (o *DestinationWeaviateByProgrammingLanguage) GetMode() *DestinationWeaviateSchemasProcessingTextSplitterTextSplitterMode {
	return DestinationWeaviateSchemasProcessingTextSplitterTextSplitterModeCode.ToPointer()
}

type DestinationWeaviateSchemasProcessingTextSplitterMode string

const (
	DestinationWeaviateSchemasProcessingTextSplitterModeMarkdown DestinationWeaviateSchemasProcessingTextSplitterMode = "markdown"
)

func (e DestinationWeaviateSchemasProcessingTextSplitterMode) ToPointer() *DestinationWeaviateSchemasProcessingTextSplitterMode {
	return &e
}

func (e *DestinationWeaviateSchemasProcessingTextSplitterMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown":
		*e = DestinationWeaviateSchemasProcessingTextSplitterMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasProcessingTextSplitterMode: %v", v)
	}
}

// DestinationWeaviateByMarkdownHeader - Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
type DestinationWeaviateByMarkdownHeader struct {
	mode *DestinationWeaviateSchemasProcessingTextSplitterMode `const:"markdown" json:"mode"`
	// Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points
	SplitLevel *int64 `default:"1" json:"split_level"`
}

func (d DestinationWeaviateByMarkdownHeader) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateByMarkdownHeader) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateByMarkdownHeader) GetMode() *DestinationWeaviateSchemasProcessingTextSplitterMode {
	return DestinationWeaviateSchemasProcessingTextSplitterModeMarkdown.ToPointer()
}

func (o *DestinationWeaviateByMarkdownHeader) GetSplitLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.SplitLevel
}

type DestinationWeaviateSchemasProcessingMode string

const (
	DestinationWeaviateSchemasProcessingModeSeparator DestinationWeaviateSchemasProcessingMode = "separator"
)

func (e DestinationWeaviateSchemasProcessingMode) ToPointer() *DestinationWeaviateSchemasProcessingMode {
	return &e
}

func (e *DestinationWeaviateSchemasProcessingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "separator":
		*e = DestinationWeaviateSchemasProcessingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationWeaviateSchemasProcessingMode: %v", v)
	}
}

// DestinationWeaviateBySeparator - Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
type DestinationWeaviateBySeparator struct {
	// Whether to keep the separator in the resulting chunks
	KeepSeparator *bool                                     `default:"false" json:"keep_separator"`
	mode          *DestinationWeaviateSchemasProcessingMode `const:"separator" json:"mode"`
	// List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
	Separators []string `json:"separators,omitempty"`
}

func (d DestinationWeaviateBySeparator) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateBySeparator) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateBySeparator) GetKeepSeparator() *bool {
	if o == nil {
		return nil
	}
	return o.KeepSeparator
}

func (o *DestinationWeaviateBySeparator) GetMode() *DestinationWeaviateSchemasProcessingMode {
	return DestinationWeaviateSchemasProcessingModeSeparator.ToPointer()
}

func (o *DestinationWeaviateBySeparator) GetSeparators() []string {
	if o == nil {
		return nil
	}
	return o.Separators
}

type DestinationWeaviateTextSplitterType string

const (
	DestinationWeaviateTextSplitterTypeDestinationWeaviateBySeparator           DestinationWeaviateTextSplitterType = "destination-weaviate_By Separator"
	DestinationWeaviateTextSplitterTypeDestinationWeaviateByMarkdownHeader      DestinationWeaviateTextSplitterType = "destination-weaviate_By Markdown header"
	DestinationWeaviateTextSplitterTypeDestinationWeaviateByProgrammingLanguage DestinationWeaviateTextSplitterType = "destination-weaviate_By Programming Language"
)

type DestinationWeaviateTextSplitter struct {
	DestinationWeaviateBySeparator           *DestinationWeaviateBySeparator
	DestinationWeaviateByMarkdownHeader      *DestinationWeaviateByMarkdownHeader
	DestinationWeaviateByProgrammingLanguage *DestinationWeaviateByProgrammingLanguage

	Type DestinationWeaviateTextSplitterType
}

func CreateDestinationWeaviateTextSplitterDestinationWeaviateBySeparator(destinationWeaviateBySeparator DestinationWeaviateBySeparator) DestinationWeaviateTextSplitter {
	typ := DestinationWeaviateTextSplitterTypeDestinationWeaviateBySeparator

	return DestinationWeaviateTextSplitter{
		DestinationWeaviateBySeparator: &destinationWeaviateBySeparator,
		Type:                           typ,
	}
}

func CreateDestinationWeaviateTextSplitterDestinationWeaviateByMarkdownHeader(destinationWeaviateByMarkdownHeader DestinationWeaviateByMarkdownHeader) DestinationWeaviateTextSplitter {
	typ := DestinationWeaviateTextSplitterTypeDestinationWeaviateByMarkdownHeader

	return DestinationWeaviateTextSplitter{
		DestinationWeaviateByMarkdownHeader: &destinationWeaviateByMarkdownHeader,
		Type:                                typ,
	}
}

func CreateDestinationWeaviateTextSplitterDestinationWeaviateByProgrammingLanguage(destinationWeaviateByProgrammingLanguage DestinationWeaviateByProgrammingLanguage) DestinationWeaviateTextSplitter {
	typ := DestinationWeaviateTextSplitterTypeDestinationWeaviateByProgrammingLanguage

	return DestinationWeaviateTextSplitter{
		DestinationWeaviateByProgrammingLanguage: &destinationWeaviateByProgrammingLanguage,
		Type:                                     typ,
	}
}

func (u *DestinationWeaviateTextSplitter) UnmarshalJSON(data []byte) error {

	destinationWeaviateByMarkdownHeader := new(DestinationWeaviateByMarkdownHeader)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateByMarkdownHeader, "", true, true); err == nil {
		u.DestinationWeaviateByMarkdownHeader = destinationWeaviateByMarkdownHeader
		u.Type = DestinationWeaviateTextSplitterTypeDestinationWeaviateByMarkdownHeader
		return nil
	}

	destinationWeaviateByProgrammingLanguage := new(DestinationWeaviateByProgrammingLanguage)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateByProgrammingLanguage, "", true, true); err == nil {
		u.DestinationWeaviateByProgrammingLanguage = destinationWeaviateByProgrammingLanguage
		u.Type = DestinationWeaviateTextSplitterTypeDestinationWeaviateByProgrammingLanguage
		return nil
	}

	destinationWeaviateBySeparator := new(DestinationWeaviateBySeparator)
	if err := utils.UnmarshalJSON(data, &destinationWeaviateBySeparator, "", true, true); err == nil {
		u.DestinationWeaviateBySeparator = destinationWeaviateBySeparator
		u.Type = DestinationWeaviateTextSplitterTypeDestinationWeaviateBySeparator
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationWeaviateTextSplitter) MarshalJSON() ([]byte, error) {
	if u.DestinationWeaviateBySeparator != nil {
		return utils.MarshalJSON(u.DestinationWeaviateBySeparator, "", true)
	}

	if u.DestinationWeaviateByMarkdownHeader != nil {
		return utils.MarshalJSON(u.DestinationWeaviateByMarkdownHeader, "", true)
	}

	if u.DestinationWeaviateByProgrammingLanguage != nil {
		return utils.MarshalJSON(u.DestinationWeaviateByProgrammingLanguage, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationWeaviateProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
	FieldNameMappings []DestinationWeaviateFieldNameMappingConfigModel `json:"field_name_mappings,omitempty"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
	// Split text fields into chunks based on the specified method.
	TextSplitter *DestinationWeaviateTextSplitter `json:"text_splitter,omitempty"`
}

func (d DestinationWeaviateProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviateProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviateProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationWeaviateProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationWeaviateProcessingConfigModel) GetFieldNameMappings() []DestinationWeaviateFieldNameMappingConfigModel {
	if o == nil {
		return nil
	}
	return o.FieldNameMappings
}

func (o *DestinationWeaviateProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationWeaviateProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

func (o *DestinationWeaviateProcessingConfigModel) GetTextSplitter() *DestinationWeaviateTextSplitter {
	if o == nil {
		return nil
	}
	return o.TextSplitter
}

type DestinationWeaviate struct {
	destinationType Weaviate `const:"weaviate" json:"destinationType"`
	// Embedding configuration
	Embedding DestinationWeaviateEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationWeaviateIndexing              `json:"indexing"`
	Processing DestinationWeaviateProcessingConfigModel `json:"processing"`
}

func (d DestinationWeaviate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationWeaviate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationWeaviate) GetDestinationType() Weaviate {
	return WeaviateWeaviate
}

func (o *DestinationWeaviate) GetEmbedding() DestinationWeaviateEmbedding {
	if o == nil {
		return DestinationWeaviateEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationWeaviate) GetIndexing() DestinationWeaviateIndexing {
	if o == nil {
		return DestinationWeaviateIndexing{}
	}
	return o.Indexing
}

func (o *DestinationWeaviate) GetProcessing() DestinationWeaviateProcessingConfigModel {
	if o == nil {
		return DestinationWeaviateProcessingConfigModel{}
	}
	return o.Processing
}
