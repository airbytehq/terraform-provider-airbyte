// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType string

const (
	SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthTypeService SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType = "Service"
)

func (e SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType) ToPointer() *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType {
	return &e
}

func (e *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service":
		*e = SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType: %v", v)
	}
}

// SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication - Credentials for the service
type SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication struct {
	authType *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType `const:"Service" json:"auth_type,omitempty"`
	// The JSON key of the service account to use for authorization
	CredentialsJSON string `json:"credentials_json"`
}

func (s SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication) GetAuthType() *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthType {
	return SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationAuthTypeService.ToPointer()
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication) GetCredentialsJSON() string {
	if o == nil {
		return ""
	}
	return o.CredentialsJSON
}

type SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType string

const (
	SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthTypeClient SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType = "Client"
)

func (e SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType) ToPointer() *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType {
	return &e
}

func (e *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType: %v", v)
	}
}

// SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth - Credentials for the service
type SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                                                     `json:"access_token,omitempty"`
	authType    *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Google Analytics developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Google Analytics developer application.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) GetAuthType() *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthType {
	return SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthAuthTypeClient.ToPointer()
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceGoogleAnalyticsV4UpdateCredentialsType string

const (
	SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth      SourceGoogleAnalyticsV4UpdateCredentialsType = "source-google-analytics-v4-update_Credentials_Authenticate via Google (Oauth)"
	SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsV4UpdateCredentialsType = "source-google-analytics-v4-update_Credentials_Service Account Key Authentication"
)

type SourceGoogleAnalyticsV4UpdateCredentials struct {
	SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth      *SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth
	SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication *SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication

	Type SourceGoogleAnalyticsV4UpdateCredentialsType
}

func CreateSourceGoogleAnalyticsV4UpdateCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth(sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth) SourceGoogleAnalyticsV4UpdateCredentials {
	typ := SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth

	return SourceGoogleAnalyticsV4UpdateCredentials{
		SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth: &sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth,
		Type: typ,
	}
}

func CreateSourceGoogleAnalyticsV4UpdateCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication(sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication) SourceGoogleAnalyticsV4UpdateCredentials {
	typ := SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication

	return SourceGoogleAnalyticsV4UpdateCredentials{
		SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication: &sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleAnalyticsV4UpdateCredentials) UnmarshalJSON(data []byte) error {

	sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication := new(SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication)
	if err := utils.UnmarshalJSON(data, &sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication, "", true, true); err == nil {
		u.SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication = sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication
		u.Type = SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication
		return nil
	}

	sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth := new(SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth)
	if err := utils.UnmarshalJSON(data, &sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth, "", true, true); err == nil {
		u.SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth = sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth
		u.Type = SourceGoogleAnalyticsV4UpdateCredentialsTypeSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleAnalyticsV4UpdateCredentials) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth != nil {
		return utils.MarshalJSON(u.SourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth, "", true)
	}

	if u.SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication != nil {
		return utils.MarshalJSON(u.SourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGoogleAnalyticsV4Update struct {
	// Credentials for the service
	Credentials *SourceGoogleAnalyticsV4UpdateCredentials `json:"credentials,omitempty"`
	// A JSON array describing the custom reports you want to sync from Google Analytics. See <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4#data-processing-latency">the docs</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string `json:"custom_reports,omitempty"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate types.Date `json:"start_date"`
	// The ID for the Google Analytics View you want to fetch data from. This can be found from the <a href="https://ga-dev-tools.appspot.com/account-explorer/">Google Analytics Account Explorer</a>.
	ViewID string `json:"view_id"`
	// The time increment used by the connector when requesting data from the Google Analytics API. More information is available in the <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4/#sampling-in-reports">the docs</a>. The bigger this value is, the faster the sync will be, but the more likely that sampling will be applied to your data, potentially causing inaccuracies in the returned results. We recommend setting this to 1 unless you have a hard requirement to make the sync faster at the expense of accuracy. The minimum allowed value for this field is 1, and the maximum is 364.
	WindowInDays *int64 `default:"1" json:"window_in_days"`
}

func (s SourceGoogleAnalyticsV4Update) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGoogleAnalyticsV4Update) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGoogleAnalyticsV4Update) GetCredentials() *SourceGoogleAnalyticsV4UpdateCredentials {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceGoogleAnalyticsV4Update) GetCustomReports() *string {
	if o == nil {
		return nil
	}
	return o.CustomReports
}

func (o *SourceGoogleAnalyticsV4Update) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourceGoogleAnalyticsV4Update) GetViewID() string {
	if o == nil {
		return ""
	}
	return o.ViewID
}

func (o *SourceGoogleAnalyticsV4Update) GetWindowInDays() *int64 {
	if o == nil {
		return nil
	}
	return o.WindowInDays
}
