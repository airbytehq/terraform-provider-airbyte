// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle string

const (
	SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitlePatCredentials SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle = "PAT Credentials"
)

func (e SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle) ToPointer() *SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle {
	return &e
}

func (e *SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PAT Credentials":
		*e = SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle: %v", v)
	}
}

// SourceGithubUpdateAuthenticationPersonalAccessToken - Choose how to authenticate to GitHub
type SourceGithubUpdateAuthenticationPersonalAccessToken struct {
	OptionTitle *SourceGithubUpdateAuthenticationPersonalAccessTokenOptionTitle `json:"option_title,omitempty"`
	// Log into GitHub and then generate a <a href="https://github.com/settings/tokens">personal access token</a>. To load balance your API quota consumption across multiple API tokens, input multiple tokens separated with ","
	PersonalAccessToken string `json:"personal_access_token"`
}

type SourceGithubUpdateAuthenticationOAuthOptionTitle string

const (
	SourceGithubUpdateAuthenticationOAuthOptionTitleOAuthCredentials SourceGithubUpdateAuthenticationOAuthOptionTitle = "OAuth Credentials"
)

func (e SourceGithubUpdateAuthenticationOAuthOptionTitle) ToPointer() *SourceGithubUpdateAuthenticationOAuthOptionTitle {
	return &e
}

func (e *SourceGithubUpdateAuthenticationOAuthOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth Credentials":
		*e = SourceGithubUpdateAuthenticationOAuthOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGithubUpdateAuthenticationOAuthOptionTitle: %v", v)
	}
}

// SourceGithubUpdateAuthenticationOAuth - Choose how to authenticate to GitHub
type SourceGithubUpdateAuthenticationOAuth struct {
	// OAuth access token
	AccessToken string `json:"access_token"`
	// OAuth Client Id
	ClientID *string `json:"client_id,omitempty"`
	// OAuth Client secret
	ClientSecret *string                                           `json:"client_secret,omitempty"`
	OptionTitle  *SourceGithubUpdateAuthenticationOAuthOptionTitle `json:"option_title,omitempty"`
}

type SourceGithubUpdateAuthenticationType string

const (
	SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationOAuth               SourceGithubUpdateAuthenticationType = "source-github-update_Authentication_OAuth"
	SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationPersonalAccessToken SourceGithubUpdateAuthenticationType = "source-github-update_Authentication_Personal Access Token"
)

type SourceGithubUpdateAuthentication struct {
	SourceGithubUpdateAuthenticationOAuth               *SourceGithubUpdateAuthenticationOAuth
	SourceGithubUpdateAuthenticationPersonalAccessToken *SourceGithubUpdateAuthenticationPersonalAccessToken

	Type SourceGithubUpdateAuthenticationType
}

func CreateSourceGithubUpdateAuthenticationSourceGithubUpdateAuthenticationOAuth(sourceGithubUpdateAuthenticationOAuth SourceGithubUpdateAuthenticationOAuth) SourceGithubUpdateAuthentication {
	typ := SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationOAuth

	return SourceGithubUpdateAuthentication{
		SourceGithubUpdateAuthenticationOAuth: &sourceGithubUpdateAuthenticationOAuth,
		Type:                                  typ,
	}
}

func CreateSourceGithubUpdateAuthenticationSourceGithubUpdateAuthenticationPersonalAccessToken(sourceGithubUpdateAuthenticationPersonalAccessToken SourceGithubUpdateAuthenticationPersonalAccessToken) SourceGithubUpdateAuthentication {
	typ := SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationPersonalAccessToken

	return SourceGithubUpdateAuthentication{
		SourceGithubUpdateAuthenticationPersonalAccessToken: &sourceGithubUpdateAuthenticationPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceGithubUpdateAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGithubUpdateAuthenticationPersonalAccessToken := new(SourceGithubUpdateAuthenticationPersonalAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGithubUpdateAuthenticationPersonalAccessToken); err == nil {
		u.SourceGithubUpdateAuthenticationPersonalAccessToken = sourceGithubUpdateAuthenticationPersonalAccessToken
		u.Type = SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationPersonalAccessToken
		return nil
	}

	sourceGithubUpdateAuthenticationOAuth := new(SourceGithubUpdateAuthenticationOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGithubUpdateAuthenticationOAuth); err == nil {
		u.SourceGithubUpdateAuthenticationOAuth = sourceGithubUpdateAuthenticationOAuth
		u.Type = SourceGithubUpdateAuthenticationTypeSourceGithubUpdateAuthenticationOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGithubUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGithubUpdateAuthenticationPersonalAccessToken != nil {
		return json.Marshal(u.SourceGithubUpdateAuthenticationPersonalAccessToken)
	}

	if u.SourceGithubUpdateAuthenticationOAuth != nil {
		return json.Marshal(u.SourceGithubUpdateAuthenticationOAuth)
	}

	return nil, nil
}

type SourceGithubUpdate struct {
	// Space-delimited list of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
	Branch *string `json:"branch,omitempty"`
	// Choose how to authenticate to GitHub
	Credentials *SourceGithubUpdateAuthentication `json:"credentials,omitempty"`
	// Space-delimited list of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/airbyte airbytehq/another-repo` for multiple repositories.
	Repository string `json:"repository"`
	// The GitHub API allows for a maximum of 5000 requests per hour (15000 for Github Enterprise). You can specify a lower value to limit your use of the API quota.
	RequestsPerHour *int64 `json:"requests_per_hour,omitempty"`
	// The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the <a href="https://docs.airbyte.com/integrations/sources/github">docs</a> for more info
	StartDate time.Time `json:"start_date"`
}
