// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType string

const (
	SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthTypeAPIKey SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType = "Api Key"
)

func (e SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType) ToPointer() *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType {
	return &e
}

func (e *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Api Key":
		*e = SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType: %v", v)
	}
}

// SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey - Choose how to authenticate to Lever Hiring.
type SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey struct {
	// The Api Key of your Lever Hiring account.
	APIKey   string                                                                      `json:"api_key"`
	authType *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType `const:"Api Key" json:"auth_type,omitempty"`
}

func (s SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey) GetAuthType() *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType {
	return SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthTypeAPIKey.ToPointer()
}

type SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType string

const (
	SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthTypeClient SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType = "Client"
)

func (e SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType) ToPointer() *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType {
	return &e
}

func (e *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType: %v", v)
	}
}

// SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth - Choose how to authenticate to Lever Hiring.
type SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth struct {
	authType *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Lever Hiring developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your Lever Hiring developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// The token for obtaining new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) GetAuthType() *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthType {
	return SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthAuthTypeClient.ToPointer()
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceLeverHiringAuthenticationMechanismType string

const (
	SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth  SourceLeverHiringAuthenticationMechanismType = "source-lever-hiring_Authentication Mechanism_Authenticate via Lever (OAuth)"
	SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey SourceLeverHiringAuthenticationMechanismType = "source-lever-hiring_Authentication Mechanism_Authenticate via Lever (Api Key)"
)

type SourceLeverHiringAuthenticationMechanism struct {
	SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth  *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth
	SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey *SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey

	Type SourceLeverHiringAuthenticationMechanismType
}

func CreateSourceLeverHiringAuthenticationMechanismSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth(sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth) SourceLeverHiringAuthenticationMechanism {
	typ := SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth

	return SourceLeverHiringAuthenticationMechanism{
		SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth: &sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth,
		Type: typ,
	}
}

func CreateSourceLeverHiringAuthenticationMechanismSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey(sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey) SourceLeverHiringAuthenticationMechanism {
	typ := SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey

	return SourceLeverHiringAuthenticationMechanism{
		SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey: &sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey,
		Type: typ,
	}
}

func (u *SourceLeverHiringAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey := new(SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey, "", true, true); err == nil {
		u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey = sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey
		u.Type = SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey
		return nil
	}

	sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth := new(SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth)
	if err := utils.UnmarshalJSON(data, &sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth, "", true, true); err == nil {
		u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth = sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth
		u.Type = SourceLeverHiringAuthenticationMechanismTypeSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLeverHiringAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth != nil {
		return utils.MarshalJSON(u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth, "", true)
	}

	if u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey != nil {
		return utils.MarshalJSON(u.SourceLeverHiringAuthenticationMechanismAuthenticateViaLeverAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceLeverHiringEnvironment - The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
type SourceLeverHiringEnvironment string

const (
	SourceLeverHiringEnvironmentProduction SourceLeverHiringEnvironment = "Production"
	SourceLeverHiringEnvironmentSandbox    SourceLeverHiringEnvironment = "Sandbox"
)

func (e SourceLeverHiringEnvironment) ToPointer() *SourceLeverHiringEnvironment {
	return &e
}

func (e *SourceLeverHiringEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Production":
		fallthrough
	case "Sandbox":
		*e = SourceLeverHiringEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringEnvironment: %v", v)
	}
}

type SourceLeverHiringLeverHiring string

const (
	SourceLeverHiringLeverHiringLeverHiring SourceLeverHiringLeverHiring = "lever-hiring"
)

func (e SourceLeverHiringLeverHiring) ToPointer() *SourceLeverHiringLeverHiring {
	return &e
}

func (e *SourceLeverHiringLeverHiring) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lever-hiring":
		*e = SourceLeverHiringLeverHiring(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringLeverHiring: %v", v)
	}
}

type SourceLeverHiring struct {
	// Choose how to authenticate to Lever Hiring.
	Credentials *SourceLeverHiringAuthenticationMechanism `json:"credentials,omitempty"`
	// The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
	Environment *SourceLeverHiringEnvironment `default:"Sandbox" json:"environment"`
	sourceType  SourceLeverHiringLeverHiring  `const:"lever-hiring" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
	StartDate string `json:"start_date"`
}

func (s SourceLeverHiring) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiring) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiring) GetCredentials() *SourceLeverHiringAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceLeverHiring) GetEnvironment() *SourceLeverHiringEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SourceLeverHiring) GetSourceType() SourceLeverHiringLeverHiring {
	return SourceLeverHiringLeverHiringLeverHiring
}

func (o *SourceLeverHiring) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
