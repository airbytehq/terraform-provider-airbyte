// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType string

const (
	DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeJsonl DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType = "JSONL"
)

func (e DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType) ToPointer() *DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType {
	return &e
}

func (e *DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSONL":
		*e = DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType: %v", v)
	}
}

// DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON - Output data format
type DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON struct {
	FormatType DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSONFormatType `json:"format_type"`
}

// DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening - Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
type DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening string

const (
	DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlatteningNoFlattening        DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening = "No flattening"
	DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlatteningRootLevelFlattening DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening = "Root level flattening"
)

func (e DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening) ToPointer() *DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening {
	return &e
}

func (e *DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No flattening":
		fallthrough
	case "Root level flattening":
		*e = DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening: %v", v)
	}
}

type DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType string

const (
	DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatTypeCsv DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType = "CSV"
)

func (e DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType) ToPointer() *DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType {
	return &e
}

func (e *DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CSV":
		*e = DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType: %v", v)
	}
}

// DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues - Output data format
type DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues struct {
	// Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details.
	Flattening DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesNormalizationFlattening `json:"flattening"`
	FormatType DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValuesFormatType              `json:"format_type"`
}

type DestinationAzureBlobStorageUpdateOutputFormatType string

const (
	DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues       DestinationAzureBlobStorageUpdateOutputFormatType = "destination-azure-blob-storage-update_Output Format_CSV: Comma-Separated Values"
	DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON DestinationAzureBlobStorageUpdateOutputFormatType = "destination-azure-blob-storage-update_Output Format_JSON Lines: newline-delimited JSON"
)

type DestinationAzureBlobStorageUpdateOutputFormat struct {
	DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues       *DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues
	DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON *DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON

	Type DestinationAzureBlobStorageUpdateOutputFormatType
}

func CreateDestinationAzureBlobStorageUpdateOutputFormatDestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues(destinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues) DestinationAzureBlobStorageUpdateOutputFormat {
	typ := DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues

	return DestinationAzureBlobStorageUpdateOutputFormat{
		DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues: &destinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues,
		Type: typ,
	}
}

func CreateDestinationAzureBlobStorageUpdateOutputFormatDestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON(destinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON) DestinationAzureBlobStorageUpdateOutputFormat {
	typ := DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON

	return DestinationAzureBlobStorageUpdateOutputFormat{
		DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON: &destinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON,
		Type: typ,
	}
}

func (u *DestinationAzureBlobStorageUpdateOutputFormat) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON := new(DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON); err == nil {
		u.DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON = destinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON
		u.Type = DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON
		return nil
	}

	destinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues := new(DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues); err == nil {
		u.DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues = destinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues
		u.Type = DestinationAzureBlobStorageUpdateOutputFormatTypeDestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationAzureBlobStorageUpdateOutputFormat) MarshalJSON() ([]byte, error) {
	if u.DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON != nil {
		return json.Marshal(u.DestinationAzureBlobStorageUpdateOutputFormatJSONLinesNewlineDelimitedJSON)
	}

	if u.DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues != nil {
		return json.Marshal(u.DestinationAzureBlobStorageUpdateOutputFormatCSVCommaSeparatedValues)
	}

	return nil, nil
}

type DestinationAzureBlobStorageUpdate struct {
	// The Azure blob storage account key.
	AzureBlobStorageAccountKey string `json:"azure_blob_storage_account_key"`
	// The account's name of the Azure Blob Storage.
	AzureBlobStorageAccountName string `json:"azure_blob_storage_account_name"`
	// The name of the Azure blob storage container. If not exists - will be created automatically. May be empty, then will be created automatically airbytecontainer+timestamp
	AzureBlobStorageContainerName *string `json:"azure_blob_storage_container_name,omitempty"`
	// This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.
	AzureBlobStorageEndpointDomainName *string `json:"azure_blob_storage_endpoint_domain_name,omitempty"`
	// The amount of megabytes to buffer for the output stream to Azure. This will impact memory footprint on workers, but may need adjustment for performance and appropriate block size in Azure.
	AzureBlobStorageOutputBufferSize *int64 `json:"azure_blob_storage_output_buffer_size,omitempty"`
	// The amount of megabytes after which the connector should spill the records in a new blob object. Make sure to configure size greater than individual records. Enter 0 if not applicable
	AzureBlobStorageSpillSize *int64 `json:"azure_blob_storage_spill_size,omitempty"`
	// Output data format
	Format DestinationAzureBlobStorageUpdateOutputFormat `json:"format"`
}
