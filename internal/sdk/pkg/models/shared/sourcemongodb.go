// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance string

const (
	SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstanceAtlas SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance = "atlas"
)

func (e SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance) ToPointer() *SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance {
	return &e
}

func (e *SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance: %v", v)
	}
}

// SourceMongodbMongoDBInstanceTypeMongoDBAtlas - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDBInstanceTypeMongoDBAtlas struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The URL of a cluster to connect to.
	ClusterURL string                                               `json:"cluster_url"`
	instance   SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance `const:"atlas" json:"instance"`
}

func (s SourceMongodbMongoDBInstanceTypeMongoDBAtlas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbMongoDBInstanceTypeMongoDBAtlas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbMongoDBInstanceTypeMongoDBAtlas) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceMongodbMongoDBInstanceTypeMongoDBAtlas) GetClusterURL() string {
	if o == nil {
		return ""
	}
	return o.ClusterURL
}

func (o *SourceMongodbMongoDBInstanceTypeMongoDBAtlas) GetInstance() SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance {
	return SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstanceAtlas
}

type SourceMongodbMongoDbInstanceTypeReplicaSetInstance string

const (
	SourceMongodbMongoDbInstanceTypeReplicaSetInstanceReplica SourceMongodbMongoDbInstanceTypeReplicaSetInstance = "replica"
)

func (e SourceMongodbMongoDbInstanceTypeReplicaSetInstance) ToPointer() *SourceMongodbMongoDbInstanceTypeReplicaSetInstance {
	return &e
}

func (e *SourceMongodbMongoDbInstanceTypeReplicaSetInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = SourceMongodbMongoDbInstanceTypeReplicaSetInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDbInstanceTypeReplicaSetInstance: %v", v)
	}
}

// SourceMongodbMongoDbInstanceTypeReplicaSet - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDbInstanceTypeReplicaSet struct {
	instance SourceMongodbMongoDbInstanceTypeReplicaSetInstance `const:"replica" json:"instance"`
	// A replica set in MongoDB is a group of mongod processes that maintain the same data set.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member separated by comma.
	ServerAddresses string `json:"server_addresses"`
}

func (s SourceMongodbMongoDbInstanceTypeReplicaSet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbMongoDbInstanceTypeReplicaSet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbMongoDbInstanceTypeReplicaSet) GetInstance() SourceMongodbMongoDbInstanceTypeReplicaSetInstance {
	return SourceMongodbMongoDbInstanceTypeReplicaSetInstanceReplica
}

func (o *SourceMongodbMongoDbInstanceTypeReplicaSet) GetReplicaSet() *string {
	if o == nil {
		return nil
	}
	return o.ReplicaSet
}

func (o *SourceMongodbMongoDbInstanceTypeReplicaSet) GetServerAddresses() string {
	if o == nil {
		return ""
	}
	return o.ServerAddresses
}

type SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance string

const (
	SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance = "standalone"
)

func (e SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) ToPointer() *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return &e
}

func (e *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance: %v", v)
	}
}

// SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance struct {
	// The host name of the Mongo database.
	Host     string                                                            `json:"host"`
	instance SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance `const:"standalone" json:"instance"`
	// The port of the Mongo database.
	Port *int64 `default:"27017" json:"port"`
}

func (s SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) GetInstance() SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone
}

func (o *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SourceMongodbMongoDbInstanceTypeType string

const (
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_Standalone MongoDb Instance"
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet                SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_Replica Set"
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas              SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_MongoDB Atlas"
)

type SourceMongodbMongoDbInstanceType struct {
	SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
	SourceMongodbMongoDbInstanceTypeReplicaSet                *SourceMongodbMongoDbInstanceTypeReplicaSet
	SourceMongodbMongoDBInstanceTypeMongoDBAtlas              *SourceMongodbMongoDBInstanceTypeMongoDBAtlas

	Type SourceMongodbMongoDbInstanceTypeType
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance(sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance: &sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance,
		Type: typ,
	}
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet(sourceMongodbMongoDbInstanceTypeReplicaSet SourceMongodbMongoDbInstanceTypeReplicaSet) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDbInstanceTypeReplicaSet: &sourceMongodbMongoDbInstanceTypeReplicaSet,
		Type: typ,
	}
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas(sourceMongodbMongoDBInstanceTypeMongoDBAtlas SourceMongodbMongoDBInstanceTypeMongoDBAtlas) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDBInstanceTypeMongoDBAtlas: &sourceMongodbMongoDBInstanceTypeMongoDBAtlas,
		Type: typ,
	}
}

func (u *SourceMongodbMongoDbInstanceType) UnmarshalJSON(data []byte) error {

	sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance := new(SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance)
	if err := utils.UnmarshalJSON(data, &sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance, "", true, true); err == nil {
		u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		return nil
	}

	sourceMongodbMongoDbInstanceTypeReplicaSet := new(SourceMongodbMongoDbInstanceTypeReplicaSet)
	if err := utils.UnmarshalJSON(data, &sourceMongodbMongoDbInstanceTypeReplicaSet, "", true, true); err == nil {
		u.SourceMongodbMongoDbInstanceTypeReplicaSet = sourceMongodbMongoDbInstanceTypeReplicaSet
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet
		return nil
	}

	sourceMongodbMongoDBInstanceTypeMongoDBAtlas := new(SourceMongodbMongoDBInstanceTypeMongoDBAtlas)
	if err := utils.UnmarshalJSON(data, &sourceMongodbMongoDBInstanceTypeMongoDBAtlas, "", true, true); err == nil {
		u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas = sourceMongodbMongoDBInstanceTypeMongoDBAtlas
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMongodbMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		return utils.MarshalJSON(u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance, "", true)
	}

	if u.SourceMongodbMongoDbInstanceTypeReplicaSet != nil {
		return utils.MarshalJSON(u.SourceMongodbMongoDbInstanceTypeReplicaSet, "", true)
	}

	if u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
		return utils.MarshalJSON(u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceMongodbMongodb string

const (
	SourceMongodbMongodbMongodb SourceMongodbMongodb = "mongodb"
)

func (e SourceMongodbMongodb) ToPointer() *SourceMongodbMongodb {
	return &e
}

func (e *SourceMongodbMongodb) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mongodb":
		*e = SourceMongodbMongodb(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongodb: %v", v)
	}
}

type SourceMongodb struct {
	// The authentication source where the user information is stored.
	AuthSource *string `default:"admin" json:"auth_source"`
	// The database you want to replicate.
	Database string `json:"database"`
	// The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *SourceMongodbMongoDbInstanceType `json:"instance_type,omitempty"`
	// The password associated with this username.
	Password   *string              `json:"password,omitempty"`
	sourceType SourceMongodbMongodb `const:"mongodb" json:"sourceType"`
	// The username which is used to access the database.
	User *string `json:"user,omitempty"`
}

func (s SourceMongodb) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodb) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodb) GetAuthSource() *string {
	if o == nil {
		return nil
	}
	return o.AuthSource
}

func (o *SourceMongodb) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceMongodb) GetInstanceType() *SourceMongodbMongoDbInstanceType {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *SourceMongodb) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceMongodb) GetSourceType() SourceMongodbMongodb {
	return SourceMongodbMongodbMongodb
}

func (o *SourceMongodb) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
