// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance string

const (
	SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstanceAtlas SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance = "atlas"
)

func (e SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance) ToPointer() *SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance {
	return &e
}

func (e *SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance: %v", v)
	}
}

// SourceMongodbMongoDBInstanceTypeMongoDBAtlas - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDBInstanceTypeMongoDBAtlas struct {
	// The URL of a cluster to connect to.
	ClusterURL string                                               `json:"cluster_url"`
	Instance   SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstance `json:"instance"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceMongodbMongoDBInstanceTypeMongoDBAtlas SourceMongodbMongoDBInstanceTypeMongoDBAtlas

func (c *SourceMongodbMongoDBInstanceTypeMongoDBAtlas) UnmarshalJSON(bs []byte) error {
	data := _SourceMongodbMongoDBInstanceTypeMongoDBAtlas{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceMongodbMongoDBInstanceTypeMongoDBAtlas(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "cluster_url")
	delete(additionalFields, "instance")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceMongodbMongoDBInstanceTypeMongoDBAtlas) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceMongodbMongoDBInstanceTypeMongoDBAtlas(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceMongodbMongoDbInstanceTypeReplicaSetInstance string

const (
	SourceMongodbMongoDbInstanceTypeReplicaSetInstanceReplica SourceMongodbMongoDbInstanceTypeReplicaSetInstance = "replica"
)

func (e SourceMongodbMongoDbInstanceTypeReplicaSetInstance) ToPointer() *SourceMongodbMongoDbInstanceTypeReplicaSetInstance {
	return &e
}

func (e *SourceMongodbMongoDbInstanceTypeReplicaSetInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = SourceMongodbMongoDbInstanceTypeReplicaSetInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDbInstanceTypeReplicaSetInstance: %v", v)
	}
}

// SourceMongodbMongoDbInstanceTypeReplicaSet - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDbInstanceTypeReplicaSet struct {
	Instance SourceMongodbMongoDbInstanceTypeReplicaSetInstance `json:"instance"`
	// A replica set in MongoDB is a group of mongod processes that maintain the same data set.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member separated by comma.
	ServerAddresses string `json:"server_addresses"`
}

type SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance string

const (
	SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance = "standalone"
)

func (e SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) ToPointer() *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return &e
}

func (e *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance: %v", v)
	}
}

// SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance struct {
	// The host name of the Mongo database.
	Host     string                                                            `json:"host"`
	Instance SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstance `json:"instance"`
	// The port of the Mongo database.
	Port int64 `json:"port"`
}

type SourceMongodbMongoDbInstanceTypeType string

const (
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_Standalone MongoDb Instance"
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet                SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_Replica Set"
	SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas              SourceMongodbMongoDbInstanceTypeType = "source-mongodb_MongoDb Instance Type_MongoDB Atlas"
)

type SourceMongodbMongoDbInstanceType struct {
	SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance *SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
	SourceMongodbMongoDbInstanceTypeReplicaSet                *SourceMongodbMongoDbInstanceTypeReplicaSet
	SourceMongodbMongoDBInstanceTypeMongoDBAtlas              *SourceMongodbMongoDBInstanceTypeMongoDBAtlas

	Type SourceMongodbMongoDbInstanceTypeType
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance(sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance: &sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance,
		Type: typ,
	}
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSet(sourceMongodbMongoDbInstanceTypeReplicaSet SourceMongodbMongoDbInstanceTypeReplicaSet) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDbInstanceTypeReplicaSet: &sourceMongodbMongoDbInstanceTypeReplicaSet,
		Type: typ,
	}
}

func CreateSourceMongodbMongoDbInstanceTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas(sourceMongodbMongoDBInstanceTypeMongoDBAtlas SourceMongodbMongoDBInstanceTypeMongoDBAtlas) SourceMongodbMongoDbInstanceType {
	typ := SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas

	return SourceMongodbMongoDbInstanceType{
		SourceMongodbMongoDBInstanceTypeMongoDBAtlas: &sourceMongodbMongoDBInstanceTypeMongoDBAtlas,
		Type: typ,
	}
}

func (u *SourceMongodbMongoDbInstanceType) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceMongodbMongoDBInstanceTypeMongoDBAtlas := new(SourceMongodbMongoDBInstanceTypeMongoDBAtlas)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbMongoDBInstanceTypeMongoDBAtlas); err == nil {
		u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas = sourceMongodbMongoDBInstanceTypeMongoDBAtlas
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDBInstanceTypeMongoDBAtlas
		return nil
	}

	sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance := new(SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance); err == nil {
		u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		return nil
	}

	sourceMongodbMongoDbInstanceTypeReplicaSet := new(SourceMongodbMongoDbInstanceTypeReplicaSet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbMongoDbInstanceTypeReplicaSet); err == nil {
		u.SourceMongodbMongoDbInstanceTypeReplicaSet = sourceMongodbMongoDbInstanceTypeReplicaSet
		u.Type = SourceMongodbMongoDbInstanceTypeTypeSourceMongodbMongoDbInstanceTypeReplicaSet
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMongodbMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
		return json.Marshal(u.SourceMongodbMongoDBInstanceTypeMongoDBAtlas)
	}

	if u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		return json.Marshal(u.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance)
	}

	if u.SourceMongodbMongoDbInstanceTypeReplicaSet != nil {
		return json.Marshal(u.SourceMongodbMongoDbInstanceTypeReplicaSet)
	}

	return nil, nil
}

type SourceMongodbMongodb string

const (
	SourceMongodbMongodbMongodb SourceMongodbMongodb = "mongodb"
)

func (e SourceMongodbMongodb) ToPointer() *SourceMongodbMongodb {
	return &e
}

func (e *SourceMongodbMongodb) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mongodb":
		*e = SourceMongodbMongodb(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbMongodb: %v", v)
	}
}

type SourceMongodb struct {
	// The authentication source where the user information is stored.
	AuthSource *string `json:"auth_source,omitempty"`
	// The database you want to replicate.
	Database string `json:"database"`
	// The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *SourceMongodbMongoDbInstanceType `json:"instance_type,omitempty"`
	// The password associated with this username.
	Password   *string              `json:"password,omitempty"`
	SourceType SourceMongodbMongodb `json:"sourceType"`
	// The username which is used to access the database.
	User *string `json:"user,omitempty"`
}
