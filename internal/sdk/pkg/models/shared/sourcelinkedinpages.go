// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceLinkedinPagesSchemasAuthMethod string

const (
	SourceLinkedinPagesSchemasAuthMethodAccessToken SourceLinkedinPagesSchemasAuthMethod = "access_token"
)

func (e SourceLinkedinPagesSchemasAuthMethod) ToPointer() *SourceLinkedinPagesSchemasAuthMethod {
	return &e
}

func (e *SourceLinkedinPagesSchemasAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceLinkedinPagesSchemasAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesSchemasAuthMethod: %v", v)
	}
}

type SourceLinkedinPagesAccessToken struct {
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	AccessToken string                                `json:"access_token"`
	authMethod  *SourceLinkedinPagesSchemasAuthMethod `const:"access_token" json:"auth_method,omitempty"`
}

func (s SourceLinkedinPagesAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLinkedinPagesAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLinkedinPagesAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceLinkedinPagesAccessToken) GetAuthMethod() *SourceLinkedinPagesSchemasAuthMethod {
	return SourceLinkedinPagesSchemasAuthMethodAccessToken.ToPointer()
}

type SourceLinkedinPagesAuthMethod string

const (
	SourceLinkedinPagesAuthMethodOAuth20 SourceLinkedinPagesAuthMethod = "oAuth2.0"
)

func (e SourceLinkedinPagesAuthMethod) ToPointer() *SourceLinkedinPagesAuthMethod {
	return &e
}

func (e *SourceLinkedinPagesAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oAuth2.0":
		*e = SourceLinkedinPagesAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesAuthMethod: %v", v)
	}
}

type SourceLinkedinPagesOAuth20 struct {
	authMethod *SourceLinkedinPagesAuthMethod `const:"oAuth2.0" json:"auth_method,omitempty"`
	// The client ID of the LinkedIn developer application.
	ClientID string `json:"client_id"`
	// The client secret of the LinkedIn developer application.
	ClientSecret string `json:"client_secret"`
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceLinkedinPagesOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLinkedinPagesOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLinkedinPagesOAuth20) GetAuthMethod() *SourceLinkedinPagesAuthMethod {
	return SourceLinkedinPagesAuthMethodOAuth20.ToPointer()
}

func (o *SourceLinkedinPagesOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceLinkedinPagesOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceLinkedinPagesOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceLinkedinPagesAuthenticationType string

const (
	SourceLinkedinPagesAuthenticationTypeOAuth20     SourceLinkedinPagesAuthenticationType = "OAuth20"
	SourceLinkedinPagesAuthenticationTypeAccessToken SourceLinkedinPagesAuthenticationType = "AccessToken"
)

type SourceLinkedinPagesAuthentication struct {
	OAuth20     *SourceLinkedinPagesOAuth20
	AccessToken *SourceLinkedinPagesAccessToken

	Type SourceLinkedinPagesAuthenticationType
}

func CreateSourceLinkedinPagesAuthenticationOAuth20(oAuth20 SourceLinkedinPagesOAuth20) SourceLinkedinPagesAuthentication {
	typ := SourceLinkedinPagesAuthenticationTypeOAuth20

	return SourceLinkedinPagesAuthentication{
		OAuth20: &oAuth20,
		Type:    typ,
	}
}

func CreateSourceLinkedinPagesAuthenticationAccessToken(accessToken SourceLinkedinPagesAccessToken) SourceLinkedinPagesAuthentication {
	typ := SourceLinkedinPagesAuthenticationTypeAccessToken

	return SourceLinkedinPagesAuthentication{
		AccessToken: &accessToken,
		Type:        typ,
	}
}

func (u *SourceLinkedinPagesAuthentication) UnmarshalJSON(data []byte) error {

	accessToken := new(SourceLinkedinPagesAccessToken)
	if err := utils.UnmarshalJSON(data, &accessToken, "", true, true); err == nil {
		u.AccessToken = accessToken
		u.Type = SourceLinkedinPagesAuthenticationTypeAccessToken
		return nil
	}

	oAuth20 := new(SourceLinkedinPagesOAuth20)
	if err := utils.UnmarshalJSON(data, &oAuth20, "", true, true); err == nil {
		u.OAuth20 = oAuth20
		u.Type = SourceLinkedinPagesAuthenticationTypeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLinkedinPagesAuthentication) MarshalJSON() ([]byte, error) {
	if u.OAuth20 != nil {
		return utils.MarshalJSON(u.OAuth20, "", true)
	}

	if u.AccessToken != nil {
		return utils.MarshalJSON(u.AccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type LinkedinPages string

const (
	LinkedinPagesLinkedinPages LinkedinPages = "linkedin-pages"
)

func (e LinkedinPages) ToPointer() *LinkedinPages {
	return &e
}

func (e *LinkedinPages) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linkedin-pages":
		*e = LinkedinPages(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkedinPages: %v", v)
	}
}

type SourceLinkedinPages struct {
	Credentials *SourceLinkedinPagesAuthentication `json:"credentials,omitempty"`
	// Specify the Organization ID
	OrgID      string        `json:"org_id"`
	sourceType LinkedinPages `const:"linkedin-pages" json:"sourceType"`
}

func (s SourceLinkedinPages) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLinkedinPages) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceLinkedinPages) GetCredentials() *SourceLinkedinPagesAuthentication {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceLinkedinPages) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *SourceLinkedinPages) GetSourceType() LinkedinPages {
	return LinkedinPagesLinkedinPages
}
