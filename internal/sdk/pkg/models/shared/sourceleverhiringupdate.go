// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType string

const (
	SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthTypeAPIKey SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType = "Api Key"
)

func (e SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType) ToPointer() *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType {
	return &e
}

func (e *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Api Key":
		*e = SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType: %v", v)
	}
}

// SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey - Choose how to authenticate to Lever Hiring.
type SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey struct {
	// The Api Key of your Lever Hiring account.
	APIKey   string                                                                            `json:"api_key"`
	authType *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType `const:"Api Key" json:"auth_type,omitempty"`
}

func (s SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey) GetAuthType() *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthType {
	return SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKeyAuthTypeAPIKey.ToPointer()
}

type SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType string

const (
	SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthTypeClient SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType = "Client"
)

func (e SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType) ToPointer() *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType {
	return &e
}

func (e *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType: %v", v)
	}
}

// SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth - Choose how to authenticate to Lever Hiring.
type SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth struct {
	authType *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Lever Hiring developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your Lever Hiring developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// The token for obtaining new access token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) GetAuthType() *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthType {
	return SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthAuthTypeClient.ToPointer()
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceLeverHiringUpdateAuthenticationMechanismType string

const (
	SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth  SourceLeverHiringUpdateAuthenticationMechanismType = "source-lever-hiring-update_Authentication Mechanism_Authenticate via Lever (OAuth)"
	SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey SourceLeverHiringUpdateAuthenticationMechanismType = "source-lever-hiring-update_Authentication Mechanism_Authenticate via Lever (Api Key)"
)

type SourceLeverHiringUpdateAuthenticationMechanism struct {
	SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth  *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth
	SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey *SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey

	Type SourceLeverHiringUpdateAuthenticationMechanismType
}

func CreateSourceLeverHiringUpdateAuthenticationMechanismSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth(sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth) SourceLeverHiringUpdateAuthenticationMechanism {
	typ := SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth

	return SourceLeverHiringUpdateAuthenticationMechanism{
		SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth: &sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth,
		Type: typ,
	}
}

func CreateSourceLeverHiringUpdateAuthenticationMechanismSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey(sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey) SourceLeverHiringUpdateAuthenticationMechanism {
	typ := SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey

	return SourceLeverHiringUpdateAuthenticationMechanism{
		SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey: &sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey,
		Type: typ,
	}
}

func (u *SourceLeverHiringUpdateAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey := new(SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey)
	if err := utils.UnmarshalJSON(data, &sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey, "", true, true); err == nil {
		u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey = sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey
		u.Type = SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey
		return nil
	}

	sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth := new(SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth)
	if err := utils.UnmarshalJSON(data, &sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth, "", true, true); err == nil {
		u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth = sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth
		u.Type = SourceLeverHiringUpdateAuthenticationMechanismTypeSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLeverHiringUpdateAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth != nil {
		return utils.MarshalJSON(u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth, "", true)
	}

	if u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey != nil {
		return utils.MarshalJSON(u.SourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverAPIKey, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceLeverHiringUpdateEnvironment - The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
type SourceLeverHiringUpdateEnvironment string

const (
	SourceLeverHiringUpdateEnvironmentProduction SourceLeverHiringUpdateEnvironment = "Production"
	SourceLeverHiringUpdateEnvironmentSandbox    SourceLeverHiringUpdateEnvironment = "Sandbox"
)

func (e SourceLeverHiringUpdateEnvironment) ToPointer() *SourceLeverHiringUpdateEnvironment {
	return &e
}

func (e *SourceLeverHiringUpdateEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Production":
		fallthrough
	case "Sandbox":
		*e = SourceLeverHiringUpdateEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLeverHiringUpdateEnvironment: %v", v)
	}
}

type SourceLeverHiringUpdate struct {
	// Choose how to authenticate to Lever Hiring.
	Credentials *SourceLeverHiringUpdateAuthenticationMechanism `json:"credentials,omitempty"`
	// The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use.
	Environment *SourceLeverHiringUpdateEnvironment `default:"Sandbox" json:"environment"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
	StartDate string `json:"start_date"`
}

func (s SourceLeverHiringUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceLeverHiringUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceLeverHiringUpdate) GetCredentials() *SourceLeverHiringUpdateAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceLeverHiringUpdate) GetEnvironment() *SourceLeverHiringUpdateEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SourceLeverHiringUpdate) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
