// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle string

const (
	SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitleProjectSecret SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle = "Project Secret"
)

func (e SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle) ToPointer() *SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle {
	return &e
}

func (e *SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Project Secret":
		*e = SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle: %v", v)
	}
}

// SourceMixpanelUpdateAuthenticationWildcardProjectSecret - Choose how to authenticate to Mixpanel
type SourceMixpanelUpdateAuthenticationWildcardProjectSecret struct {
	// Mixpanel project secret. See the <a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret">docs</a> for more information on how to obtain this.
	APISecret   string                                                              `json:"api_secret"`
	optionTitle *SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle `const:"Project Secret" json:"option_title,omitempty"`
}

func (s SourceMixpanelUpdateAuthenticationWildcardProjectSecret) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanelUpdateAuthenticationWildcardProjectSecret) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanelUpdateAuthenticationWildcardProjectSecret) GetAPISecret() string {
	if o == nil {
		return ""
	}
	return o.APISecret
}

func (o *SourceMixpanelUpdateAuthenticationWildcardProjectSecret) GetOptionTitle() *SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitle {
	return SourceMixpanelUpdateAuthenticationWildcardProjectSecretOptionTitleProjectSecret.ToPointer()
}

type SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle string

const (
	SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitleServiceAccount SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle = "Service Account"
)

func (e SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle) ToPointer() *SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle {
	return &e
}

func (e *SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Service Account":
		*e = SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle: %v", v)
	}
}

// SourceMixpanelUpdateAuthenticationWildcardServiceAccount - Choose how to authenticate to Mixpanel
type SourceMixpanelUpdateAuthenticationWildcardServiceAccount struct {
	optionTitle *SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle `const:"Service Account" json:"option_title,omitempty"`
	// Mixpanel Service Account Secret. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Secret string `json:"secret"`
	// Mixpanel Service Account Username. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Username string `json:"username"`
}

func (s SourceMixpanelUpdateAuthenticationWildcardServiceAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanelUpdateAuthenticationWildcardServiceAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanelUpdateAuthenticationWildcardServiceAccount) GetOptionTitle() *SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitle {
	return SourceMixpanelUpdateAuthenticationWildcardServiceAccountOptionTitleServiceAccount.ToPointer()
}

func (o *SourceMixpanelUpdateAuthenticationWildcardServiceAccount) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *SourceMixpanelUpdateAuthenticationWildcardServiceAccount) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type SourceMixpanelUpdateAuthenticationWildcardType string

const (
	SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardServiceAccount SourceMixpanelUpdateAuthenticationWildcardType = "source-mixpanel-update_Authentication *_Service Account"
	SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardProjectSecret  SourceMixpanelUpdateAuthenticationWildcardType = "source-mixpanel-update_Authentication *_Project Secret"
)

type SourceMixpanelUpdateAuthenticationWildcard struct {
	SourceMixpanelUpdateAuthenticationWildcardServiceAccount *SourceMixpanelUpdateAuthenticationWildcardServiceAccount
	SourceMixpanelUpdateAuthenticationWildcardProjectSecret  *SourceMixpanelUpdateAuthenticationWildcardProjectSecret

	Type SourceMixpanelUpdateAuthenticationWildcardType
}

func CreateSourceMixpanelUpdateAuthenticationWildcardSourceMixpanelUpdateAuthenticationWildcardServiceAccount(sourceMixpanelUpdateAuthenticationWildcardServiceAccount SourceMixpanelUpdateAuthenticationWildcardServiceAccount) SourceMixpanelUpdateAuthenticationWildcard {
	typ := SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardServiceAccount

	return SourceMixpanelUpdateAuthenticationWildcard{
		SourceMixpanelUpdateAuthenticationWildcardServiceAccount: &sourceMixpanelUpdateAuthenticationWildcardServiceAccount,
		Type: typ,
	}
}

func CreateSourceMixpanelUpdateAuthenticationWildcardSourceMixpanelUpdateAuthenticationWildcardProjectSecret(sourceMixpanelUpdateAuthenticationWildcardProjectSecret SourceMixpanelUpdateAuthenticationWildcardProjectSecret) SourceMixpanelUpdateAuthenticationWildcard {
	typ := SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardProjectSecret

	return SourceMixpanelUpdateAuthenticationWildcard{
		SourceMixpanelUpdateAuthenticationWildcardProjectSecret: &sourceMixpanelUpdateAuthenticationWildcardProjectSecret,
		Type: typ,
	}
}

func (u *SourceMixpanelUpdateAuthenticationWildcard) UnmarshalJSON(data []byte) error {

	sourceMixpanelUpdateAuthenticationWildcardProjectSecret := new(SourceMixpanelUpdateAuthenticationWildcardProjectSecret)
	if err := utils.UnmarshalJSON(data, &sourceMixpanelUpdateAuthenticationWildcardProjectSecret, "", true, true); err == nil {
		u.SourceMixpanelUpdateAuthenticationWildcardProjectSecret = sourceMixpanelUpdateAuthenticationWildcardProjectSecret
		u.Type = SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardProjectSecret
		return nil
	}

	sourceMixpanelUpdateAuthenticationWildcardServiceAccount := new(SourceMixpanelUpdateAuthenticationWildcardServiceAccount)
	if err := utils.UnmarshalJSON(data, &sourceMixpanelUpdateAuthenticationWildcardServiceAccount, "", true, true); err == nil {
		u.SourceMixpanelUpdateAuthenticationWildcardServiceAccount = sourceMixpanelUpdateAuthenticationWildcardServiceAccount
		u.Type = SourceMixpanelUpdateAuthenticationWildcardTypeSourceMixpanelUpdateAuthenticationWildcardServiceAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMixpanelUpdateAuthenticationWildcard) MarshalJSON() ([]byte, error) {
	if u.SourceMixpanelUpdateAuthenticationWildcardServiceAccount != nil {
		return utils.MarshalJSON(u.SourceMixpanelUpdateAuthenticationWildcardServiceAccount, "", true)
	}

	if u.SourceMixpanelUpdateAuthenticationWildcardProjectSecret != nil {
		return utils.MarshalJSON(u.SourceMixpanelUpdateAuthenticationWildcardProjectSecret, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceMixpanelUpdateRegion - The region of mixpanel domain instance either US or EU.
type SourceMixpanelUpdateRegion string

const (
	SourceMixpanelUpdateRegionUs SourceMixpanelUpdateRegion = "US"
	SourceMixpanelUpdateRegionEu SourceMixpanelUpdateRegion = "EU"
)

func (e SourceMixpanelUpdateRegion) ToPointer() *SourceMixpanelUpdateRegion {
	return &e
}

func (e *SourceMixpanelUpdateRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		*e = SourceMixpanelUpdateRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelUpdateRegion: %v", v)
	}
}

type SourceMixpanelUpdate struct {
	//  A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days.
	AttributionWindow *int64 `default:"5" json:"attribution_window"`
	// Choose how to authenticate to Mixpanel
	Credentials *SourceMixpanelUpdateAuthenticationWildcard `json:"credentials,omitempty"`
	// Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment.
	DateWindowSize *int64 `default:"30" json:"date_window_size"`
	// The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
	EndDate *types.Date `json:"end_date,omitempty"`
	// Your project ID number. See the <a href="https://help.mixpanel.com/hc/en-us/articles/115004490503-Project-Settings#project-id">docs</a> for more information on how to obtain this.
	ProjectID *int64 `json:"project_id,omitempty"`
	// Time zone in which integer date times are stored. The project timezone may be found in the project settings in the <a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel">Mixpanel console</a>.
	ProjectTimezone *string `default:"US/Pacific" json:"project_timezone"`
	// The region of mixpanel domain instance either US or EU.
	Region *SourceMixpanelUpdateRegion `default:"US" json:"region"`
	// Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
	SelectPropertiesByDefault *bool `default:"true" json:"select_properties_by_default"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
	StartDate *types.Date `json:"start_date,omitempty"`
}

func (s SourceMixpanelUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMixpanelUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMixpanelUpdate) GetAttributionWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.AttributionWindow
}

func (o *SourceMixpanelUpdate) GetCredentials() *SourceMixpanelUpdateAuthenticationWildcard {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceMixpanelUpdate) GetDateWindowSize() *int64 {
	if o == nil {
		return nil
	}
	return o.DateWindowSize
}

func (o *SourceMixpanelUpdate) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *SourceMixpanelUpdate) GetProjectID() *int64 {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *SourceMixpanelUpdate) GetProjectTimezone() *string {
	if o == nil {
		return nil
	}
	return o.ProjectTimezone
}

func (o *SourceMixpanelUpdate) GetRegion() *SourceMixpanelUpdateRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceMixpanelUpdate) GetSelectPropertiesByDefault() *bool {
	if o == nil {
		return nil
	}
	return o.SelectPropertiesByDefault
}

func (o *SourceMixpanelUpdate) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
