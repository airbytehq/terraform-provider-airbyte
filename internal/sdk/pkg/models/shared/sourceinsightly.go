// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourceInsightlyInsightly string

const (
	SourceInsightlyInsightlyInsightly SourceInsightlyInsightly = "insightly"
)

func (e SourceInsightlyInsightly) ToPointer() *SourceInsightlyInsightly {
	return &e
}

func (e *SourceInsightlyInsightly) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insightly":
		*e = SourceInsightlyInsightly(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceInsightlyInsightly: %v", v)
	}
}

type SourceInsightly struct {
	sourceType SourceInsightlyInsightly `const:"insightly" json:"sourceType"`
	// The date from which you'd like to replicate data for Insightly in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. Note that it will be used only for incremental streams.
	StartDate *string `json:"start_date"`
	// Your Insightly API token.
	Token *string `json:"token"`
}

func (s SourceInsightly) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceInsightly) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceInsightly) GetSourceType() SourceInsightlyInsightly {
	return SourceInsightlyInsightlyInsightly
}

func (o *SourceInsightly) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceInsightly) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}
