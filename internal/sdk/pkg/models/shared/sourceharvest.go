// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType string

const (
	SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeToken SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType = "Token"
)

func (e SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType) ToPointer() *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType {
	return &e
}

func (e *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType: %v", v)
	}
}

// SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken - Choose how to authenticate to Harvest.
type SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Log into Harvest and then create new <a href="https://id.getharvest.com/developers"> personal access token</a>.
	APIToken string                                                                           `json:"api_token"`
	authType *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType `const:"Token" json:"auth_type,omitempty"`
}

func (s SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) GetAuthType() *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthType {
	return SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeToken.ToPointer()
}

type SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType string

const (
	SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeClient SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType = "Client"
)

func (e SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType) ToPointer() *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType {
	return &e
}

func (e *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType: %v", v)
	}
}

// SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth - Choose how to authenticate to Harvest.
type SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth struct {
	AdditionalProperties interface{}                                                              `additionalProperties:"true" json:"-"`
	authType             *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType `const:"Client" json:"auth_type,omitempty"`
	// The Client ID of your Harvest developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Harvest developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) GetAuthType() *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthType {
	return SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeClient.ToPointer()
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceHarvestAuthenticationMechanismType string

const (
	SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth         SourceHarvestAuthenticationMechanismType = "source-harvest_Authentication mechanism_Authenticate via Harvest (OAuth)"
	SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestAuthenticationMechanismType = "source-harvest_Authentication mechanism_Authenticate with Personal Access Token"
)

type SourceHarvestAuthenticationMechanism struct {
	SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth         *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
	SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken

	Type SourceHarvestAuthenticationMechanismType
}

func CreateSourceHarvestAuthenticationMechanismSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth(sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) SourceHarvestAuthenticationMechanism {
	typ := SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth

	return SourceHarvestAuthenticationMechanism{
		SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth: &sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth,
		Type: typ,
	}
}

func CreateSourceHarvestAuthenticationMechanismSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken(sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) SourceHarvestAuthenticationMechanism {
	typ := SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken

	return SourceHarvestAuthenticationMechanism{
		SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken: &sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceHarvestAuthenticationMechanism) UnmarshalJSON(data []byte) error {

	sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken := new(SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	if err := utils.UnmarshalJSON(data, &sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken, "", true, true); err == nil {
		u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken = sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
		u.Type = SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
		return nil
	}

	sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth := new(SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth)
	if err := utils.UnmarshalJSON(data, &sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth, "", true, true); err == nil {
		u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth = sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
		u.Type = SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceHarvestAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
		return utils.MarshalJSON(u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth, "", true)
	}

	if u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		return utils.MarshalJSON(u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceHarvestHarvest string

const (
	SourceHarvestHarvestHarvest SourceHarvestHarvest = "harvest"
)

func (e SourceHarvestHarvest) ToPointer() *SourceHarvestHarvest {
	return &e
}

func (e *SourceHarvestHarvest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "harvest":
		*e = SourceHarvestHarvest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestHarvest: %v", v)
	}
}

type SourceHarvest struct {
	// Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
	AccountID string `json:"account_id"`
	// Choose how to authenticate to Harvest.
	Credentials *SourceHarvestAuthenticationMechanism `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *time.Time `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	ReplicationStartDate time.Time            `json:"replication_start_date"`
	sourceType           SourceHarvestHarvest `const:"harvest" json:"sourceType"`
}

func (s SourceHarvest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceHarvest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceHarvest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *SourceHarvest) GetCredentials() *SourceHarvestAuthenticationMechanism {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceHarvest) GetReplicationEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ReplicationEndDate
}

func (o *SourceHarvest) GetReplicationStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ReplicationStartDate
}

func (o *SourceHarvest) GetSourceType() SourceHarvestHarvest {
	return SourceHarvestHarvestHarvest
}
