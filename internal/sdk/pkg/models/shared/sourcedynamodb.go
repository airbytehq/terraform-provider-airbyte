// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

// SourceDynamodbDynamodbRegion - The region of the Dynamodb database
type SourceDynamodbDynamodbRegion string

const (
	SourceDynamodbDynamodbRegionUnknown      SourceDynamodbDynamodbRegion = ""
	SourceDynamodbDynamodbRegionAfSouth1     SourceDynamodbDynamodbRegion = "af-south-1"
	SourceDynamodbDynamodbRegionApEast1      SourceDynamodbDynamodbRegion = "ap-east-1"
	SourceDynamodbDynamodbRegionApNortheast1 SourceDynamodbDynamodbRegion = "ap-northeast-1"
	SourceDynamodbDynamodbRegionApNortheast2 SourceDynamodbDynamodbRegion = "ap-northeast-2"
	SourceDynamodbDynamodbRegionApNortheast3 SourceDynamodbDynamodbRegion = "ap-northeast-3"
	SourceDynamodbDynamodbRegionApSouth1     SourceDynamodbDynamodbRegion = "ap-south-1"
	SourceDynamodbDynamodbRegionApSouth2     SourceDynamodbDynamodbRegion = "ap-south-2"
	SourceDynamodbDynamodbRegionApSoutheast1 SourceDynamodbDynamodbRegion = "ap-southeast-1"
	SourceDynamodbDynamodbRegionApSoutheast2 SourceDynamodbDynamodbRegion = "ap-southeast-2"
	SourceDynamodbDynamodbRegionApSoutheast3 SourceDynamodbDynamodbRegion = "ap-southeast-3"
	SourceDynamodbDynamodbRegionApSoutheast4 SourceDynamodbDynamodbRegion = "ap-southeast-4"
	SourceDynamodbDynamodbRegionCaCentral1   SourceDynamodbDynamodbRegion = "ca-central-1"
	SourceDynamodbDynamodbRegionCaWest1      SourceDynamodbDynamodbRegion = "ca-west-1"
	SourceDynamodbDynamodbRegionCnNorth1     SourceDynamodbDynamodbRegion = "cn-north-1"
	SourceDynamodbDynamodbRegionCnNorthwest1 SourceDynamodbDynamodbRegion = "cn-northwest-1"
	SourceDynamodbDynamodbRegionEuCentral1   SourceDynamodbDynamodbRegion = "eu-central-1"
	SourceDynamodbDynamodbRegionEuCentral2   SourceDynamodbDynamodbRegion = "eu-central-2"
	SourceDynamodbDynamodbRegionEuNorth1     SourceDynamodbDynamodbRegion = "eu-north-1"
	SourceDynamodbDynamodbRegionEuSouth1     SourceDynamodbDynamodbRegion = "eu-south-1"
	SourceDynamodbDynamodbRegionEuSouth2     SourceDynamodbDynamodbRegion = "eu-south-2"
	SourceDynamodbDynamodbRegionEuWest1      SourceDynamodbDynamodbRegion = "eu-west-1"
	SourceDynamodbDynamodbRegionEuWest2      SourceDynamodbDynamodbRegion = "eu-west-2"
	SourceDynamodbDynamodbRegionEuWest3      SourceDynamodbDynamodbRegion = "eu-west-3"
	SourceDynamodbDynamodbRegionIlCentral1   SourceDynamodbDynamodbRegion = "il-central-1"
	SourceDynamodbDynamodbRegionMeCentral1   SourceDynamodbDynamodbRegion = "me-central-1"
	SourceDynamodbDynamodbRegionMeSouth1     SourceDynamodbDynamodbRegion = "me-south-1"
	SourceDynamodbDynamodbRegionSaEast1      SourceDynamodbDynamodbRegion = "sa-east-1"
	SourceDynamodbDynamodbRegionUsEast1      SourceDynamodbDynamodbRegion = "us-east-1"
	SourceDynamodbDynamodbRegionUsEast2      SourceDynamodbDynamodbRegion = "us-east-2"
	SourceDynamodbDynamodbRegionUsGovEast1   SourceDynamodbDynamodbRegion = "us-gov-east-1"
	SourceDynamodbDynamodbRegionUsGovWest1   SourceDynamodbDynamodbRegion = "us-gov-west-1"
	SourceDynamodbDynamodbRegionUsWest1      SourceDynamodbDynamodbRegion = "us-west-1"
	SourceDynamodbDynamodbRegionUsWest2      SourceDynamodbDynamodbRegion = "us-west-2"
)

func (e SourceDynamodbDynamodbRegion) ToPointer() *SourceDynamodbDynamodbRegion {
	return &e
}

func (e *SourceDynamodbDynamodbRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-south-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-southeast-3":
		fallthrough
	case "ap-southeast-4":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "ca-west-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-central-2":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-south-2":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "il-central-1":
		fallthrough
	case "me-central-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		*e = SourceDynamodbDynamodbRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDynamodbDynamodbRegion: %v", v)
	}
}

type SourceDynamodbDynamodb string

const (
	SourceDynamodbDynamodbDynamodb SourceDynamodbDynamodb = "dynamodb"
)

func (e SourceDynamodbDynamodb) ToPointer() *SourceDynamodbDynamodb {
	return &e
}

func (e *SourceDynamodbDynamodb) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dynamodb":
		*e = SourceDynamodbDynamodb(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDynamodbDynamodb: %v", v)
	}
}

type SourceDynamodb struct {
	// The access key id to access Dynamodb. Airbyte requires read permissions to the database
	AccessKeyID string `json:"access_key_id"`
	// the URL of the Dynamodb database
	Endpoint *string `default:"" json:"endpoint"`
	// The region of the Dynamodb database
	Region *SourceDynamodbDynamodbRegion `default:"" json:"region"`
	// Comma separated reserved attribute names present in your tables
	ReservedAttributeNames *string `json:"reserved_attribute_names,omitempty"`
	// The corresponding secret to the access key id.
	SecretAccessKey string                 `json:"secret_access_key"`
	sourceType      SourceDynamodbDynamodb `const:"dynamodb" json:"sourceType"`
}

func (s SourceDynamodb) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceDynamodb) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceDynamodb) GetAccessKeyID() string {
	if o == nil {
		return ""
	}
	return o.AccessKeyID
}

func (o *SourceDynamodb) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *SourceDynamodb) GetRegion() *SourceDynamodbDynamodbRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceDynamodb) GetReservedAttributeNames() *string {
	if o == nil {
		return nil
	}
	return o.ReservedAttributeNames
}

func (o *SourceDynamodb) GetSecretAccessKey() string {
	if o == nil {
		return ""
	}
	return o.SecretAccessKey
}

func (o *SourceDynamodb) GetSourceType() SourceDynamodbDynamodb {
	return SourceDynamodbDynamodbDynamodb
}
