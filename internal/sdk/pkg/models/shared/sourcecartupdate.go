// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceCartUpdateSchemasAuthType string

const (
	SourceCartUpdateSchemasAuthTypeSingleStoreAccessToken SourceCartUpdateSchemasAuthType = "SINGLE_STORE_ACCESS_TOKEN"
)

func (e SourceCartUpdateSchemasAuthType) ToPointer() *SourceCartUpdateSchemasAuthType {
	return &e
}

func (e *SourceCartUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SINGLE_STORE_ACCESS_TOKEN":
		*e = SourceCartUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceCartUpdateSchemasAuthType: %v", v)
	}
}

type SingleStoreAccessToken struct {
	// Access Token for making authenticated requests.
	AccessToken string                          `json:"access_token"`
	authType    SourceCartUpdateSchemasAuthType `const:"SINGLE_STORE_ACCESS_TOKEN" json:"auth_type"`
	// The name of Cart.com Online Store. All API URLs start with https://[mystorename.com]/api/v1/, where [mystorename.com] is the domain name of your store.
	StoreName string `json:"store_name"`
}

func (s SingleStoreAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SingleStoreAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SingleStoreAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SingleStoreAccessToken) GetAuthType() SourceCartUpdateSchemasAuthType {
	return SourceCartUpdateSchemasAuthTypeSingleStoreAccessToken
}

func (o *SingleStoreAccessToken) GetStoreName() string {
	if o == nil {
		return ""
	}
	return o.StoreName
}

type SourceCartUpdateAuthType string

const (
	SourceCartUpdateAuthTypeCentralAPIRouter SourceCartUpdateAuthType = "CENTRAL_API_ROUTER"
)

func (e SourceCartUpdateAuthType) ToPointer() *SourceCartUpdateAuthType {
	return &e
}

func (e *SourceCartUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CENTRAL_API_ROUTER":
		*e = SourceCartUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceCartUpdateAuthType: %v", v)
	}
}

type CentralAPIRouter struct {
	authType SourceCartUpdateAuthType `const:"CENTRAL_API_ROUTER" json:"auth_type"`
	// You can determine a site provisioning site Id by hitting https://site.com/store/sitemonitor.aspx and reading the response param PSID
	SiteID string `json:"site_id"`
	// Enter your application's User Name
	UserName string `json:"user_name"`
	// Enter your application's User Secret
	UserSecret string `json:"user_secret"`
}

func (c CentralAPIRouter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CentralAPIRouter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *CentralAPIRouter) GetAuthType() SourceCartUpdateAuthType {
	return SourceCartUpdateAuthTypeCentralAPIRouter
}

func (o *CentralAPIRouter) GetSiteID() string {
	if o == nil {
		return ""
	}
	return o.SiteID
}

func (o *CentralAPIRouter) GetUserName() string {
	if o == nil {
		return ""
	}
	return o.UserName
}

func (o *CentralAPIRouter) GetUserSecret() string {
	if o == nil {
		return ""
	}
	return o.UserSecret
}

type SourceCartUpdateAuthorizationMethodType string

const (
	SourceCartUpdateAuthorizationMethodTypeCentralAPIRouter       SourceCartUpdateAuthorizationMethodType = "Central API Router"
	SourceCartUpdateAuthorizationMethodTypeSingleStoreAccessToken SourceCartUpdateAuthorizationMethodType = "Single Store Access Token"
)

type SourceCartUpdateAuthorizationMethod struct {
	CentralAPIRouter       *CentralAPIRouter
	SingleStoreAccessToken *SingleStoreAccessToken

	Type SourceCartUpdateAuthorizationMethodType
}

func CreateSourceCartUpdateAuthorizationMethodCentralAPIRouter(centralAPIRouter CentralAPIRouter) SourceCartUpdateAuthorizationMethod {
	typ := SourceCartUpdateAuthorizationMethodTypeCentralAPIRouter

	return SourceCartUpdateAuthorizationMethod{
		CentralAPIRouter: &centralAPIRouter,
		Type:             typ,
	}
}

func CreateSourceCartUpdateAuthorizationMethodSingleStoreAccessToken(singleStoreAccessToken SingleStoreAccessToken) SourceCartUpdateAuthorizationMethod {
	typ := SourceCartUpdateAuthorizationMethodTypeSingleStoreAccessToken

	return SourceCartUpdateAuthorizationMethod{
		SingleStoreAccessToken: &singleStoreAccessToken,
		Type:                   typ,
	}
}

func (u *SourceCartUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	singleStoreAccessToken := new(SingleStoreAccessToken)
	if err := utils.UnmarshalJSON(data, &singleStoreAccessToken, "", true, true); err == nil {
		u.SingleStoreAccessToken = singleStoreAccessToken
		u.Type = SourceCartUpdateAuthorizationMethodTypeSingleStoreAccessToken
		return nil
	}

	centralAPIRouter := new(CentralAPIRouter)
	if err := utils.UnmarshalJSON(data, &centralAPIRouter, "", true, true); err == nil {
		u.CentralAPIRouter = centralAPIRouter
		u.Type = SourceCartUpdateAuthorizationMethodTypeCentralAPIRouter
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceCartUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.CentralAPIRouter != nil {
		return utils.MarshalJSON(u.CentralAPIRouter, "", true)
	}

	if u.SingleStoreAccessToken != nil {
		return utils.MarshalJSON(u.SingleStoreAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceCartUpdate struct {
	Credentials *SourceCartUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// The date from which you'd like to replicate the data
	StartDate string `json:"start_date"`
}

func (o *SourceCartUpdate) GetCredentials() *SourceCartUpdateAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceCartUpdate) GetStartDate() string {
	if o == nil {
		return ""
	}
	return o.StartDate
}
