// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceS3UpdateFileFormatJsonlFiletype string

const (
	SourceS3UpdateFileFormatJsonlFiletypeJsonl SourceS3UpdateFileFormatJsonlFiletype = "jsonl"
)

func (e SourceS3UpdateFileFormatJsonlFiletype) ToPointer() *SourceS3UpdateFileFormatJsonlFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatJsonlFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceS3UpdateFileFormatJsonlFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatJsonlFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior - How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
type SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior string

const (
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorIgnore SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "ignore"
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorInfer  SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "infer"
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorError  SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "error"
)

func (e SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior) ToPointer() *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior {
	return &e
}

func (e *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ignore":
		fallthrough
	case "infer":
		fallthrough
	case "error":
		*e = SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior: %v", v)
	}
}

// SourceS3UpdateFileFormatJsonl - This connector uses <a href="https://arrow.apache.org/docs/python/json.html" target="_blank">PyArrow</a> for JSON Lines (jsonl) file parsing.
type SourceS3UpdateFileFormatJsonl struct {
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64                                 `json:"block_size,omitempty"`
	Filetype  *SourceS3UpdateFileFormatJsonlFiletype `json:"filetype,omitempty"`
	// Whether newline characters are allowed in JSON values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `json:"newlines_in_values,omitempty"`
	// How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
	UnexpectedFieldBehavior *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior `json:"unexpected_field_behavior,omitempty"`
}

type SourceS3UpdateFileFormatAvroFiletype string

const (
	SourceS3UpdateFileFormatAvroFiletypeAvro SourceS3UpdateFileFormatAvroFiletype = "avro"
)

func (e SourceS3UpdateFileFormatAvroFiletype) ToPointer() *SourceS3UpdateFileFormatAvroFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatAvroFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceS3UpdateFileFormatAvroFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatAvroFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatAvro - This connector utilises <a href="https://fastavro.readthedocs.io/en/latest/" target="_blank">fastavro</a> for Avro parsing.
type SourceS3UpdateFileFormatAvro struct {
	Filetype *SourceS3UpdateFileFormatAvroFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileFormatParquetFiletype string

const (
	SourceS3UpdateFileFormatParquetFiletypeParquet SourceS3UpdateFileFormatParquetFiletype = "parquet"
)

func (e SourceS3UpdateFileFormatParquetFiletype) ToPointer() *SourceS3UpdateFileFormatParquetFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatParquetFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceS3UpdateFileFormatParquetFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatParquetFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatParquet - This connector utilises <a href="https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetFile.html" target="_blank">PyArrow (Apache Arrow)</a> for Parquet parsing.
type SourceS3UpdateFileFormatParquet struct {
	// Maximum number of records per batch read from the input files. Batches may be smaller if there arenâ€™t enough rows in the file. This option can help avoid out-of-memory errors if your data is particularly wide.
	BatchSize *int64 `json:"batch_size,omitempty"`
	// Perform read buffering when deserializing individual column chunks. By default every group column will be loaded fully to memory. This option can help avoid out-of-memory errors if your data is particularly wide.
	BufferSize *int64 `json:"buffer_size,omitempty"`
	// If you only want to sync a subset of the columns from the file(s), add the columns you want here as a comma-delimited list. Leave it empty to sync all columns.
	Columns  []string                                 `json:"columns,omitempty"`
	Filetype *SourceS3UpdateFileFormatParquetFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileFormatCSVFiletype string

const (
	SourceS3UpdateFileFormatCSVFiletypeCsv SourceS3UpdateFileFormatCSVFiletype = "csv"
)

func (e SourceS3UpdateFileFormatCSVFiletype) ToPointer() *SourceS3UpdateFileFormatCSVFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatCSVFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceS3UpdateFileFormatCSVFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatCSVFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatCSV - This connector utilises <a href="https: // arrow.apache.org/docs/python/generated/pyarrow.csv.open_csv.html" target="_blank">PyArrow (Apache Arrow)</a> for CSV parsing.
type SourceS3UpdateFileFormatCSV struct {
	// Optionally add a valid JSON string here to provide additional options to the csv reader. Mappings must correspond to options <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ConvertOptions.html#pyarrow.csv.ConvertOptions" target="_blank">detailed here</a>. 'column_types' is used internally to handle schema so overriding that would likely cause problems.
	AdditionalReaderOptions *string `json:"additional_reader_options,omitempty"`
	// Optionally add a valid JSON string here to provide additional <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ReadOptions.html#pyarrow.csv.ReadOptions" target="_blank">Pyarrow ReadOptions</a>. Specify 'column_names' here if your CSV doesn't have header, or if you want to use custom column names. 'block_size' and 'encoding' are already used above, specify them again here will override the values above.
	AdvancedOptions *string `json:"advanced_options,omitempty"`
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64 `json:"block_size,omitempty"`
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `json:"delimiter,omitempty"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `json:"double_quote,omitempty"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `json:"encoding,omitempty"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string                              `json:"escape_char,omitempty"`
	Filetype   *SourceS3UpdateFileFormatCSVFiletype `json:"filetype,omitempty"`
	// Configures whether a schema for the source should be inferred from the current data or not. If set to false and a custom schema is set, then the manually enforced schema is used. If a schema is not manually set, and this is set to false, then all fields will be read as strings
	InferDatatypes *bool `json:"infer_datatypes,omitempty"`
	// Whether newline characters are allowed in CSV values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `json:"newlines_in_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `json:"quote_char,omitempty"`
}

type SourceS3UpdateFileFormatType string

const (
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV     SourceS3UpdateFileFormatType = "source-s3-update_File Format_CSV"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet SourceS3UpdateFileFormatType = "source-s3-update_File Format_Parquet"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro    SourceS3UpdateFileFormatType = "source-s3-update_File Format_Avro"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl   SourceS3UpdateFileFormatType = "source-s3-update_File Format_Jsonl"
)

type SourceS3UpdateFileFormat struct {
	SourceS3UpdateFileFormatCSV     *SourceS3UpdateFileFormatCSV
	SourceS3UpdateFileFormatParquet *SourceS3UpdateFileFormatParquet
	SourceS3UpdateFileFormatAvro    *SourceS3UpdateFileFormatAvro
	SourceS3UpdateFileFormatJsonl   *SourceS3UpdateFileFormatJsonl

	Type SourceS3UpdateFileFormatType
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatCSV(sourceS3UpdateFileFormatCSV SourceS3UpdateFileFormatCSV) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatCSV: &sourceS3UpdateFileFormatCSV,
		Type:                        typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatParquet(sourceS3UpdateFileFormatParquet SourceS3UpdateFileFormatParquet) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatParquet: &sourceS3UpdateFileFormatParquet,
		Type:                            typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatAvro(sourceS3UpdateFileFormatAvro SourceS3UpdateFileFormatAvro) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatAvro: &sourceS3UpdateFileFormatAvro,
		Type:                         typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatJsonl(sourceS3UpdateFileFormatJsonl SourceS3UpdateFileFormatJsonl) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatJsonl: &sourceS3UpdateFileFormatJsonl,
		Type:                          typ,
	}
}

func (u *SourceS3UpdateFileFormat) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceS3UpdateFileFormatAvro := new(SourceS3UpdateFileFormatAvro)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatAvro); err == nil {
		u.SourceS3UpdateFileFormatAvro = sourceS3UpdateFileFormatAvro
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro
		return nil
	}

	sourceS3UpdateFileFormatParquet := new(SourceS3UpdateFileFormatParquet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatParquet); err == nil {
		u.SourceS3UpdateFileFormatParquet = sourceS3UpdateFileFormatParquet
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet
		return nil
	}

	sourceS3UpdateFileFormatJsonl := new(SourceS3UpdateFileFormatJsonl)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatJsonl); err == nil {
		u.SourceS3UpdateFileFormatJsonl = sourceS3UpdateFileFormatJsonl
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl
		return nil
	}

	sourceS3UpdateFileFormatCSV := new(SourceS3UpdateFileFormatCSV)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatCSV); err == nil {
		u.SourceS3UpdateFileFormatCSV = sourceS3UpdateFileFormatCSV
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3UpdateFileFormat) MarshalJSON() ([]byte, error) {
	if u.SourceS3UpdateFileFormatAvro != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatAvro)
	}

	if u.SourceS3UpdateFileFormatParquet != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatParquet)
	}

	if u.SourceS3UpdateFileFormatJsonl != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatJsonl)
	}

	if u.SourceS3UpdateFileFormatCSV != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatCSV)
	}

	return nil, nil
}

// SourceS3UpdateS3AmazonWebServices - Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
type SourceS3UpdateS3AmazonWebServices struct {
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Name of the S3 bucket where the file(s) exist.
	Bucket *string `json:"bucket,omitempty"`
	// Endpoint to an S3 compatible service. Leave empty to use AWS.
	Endpoint *string `json:"endpoint,omitempty"`
	// By providing a path-like prefix (e.g. myFolder/thisTable/) under which all the relevant files sit, we can optimize finding these in S3. This is optional but recommended if your bucket contains many folders/files which you don't need to replicate.
	PathPrefix *string `json:"path_prefix,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype string

const (
	SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletypeParquet SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype = "parquet"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatParquetFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3UpdateFileBasedStreamConfigFormatParquetFormat struct {
	// Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended.
	DecimalAsFloat *bool                                                           `json:"decimal_as_float,omitempty"`
	Filetype       *SourceS3UpdateFileBasedStreamConfigFormatParquetFormatFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype string

const (
	SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletypeJsonl SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype = "jsonl"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat struct {
	Filetype *SourceS3UpdateFileBasedStreamConfigFormatJsonlFormatFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletypeCsv SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype = "csv"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype: %v", v)
	}
}

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionTypeUserProvided SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType = "User Provided"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User Provided":
		*e = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided struct {
	// The column names that will be used while emitting the CSV records
	ColumnNames          []string                                                                                               `json:"column_names"`
	HeaderDefinitionType *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvidedHeaderDefinitionType `json:"header_definition_type,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionTypeAutogenerated SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType = "Autogenerated"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Autogenerated":
		*e = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated struct {
	HeaderDefinitionType *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogeneratedHeaderDefinitionType `json:"header_definition_type,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionTypeFromCsv SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType = "From CSV"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "From CSV":
		*e = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV struct {
	HeaderDefinitionType *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSVHeaderDefinitionType `json:"header_definition_type,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV       SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionType = "source-s3-update_FileBasedStreamConfig_Format_CSV Format_CSV Header Definition_From CSV"
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionType = "source-s3-update_FileBasedStreamConfig_Format_CSV Format_CSV Header Definition_Autogenerated"
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided  SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionType = "source-s3-update_FileBasedStreamConfig_Format_CSV Format_CSV Header Definition_User Provided"
)

type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition struct {
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV       *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided  *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided

	Type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionType
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV(sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV) SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition {
	typ := SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV

	return SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition{
		SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV: &sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV,
		Type: typ,
	}
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated(sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated) SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition {
	typ := SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated

	return SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition{
		SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated: &sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated,
		Type: typ,
	}
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided(sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided) SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition {
	typ := SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided

	return SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition{
		SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided: &sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided,
		Type: typ,
	}
}

func (u *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV := new(SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV = sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV
		return nil
	}

	sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated := new(SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated = sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated
		return nil
	}

	sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided := new(SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided = sourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition) MarshalJSON() ([]byte, error) {
	if u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionFromCSV)
	}

	if u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionAutogenerated)
	}

	if u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinitionUserProvided)
	}

	return nil, nil
}

// SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType - How to infer the types of the columns. If none, inference default to strings.
type SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceTypeNone               SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType = "None"
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceTypePrimitiveTypesOnly SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType = "Primitive Types Only"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Primitive Types Only":
		*e = SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatCSVFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3UpdateFileBasedStreamConfigFormatCSVFormat struct {
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `json:"delimiter,omitempty"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `json:"double_quote,omitempty"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `json:"encoding,omitempty"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string `json:"escape_char,omitempty"`
	// A set of case-sensitive strings that should be interpreted as false values.
	FalseValues []string                                                    `json:"false_values,omitempty"`
	Filetype    *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatFiletype `json:"filetype,omitempty"`
	// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
	HeaderDefinition *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatCSVHeaderDefinition `json:"header_definition,omitempty"`
	// How to infer the types of the columns. If none, inference default to strings.
	InferenceType *SourceS3UpdateFileBasedStreamConfigFormatCSVFormatInferenceType `json:"inference_type,omitempty"`
	// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
	NullValues []string `json:"null_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `json:"quote_char,omitempty"`
	// The number of rows to skip after the header row.
	SkipRowsAfterHeader *int64 `json:"skip_rows_after_header,omitempty"`
	// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
	SkipRowsBeforeHeader *int64 `json:"skip_rows_before_header,omitempty"`
	// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
	StringsCanBeNull *bool `json:"strings_can_be_null,omitempty"`
	// A set of case-sensitive strings that should be interpreted as true values.
	TrueValues []string `json:"true_values,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype string

const (
	SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletypeAvro SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype = "avro"
)

func (e SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype) ToPointer() *SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype: %v", v)
	}
}

// SourceS3UpdateFileBasedStreamConfigFormatAvroFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceS3UpdateFileBasedStreamConfigFormatAvroFormat struct {
	// Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers.
	DoubleAsString *bool                                                        `json:"double_as_string,omitempty"`
	Filetype       *SourceS3UpdateFileBasedStreamConfigFormatAvroFormatFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileBasedStreamConfigFormatType string

const (
	SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatAvroFormat    SourceS3UpdateFileBasedStreamConfigFormatType = "source-s3-update_FileBasedStreamConfig_Format_Avro Format"
	SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormat     SourceS3UpdateFileBasedStreamConfigFormatType = "source-s3-update_FileBasedStreamConfig_Format_CSV Format"
	SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatJsonlFormat   SourceS3UpdateFileBasedStreamConfigFormatType = "source-s3-update_FileBasedStreamConfig_Format_Jsonl Format"
	SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatParquetFormat SourceS3UpdateFileBasedStreamConfigFormatType = "source-s3-update_FileBasedStreamConfig_Format_Parquet Format"
)

type SourceS3UpdateFileBasedStreamConfigFormat struct {
	SourceS3UpdateFileBasedStreamConfigFormatAvroFormat    *SourceS3UpdateFileBasedStreamConfigFormatAvroFormat
	SourceS3UpdateFileBasedStreamConfigFormatCSVFormat     *SourceS3UpdateFileBasedStreamConfigFormatCSVFormat
	SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat   *SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat
	SourceS3UpdateFileBasedStreamConfigFormatParquetFormat *SourceS3UpdateFileBasedStreamConfigFormatParquetFormat

	Type SourceS3UpdateFileBasedStreamConfigFormatType
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatSourceS3UpdateFileBasedStreamConfigFormatAvroFormat(sourceS3UpdateFileBasedStreamConfigFormatAvroFormat SourceS3UpdateFileBasedStreamConfigFormatAvroFormat) SourceS3UpdateFileBasedStreamConfigFormat {
	typ := SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatAvroFormat

	return SourceS3UpdateFileBasedStreamConfigFormat{
		SourceS3UpdateFileBasedStreamConfigFormatAvroFormat: &sourceS3UpdateFileBasedStreamConfigFormatAvroFormat,
		Type: typ,
	}
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatSourceS3UpdateFileBasedStreamConfigFormatCSVFormat(sourceS3UpdateFileBasedStreamConfigFormatCSVFormat SourceS3UpdateFileBasedStreamConfigFormatCSVFormat) SourceS3UpdateFileBasedStreamConfigFormat {
	typ := SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormat

	return SourceS3UpdateFileBasedStreamConfigFormat{
		SourceS3UpdateFileBasedStreamConfigFormatCSVFormat: &sourceS3UpdateFileBasedStreamConfigFormatCSVFormat,
		Type: typ,
	}
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatSourceS3UpdateFileBasedStreamConfigFormatJsonlFormat(sourceS3UpdateFileBasedStreamConfigFormatJsonlFormat SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat) SourceS3UpdateFileBasedStreamConfigFormat {
	typ := SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatJsonlFormat

	return SourceS3UpdateFileBasedStreamConfigFormat{
		SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat: &sourceS3UpdateFileBasedStreamConfigFormatJsonlFormat,
		Type: typ,
	}
}

func CreateSourceS3UpdateFileBasedStreamConfigFormatSourceS3UpdateFileBasedStreamConfigFormatParquetFormat(sourceS3UpdateFileBasedStreamConfigFormatParquetFormat SourceS3UpdateFileBasedStreamConfigFormatParquetFormat) SourceS3UpdateFileBasedStreamConfigFormat {
	typ := SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatParquetFormat

	return SourceS3UpdateFileBasedStreamConfigFormat{
		SourceS3UpdateFileBasedStreamConfigFormatParquetFormat: &sourceS3UpdateFileBasedStreamConfigFormatParquetFormat,
		Type: typ,
	}
}

func (u *SourceS3UpdateFileBasedStreamConfigFormat) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceS3UpdateFileBasedStreamConfigFormatJsonlFormat := new(SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatJsonlFormat); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat = sourceS3UpdateFileBasedStreamConfigFormatJsonlFormat
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatJsonlFormat
		return nil
	}

	sourceS3UpdateFileBasedStreamConfigFormatAvroFormat := new(SourceS3UpdateFileBasedStreamConfigFormatAvroFormat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatAvroFormat); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatAvroFormat = sourceS3UpdateFileBasedStreamConfigFormatAvroFormat
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatAvroFormat
		return nil
	}

	sourceS3UpdateFileBasedStreamConfigFormatParquetFormat := new(SourceS3UpdateFileBasedStreamConfigFormatParquetFormat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatParquetFormat); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatParquetFormat = sourceS3UpdateFileBasedStreamConfigFormatParquetFormat
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatParquetFormat
		return nil
	}

	sourceS3UpdateFileBasedStreamConfigFormatCSVFormat := new(SourceS3UpdateFileBasedStreamConfigFormatCSVFormat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileBasedStreamConfigFormatCSVFormat); err == nil {
		u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormat = sourceS3UpdateFileBasedStreamConfigFormatCSVFormat
		u.Type = SourceS3UpdateFileBasedStreamConfigFormatTypeSourceS3UpdateFileBasedStreamConfigFormatCSVFormat
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3UpdateFileBasedStreamConfigFormat) MarshalJSON() ([]byte, error) {
	if u.SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatJsonlFormat)
	}

	if u.SourceS3UpdateFileBasedStreamConfigFormatAvroFormat != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatAvroFormat)
	}

	if u.SourceS3UpdateFileBasedStreamConfigFormatParquetFormat != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatParquetFormat)
	}

	if u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormat != nil {
		return json.Marshal(u.SourceS3UpdateFileBasedStreamConfigFormatCSVFormat)
	}

	return nil, nil
}

// SourceS3UpdateFileBasedStreamConfigValidationPolicy - The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
type SourceS3UpdateFileBasedStreamConfigValidationPolicy string

const (
	SourceS3UpdateFileBasedStreamConfigValidationPolicyEmitRecord      SourceS3UpdateFileBasedStreamConfigValidationPolicy = "Emit Record"
	SourceS3UpdateFileBasedStreamConfigValidationPolicySkipRecord      SourceS3UpdateFileBasedStreamConfigValidationPolicy = "Skip Record"
	SourceS3UpdateFileBasedStreamConfigValidationPolicyWaitForDiscover SourceS3UpdateFileBasedStreamConfigValidationPolicy = "Wait for Discover"
)

func (e SourceS3UpdateFileBasedStreamConfigValidationPolicy) ToPointer() *SourceS3UpdateFileBasedStreamConfigValidationPolicy {
	return &e
}

func (e *SourceS3UpdateFileBasedStreamConfigValidationPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Emit Record":
		fallthrough
	case "Skip Record":
		fallthrough
	case "Wait for Discover":
		*e = SourceS3UpdateFileBasedStreamConfigValidationPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileBasedStreamConfigValidationPolicy: %v", v)
	}
}

type SourceS3UpdateFileBasedStreamConfig struct {
	// When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.
	DaysToSyncIfHistoryIsFull *int64 `json:"days_to_sync_if_history_is_full,omitempty"`
	// The data file type that is being extracted for a stream.
	FileType string `json:"file_type"`
	// The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
	Format *SourceS3UpdateFileBasedStreamConfigFormat `json:"format,omitempty"`
	// The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
	Globs []string `json:"globs,omitempty"`
	// The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
	InputSchema *string `json:"input_schema,omitempty"`
	// The path prefix configured in v3 versions of the S3 connector. This option is deprecated in favor of a single glob.
	LegacyPrefix *string `json:"legacy_prefix,omitempty"`
	// The name of the stream.
	Name string `json:"name"`
	// The column or columns (for a composite key) that serves as the unique identifier of a record.
	PrimaryKey *string `json:"primary_key,omitempty"`
	// When enabled, syncs will not validate or structure records against the stream's schema.
	Schemaless *bool `json:"schemaless,omitempty"`
	// The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
	ValidationPolicy *SourceS3UpdateFileBasedStreamConfigValidationPolicy `json:"validation_policy,omitempty"`
}

// SourceS3Update - NOTE: When this Spec is changed, legacy_config_transformer.py must also be modified to uptake the changes
// because it is responsible for converting legacy S3 v3 configs into v4 configs using the File-Based CDK.
type SourceS3Update struct {
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Name of the S3 bucket where the file(s) exist.
	Bucket string `json:"bucket"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.name instead. The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.
	Dataset *string `json:"dataset,omitempty"`
	// Endpoint to an S3 compatible service. Leave empty to use AWS.
	Endpoint *string `json:"endpoint,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.format instead. The format of the files you'd like to replicate
	Format *SourceS3UpdateFileFormat `json:"format,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.globs instead. A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See <a href="https://facelessuser.github.io/wcmatch/glob/" target="_blank">this page</a> to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern <strong>**</strong> to pick up all files.
	PathPattern *string `json:"path_pattern,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use bucket, aws_access_key_id, aws_secret_access_key and endpoint instead. Use this to load files from S3 or S3-compatible services
	Provider *SourceS3UpdateS3AmazonWebServices `json:"provider,omitempty"`
	// Deprecated and will be removed soon. Please do not use this field anymore and use streams.input_schema instead. Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of <strong>{ "column" : "type" }</strong>, where types are valid <a href="https://json-schema.org/understanding-json-schema/reference/type.html" target="_blank">JSON Schema datatypes</a>. Leave as {} to auto-infer the schema.
	Schema *string `json:"schema,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
	Streams []SourceS3UpdateFileBasedStreamConfig `json:"streams"`
}
