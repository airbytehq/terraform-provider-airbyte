// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceTrustpilotAuthorizationMethodAPIKeyAuthType string

const (
	SourceTrustpilotAuthorizationMethodAPIKeyAuthTypeApikey SourceTrustpilotAuthorizationMethodAPIKeyAuthType = "apikey"
)

func (e SourceTrustpilotAuthorizationMethodAPIKeyAuthType) ToPointer() *SourceTrustpilotAuthorizationMethodAPIKeyAuthType {
	return &e
}

func (e *SourceTrustpilotAuthorizationMethodAPIKeyAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apikey":
		*e = SourceTrustpilotAuthorizationMethodAPIKeyAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTrustpilotAuthorizationMethodAPIKeyAuthType: %v", v)
	}
}

// SourceTrustpilotAuthorizationMethodAPIKey - The API key authentication method gives you access to only the streams which are part of the Public API. When you want to get streams available via the Consumer API (e.g. the private reviews) you need to use authentication method OAuth 2.0.
type SourceTrustpilotAuthorizationMethodAPIKey struct {
	AuthType *SourceTrustpilotAuthorizationMethodAPIKeyAuthType `json:"auth_type,omitempty"`
	// The API key of the Trustpilot API application.
	ClientID string `json:"client_id"`
}

type SourceTrustpilotAuthorizationMethodOAuth20AuthType string

const (
	SourceTrustpilotAuthorizationMethodOAuth20AuthTypeOauth20 SourceTrustpilotAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceTrustpilotAuthorizationMethodOAuth20AuthType) ToPointer() *SourceTrustpilotAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceTrustpilotAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceTrustpilotAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTrustpilotAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceTrustpilotAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                              `json:"access_token"`
	AuthType    *SourceTrustpilotAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// The API key of the Trustpilot API application. (represents the OAuth Client ID)
	ClientID string `json:"client_id"`
	// The Secret of the Trustpilot API application. (represents the OAuth Client Secret)
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

type SourceTrustpilotAuthorizationMethodType string

const (
	SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodOAuth20 SourceTrustpilotAuthorizationMethodType = "source-trustpilot_Authorization Method_OAuth 2.0"
	SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodAPIKey  SourceTrustpilotAuthorizationMethodType = "source-trustpilot_Authorization Method_API Key"
)

type SourceTrustpilotAuthorizationMethod struct {
	SourceTrustpilotAuthorizationMethodOAuth20 *SourceTrustpilotAuthorizationMethodOAuth20
	SourceTrustpilotAuthorizationMethodAPIKey  *SourceTrustpilotAuthorizationMethodAPIKey

	Type SourceTrustpilotAuthorizationMethodType
}

func CreateSourceTrustpilotAuthorizationMethodSourceTrustpilotAuthorizationMethodOAuth20(sourceTrustpilotAuthorizationMethodOAuth20 SourceTrustpilotAuthorizationMethodOAuth20) SourceTrustpilotAuthorizationMethod {
	typ := SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodOAuth20

	return SourceTrustpilotAuthorizationMethod{
		SourceTrustpilotAuthorizationMethodOAuth20: &sourceTrustpilotAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceTrustpilotAuthorizationMethodSourceTrustpilotAuthorizationMethodAPIKey(sourceTrustpilotAuthorizationMethodAPIKey SourceTrustpilotAuthorizationMethodAPIKey) SourceTrustpilotAuthorizationMethod {
	typ := SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodAPIKey

	return SourceTrustpilotAuthorizationMethod{
		SourceTrustpilotAuthorizationMethodAPIKey: &sourceTrustpilotAuthorizationMethodAPIKey,
		Type: typ,
	}
}

func (u *SourceTrustpilotAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceTrustpilotAuthorizationMethodAPIKey := new(SourceTrustpilotAuthorizationMethodAPIKey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrustpilotAuthorizationMethodAPIKey); err == nil {
		u.SourceTrustpilotAuthorizationMethodAPIKey = sourceTrustpilotAuthorizationMethodAPIKey
		u.Type = SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodAPIKey
		return nil
	}

	sourceTrustpilotAuthorizationMethodOAuth20 := new(SourceTrustpilotAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrustpilotAuthorizationMethodOAuth20); err == nil {
		u.SourceTrustpilotAuthorizationMethodOAuth20 = sourceTrustpilotAuthorizationMethodOAuth20
		u.Type = SourceTrustpilotAuthorizationMethodTypeSourceTrustpilotAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceTrustpilotAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceTrustpilotAuthorizationMethodAPIKey != nil {
		return json.Marshal(u.SourceTrustpilotAuthorizationMethodAPIKey)
	}

	if u.SourceTrustpilotAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceTrustpilotAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceTrustpilotTrustpilot string

const (
	SourceTrustpilotTrustpilotTrustpilot SourceTrustpilotTrustpilot = "trustpilot"
)

func (e SourceTrustpilotTrustpilot) ToPointer() *SourceTrustpilotTrustpilot {
	return &e
}

func (e *SourceTrustpilotTrustpilot) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trustpilot":
		*e = SourceTrustpilotTrustpilot(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTrustpilotTrustpilot: %v", v)
	}
}

type SourceTrustpilot struct {
	// The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
	BusinessUnits []string                            `json:"business_units"`
	Credentials   SourceTrustpilotAuthorizationMethod `json:"credentials"`
	SourceType    SourceTrustpilotTrustpilot          `json:"sourceType"`
	// For streams with sync. method incremental the start date time to be used
	StartDate string `json:"start_date"`
}
