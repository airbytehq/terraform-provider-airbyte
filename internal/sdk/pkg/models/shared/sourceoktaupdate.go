// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceOktaUpdateSchemasAuthType string

const (
	SourceOktaUpdateSchemasAuthTypeAPIToken SourceOktaUpdateSchemasAuthType = "api_token"
)

func (e SourceOktaUpdateSchemasAuthType) ToPointer() *SourceOktaUpdateSchemasAuthType {
	return &e
}

func (e *SourceOktaUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceOktaUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaUpdateSchemasAuthType: %v", v)
	}
}

type SourceOktaUpdateAPIToken struct {
	// An Okta token. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to generate it.
	APIToken string                          `json:"api_token"`
	authType SourceOktaUpdateSchemasAuthType `const:"api_token" json:"auth_type"`
}

func (s SourceOktaUpdateAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOktaUpdateAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOktaUpdateAPIToken) GetAPIToken() string {
	if o == nil {
		return ""
	}
	return o.APIToken
}

func (o *SourceOktaUpdateAPIToken) GetAuthType() SourceOktaUpdateSchemasAuthType {
	return SourceOktaUpdateSchemasAuthTypeAPIToken
}

type SourceOktaUpdateAuthType string

const (
	SourceOktaUpdateAuthTypeOauth20 SourceOktaUpdateAuthType = "oauth2.0"
)

func (e SourceOktaUpdateAuthType) ToPointer() *SourceOktaUpdateAuthType {
	return &e
}

func (e *SourceOktaUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceOktaUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaUpdateAuthType: %v", v)
	}
}

type SourceOktaUpdateOAuth20 struct {
	authType SourceOktaUpdateAuthType `const:"oauth2.0" json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

func (s SourceOktaUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceOktaUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceOktaUpdateOAuth20) GetAuthType() SourceOktaUpdateAuthType {
	return SourceOktaUpdateAuthTypeOauth20
}

func (o *SourceOktaUpdateOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceOktaUpdateOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceOktaUpdateOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourceOktaUpdateAuthorizationMethodType string

const (
	SourceOktaUpdateAuthorizationMethodTypeOAuth20  SourceOktaUpdateAuthorizationMethodType = "OAuth20"
	SourceOktaUpdateAuthorizationMethodTypeAPIToken SourceOktaUpdateAuthorizationMethodType = "APIToken"
)

type SourceOktaUpdateAuthorizationMethod struct {
	OAuth20  *SourceOktaUpdateOAuth20
	APIToken *SourceOktaUpdateAPIToken

	Type SourceOktaUpdateAuthorizationMethodType
}

func CreateSourceOktaUpdateAuthorizationMethodOAuth20(oAuth20 SourceOktaUpdateOAuth20) SourceOktaUpdateAuthorizationMethod {
	typ := SourceOktaUpdateAuthorizationMethodTypeOAuth20

	return SourceOktaUpdateAuthorizationMethod{
		OAuth20: &oAuth20,
		Type:    typ,
	}
}

func CreateSourceOktaUpdateAuthorizationMethodAPIToken(apiToken SourceOktaUpdateAPIToken) SourceOktaUpdateAuthorizationMethod {
	typ := SourceOktaUpdateAuthorizationMethodTypeAPIToken

	return SourceOktaUpdateAuthorizationMethod{
		APIToken: &apiToken,
		Type:     typ,
	}
}

func (u *SourceOktaUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	apiToken := new(SourceOktaUpdateAPIToken)
	if err := utils.UnmarshalJSON(data, &apiToken, "", true, true); err == nil {
		u.APIToken = apiToken
		u.Type = SourceOktaUpdateAuthorizationMethodTypeAPIToken
		return nil
	}

	oAuth20 := new(SourceOktaUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &oAuth20, "", true, true); err == nil {
		u.OAuth20 = oAuth20
		u.Type = SourceOktaUpdateAuthorizationMethodTypeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceOktaUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.OAuth20 != nil {
		return utils.MarshalJSON(u.OAuth20, "", true)
	}

	if u.APIToken != nil {
		return utils.MarshalJSON(u.APIToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceOktaUpdate struct {
	Credentials *SourceOktaUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// The Okta domain. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to find it.
	Domain *string `json:"domain,omitempty"`
	// UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.
	StartDate *string `json:"start_date,omitempty"`
}

func (o *SourceOktaUpdate) GetCredentials() *SourceOktaUpdateAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceOktaUpdate) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *SourceOktaUpdate) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}
