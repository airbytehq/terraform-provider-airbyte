// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceOktaUpdateAuthorizationMethodAPITokenAuthType string

const (
	SourceOktaUpdateAuthorizationMethodAPITokenAuthTypeAPIToken SourceOktaUpdateAuthorizationMethodAPITokenAuthType = "api_token"
)

func (e SourceOktaUpdateAuthorizationMethodAPITokenAuthType) ToPointer() *SourceOktaUpdateAuthorizationMethodAPITokenAuthType {
	return &e
}

func (e *SourceOktaUpdateAuthorizationMethodAPITokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceOktaUpdateAuthorizationMethodAPITokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaUpdateAuthorizationMethodAPITokenAuthType: %v", v)
	}
}

type SourceOktaUpdateAuthorizationMethodAPIToken struct {
	// An Okta token. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to generate it.
	APIToken string                                              `json:"api_token"`
	AuthType SourceOktaUpdateAuthorizationMethodAPITokenAuthType `json:"auth_type"`
}

type SourceOktaUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceOktaUpdateAuthorizationMethodOAuth20AuthTypeOauth20 SourceOktaUpdateAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceOktaUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceOktaUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceOktaUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceOktaUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOktaUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceOktaUpdateAuthorizationMethodOAuth20 struct {
	AuthType SourceOktaUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

type SourceOktaUpdateAuthorizationMethodType string

const (
	SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodOAuth20  SourceOktaUpdateAuthorizationMethodType = "source-okta-update_Authorization Method_OAuth2.0"
	SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodAPIToken SourceOktaUpdateAuthorizationMethodType = "source-okta-update_Authorization Method_API Token"
)

type SourceOktaUpdateAuthorizationMethod struct {
	SourceOktaUpdateAuthorizationMethodOAuth20  *SourceOktaUpdateAuthorizationMethodOAuth20
	SourceOktaUpdateAuthorizationMethodAPIToken *SourceOktaUpdateAuthorizationMethodAPIToken

	Type SourceOktaUpdateAuthorizationMethodType
}

func CreateSourceOktaUpdateAuthorizationMethodSourceOktaUpdateAuthorizationMethodOAuth20(sourceOktaUpdateAuthorizationMethodOAuth20 SourceOktaUpdateAuthorizationMethodOAuth20) SourceOktaUpdateAuthorizationMethod {
	typ := SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodOAuth20

	return SourceOktaUpdateAuthorizationMethod{
		SourceOktaUpdateAuthorizationMethodOAuth20: &sourceOktaUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceOktaUpdateAuthorizationMethodSourceOktaUpdateAuthorizationMethodAPIToken(sourceOktaUpdateAuthorizationMethodAPIToken SourceOktaUpdateAuthorizationMethodAPIToken) SourceOktaUpdateAuthorizationMethod {
	typ := SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodAPIToken

	return SourceOktaUpdateAuthorizationMethod{
		SourceOktaUpdateAuthorizationMethodAPIToken: &sourceOktaUpdateAuthorizationMethodAPIToken,
		Type: typ,
	}
}

func (u *SourceOktaUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceOktaUpdateAuthorizationMethodAPIToken := new(SourceOktaUpdateAuthorizationMethodAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOktaUpdateAuthorizationMethodAPIToken); err == nil {
		u.SourceOktaUpdateAuthorizationMethodAPIToken = sourceOktaUpdateAuthorizationMethodAPIToken
		u.Type = SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodAPIToken
		return nil
	}

	sourceOktaUpdateAuthorizationMethodOAuth20 := new(SourceOktaUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOktaUpdateAuthorizationMethodOAuth20); err == nil {
		u.SourceOktaUpdateAuthorizationMethodOAuth20 = sourceOktaUpdateAuthorizationMethodOAuth20
		u.Type = SourceOktaUpdateAuthorizationMethodTypeSourceOktaUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceOktaUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceOktaUpdateAuthorizationMethodAPIToken != nil {
		return json.Marshal(u.SourceOktaUpdateAuthorizationMethodAPIToken)
	}

	if u.SourceOktaUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceOktaUpdateAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceOktaUpdate struct {
	Credentials *SourceOktaUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// The Okta domain. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to find it.
	Domain *string `json:"domain,omitempty"`
	// UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.
	StartDate *string `json:"start_date,omitempty"`
}
