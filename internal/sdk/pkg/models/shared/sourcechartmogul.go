// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
	"time"
)

// SourceChartmogulInterval - Some APIs such as <a href="https://dev.chartmogul.com/reference/endpoint-overview-metrics-api">Metrics</a> require intervals to cluster data.
type SourceChartmogulInterval string

const (
	SourceChartmogulIntervalDay     SourceChartmogulInterval = "day"
	SourceChartmogulIntervalWeek    SourceChartmogulInterval = "week"
	SourceChartmogulIntervalMonth   SourceChartmogulInterval = "month"
	SourceChartmogulIntervalQuarter SourceChartmogulInterval = "quarter"
)

func (e SourceChartmogulInterval) ToPointer() *SourceChartmogulInterval {
	return &e
}

func (e *SourceChartmogulInterval) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "day":
		fallthrough
	case "week":
		fallthrough
	case "month":
		fallthrough
	case "quarter":
		*e = SourceChartmogulInterval(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceChartmogulInterval: %v", v)
	}
}

type SourceChartmogulChartmogul string

const (
	SourceChartmogulChartmogulChartmogul SourceChartmogulChartmogul = "chartmogul"
)

func (e SourceChartmogulChartmogul) ToPointer() *SourceChartmogulChartmogul {
	return &e
}

func (e *SourceChartmogulChartmogul) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chartmogul":
		*e = SourceChartmogulChartmogul(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceChartmogulChartmogul: %v", v)
	}
}

type SourceChartmogul struct {
	// Your Chartmogul API key. See <a href="https://help.chartmogul.com/hc/en-us/articles/4407796325906-Creating-and-Managing-API-keys#creating-an-api-key"> the docs </a> for info on how to obtain this.
	APIKey string `json:"api_key"`
	// Some APIs such as <a href="https://dev.chartmogul.com/reference/endpoint-overview-metrics-api">Metrics</a> require intervals to cluster data.
	Interval   *SourceChartmogulInterval  `default:"month" json:"interval"`
	sourceType SourceChartmogulChartmogul `const:"chartmogul" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. When feasible, any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceChartmogul) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceChartmogul) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceChartmogul) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourceChartmogul) GetInterval() *SourceChartmogulInterval {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *SourceChartmogul) GetSourceType() SourceChartmogulChartmogul {
	return SourceChartmogulChartmogulChartmogul
}

func (o *SourceChartmogul) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
