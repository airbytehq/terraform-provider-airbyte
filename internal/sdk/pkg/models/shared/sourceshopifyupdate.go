// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod string

const (
	SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethodAPIPassword SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod = "api_password"
)

func (e SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod) ToPointer() *SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod {
	return &e
}

func (e *SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_password":
		*e = SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod: %v", v)
	}
}

// SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword - API Password Auth
type SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword struct {
	// The API Password for your private application in the `Shopify` store.
	APIPassword string                                                             `json:"api_password"`
	authMethod  SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod `const:"api_password" json:"auth_method"`
}

func (s SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword) GetAPIPassword() string {
	if o == nil {
		return ""
	}
	return o.APIPassword
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword) GetAuthMethod() SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethod {
	return SourceShopifyUpdateShopifyAuthorizationMethodAPIPasswordAuthMethodAPIPassword
}

type SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod string

const (
	SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethodOauth20 SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod = "oauth2.0"
)

func (e SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod) ToPointer() *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod {
	return &e
}

func (e *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod: %v", v)
	}
}

// SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 - OAuth2.0
type SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 struct {
	// The Access Token for making authenticated requests.
	AccessToken *string                                                        `json:"access_token,omitempty"`
	authMethod  SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of the Shopify developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of the Shopify developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) GetAuthMethod() SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethod {
	return SourceShopifyUpdateShopifyAuthorizationMethodOAuth20AuthMethodOauth20
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type SourceShopifyUpdateShopifyAuthorizationMethodType string

const (
	SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodOAuth20     SourceShopifyUpdateShopifyAuthorizationMethodType = "source-shopify-update_Shopify Authorization Method_OAuth2.0"
	SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodAPIPassword SourceShopifyUpdateShopifyAuthorizationMethodType = "source-shopify-update_Shopify Authorization Method_API Password"
)

type SourceShopifyUpdateShopifyAuthorizationMethod struct {
	SourceShopifyUpdateShopifyAuthorizationMethodOAuth20     *SourceShopifyUpdateShopifyAuthorizationMethodOAuth20
	SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword *SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword

	Type SourceShopifyUpdateShopifyAuthorizationMethodType
}

func CreateSourceShopifyUpdateShopifyAuthorizationMethodSourceShopifyUpdateShopifyAuthorizationMethodOAuth20(sourceShopifyUpdateShopifyAuthorizationMethodOAuth20 SourceShopifyUpdateShopifyAuthorizationMethodOAuth20) SourceShopifyUpdateShopifyAuthorizationMethod {
	typ := SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodOAuth20

	return SourceShopifyUpdateShopifyAuthorizationMethod{
		SourceShopifyUpdateShopifyAuthorizationMethodOAuth20: &sourceShopifyUpdateShopifyAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceShopifyUpdateShopifyAuthorizationMethodSourceShopifyUpdateShopifyAuthorizationMethodAPIPassword(sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword) SourceShopifyUpdateShopifyAuthorizationMethod {
	typ := SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodAPIPassword

	return SourceShopifyUpdateShopifyAuthorizationMethod{
		SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword: &sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword,
		Type: typ,
	}
}

func (u *SourceShopifyUpdateShopifyAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword := new(SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword)
	if err := utils.UnmarshalJSON(data, &sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword, "", true, true); err == nil {
		u.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword = sourceShopifyUpdateShopifyAuthorizationMethodAPIPassword
		u.Type = SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodAPIPassword
		return nil
	}

	sourceShopifyUpdateShopifyAuthorizationMethodOAuth20 := new(SourceShopifyUpdateShopifyAuthorizationMethodOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceShopifyUpdateShopifyAuthorizationMethodOAuth20, "", true, true); err == nil {
		u.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 = sourceShopifyUpdateShopifyAuthorizationMethodOAuth20
		u.Type = SourceShopifyUpdateShopifyAuthorizationMethodTypeSourceShopifyUpdateShopifyAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceShopifyUpdateShopifyAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20 != nil {
		return utils.MarshalJSON(u.SourceShopifyUpdateShopifyAuthorizationMethodOAuth20, "", true)
	}

	if u.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword != nil {
		return utils.MarshalJSON(u.SourceShopifyUpdateShopifyAuthorizationMethodAPIPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceShopifyUpdate struct {
	// The authorization method to use to retrieve data from Shopify
	Credentials *SourceShopifyUpdateShopifyAuthorizationMethod `json:"credentials,omitempty"`
	// The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
	Shop string `json:"shop"`
	// The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate *types.Date `default:"2020-01-01" json:"start_date"`
}

func (s SourceShopifyUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceShopifyUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceShopifyUpdate) GetCredentials() *SourceShopifyUpdateShopifyAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceShopifyUpdate) GetShop() string {
	if o == nil {
		return ""
	}
	return o.Shop
}

func (o *SourceShopifyUpdate) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
