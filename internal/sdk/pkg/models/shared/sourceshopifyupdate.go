// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceShopifyUpdateSchemasAuthMethod string

const (
	SourceShopifyUpdateSchemasAuthMethodAPIPassword SourceShopifyUpdateSchemasAuthMethod = "api_password"
)

func (e SourceShopifyUpdateSchemasAuthMethod) ToPointer() *SourceShopifyUpdateSchemasAuthMethod {
	return &e
}

func (e *SourceShopifyUpdateSchemasAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_password":
		*e = SourceShopifyUpdateSchemasAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyUpdateSchemasAuthMethod: %v", v)
	}
}

// APIPassword - API Password Auth
type APIPassword struct {
	// The API Password for your private application in the `Shopify` store.
	APIPassword string                               `json:"api_password"`
	authMethod  SourceShopifyUpdateSchemasAuthMethod `const:"api_password" json:"auth_method"`
}

func (a APIPassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *APIPassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *APIPassword) GetAPIPassword() string {
	if o == nil {
		return ""
	}
	return o.APIPassword
}

func (o *APIPassword) GetAuthMethod() SourceShopifyUpdateSchemasAuthMethod {
	return SourceShopifyUpdateSchemasAuthMethodAPIPassword
}

type SourceShopifyUpdateAuthMethod string

const (
	SourceShopifyUpdateAuthMethodOauth20 SourceShopifyUpdateAuthMethod = "oauth2.0"
)

func (e SourceShopifyUpdateAuthMethod) ToPointer() *SourceShopifyUpdateAuthMethod {
	return &e
}

func (e *SourceShopifyUpdateAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceShopifyUpdateAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyUpdateAuthMethod: %v", v)
	}
}

// SourceShopifyUpdateOAuth20 - OAuth2.0
type SourceShopifyUpdateOAuth20 struct {
	// The Access Token for making authenticated requests.
	AccessToken *string                       `json:"access_token,omitempty"`
	authMethod  SourceShopifyUpdateAuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of the Shopify developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of the Shopify developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

func (s SourceShopifyUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceShopifyUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceShopifyUpdateOAuth20) GetAccessToken() *string {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *SourceShopifyUpdateOAuth20) GetAuthMethod() SourceShopifyUpdateAuthMethod {
	return SourceShopifyUpdateAuthMethodOauth20
}

func (o *SourceShopifyUpdateOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourceShopifyUpdateOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

type ShopifyAuthorizationMethodType string

const (
	ShopifyAuthorizationMethodTypeSourceShopifyUpdateOAuth20 ShopifyAuthorizationMethodType = "source-shopify-update_OAuth2.0"
	ShopifyAuthorizationMethodTypeAPIPassword                ShopifyAuthorizationMethodType = "API Password"
)

// ShopifyAuthorizationMethod - The authorization method to use to retrieve data from Shopify
type ShopifyAuthorizationMethod struct {
	SourceShopifyUpdateOAuth20 *SourceShopifyUpdateOAuth20
	APIPassword                *APIPassword

	Type ShopifyAuthorizationMethodType
}

func CreateShopifyAuthorizationMethodSourceShopifyUpdateOAuth20(sourceShopifyUpdateOAuth20 SourceShopifyUpdateOAuth20) ShopifyAuthorizationMethod {
	typ := ShopifyAuthorizationMethodTypeSourceShopifyUpdateOAuth20

	return ShopifyAuthorizationMethod{
		SourceShopifyUpdateOAuth20: &sourceShopifyUpdateOAuth20,
		Type:                       typ,
	}
}

func CreateShopifyAuthorizationMethodAPIPassword(apiPassword APIPassword) ShopifyAuthorizationMethod {
	typ := ShopifyAuthorizationMethodTypeAPIPassword

	return ShopifyAuthorizationMethod{
		APIPassword: &apiPassword,
		Type:        typ,
	}
}

func (u *ShopifyAuthorizationMethod) UnmarshalJSON(data []byte) error {

	apiPassword := new(APIPassword)
	if err := utils.UnmarshalJSON(data, &apiPassword, "", true, true); err == nil {
		u.APIPassword = apiPassword
		u.Type = ShopifyAuthorizationMethodTypeAPIPassword
		return nil
	}

	sourceShopifyUpdateOAuth20 := new(SourceShopifyUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceShopifyUpdateOAuth20, "", true, true); err == nil {
		u.SourceShopifyUpdateOAuth20 = sourceShopifyUpdateOAuth20
		u.Type = ShopifyAuthorizationMethodTypeSourceShopifyUpdateOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ShopifyAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceShopifyUpdateOAuth20 != nil {
		return utils.MarshalJSON(u.SourceShopifyUpdateOAuth20, "", true)
	}

	if u.APIPassword != nil {
		return utils.MarshalJSON(u.APIPassword, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceShopifyUpdate struct {
	// The authorization method to use to retrieve data from Shopify
	Credentials *ShopifyAuthorizationMethod `json:"credentials,omitempty"`
	// The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
	Shop string `json:"shop"`
	// The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate *types.Date `default:"2020-01-01" json:"start_date"`
}

func (s SourceShopifyUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceShopifyUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceShopifyUpdate) GetCredentials() *ShopifyAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourceShopifyUpdate) GetShop() string {
	if o == nil {
		return ""
	}
	return o.Shop
}

func (o *SourceShopifyUpdate) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}
