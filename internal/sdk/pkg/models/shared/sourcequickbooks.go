// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceQuickbooksAuthType string

const (
	SourceQuickbooksAuthTypeOauth20 SourceQuickbooksAuthType = "oauth2.0"
)

func (e SourceQuickbooksAuthType) ToPointer() *SourceQuickbooksAuthType {
	return &e
}

func (e *SourceQuickbooksAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceQuickbooksAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceQuickbooksAuthType: %v", v)
	}
}

type SourceQuickbooksOAuth20 struct {
	// Access token fot making authenticated requests.
	AccessToken string                    `json:"access_token"`
	authType    *SourceQuickbooksAuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// Identifies which app is making the request. Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
	ClientID string `json:"client_id"`
	//  Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
	ClientSecret string `json:"client_secret"`
	// Labeled Company ID. The Make API Calls panel is populated with the realm id and the current access token.
	RealmID string `json:"realm_id"`
	// A token used when refreshing the access token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceQuickbooksOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceQuickbooksOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceQuickbooksOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceQuickbooksOAuth20) GetAuthType() *SourceQuickbooksAuthType {
	return SourceQuickbooksAuthTypeOauth20.ToPointer()
}

func (o *SourceQuickbooksOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceQuickbooksOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceQuickbooksOAuth20) GetRealmID() string {
	if o == nil {
		return ""
	}
	return o.RealmID
}

func (o *SourceQuickbooksOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceQuickbooksOAuth20) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceQuickbooksAuthorizationMethodType string

const (
	SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksOAuth20 SourceQuickbooksAuthorizationMethodType = "source-quickbooks_OAuth2.0"
)

type SourceQuickbooksAuthorizationMethod struct {
	SourceQuickbooksOAuth20 *SourceQuickbooksOAuth20

	Type SourceQuickbooksAuthorizationMethodType
}

func CreateSourceQuickbooksAuthorizationMethodSourceQuickbooksOAuth20(sourceQuickbooksOAuth20 SourceQuickbooksOAuth20) SourceQuickbooksAuthorizationMethod {
	typ := SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksOAuth20

	return SourceQuickbooksAuthorizationMethod{
		SourceQuickbooksOAuth20: &sourceQuickbooksOAuth20,
		Type:                    typ,
	}
}

func (u *SourceQuickbooksAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourceQuickbooksOAuth20 := new(SourceQuickbooksOAuth20)
	if err := utils.UnmarshalJSON(data, &sourceQuickbooksOAuth20, "", true, true); err == nil {
		u.SourceQuickbooksOAuth20 = sourceQuickbooksOAuth20
		u.Type = SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceQuickbooksAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceQuickbooksOAuth20 != nil {
		return utils.MarshalJSON(u.SourceQuickbooksOAuth20, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Quickbooks string

const (
	QuickbooksQuickbooks Quickbooks = "quickbooks"
)

func (e Quickbooks) ToPointer() *Quickbooks {
	return &e
}

func (e *Quickbooks) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "quickbooks":
		*e = Quickbooks(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Quickbooks: %v", v)
	}
}

type SourceQuickbooks struct {
	Credentials SourceQuickbooksAuthorizationMethod `json:"credentials"`
	// Determines whether to use the sandbox or production environment.
	Sandbox    *bool      `default:"false" json:"sandbox"`
	sourceType Quickbooks `const:"quickbooks" json:"sourceType"`
	// The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceQuickbooks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceQuickbooks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceQuickbooks) GetCredentials() SourceQuickbooksAuthorizationMethod {
	if o == nil {
		return SourceQuickbooksAuthorizationMethod{}
	}
	return o.Credentials
}

func (o *SourceQuickbooks) GetSandbox() *bool {
	if o == nil {
		return nil
	}
	return o.Sandbox
}

func (o *SourceQuickbooks) GetSourceType() Quickbooks {
	return QuickbooksQuickbooks
}

func (o *SourceQuickbooks) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
