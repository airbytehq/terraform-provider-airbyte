// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceAlloydbUpdateReplicationMethodStandardMethod string

const (
	SourceAlloydbUpdateReplicationMethodStandardMethodStandard SourceAlloydbUpdateReplicationMethodStandardMethod = "Standard"
)

func (e SourceAlloydbUpdateReplicationMethodStandardMethod) ToPointer() *SourceAlloydbUpdateReplicationMethodStandardMethod {
	return &e
}

func (e *SourceAlloydbUpdateReplicationMethodStandardMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = SourceAlloydbUpdateReplicationMethodStandardMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateReplicationMethodStandardMethod: %v", v)
	}
}

// SourceAlloydbUpdateReplicationMethodStandard - Standard replication requires no setup on the DB side but will not be able to represent deletions incrementally.
type SourceAlloydbUpdateReplicationMethodStandard struct {
	Method SourceAlloydbUpdateReplicationMethodStandardMethod `json:"method"`
}

// SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour - Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
type SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour string

const (
	SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviourWhileReadingData                 SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour = "While reading Data"
	SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviourAfterLoadingDataInTheDestination SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour = "After loading Data in the destination"
)

func (e SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour) ToPointer() *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour {
	return &e
}

func (e *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "While reading Data":
		fallthrough
	case "After loading Data in the destination":
		*e = SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour: %v", v)
	}
}

type SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod string

const (
	SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethodCdc SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod = "CDC"
)

func (e SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod) ToPointer() *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod {
	return &e
}

func (e *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CDC":
		*e = SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod: %v", v)
	}
}

// SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin - A logical decoding plugin installed on the PostgreSQL server.
type SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin string

const (
	SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPluginPgoutput SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin = "pgoutput"
)

func (e SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin) ToPointer() *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin {
	return &e
}

func (e *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pgoutput":
		*e = SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin: %v", v)
	}
}

// SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC - Logical replication uses the Postgres write-ahead log (WAL) to detect inserts, updates, and deletes. This needs to be configured on the source database itself. Only available on Postgres 10 and above. Read the <a href="https://docs.airbyte.com/integrations/sources/postgres">docs</a>.
type SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC struct {
	// The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-5-optional-set-up-initial-waiting-time">initial waiting time</a>.
	InitialWaitingSeconds *int64 `json:"initial_waiting_seconds,omitempty"`
	// Determines when Airbtye should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync.
	LsnCommitBehaviour *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCLSNCommitBehaviour `json:"lsn_commit_behaviour,omitempty"`
	Method             SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCMethod              `json:"method"`
	// A logical decoding plugin installed on the PostgreSQL server.
	Plugin *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDCPlugin `json:"plugin,omitempty"`
	// A Postgres publication used for consuming changes. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables">publications and replication identities</a>.
	Publication string `json:"publication"`
	// The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful.
	QueueSize *int64 `json:"queue_size,omitempty"`
	// A plugin logical replication slot. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot">replication slots</a>.
	ReplicationSlot string `json:"replication_slot"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC

func (c *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "initial_waiting_seconds")
	delete(additionalFields, "lsn_commit_behaviour")
	delete(additionalFields, "method")
	delete(additionalFields, "plugin")
	delete(additionalFields, "publication")
	delete(additionalFields, "queue_size")
	delete(additionalFields, "replication_slot")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateReplicationMethodStandardXminMethod string

const (
	SourceAlloydbUpdateReplicationMethodStandardXminMethodXmin SourceAlloydbUpdateReplicationMethodStandardXminMethod = "Xmin"
)

func (e SourceAlloydbUpdateReplicationMethodStandardXminMethod) ToPointer() *SourceAlloydbUpdateReplicationMethodStandardXminMethod {
	return &e
}

func (e *SourceAlloydbUpdateReplicationMethodStandardXminMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Xmin":
		*e = SourceAlloydbUpdateReplicationMethodStandardXminMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateReplicationMethodStandardXminMethod: %v", v)
	}
}

// SourceAlloydbUpdateReplicationMethodStandardXmin - Xmin replication requires no setup on the DB side but will not be able to represent deletions incrementally.
type SourceAlloydbUpdateReplicationMethodStandardXmin struct {
	Method SourceAlloydbUpdateReplicationMethodStandardXminMethod `json:"method"`
}

type SourceAlloydbUpdateReplicationMethodType string

const (
	SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandardXmin          SourceAlloydbUpdateReplicationMethodType = "source-alloydb-update_Replication Method_Standard (Xmin)"
	SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodLogicalReplicationCDC SourceAlloydbUpdateReplicationMethodType = "source-alloydb-update_Replication Method_Logical Replication (CDC)"
	SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandard              SourceAlloydbUpdateReplicationMethodType = "source-alloydb-update_Replication Method_Standard"
)

type SourceAlloydbUpdateReplicationMethod struct {
	SourceAlloydbUpdateReplicationMethodStandardXmin          *SourceAlloydbUpdateReplicationMethodStandardXmin
	SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC *SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC
	SourceAlloydbUpdateReplicationMethodStandard              *SourceAlloydbUpdateReplicationMethodStandard

	Type SourceAlloydbUpdateReplicationMethodType
}

func CreateSourceAlloydbUpdateReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXmin(sourceAlloydbUpdateReplicationMethodStandardXmin SourceAlloydbUpdateReplicationMethodStandardXmin) SourceAlloydbUpdateReplicationMethod {
	typ := SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandardXmin

	return SourceAlloydbUpdateReplicationMethod{
		SourceAlloydbUpdateReplicationMethodStandardXmin: &sourceAlloydbUpdateReplicationMethodStandardXmin,
		Type: typ,
	}
}

func CreateSourceAlloydbUpdateReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCDC(sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC) SourceAlloydbUpdateReplicationMethod {
	typ := SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodLogicalReplicationCDC

	return SourceAlloydbUpdateReplicationMethod{
		SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC: &sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC,
		Type: typ,
	}
}

func CreateSourceAlloydbUpdateReplicationMethodSourceAlloydbUpdateReplicationMethodStandard(sourceAlloydbUpdateReplicationMethodStandard SourceAlloydbUpdateReplicationMethodStandard) SourceAlloydbUpdateReplicationMethod {
	typ := SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandard

	return SourceAlloydbUpdateReplicationMethod{
		SourceAlloydbUpdateReplicationMethodStandard: &sourceAlloydbUpdateReplicationMethodStandard,
		Type: typ,
	}
}

func (u *SourceAlloydbUpdateReplicationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbUpdateReplicationMethodStandardXmin := new(SourceAlloydbUpdateReplicationMethodStandardXmin)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateReplicationMethodStandardXmin); err == nil {
		u.SourceAlloydbUpdateReplicationMethodStandardXmin = sourceAlloydbUpdateReplicationMethodStandardXmin
		u.Type = SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandardXmin
		return nil
	}

	sourceAlloydbUpdateReplicationMethodStandard := new(SourceAlloydbUpdateReplicationMethodStandard)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateReplicationMethodStandard); err == nil {
		u.SourceAlloydbUpdateReplicationMethodStandard = sourceAlloydbUpdateReplicationMethodStandard
		u.Type = SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodStandard
		return nil
	}

	sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC := new(SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC); err == nil {
		u.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC = sourceAlloydbUpdateReplicationMethodLogicalReplicationCDC
		u.Type = SourceAlloydbUpdateReplicationMethodTypeSourceAlloydbUpdateReplicationMethodLogicalReplicationCDC
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbUpdateReplicationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbUpdateReplicationMethodStandardXmin != nil {
		return json.Marshal(u.SourceAlloydbUpdateReplicationMethodStandardXmin)
	}

	if u.SourceAlloydbUpdateReplicationMethodStandard != nil {
		return json.Marshal(u.SourceAlloydbUpdateReplicationMethodStandard)
	}

	if u.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC != nil {
		return json.Marshal(u.SourceAlloydbUpdateReplicationMethodLogicalReplicationCDC)
	}

	return nil, nil
}

type SourceAlloydbUpdateSSLModesVerifyFullMode string

const (
	SourceAlloydbUpdateSSLModesVerifyFullModeVerifyFull SourceAlloydbUpdateSSLModesVerifyFullMode = "verify-full"
)

func (e SourceAlloydbUpdateSSLModesVerifyFullMode) ToPointer() *SourceAlloydbUpdateSSLModesVerifyFullMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesVerifyFullMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-full":
		*e = SourceAlloydbUpdateSSLModesVerifyFullMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesVerifyFullMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesVerifyFull - This is the most secure mode. Always require encryption and verifies the identity of the source database server.
type SourceAlloydbUpdateSSLModesVerifyFull struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                   `json:"client_key_password,omitempty"`
	Mode              SourceAlloydbUpdateSSLModesVerifyFullMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesVerifyFull SourceAlloydbUpdateSSLModesVerifyFull

func (c *SourceAlloydbUpdateSSLModesVerifyFull) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesVerifyFull{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesVerifyFull(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesVerifyFull) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesVerifyFull(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesVerifyCaMode string

const (
	SourceAlloydbUpdateSSLModesVerifyCaModeVerifyCa SourceAlloydbUpdateSSLModesVerifyCaMode = "verify-ca"
)

func (e SourceAlloydbUpdateSSLModesVerifyCaMode) ToPointer() *SourceAlloydbUpdateSSLModesVerifyCaMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesVerifyCaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-ca":
		*e = SourceAlloydbUpdateSSLModesVerifyCaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesVerifyCaMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesVerifyCa - Always require encryption and verifies that the source database server has a valid SSL certificate.
type SourceAlloydbUpdateSSLModesVerifyCa struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate *string `json:"client_certificate,omitempty"`
	// Client key
	ClientKey *string `json:"client_key,omitempty"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                 `json:"client_key_password,omitempty"`
	Mode              SourceAlloydbUpdateSSLModesVerifyCaMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesVerifyCa SourceAlloydbUpdateSSLModesVerifyCa

func (c *SourceAlloydbUpdateSSLModesVerifyCa) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesVerifyCa{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesVerifyCa(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "ca_certificate")
	delete(additionalFields, "client_certificate")
	delete(additionalFields, "client_key")
	delete(additionalFields, "client_key_password")
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesVerifyCa) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesVerifyCa(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesRequireMode string

const (
	SourceAlloydbUpdateSSLModesRequireModeRequire SourceAlloydbUpdateSSLModesRequireMode = "require"
)

func (e SourceAlloydbUpdateSSLModesRequireMode) ToPointer() *SourceAlloydbUpdateSSLModesRequireMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesRequireMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "require":
		*e = SourceAlloydbUpdateSSLModesRequireMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesRequireMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesRequire - Always require encryption. If the source database server does not support encryption, connection will fail.
type SourceAlloydbUpdateSSLModesRequire struct {
	Mode SourceAlloydbUpdateSSLModesRequireMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesRequire SourceAlloydbUpdateSSLModesRequire

func (c *SourceAlloydbUpdateSSLModesRequire) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesRequire{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesRequire(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesRequire) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesRequire(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesPreferMode string

const (
	SourceAlloydbUpdateSSLModesPreferModePrefer SourceAlloydbUpdateSSLModesPreferMode = "prefer"
)

func (e SourceAlloydbUpdateSSLModesPreferMode) ToPointer() *SourceAlloydbUpdateSSLModesPreferMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesPreferMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prefer":
		*e = SourceAlloydbUpdateSSLModesPreferMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesPreferMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesPrefer - Allows unencrypted connection only if the source database does not support encryption.
type SourceAlloydbUpdateSSLModesPrefer struct {
	Mode SourceAlloydbUpdateSSLModesPreferMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesPrefer SourceAlloydbUpdateSSLModesPrefer

func (c *SourceAlloydbUpdateSSLModesPrefer) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesPrefer{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesPrefer(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesPrefer) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesPrefer(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesAllowMode string

const (
	SourceAlloydbUpdateSSLModesAllowModeAllow SourceAlloydbUpdateSSLModesAllowMode = "allow"
)

func (e SourceAlloydbUpdateSSLModesAllowMode) ToPointer() *SourceAlloydbUpdateSSLModesAllowMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesAllowMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		*e = SourceAlloydbUpdateSSLModesAllowMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesAllowMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesAllow - Enables encryption only when required by the source database.
type SourceAlloydbUpdateSSLModesAllow struct {
	Mode SourceAlloydbUpdateSSLModesAllowMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesAllow SourceAlloydbUpdateSSLModesAllow

func (c *SourceAlloydbUpdateSSLModesAllow) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesAllow{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesAllow(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesAllow) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesAllow(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesDisableMode string

const (
	SourceAlloydbUpdateSSLModesDisableModeDisable SourceAlloydbUpdateSSLModesDisableMode = "disable"
)

func (e SourceAlloydbUpdateSSLModesDisableMode) ToPointer() *SourceAlloydbUpdateSSLModesDisableMode {
	return &e
}

func (e *SourceAlloydbUpdateSSLModesDisableMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disable":
		*e = SourceAlloydbUpdateSSLModesDisableMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSLModesDisableMode: %v", v)
	}
}

// SourceAlloydbUpdateSSLModesDisable - Disables encryption of communication between Airbyte and source database.
type SourceAlloydbUpdateSSLModesDisable struct {
	Mode SourceAlloydbUpdateSSLModesDisableMode `json:"mode"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceAlloydbUpdateSSLModesDisable SourceAlloydbUpdateSSLModesDisable

func (c *SourceAlloydbUpdateSSLModesDisable) UnmarshalJSON(bs []byte) error {
	data := _SourceAlloydbUpdateSSLModesDisable{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceAlloydbUpdateSSLModesDisable(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "mode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceAlloydbUpdateSSLModesDisable) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceAlloydbUpdateSSLModesDisable(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceAlloydbUpdateSSLModesType string

const (
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesDisable    SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_disable"
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesAllow      SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_allow"
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesPrefer     SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_prefer"
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesRequire    SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_require"
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyCa   SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_verify-ca"
	SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyFull SourceAlloydbUpdateSSLModesType = "source-alloydb-update_SSL Modes_verify-full"
)

type SourceAlloydbUpdateSSLModes struct {
	SourceAlloydbUpdateSSLModesDisable    *SourceAlloydbUpdateSSLModesDisable
	SourceAlloydbUpdateSSLModesAllow      *SourceAlloydbUpdateSSLModesAllow
	SourceAlloydbUpdateSSLModesPrefer     *SourceAlloydbUpdateSSLModesPrefer
	SourceAlloydbUpdateSSLModesRequire    *SourceAlloydbUpdateSSLModesRequire
	SourceAlloydbUpdateSSLModesVerifyCa   *SourceAlloydbUpdateSSLModesVerifyCa
	SourceAlloydbUpdateSSLModesVerifyFull *SourceAlloydbUpdateSSLModesVerifyFull

	Type SourceAlloydbUpdateSSLModesType
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesDisable(sourceAlloydbUpdateSSLModesDisable SourceAlloydbUpdateSSLModesDisable) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesDisable

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesDisable: &sourceAlloydbUpdateSSLModesDisable,
		Type:                               typ,
	}
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesAllow(sourceAlloydbUpdateSSLModesAllow SourceAlloydbUpdateSSLModesAllow) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesAllow

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesAllow: &sourceAlloydbUpdateSSLModesAllow,
		Type:                             typ,
	}
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesPrefer(sourceAlloydbUpdateSSLModesPrefer SourceAlloydbUpdateSSLModesPrefer) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesPrefer

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesPrefer: &sourceAlloydbUpdateSSLModesPrefer,
		Type:                              typ,
	}
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesRequire(sourceAlloydbUpdateSSLModesRequire SourceAlloydbUpdateSSLModesRequire) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesRequire

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesRequire: &sourceAlloydbUpdateSSLModesRequire,
		Type:                               typ,
	}
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesVerifyCa(sourceAlloydbUpdateSSLModesVerifyCa SourceAlloydbUpdateSSLModesVerifyCa) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyCa

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesVerifyCa: &sourceAlloydbUpdateSSLModesVerifyCa,
		Type:                                typ,
	}
}

func CreateSourceAlloydbUpdateSSLModesSourceAlloydbUpdateSSLModesVerifyFull(sourceAlloydbUpdateSSLModesVerifyFull SourceAlloydbUpdateSSLModesVerifyFull) SourceAlloydbUpdateSSLModes {
	typ := SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyFull

	return SourceAlloydbUpdateSSLModes{
		SourceAlloydbUpdateSSLModesVerifyFull: &sourceAlloydbUpdateSSLModesVerifyFull,
		Type:                                  typ,
	}
}

func (u *SourceAlloydbUpdateSSLModes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbUpdateSSLModesDisable := new(SourceAlloydbUpdateSSLModesDisable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesDisable); err == nil {
		u.SourceAlloydbUpdateSSLModesDisable = sourceAlloydbUpdateSSLModesDisable
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesDisable
		return nil
	}

	sourceAlloydbUpdateSSLModesAllow := new(SourceAlloydbUpdateSSLModesAllow)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesAllow); err == nil {
		u.SourceAlloydbUpdateSSLModesAllow = sourceAlloydbUpdateSSLModesAllow
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesAllow
		return nil
	}

	sourceAlloydbUpdateSSLModesPrefer := new(SourceAlloydbUpdateSSLModesPrefer)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesPrefer); err == nil {
		u.SourceAlloydbUpdateSSLModesPrefer = sourceAlloydbUpdateSSLModesPrefer
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesPrefer
		return nil
	}

	sourceAlloydbUpdateSSLModesRequire := new(SourceAlloydbUpdateSSLModesRequire)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesRequire); err == nil {
		u.SourceAlloydbUpdateSSLModesRequire = sourceAlloydbUpdateSSLModesRequire
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesRequire
		return nil
	}

	sourceAlloydbUpdateSSLModesVerifyCa := new(SourceAlloydbUpdateSSLModesVerifyCa)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesVerifyCa); err == nil {
		u.SourceAlloydbUpdateSSLModesVerifyCa = sourceAlloydbUpdateSSLModesVerifyCa
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyCa
		return nil
	}

	sourceAlloydbUpdateSSLModesVerifyFull := new(SourceAlloydbUpdateSSLModesVerifyFull)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSLModesVerifyFull); err == nil {
		u.SourceAlloydbUpdateSSLModesVerifyFull = sourceAlloydbUpdateSSLModesVerifyFull
		u.Type = SourceAlloydbUpdateSSLModesTypeSourceAlloydbUpdateSSLModesVerifyFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbUpdateSSLModes) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbUpdateSSLModesDisable != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesDisable)
	}

	if u.SourceAlloydbUpdateSSLModesAllow != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesAllow)
	}

	if u.SourceAlloydbUpdateSSLModesPrefer != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesPrefer)
	}

	if u.SourceAlloydbUpdateSSLModesRequire != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesRequire)
	}

	if u.SourceAlloydbUpdateSSLModesVerifyCa != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesVerifyCa)
	}

	if u.SourceAlloydbUpdateSSLModesVerifyFull != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSLModesVerifyFull)
	}

	return nil, nil
}

// SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod SourceAlloydbUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// SourceAlloydbUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceAlloydbUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod SourceAlloydbUpdateSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type SourceAlloydbUpdateSSHTunnelMethodType string

const (
	SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodNoTunnel               SourceAlloydbUpdateSSHTunnelMethodType = "source-alloydb-update_SSH Tunnel Method_No Tunnel"
	SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication   SourceAlloydbUpdateSSHTunnelMethodType = "source-alloydb-update_SSH Tunnel Method_SSH Key Authentication"
	SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication SourceAlloydbUpdateSSHTunnelMethodType = "source-alloydb-update_SSH Tunnel Method_Password Authentication"
)

type SourceAlloydbUpdateSSHTunnelMethod struct {
	SourceAlloydbUpdateSSHTunnelMethodNoTunnel               *SourceAlloydbUpdateSSHTunnelMethodNoTunnel
	SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication   *SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication
	SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication *SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication

	Type SourceAlloydbUpdateSSHTunnelMethodType
}

func CreateSourceAlloydbUpdateSSHTunnelMethodSourceAlloydbUpdateSSHTunnelMethodNoTunnel(sourceAlloydbUpdateSSHTunnelMethodNoTunnel SourceAlloydbUpdateSSHTunnelMethodNoTunnel) SourceAlloydbUpdateSSHTunnelMethod {
	typ := SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodNoTunnel

	return SourceAlloydbUpdateSSHTunnelMethod{
		SourceAlloydbUpdateSSHTunnelMethodNoTunnel: &sourceAlloydbUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateSourceAlloydbUpdateSSHTunnelMethodSourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication(sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication) SourceAlloydbUpdateSSHTunnelMethod {
	typ := SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication

	return SourceAlloydbUpdateSSHTunnelMethod{
		SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication: &sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateSourceAlloydbUpdateSSHTunnelMethodSourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication(sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication) SourceAlloydbUpdateSSHTunnelMethod {
	typ := SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication

	return SourceAlloydbUpdateSSHTunnelMethod{
		SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication: &sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *SourceAlloydbUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAlloydbUpdateSSHTunnelMethodNoTunnel := new(SourceAlloydbUpdateSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSHTunnelMethodNoTunnel); err == nil {
		u.SourceAlloydbUpdateSSHTunnelMethodNoTunnel = sourceAlloydbUpdateSSHTunnelMethodNoTunnel
		u.Type = SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication := new(SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication = sourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication := new(SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication); err == nil {
		u.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication = sourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = SourceAlloydbUpdateSSHTunnelMethodTypeSourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAlloydbUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceAlloydbUpdateSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSHTunnelMethodNoTunnel)
	}

	if u.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.SourceAlloydbUpdateSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type SourceAlloydbUpdate struct {
	// Name of the database.
	Database string `json:"database"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// Port of the database.
	Port int64 `json:"port"`
	// Replication method for extracting data from the database.
	ReplicationMethod *SourceAlloydbUpdateReplicationMethod `json:"replication_method,omitempty"`
	// The list of schemas (case sensitive) to sync from. Defaults to public.
	Schemas []string `json:"schemas,omitempty"`
	// SSL connection modes.
	//   Read more <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
	SslMode *SourceAlloydbUpdateSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceAlloydbUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to access the database.
	Username string `json:"username"`
}
