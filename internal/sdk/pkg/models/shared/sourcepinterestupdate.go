// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod string

const (
	SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethodAccessToken SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod = "access_token"
)

func (e SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod) ToPointer() *SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod {
	return &e
}

func (e *SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod: %v", v)
	}
}

type SourcePinterestUpdateAuthorizationMethodAccessToken struct {
	// The Access Token to make authenticated requests.
	AccessToken string                                                        `json:"access_token"`
	AuthMethod  SourcePinterestUpdateAuthorizationMethodAccessTokenAuthMethod `json:"auth_method"`
}

type SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod string

const (
	SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethodOauth20 SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod = "oauth2.0"
)

func (e SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod) ToPointer() *SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod {
	return &e
}

func (e *SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod: %v", v)
	}
}

type SourcePinterestUpdateAuthorizationMethodOAuth20 struct {
	AuthMethod SourcePinterestUpdateAuthorizationMethodOAuth20AuthMethod `json:"auth_method"`
	// The Client ID of your OAuth application
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

type SourcePinterestUpdateAuthorizationMethodType string

const (
	SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodOAuth20     SourcePinterestUpdateAuthorizationMethodType = "source-pinterest-update_Authorization Method_OAuth2.0"
	SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodAccessToken SourcePinterestUpdateAuthorizationMethodType = "source-pinterest-update_Authorization Method_Access Token"
)

type SourcePinterestUpdateAuthorizationMethod struct {
	SourcePinterestUpdateAuthorizationMethodOAuth20     *SourcePinterestUpdateAuthorizationMethodOAuth20
	SourcePinterestUpdateAuthorizationMethodAccessToken *SourcePinterestUpdateAuthorizationMethodAccessToken

	Type SourcePinterestUpdateAuthorizationMethodType
}

func CreateSourcePinterestUpdateAuthorizationMethodSourcePinterestUpdateAuthorizationMethodOAuth20(sourcePinterestUpdateAuthorizationMethodOAuth20 SourcePinterestUpdateAuthorizationMethodOAuth20) SourcePinterestUpdateAuthorizationMethod {
	typ := SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodOAuth20

	return SourcePinterestUpdateAuthorizationMethod{
		SourcePinterestUpdateAuthorizationMethodOAuth20: &sourcePinterestUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourcePinterestUpdateAuthorizationMethodSourcePinterestUpdateAuthorizationMethodAccessToken(sourcePinterestUpdateAuthorizationMethodAccessToken SourcePinterestUpdateAuthorizationMethodAccessToken) SourcePinterestUpdateAuthorizationMethod {
	typ := SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodAccessToken

	return SourcePinterestUpdateAuthorizationMethod{
		SourcePinterestUpdateAuthorizationMethodAccessToken: &sourcePinterestUpdateAuthorizationMethodAccessToken,
		Type: typ,
	}
}

func (u *SourcePinterestUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePinterestUpdateAuthorizationMethodAccessToken := new(SourcePinterestUpdateAuthorizationMethodAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePinterestUpdateAuthorizationMethodAccessToken); err == nil {
		u.SourcePinterestUpdateAuthorizationMethodAccessToken = sourcePinterestUpdateAuthorizationMethodAccessToken
		u.Type = SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodAccessToken
		return nil
	}

	sourcePinterestUpdateAuthorizationMethodOAuth20 := new(SourcePinterestUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePinterestUpdateAuthorizationMethodOAuth20); err == nil {
		u.SourcePinterestUpdateAuthorizationMethodOAuth20 = sourcePinterestUpdateAuthorizationMethodOAuth20
		u.Type = SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePinterestUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePinterestUpdateAuthorizationMethodAccessToken != nil {
		return json.Marshal(u.SourcePinterestUpdateAuthorizationMethodAccessToken)
	}

	if u.SourcePinterestUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourcePinterestUpdateAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourcePinterestUpdateStatus string

const (
	SourcePinterestUpdateStatusActive   SourcePinterestUpdateStatus = "ACTIVE"
	SourcePinterestUpdateStatusPaused   SourcePinterestUpdateStatus = "PAUSED"
	SourcePinterestUpdateStatusArchived SourcePinterestUpdateStatus = "ARCHIVED"
)

func (e SourcePinterestUpdateStatus) ToPointer() *SourcePinterestUpdateStatus {
	return &e
}

func (e *SourcePinterestUpdateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		fallthrough
	case "ARCHIVED":
		*e = SourcePinterestUpdateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestUpdateStatus: %v", v)
	}
}

type SourcePinterestUpdate struct {
	Credentials *SourcePinterestUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).
	StartDate types.Date `json:"start_date"`
	// Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.
	Status []SourcePinterestUpdateStatus `json:"status,omitempty"`
}
