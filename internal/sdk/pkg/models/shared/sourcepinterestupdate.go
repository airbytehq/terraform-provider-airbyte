// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/types"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourcePinterestUpdateSchemasAuthMethod string

const (
	SourcePinterestUpdateSchemasAuthMethodAccessToken SourcePinterestUpdateSchemasAuthMethod = "access_token"
)

func (e SourcePinterestUpdateSchemasAuthMethod) ToPointer() *SourcePinterestUpdateSchemasAuthMethod {
	return &e
}

func (e *SourcePinterestUpdateSchemasAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourcePinterestUpdateSchemasAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestUpdateSchemasAuthMethod: %v", v)
	}
}

type SourcePinterestUpdateAccessToken struct {
	// The Access Token to make authenticated requests.
	AccessToken string                                 `json:"access_token"`
	authMethod  SourcePinterestUpdateSchemasAuthMethod `const:"access_token" json:"auth_method"`
}

func (s SourcePinterestUpdateAccessToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterestUpdateAccessToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterestUpdateAccessToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourcePinterestUpdateAccessToken) GetAuthMethod() SourcePinterestUpdateSchemasAuthMethod {
	return SourcePinterestUpdateSchemasAuthMethodAccessToken
}

type SourcePinterestUpdateAuthMethod string

const (
	SourcePinterestUpdateAuthMethodOauth20 SourcePinterestUpdateAuthMethod = "oauth2.0"
)

func (e SourcePinterestUpdateAuthMethod) ToPointer() *SourcePinterestUpdateAuthMethod {
	return &e
}

func (e *SourcePinterestUpdateAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourcePinterestUpdateAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestUpdateAuthMethod: %v", v)
	}
}

type SourcePinterestUpdateOAuth20 struct {
	authMethod SourcePinterestUpdateAuthMethod `const:"oauth2.0" json:"auth_method"`
	// The Client ID of your OAuth application
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

func (s SourcePinterestUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterestUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterestUpdateOAuth20) GetAuthMethod() SourcePinterestUpdateAuthMethod {
	return SourcePinterestUpdateAuthMethodOauth20
}

func (o *SourcePinterestUpdateOAuth20) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *SourcePinterestUpdateOAuth20) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *SourcePinterestUpdateOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

type SourcePinterestUpdateAuthorizationMethodType string

const (
	SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateOAuth20     SourcePinterestUpdateAuthorizationMethodType = "source-pinterest-update_OAuth2.0"
	SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAccessToken SourcePinterestUpdateAuthorizationMethodType = "source-pinterest-update_Access Token"
)

type SourcePinterestUpdateAuthorizationMethod struct {
	SourcePinterestUpdateOAuth20     *SourcePinterestUpdateOAuth20
	SourcePinterestUpdateAccessToken *SourcePinterestUpdateAccessToken

	Type SourcePinterestUpdateAuthorizationMethodType
}

func CreateSourcePinterestUpdateAuthorizationMethodSourcePinterestUpdateOAuth20(sourcePinterestUpdateOAuth20 SourcePinterestUpdateOAuth20) SourcePinterestUpdateAuthorizationMethod {
	typ := SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateOAuth20

	return SourcePinterestUpdateAuthorizationMethod{
		SourcePinterestUpdateOAuth20: &sourcePinterestUpdateOAuth20,
		Type:                         typ,
	}
}

func CreateSourcePinterestUpdateAuthorizationMethodSourcePinterestUpdateAccessToken(sourcePinterestUpdateAccessToken SourcePinterestUpdateAccessToken) SourcePinterestUpdateAuthorizationMethod {
	typ := SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAccessToken

	return SourcePinterestUpdateAuthorizationMethod{
		SourcePinterestUpdateAccessToken: &sourcePinterestUpdateAccessToken,
		Type:                             typ,
	}
}

func (u *SourcePinterestUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	sourcePinterestUpdateAccessToken := new(SourcePinterestUpdateAccessToken)
	if err := utils.UnmarshalJSON(data, &sourcePinterestUpdateAccessToken, "", true, true); err == nil {
		u.SourcePinterestUpdateAccessToken = sourcePinterestUpdateAccessToken
		u.Type = SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateAccessToken
		return nil
	}

	sourcePinterestUpdateOAuth20 := new(SourcePinterestUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &sourcePinterestUpdateOAuth20, "", true, true); err == nil {
		u.SourcePinterestUpdateOAuth20 = sourcePinterestUpdateOAuth20
		u.Type = SourcePinterestUpdateAuthorizationMethodTypeSourcePinterestUpdateOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePinterestUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePinterestUpdateOAuth20 != nil {
		return utils.MarshalJSON(u.SourcePinterestUpdateOAuth20, "", true)
	}

	if u.SourcePinterestUpdateAccessToken != nil {
		return utils.MarshalJSON(u.SourcePinterestUpdateAccessToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Status string

const (
	StatusActive   Status = "ACTIVE"
	StatusPaused   Status = "PAUSED"
	StatusArchived Status = "ARCHIVED"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		fallthrough
	case "ARCHIVED":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type SourcePinterestUpdate struct {
	Credentials *SourcePinterestUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).
	StartDate types.Date `json:"start_date"`
	// Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.
	Status []Status `json:"status,omitempty"`
}

func (s SourcePinterestUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePinterestUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePinterestUpdate) GetCredentials() *SourcePinterestUpdateAuthorizationMethod {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *SourcePinterestUpdate) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourcePinterestUpdate) GetStatus() []Status {
	if o == nil {
		return nil
	}
	return o.Status
}
