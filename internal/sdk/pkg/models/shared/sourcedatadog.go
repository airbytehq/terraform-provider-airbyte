// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceDatadogQueriesDataSource - A data source that is powered by the platform.
type SourceDatadogQueriesDataSource string

const (
	SourceDatadogQueriesDataSourceMetrics   SourceDatadogQueriesDataSource = "metrics"
	SourceDatadogQueriesDataSourceCloudCost SourceDatadogQueriesDataSource = "cloud_cost"
	SourceDatadogQueriesDataSourceLogs      SourceDatadogQueriesDataSource = "logs"
	SourceDatadogQueriesDataSourceRum       SourceDatadogQueriesDataSource = "rum"
)

func (e SourceDatadogQueriesDataSource) ToPointer() *SourceDatadogQueriesDataSource {
	return &e
}

func (e *SourceDatadogQueriesDataSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "metrics":
		fallthrough
	case "cloud_cost":
		fallthrough
	case "logs":
		fallthrough
	case "rum":
		*e = SourceDatadogQueriesDataSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDatadogQueriesDataSource: %v", v)
	}
}

type SourceDatadogQueries struct {
	// A data source that is powered by the platform.
	DataSource SourceDatadogQueriesDataSource `json:"data_source"`
	// The variable name for use in queries.
	Name string `json:"name"`
	// A classic query string.
	Query string `json:"query"`
}

// SourceDatadogSite - The site where Datadog data resides in.
type SourceDatadogSite string

const (
	SourceDatadogSiteDatadoghqCom    SourceDatadogSite = "datadoghq.com"
	SourceDatadogSiteUs3DatadoghqCom SourceDatadogSite = "us3.datadoghq.com"
	SourceDatadogSiteUs5DatadoghqCom SourceDatadogSite = "us5.datadoghq.com"
	SourceDatadogSiteDatadoghqEu     SourceDatadogSite = "datadoghq.eu"
	SourceDatadogSiteDdogGovCom      SourceDatadogSite = "ddog-gov.com"
)

func (e SourceDatadogSite) ToPointer() *SourceDatadogSite {
	return &e
}

func (e *SourceDatadogSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "datadoghq.com":
		fallthrough
	case "us3.datadoghq.com":
		fallthrough
	case "us5.datadoghq.com":
		fallthrough
	case "datadoghq.eu":
		fallthrough
	case "ddog-gov.com":
		*e = SourceDatadogSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDatadogSite: %v", v)
	}
}

type SourceDatadogDatadog string

const (
	SourceDatadogDatadogDatadog SourceDatadogDatadog = "datadog"
)

func (e SourceDatadogDatadog) ToPointer() *SourceDatadogDatadog {
	return &e
}

func (e *SourceDatadogDatadog) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "datadog":
		*e = SourceDatadogDatadog(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDatadogDatadog: %v", v)
	}
}

type SourceDatadog struct {
	// Datadog API key
	APIKey string `json:"api_key"`
	// Datadog application key
	ApplicationKey string `json:"application_key"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs.
	EndDate *string `json:"end_date,omitempty"`
	// Maximum number of records to collect per request.
	MaxRecordsPerRequest *int64 `json:"max_records_per_request,omitempty"`
	// List of queries to be run and used as inputs.
	Queries []SourceDatadogQueries `json:"queries,omitempty"`
	// The search query. This just applies to Incremental syncs. If empty, it'll collect all logs.
	Query *string `json:"query,omitempty"`
	// The site where Datadog data resides in.
	Site       *SourceDatadogSite   `json:"site,omitempty"`
	SourceType SourceDatadogDatadog `json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs.
	StartDate *string `json:"start_date,omitempty"`
}
