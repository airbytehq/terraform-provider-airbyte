// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"fmt"
)

type SourcePolygonStockAPIPolygonStockAPI string

const (
	SourcePolygonStockAPIPolygonStockAPIPolygonStockAPI SourcePolygonStockAPIPolygonStockAPI = "polygon-stock-api"
)

func (e SourcePolygonStockAPIPolygonStockAPI) ToPointer() *SourcePolygonStockAPIPolygonStockAPI {
	return &e
}

func (e *SourcePolygonStockAPIPolygonStockAPI) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "polygon-stock-api":
		*e = SourcePolygonStockAPIPolygonStockAPI(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePolygonStockAPIPolygonStockAPI: %v", v)
	}
}

type SourcePolygonStockAPI struct {
	// Determines whether or not the results are adjusted for splits. By default, results are adjusted and set to true. Set this to false to get results that are NOT adjusted for splits.
	Adjusted *string `json:"adjusted,omitempty"`
	// Your API ACCESS Key
	APIKey string `json:"apiKey"`
	// The target date for the aggregate window.
	EndDate types.Date `json:"end_date"`
	// The target date for the aggregate window.
	Limit *int64 `json:"limit,omitempty"`
	// The size of the timespan multiplier.
	Multiplier int64 `json:"multiplier"`
	// Sort the results by timestamp. asc will return results in ascending order (oldest at the top), desc will return results in descending order (newest at the top).
	Sort       *string                              `json:"sort,omitempty"`
	sourceType SourcePolygonStockAPIPolygonStockAPI `const:"polygon-stock-api" json:"sourceType"`
	// The beginning date for the aggregate window.
	StartDate types.Date `json:"start_date"`
	// The exchange symbol that this item is traded under.
	StocksTicker string `json:"stocksTicker"`
	// The size of the time window.
	Timespan string `json:"timespan"`
}

func (s SourcePolygonStockAPI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourcePolygonStockAPI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourcePolygonStockAPI) GetAdjusted() *string {
	if o == nil {
		return nil
	}
	return o.Adjusted
}

func (o *SourcePolygonStockAPI) GetAPIKey() string {
	if o == nil {
		return ""
	}
	return o.APIKey
}

func (o *SourcePolygonStockAPI) GetEndDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.EndDate
}

func (o *SourcePolygonStockAPI) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *SourcePolygonStockAPI) GetMultiplier() int64 {
	if o == nil {
		return 0
	}
	return o.Multiplier
}

func (o *SourcePolygonStockAPI) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *SourcePolygonStockAPI) GetSourceType() SourcePolygonStockAPIPolygonStockAPI {
	return SourcePolygonStockAPIPolygonStockAPIPolygonStockAPI
}

func (o *SourcePolygonStockAPI) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *SourcePolygonStockAPI) GetStocksTicker() string {
	if o == nil {
		return ""
	}
	return o.StocksTicker
}

func (o *SourcePolygonStockAPI) GetTimespan() string {
	if o == nil {
		return ""
	}
	return o.Timespan
}
