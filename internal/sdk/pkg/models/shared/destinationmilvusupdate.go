// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationMilvusUpdateEmbeddingFromFieldMode string

const (
	DestinationMilvusUpdateEmbeddingFromFieldModeFromField DestinationMilvusUpdateEmbeddingFromFieldMode = "from_field"
)

func (e DestinationMilvusUpdateEmbeddingFromFieldMode) ToPointer() *DestinationMilvusUpdateEmbeddingFromFieldMode {
	return &e
}

func (e *DestinationMilvusUpdateEmbeddingFromFieldMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "from_field":
		*e = DestinationMilvusUpdateEmbeddingFromFieldMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateEmbeddingFromFieldMode: %v", v)
	}
}

// DestinationMilvusUpdateEmbeddingFromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
type DestinationMilvusUpdateEmbeddingFromField struct {
	// The number of dimensions the embedding model is generating
	Dimensions int64 `json:"dimensions"`
	// Name of the field in the record that contains the embedding
	FieldName string                                         `json:"field_name"`
	mode      *DestinationMilvusUpdateEmbeddingFromFieldMode `const:"from_field" json:"mode"`
}

func (d DestinationMilvusUpdateEmbeddingFromField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateEmbeddingFromField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateEmbeddingFromField) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *DestinationMilvusUpdateEmbeddingFromField) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *DestinationMilvusUpdateEmbeddingFromField) GetMode() *DestinationMilvusUpdateEmbeddingFromFieldMode {
	return DestinationMilvusUpdateEmbeddingFromFieldModeFromField.ToPointer()
}

type DestinationMilvusUpdateEmbeddingFakeMode string

const (
	DestinationMilvusUpdateEmbeddingFakeModeFake DestinationMilvusUpdateEmbeddingFakeMode = "fake"
)

func (e DestinationMilvusUpdateEmbeddingFakeMode) ToPointer() *DestinationMilvusUpdateEmbeddingFakeMode {
	return &e
}

func (e *DestinationMilvusUpdateEmbeddingFakeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationMilvusUpdateEmbeddingFakeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateEmbeddingFakeMode: %v", v)
	}
}

// DestinationMilvusUpdateEmbeddingFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationMilvusUpdateEmbeddingFake struct {
	mode *DestinationMilvusUpdateEmbeddingFakeMode `const:"fake" json:"mode"`
}

func (d DestinationMilvusUpdateEmbeddingFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateEmbeddingFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateEmbeddingFake) GetMode() *DestinationMilvusUpdateEmbeddingFakeMode {
	return DestinationMilvusUpdateEmbeddingFakeModeFake.ToPointer()
}

type DestinationMilvusUpdateEmbeddingCohereMode string

const (
	DestinationMilvusUpdateEmbeddingCohereModeCohere DestinationMilvusUpdateEmbeddingCohereMode = "cohere"
)

func (e DestinationMilvusUpdateEmbeddingCohereMode) ToPointer() *DestinationMilvusUpdateEmbeddingCohereMode {
	return &e
}

func (e *DestinationMilvusUpdateEmbeddingCohereMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationMilvusUpdateEmbeddingCohereMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateEmbeddingCohereMode: %v", v)
	}
}

// DestinationMilvusUpdateEmbeddingCohere - Use the Cohere API to embed text.
type DestinationMilvusUpdateEmbeddingCohere struct {
	CohereKey string                                      `json:"cohere_key"`
	mode      *DestinationMilvusUpdateEmbeddingCohereMode `const:"cohere" json:"mode"`
}

func (d DestinationMilvusUpdateEmbeddingCohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateEmbeddingCohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateEmbeddingCohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *DestinationMilvusUpdateEmbeddingCohere) GetMode() *DestinationMilvusUpdateEmbeddingCohereMode {
	return DestinationMilvusUpdateEmbeddingCohereModeCohere.ToPointer()
}

type DestinationMilvusUpdateEmbeddingOpenAIMode string

const (
	DestinationMilvusUpdateEmbeddingOpenAIModeOpenai DestinationMilvusUpdateEmbeddingOpenAIMode = "openai"
)

func (e DestinationMilvusUpdateEmbeddingOpenAIMode) ToPointer() *DestinationMilvusUpdateEmbeddingOpenAIMode {
	return &e
}

func (e *DestinationMilvusUpdateEmbeddingOpenAIMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationMilvusUpdateEmbeddingOpenAIMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateEmbeddingOpenAIMode: %v", v)
	}
}

// DestinationMilvusUpdateEmbeddingOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationMilvusUpdateEmbeddingOpenAI struct {
	mode      *DestinationMilvusUpdateEmbeddingOpenAIMode `const:"openai" json:"mode"`
	OpenaiKey string                                      `json:"openai_key"`
}

func (d DestinationMilvusUpdateEmbeddingOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateEmbeddingOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateEmbeddingOpenAI) GetMode() *DestinationMilvusUpdateEmbeddingOpenAIMode {
	return DestinationMilvusUpdateEmbeddingOpenAIModeOpenai.ToPointer()
}

func (o *DestinationMilvusUpdateEmbeddingOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationMilvusUpdateEmbeddingType string

const (
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingOpenAI    DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_Embedding_OpenAI"
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingCohere    DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_Embedding_Cohere"
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFake      DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_Embedding_Fake"
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFromField DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_Embedding_From Field"
)

type DestinationMilvusUpdateEmbedding struct {
	DestinationMilvusUpdateEmbeddingOpenAI    *DestinationMilvusUpdateEmbeddingOpenAI
	DestinationMilvusUpdateEmbeddingCohere    *DestinationMilvusUpdateEmbeddingCohere
	DestinationMilvusUpdateEmbeddingFake      *DestinationMilvusUpdateEmbeddingFake
	DestinationMilvusUpdateEmbeddingFromField *DestinationMilvusUpdateEmbeddingFromField

	Type DestinationMilvusUpdateEmbeddingType
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateEmbeddingOpenAI(destinationMilvusUpdateEmbeddingOpenAI DestinationMilvusUpdateEmbeddingOpenAI) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingOpenAI

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateEmbeddingOpenAI: &destinationMilvusUpdateEmbeddingOpenAI,
		Type:                                   typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateEmbeddingCohere(destinationMilvusUpdateEmbeddingCohere DestinationMilvusUpdateEmbeddingCohere) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingCohere

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateEmbeddingCohere: &destinationMilvusUpdateEmbeddingCohere,
		Type:                                   typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateEmbeddingFake(destinationMilvusUpdateEmbeddingFake DestinationMilvusUpdateEmbeddingFake) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFake

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateEmbeddingFake: &destinationMilvusUpdateEmbeddingFake,
		Type:                                 typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateEmbeddingFromField(destinationMilvusUpdateEmbeddingFromField DestinationMilvusUpdateEmbeddingFromField) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFromField

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateEmbeddingFromField: &destinationMilvusUpdateEmbeddingFromField,
		Type: typ,
	}
}

func (u *DestinationMilvusUpdateEmbedding) UnmarshalJSON(data []byte) error {

	destinationMilvusUpdateEmbeddingFake := new(DestinationMilvusUpdateEmbeddingFake)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateEmbeddingFake, "", true, true); err == nil {
		u.DestinationMilvusUpdateEmbeddingFake = destinationMilvusUpdateEmbeddingFake
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFake
		return nil
	}

	destinationMilvusUpdateEmbeddingOpenAI := new(DestinationMilvusUpdateEmbeddingOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateEmbeddingOpenAI, "", true, true); err == nil {
		u.DestinationMilvusUpdateEmbeddingOpenAI = destinationMilvusUpdateEmbeddingOpenAI
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingOpenAI
		return nil
	}

	destinationMilvusUpdateEmbeddingCohere := new(DestinationMilvusUpdateEmbeddingCohere)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateEmbeddingCohere, "", true, true); err == nil {
		u.DestinationMilvusUpdateEmbeddingCohere = destinationMilvusUpdateEmbeddingCohere
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingCohere
		return nil
	}

	destinationMilvusUpdateEmbeddingFromField := new(DestinationMilvusUpdateEmbeddingFromField)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateEmbeddingFromField, "", true, true); err == nil {
		u.DestinationMilvusUpdateEmbeddingFromField = destinationMilvusUpdateEmbeddingFromField
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateEmbeddingFromField
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusUpdateEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusUpdateEmbeddingOpenAI != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateEmbeddingOpenAI, "", true)
	}

	if u.DestinationMilvusUpdateEmbeddingCohere != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateEmbeddingCohere, "", true)
	}

	if u.DestinationMilvusUpdateEmbeddingFake != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateEmbeddingFake, "", true)
	}

	if u.DestinationMilvusUpdateEmbeddingFromField != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateEmbeddingFromField, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMilvusUpdateIndexingAuthenticationNoAuthMode string

const (
	DestinationMilvusUpdateIndexingAuthenticationNoAuthModeNoAuth DestinationMilvusUpdateIndexingAuthenticationNoAuthMode = "no_auth"
)

func (e DestinationMilvusUpdateIndexingAuthenticationNoAuthMode) ToPointer() *DestinationMilvusUpdateIndexingAuthenticationNoAuthMode {
	return &e
}

func (e *DestinationMilvusUpdateIndexingAuthenticationNoAuthMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_auth":
		*e = DestinationMilvusUpdateIndexingAuthenticationNoAuthMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateIndexingAuthenticationNoAuthMode: %v", v)
	}
}

// DestinationMilvusUpdateIndexingAuthenticationNoAuth - Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
type DestinationMilvusUpdateIndexingAuthenticationNoAuth struct {
	mode *DestinationMilvusUpdateIndexingAuthenticationNoAuthMode `const:"no_auth" json:"mode"`
}

func (d DestinationMilvusUpdateIndexingAuthenticationNoAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateIndexingAuthenticationNoAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateIndexingAuthenticationNoAuth) GetMode() *DestinationMilvusUpdateIndexingAuthenticationNoAuthMode {
	return DestinationMilvusUpdateIndexingAuthenticationNoAuthModeNoAuth.ToPointer()
}

type DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode string

const (
	DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordModeUsernamePassword DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode = "username_password"
)

func (e DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode) ToPointer() *DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode {
	return &e
}

func (e *DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode: %v", v)
	}
}

// DestinationMilvusUpdateIndexingAuthenticationUsernamePassword - Authenticate using username and password (suitable for self-managed Milvus clusters)
type DestinationMilvusUpdateIndexingAuthenticationUsernamePassword struct {
	mode *DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode `const:"username_password" json:"mode"`
	// Password for the Milvus instance
	Password string `json:"password"`
	// Username for the Milvus instance
	Username string `json:"username"`
}

func (d DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) GetMode() *DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordMode {
	return DestinationMilvusUpdateIndexingAuthenticationUsernamePasswordModeUsernamePassword.ToPointer()
}

func (o *DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationMilvusUpdateIndexingAuthenticationAPITokenMode string

const (
	DestinationMilvusUpdateIndexingAuthenticationAPITokenModeToken DestinationMilvusUpdateIndexingAuthenticationAPITokenMode = "token"
)

func (e DestinationMilvusUpdateIndexingAuthenticationAPITokenMode) ToPointer() *DestinationMilvusUpdateIndexingAuthenticationAPITokenMode {
	return &e
}

func (e *DestinationMilvusUpdateIndexingAuthenticationAPITokenMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = DestinationMilvusUpdateIndexingAuthenticationAPITokenMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateIndexingAuthenticationAPITokenMode: %v", v)
	}
}

// DestinationMilvusUpdateIndexingAuthenticationAPIToken - Authenticate using an API token (suitable for Zilliz Cloud)
type DestinationMilvusUpdateIndexingAuthenticationAPIToken struct {
	mode *DestinationMilvusUpdateIndexingAuthenticationAPITokenMode `const:"token" json:"mode"`
	// API Token for the Milvus instance
	Token string `json:"token"`
}

func (d DestinationMilvusUpdateIndexingAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateIndexingAuthenticationAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateIndexingAuthenticationAPIToken) GetMode() *DestinationMilvusUpdateIndexingAuthenticationAPITokenMode {
	return DestinationMilvusUpdateIndexingAuthenticationAPITokenModeToken.ToPointer()
}

func (o *DestinationMilvusUpdateIndexingAuthenticationAPIToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type DestinationMilvusUpdateIndexingAuthenticationType string

const (
	DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationAPIToken         DestinationMilvusUpdateIndexingAuthenticationType = "destination-milvus-update_Indexing_Authentication_API Token"
	DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationUsernamePassword DestinationMilvusUpdateIndexingAuthenticationType = "destination-milvus-update_Indexing_Authentication_Username/Password"
	DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationNoAuth           DestinationMilvusUpdateIndexingAuthenticationType = "destination-milvus-update_Indexing_Authentication_No auth"
)

type DestinationMilvusUpdateIndexingAuthentication struct {
	DestinationMilvusUpdateIndexingAuthenticationAPIToken         *DestinationMilvusUpdateIndexingAuthenticationAPIToken
	DestinationMilvusUpdateIndexingAuthenticationUsernamePassword *DestinationMilvusUpdateIndexingAuthenticationUsernamePassword
	DestinationMilvusUpdateIndexingAuthenticationNoAuth           *DestinationMilvusUpdateIndexingAuthenticationNoAuth

	Type DestinationMilvusUpdateIndexingAuthenticationType
}

func CreateDestinationMilvusUpdateIndexingAuthenticationDestinationMilvusUpdateIndexingAuthenticationAPIToken(destinationMilvusUpdateIndexingAuthenticationAPIToken DestinationMilvusUpdateIndexingAuthenticationAPIToken) DestinationMilvusUpdateIndexingAuthentication {
	typ := DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationAPIToken

	return DestinationMilvusUpdateIndexingAuthentication{
		DestinationMilvusUpdateIndexingAuthenticationAPIToken: &destinationMilvusUpdateIndexingAuthenticationAPIToken,
		Type: typ,
	}
}

func CreateDestinationMilvusUpdateIndexingAuthenticationDestinationMilvusUpdateIndexingAuthenticationUsernamePassword(destinationMilvusUpdateIndexingAuthenticationUsernamePassword DestinationMilvusUpdateIndexingAuthenticationUsernamePassword) DestinationMilvusUpdateIndexingAuthentication {
	typ := DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationUsernamePassword

	return DestinationMilvusUpdateIndexingAuthentication{
		DestinationMilvusUpdateIndexingAuthenticationUsernamePassword: &destinationMilvusUpdateIndexingAuthenticationUsernamePassword,
		Type: typ,
	}
}

func CreateDestinationMilvusUpdateIndexingAuthenticationDestinationMilvusUpdateIndexingAuthenticationNoAuth(destinationMilvusUpdateIndexingAuthenticationNoAuth DestinationMilvusUpdateIndexingAuthenticationNoAuth) DestinationMilvusUpdateIndexingAuthentication {
	typ := DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationNoAuth

	return DestinationMilvusUpdateIndexingAuthentication{
		DestinationMilvusUpdateIndexingAuthenticationNoAuth: &destinationMilvusUpdateIndexingAuthenticationNoAuth,
		Type: typ,
	}
}

func (u *DestinationMilvusUpdateIndexingAuthentication) UnmarshalJSON(data []byte) error {

	destinationMilvusUpdateIndexingAuthenticationNoAuth := new(DestinationMilvusUpdateIndexingAuthenticationNoAuth)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateIndexingAuthenticationNoAuth, "", true, true); err == nil {
		u.DestinationMilvusUpdateIndexingAuthenticationNoAuth = destinationMilvusUpdateIndexingAuthenticationNoAuth
		u.Type = DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationNoAuth
		return nil
	}

	destinationMilvusUpdateIndexingAuthenticationAPIToken := new(DestinationMilvusUpdateIndexingAuthenticationAPIToken)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateIndexingAuthenticationAPIToken, "", true, true); err == nil {
		u.DestinationMilvusUpdateIndexingAuthenticationAPIToken = destinationMilvusUpdateIndexingAuthenticationAPIToken
		u.Type = DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationAPIToken
		return nil
	}

	destinationMilvusUpdateIndexingAuthenticationUsernamePassword := new(DestinationMilvusUpdateIndexingAuthenticationUsernamePassword)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateIndexingAuthenticationUsernamePassword, "", true, true); err == nil {
		u.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword = destinationMilvusUpdateIndexingAuthenticationUsernamePassword
		u.Type = DestinationMilvusUpdateIndexingAuthenticationTypeDestinationMilvusUpdateIndexingAuthenticationUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusUpdateIndexingAuthentication) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusUpdateIndexingAuthenticationAPIToken != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateIndexingAuthenticationAPIToken, "", true)
	}

	if u.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateIndexingAuthenticationUsernamePassword, "", true)
	}

	if u.DestinationMilvusUpdateIndexingAuthenticationNoAuth != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateIndexingAuthenticationNoAuth, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMilvusUpdateIndexing - Indexing configuration
type DestinationMilvusUpdateIndexing struct {
	// Authentication method
	Auth DestinationMilvusUpdateIndexingAuthentication `json:"auth"`
	// The collection to load data into
	Collection string `json:"collection"`
	// The database to connect to
	Db *string `default:"" json:"db"`
	// The public endpoint of the Milvus instance.
	Host string `json:"host"`
	// The field in the entity that contains the embedded text
	TextField *string `default:"text" json:"text_field"`
	// The field in the entity that contains the vector
	VectorField *string `default:"vector" json:"vector_field"`
}

func (d DestinationMilvusUpdateIndexing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateIndexing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateIndexing) GetAuth() DestinationMilvusUpdateIndexingAuthentication {
	if o == nil {
		return DestinationMilvusUpdateIndexingAuthentication{}
	}
	return o.Auth
}

func (o *DestinationMilvusUpdateIndexing) GetCollection() string {
	if o == nil {
		return ""
	}
	return o.Collection
}

func (o *DestinationMilvusUpdateIndexing) GetDb() *string {
	if o == nil {
		return nil
	}
	return o.Db
}

func (o *DestinationMilvusUpdateIndexing) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMilvusUpdateIndexing) GetTextField() *string {
	if o == nil {
		return nil
	}
	return o.TextField
}

func (o *DestinationMilvusUpdateIndexing) GetVectorField() *string {
	if o == nil {
		return nil
	}
	return o.VectorField
}

type DestinationMilvusUpdateProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
}

func (d DestinationMilvusUpdateProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

type DestinationMilvusUpdate struct {
	// Embedding configuration
	Embedding DestinationMilvusUpdateEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationMilvusUpdateIndexing              `json:"indexing"`
	Processing DestinationMilvusUpdateProcessingConfigModel `json:"processing"`
}

func (o *DestinationMilvusUpdate) GetEmbedding() DestinationMilvusUpdateEmbedding {
	if o == nil {
		return DestinationMilvusUpdateEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationMilvusUpdate) GetIndexing() DestinationMilvusUpdateIndexing {
	if o == nil {
		return DestinationMilvusUpdateIndexing{}
	}
	return o.Indexing
}

func (o *DestinationMilvusUpdate) GetProcessing() DestinationMilvusUpdateProcessingConfigModel {
	if o == nil {
		return DestinationMilvusUpdateProcessingConfigModel{}
	}
	return o.Processing
}
