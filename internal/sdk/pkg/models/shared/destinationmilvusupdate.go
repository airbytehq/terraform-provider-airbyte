// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode string

const (
	DestinationMilvusUpdateSchemasEmbeddingEmbeddingModeFromField DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode = "from_field"
)

func (e DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode) ToPointer() *DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "from_field":
		*e = DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode: %v", v)
	}
}

// FromField - Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
type FromField struct {
	// The number of dimensions the embedding model is generating
	Dimensions int64 `json:"dimensions"`
	// Name of the field in the record that contains the embedding
	FieldName string                                                `json:"field_name"`
	mode      *DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode `const:"from_field" json:"mode"`
}

func (f FromField) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FromField) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *FromField) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *FromField) GetFieldName() string {
	if o == nil {
		return ""
	}
	return o.FieldName
}

func (o *FromField) GetMode() *DestinationMilvusUpdateSchemasEmbeddingEmbeddingMode {
	return DestinationMilvusUpdateSchemasEmbeddingEmbeddingModeFromField.ToPointer()
}

type DestinationMilvusUpdateSchemasEmbeddingMode string

const (
	DestinationMilvusUpdateSchemasEmbeddingModeFake DestinationMilvusUpdateSchemasEmbeddingMode = "fake"
)

func (e DestinationMilvusUpdateSchemasEmbeddingMode) ToPointer() *DestinationMilvusUpdateSchemasEmbeddingMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationMilvusUpdateSchemasEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasEmbeddingMode: %v", v)
	}
}

// DestinationMilvusUpdateFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationMilvusUpdateFake struct {
	mode *DestinationMilvusUpdateSchemasEmbeddingMode `const:"fake" json:"mode"`
}

func (d DestinationMilvusUpdateFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateFake) GetMode() *DestinationMilvusUpdateSchemasEmbeddingMode {
	return DestinationMilvusUpdateSchemasEmbeddingModeFake.ToPointer()
}

type DestinationMilvusUpdateSchemasMode string

const (
	DestinationMilvusUpdateSchemasModeCohere DestinationMilvusUpdateSchemasMode = "cohere"
)

func (e DestinationMilvusUpdateSchemasMode) ToPointer() *DestinationMilvusUpdateSchemasMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cohere":
		*e = DestinationMilvusUpdateSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasMode: %v", v)
	}
}

// Cohere - Use the Cohere API to embed text.
type Cohere struct {
	CohereKey string                              `json:"cohere_key"`
	mode      *DestinationMilvusUpdateSchemasMode `const:"cohere" json:"mode"`
}

func (c Cohere) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Cohere) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Cohere) GetCohereKey() string {
	if o == nil {
		return ""
	}
	return o.CohereKey
}

func (o *Cohere) GetMode() *DestinationMilvusUpdateSchemasMode {
	return DestinationMilvusUpdateSchemasModeCohere.ToPointer()
}

type DestinationMilvusUpdateMode string

const (
	DestinationMilvusUpdateModeOpenai DestinationMilvusUpdateMode = "openai"
)

func (e DestinationMilvusUpdateMode) ToPointer() *DestinationMilvusUpdateMode {
	return &e
}

func (e *DestinationMilvusUpdateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationMilvusUpdateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateMode: %v", v)
	}
}

// DestinationMilvusUpdateOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationMilvusUpdateOpenAI struct {
	mode      *DestinationMilvusUpdateMode `const:"openai" json:"mode"`
	OpenaiKey string                       `json:"openai_key"`
}

func (d DestinationMilvusUpdateOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateOpenAI) GetMode() *DestinationMilvusUpdateMode {
	return DestinationMilvusUpdateModeOpenai.ToPointer()
}

func (o *DestinationMilvusUpdateOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationMilvusUpdateEmbeddingType string

const (
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateOpenAI DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_OpenAI"
	DestinationMilvusUpdateEmbeddingTypeCohere                        DestinationMilvusUpdateEmbeddingType = "Cohere"
	DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateFake   DestinationMilvusUpdateEmbeddingType = "destination-milvus-update_Fake"
	DestinationMilvusUpdateEmbeddingTypeFromField                     DestinationMilvusUpdateEmbeddingType = "From Field"
)

type DestinationMilvusUpdateEmbedding struct {
	DestinationMilvusUpdateOpenAI *DestinationMilvusUpdateOpenAI
	Cohere                        *Cohere
	DestinationMilvusUpdateFake   *DestinationMilvusUpdateFake
	FromField                     *FromField

	Type DestinationMilvusUpdateEmbeddingType
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateOpenAI(destinationMilvusUpdateOpenAI DestinationMilvusUpdateOpenAI) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateOpenAI

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateOpenAI: &destinationMilvusUpdateOpenAI,
		Type:                          typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingCohere(cohere Cohere) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeCohere

	return DestinationMilvusUpdateEmbedding{
		Cohere: &cohere,
		Type:   typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingDestinationMilvusUpdateFake(destinationMilvusUpdateFake DestinationMilvusUpdateFake) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateFake

	return DestinationMilvusUpdateEmbedding{
		DestinationMilvusUpdateFake: &destinationMilvusUpdateFake,
		Type:                        typ,
	}
}

func CreateDestinationMilvusUpdateEmbeddingFromField(fromField FromField) DestinationMilvusUpdateEmbedding {
	typ := DestinationMilvusUpdateEmbeddingTypeFromField

	return DestinationMilvusUpdateEmbedding{
		FromField: &fromField,
		Type:      typ,
	}
}

func (u *DestinationMilvusUpdateEmbedding) UnmarshalJSON(data []byte) error {

	destinationMilvusUpdateFake := new(DestinationMilvusUpdateFake)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateFake, "", true, true); err == nil {
		u.DestinationMilvusUpdateFake = destinationMilvusUpdateFake
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateFake
		return nil
	}

	destinationMilvusUpdateOpenAI := new(DestinationMilvusUpdateOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateOpenAI, "", true, true); err == nil {
		u.DestinationMilvusUpdateOpenAI = destinationMilvusUpdateOpenAI
		u.Type = DestinationMilvusUpdateEmbeddingTypeDestinationMilvusUpdateOpenAI
		return nil
	}

	cohere := new(Cohere)
	if err := utils.UnmarshalJSON(data, &cohere, "", true, true); err == nil {
		u.Cohere = cohere
		u.Type = DestinationMilvusUpdateEmbeddingTypeCohere
		return nil
	}

	fromField := new(FromField)
	if err := utils.UnmarshalJSON(data, &fromField, "", true, true); err == nil {
		u.FromField = fromField
		u.Type = DestinationMilvusUpdateEmbeddingTypeFromField
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusUpdateEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusUpdateOpenAI != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateOpenAI, "", true)
	}

	if u.Cohere != nil {
		return utils.MarshalJSON(u.Cohere, "", true)
	}

	if u.DestinationMilvusUpdateFake != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateFake, "", true)
	}

	if u.FromField != nil {
		return utils.MarshalJSON(u.FromField, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode string

const (
	DestinationMilvusUpdateSchemasIndexingAuthAuthenticationModeNoAuth DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode = "no_auth"
)

func (e DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode) ToPointer() *DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_auth":
		*e = DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode: %v", v)
	}
}

// NoAuth - Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
type NoAuth struct {
	mode *DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode `const:"no_auth" json:"mode"`
}

func (n NoAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NoAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *NoAuth) GetMode() *DestinationMilvusUpdateSchemasIndexingAuthAuthenticationMode {
	return DestinationMilvusUpdateSchemasIndexingAuthAuthenticationModeNoAuth.ToPointer()
}

type DestinationMilvusUpdateSchemasIndexingAuthMode string

const (
	DestinationMilvusUpdateSchemasIndexingAuthModeUsernamePassword DestinationMilvusUpdateSchemasIndexingAuthMode = "username_password"
)

func (e DestinationMilvusUpdateSchemasIndexingAuthMode) ToPointer() *DestinationMilvusUpdateSchemasIndexingAuthMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasIndexingAuthMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username_password":
		*e = DestinationMilvusUpdateSchemasIndexingAuthMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasIndexingAuthMode: %v", v)
	}
}

// DestinationMilvusUpdateUsernamePassword - Authenticate using username and password (suitable for self-managed Milvus clusters)
type DestinationMilvusUpdateUsernamePassword struct {
	mode *DestinationMilvusUpdateSchemasIndexingAuthMode `const:"username_password" json:"mode"`
	// Password for the Milvus instance
	Password string `json:"password"`
	// Username for the Milvus instance
	Username string `json:"username"`
}

func (d DestinationMilvusUpdateUsernamePassword) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateUsernamePassword) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateUsernamePassword) GetMode() *DestinationMilvusUpdateSchemasIndexingAuthMode {
	return DestinationMilvusUpdateSchemasIndexingAuthModeUsernamePassword.ToPointer()
}

func (o *DestinationMilvusUpdateUsernamePassword) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *DestinationMilvusUpdateUsernamePassword) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DestinationMilvusUpdateSchemasIndexingMode string

const (
	DestinationMilvusUpdateSchemasIndexingModeToken DestinationMilvusUpdateSchemasIndexingMode = "token"
)

func (e DestinationMilvusUpdateSchemasIndexingMode) ToPointer() *DestinationMilvusUpdateSchemasIndexingMode {
	return &e
}

func (e *DestinationMilvusUpdateSchemasIndexingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "token":
		*e = DestinationMilvusUpdateSchemasIndexingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMilvusUpdateSchemasIndexingMode: %v", v)
	}
}

// DestinationMilvusUpdateAPIToken - Authenticate using an API token (suitable for Zilliz Cloud)
type DestinationMilvusUpdateAPIToken struct {
	mode *DestinationMilvusUpdateSchemasIndexingMode `const:"token" json:"mode"`
	// API Token for the Milvus instance
	Token string `json:"token"`
}

func (d DestinationMilvusUpdateAPIToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateAPIToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateAPIToken) GetMode() *DestinationMilvusUpdateSchemasIndexingMode {
	return DestinationMilvusUpdateSchemasIndexingModeToken.ToPointer()
}

func (o *DestinationMilvusUpdateAPIToken) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type DestinationMilvusUpdateAuthenticationType string

const (
	DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateAPIToken         DestinationMilvusUpdateAuthenticationType = "destination-milvus-update_API Token"
	DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateUsernamePassword DestinationMilvusUpdateAuthenticationType = "destination-milvus-update_Username/Password"
	DestinationMilvusUpdateAuthenticationTypeNoAuth                                  DestinationMilvusUpdateAuthenticationType = "No auth"
)

type DestinationMilvusUpdateAuthentication struct {
	DestinationMilvusUpdateAPIToken         *DestinationMilvusUpdateAPIToken
	DestinationMilvusUpdateUsernamePassword *DestinationMilvusUpdateUsernamePassword
	NoAuth                                  *NoAuth

	Type DestinationMilvusUpdateAuthenticationType
}

func CreateDestinationMilvusUpdateAuthenticationDestinationMilvusUpdateAPIToken(destinationMilvusUpdateAPIToken DestinationMilvusUpdateAPIToken) DestinationMilvusUpdateAuthentication {
	typ := DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateAPIToken

	return DestinationMilvusUpdateAuthentication{
		DestinationMilvusUpdateAPIToken: &destinationMilvusUpdateAPIToken,
		Type:                            typ,
	}
}

func CreateDestinationMilvusUpdateAuthenticationDestinationMilvusUpdateUsernamePassword(destinationMilvusUpdateUsernamePassword DestinationMilvusUpdateUsernamePassword) DestinationMilvusUpdateAuthentication {
	typ := DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateUsernamePassword

	return DestinationMilvusUpdateAuthentication{
		DestinationMilvusUpdateUsernamePassword: &destinationMilvusUpdateUsernamePassword,
		Type:                                    typ,
	}
}

func CreateDestinationMilvusUpdateAuthenticationNoAuth(noAuth NoAuth) DestinationMilvusUpdateAuthentication {
	typ := DestinationMilvusUpdateAuthenticationTypeNoAuth

	return DestinationMilvusUpdateAuthentication{
		NoAuth: &noAuth,
		Type:   typ,
	}
}

func (u *DestinationMilvusUpdateAuthentication) UnmarshalJSON(data []byte) error {

	noAuth := new(NoAuth)
	if err := utils.UnmarshalJSON(data, &noAuth, "", true, true); err == nil {
		u.NoAuth = noAuth
		u.Type = DestinationMilvusUpdateAuthenticationTypeNoAuth
		return nil
	}

	destinationMilvusUpdateAPIToken := new(DestinationMilvusUpdateAPIToken)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateAPIToken, "", true, true); err == nil {
		u.DestinationMilvusUpdateAPIToken = destinationMilvusUpdateAPIToken
		u.Type = DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateAPIToken
		return nil
	}

	destinationMilvusUpdateUsernamePassword := new(DestinationMilvusUpdateUsernamePassword)
	if err := utils.UnmarshalJSON(data, &destinationMilvusUpdateUsernamePassword, "", true, true); err == nil {
		u.DestinationMilvusUpdateUsernamePassword = destinationMilvusUpdateUsernamePassword
		u.Type = DestinationMilvusUpdateAuthenticationTypeDestinationMilvusUpdateUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMilvusUpdateAuthentication) MarshalJSON() ([]byte, error) {
	if u.DestinationMilvusUpdateAPIToken != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateAPIToken, "", true)
	}

	if u.DestinationMilvusUpdateUsernamePassword != nil {
		return utils.MarshalJSON(u.DestinationMilvusUpdateUsernamePassword, "", true)
	}

	if u.NoAuth != nil {
		return utils.MarshalJSON(u.NoAuth, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// DestinationMilvusUpdateIndexing - Indexing configuration
type DestinationMilvusUpdateIndexing struct {
	// Authentication method
	Auth DestinationMilvusUpdateAuthentication `json:"auth"`
	// The collection to load data into
	Collection string `json:"collection"`
	// The database to connect to
	Db *string `default:"" json:"db"`
	// The public endpoint of the Milvus instance.
	Host string `json:"host"`
	// The field in the entity that contains the embedded text
	TextField *string `default:"text" json:"text_field"`
	// The field in the entity that contains the vector
	VectorField *string `default:"vector" json:"vector_field"`
}

func (d DestinationMilvusUpdateIndexing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateIndexing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateIndexing) GetAuth() DestinationMilvusUpdateAuthentication {
	if o == nil {
		return DestinationMilvusUpdateAuthentication{}
	}
	return o.Auth
}

func (o *DestinationMilvusUpdateIndexing) GetCollection() string {
	if o == nil {
		return ""
	}
	return o.Collection
}

func (o *DestinationMilvusUpdateIndexing) GetDb() *string {
	if o == nil {
		return nil
	}
	return o.Db
}

func (o *DestinationMilvusUpdateIndexing) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DestinationMilvusUpdateIndexing) GetTextField() *string {
	if o == nil {
		return nil
	}
	return o.TextField
}

func (o *DestinationMilvusUpdateIndexing) GetVectorField() *string {
	if o == nil {
		return nil
	}
	return o.VectorField
}

type DestinationMilvusUpdateProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
	MetadataFields []string `json:"metadata_fields,omitempty"`
	// List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields,omitempty"`
}

func (d DestinationMilvusUpdateProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationMilvusUpdateProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetMetadataFields() []string {
	if o == nil {
		return nil
	}
	return o.MetadataFields
}

func (o *DestinationMilvusUpdateProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return nil
	}
	return o.TextFields
}

type DestinationMilvusUpdate struct {
	// Embedding configuration
	Embedding DestinationMilvusUpdateEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationMilvusUpdateIndexing              `json:"indexing"`
	Processing DestinationMilvusUpdateProcessingConfigModel `json:"processing"`
}

func (o *DestinationMilvusUpdate) GetEmbedding() DestinationMilvusUpdateEmbedding {
	if o == nil {
		return DestinationMilvusUpdateEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationMilvusUpdate) GetIndexing() DestinationMilvusUpdateIndexing {
	if o == nil {
		return DestinationMilvusUpdateIndexing{}
	}
	return o.Indexing
}

func (o *DestinationMilvusUpdate) GetProcessing() DestinationMilvusUpdateProcessingConfigModel {
	if o == nil {
		return DestinationMilvusUpdateProcessingConfigModel{}
	}
	return o.Processing
}
