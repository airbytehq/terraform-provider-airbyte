// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType string

const (
	SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthTypeAccessToken SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType = "access_token"
)

func (e SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType) ToPointer() *SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType {
	return &e
}

func (e *SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType: %v", v)
	}
}

type SourceGitlabUpdateAuthorizationMethodPrivateToken struct {
	// Log into your Gitlab account and then generate a personal Access Token.
	AccessToken string                                                     `json:"access_token"`
	AuthType    *SourceGitlabUpdateAuthorizationMethodPrivateTokenAuthType `json:"auth_type,omitempty"`
}

type SourceGitlabUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceGitlabUpdateAuthorizationMethodOAuth20AuthTypeOauth20 SourceGitlabUpdateAuthorizationMethodOAuth20AuthType = "oauth2.0"
)

func (e SourceGitlabUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceGitlabUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceGitlabUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceGitlabUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceGitlabUpdateAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                                                `json:"access_token"`
	AuthType    *SourceGitlabUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// The API ID of the Gitlab developer application.
	ClientID string `json:"client_id"`
	// The API Secret the Gitlab developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

type SourceGitlabUpdateAuthorizationMethodType string

const (
	SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodOAuth20      SourceGitlabUpdateAuthorizationMethodType = "source-gitlab-update_Authorization Method_OAuth2.0"
	SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodPrivateToken SourceGitlabUpdateAuthorizationMethodType = "source-gitlab-update_Authorization Method_Private Token"
)

type SourceGitlabUpdateAuthorizationMethod struct {
	SourceGitlabUpdateAuthorizationMethodOAuth20      *SourceGitlabUpdateAuthorizationMethodOAuth20
	SourceGitlabUpdateAuthorizationMethodPrivateToken *SourceGitlabUpdateAuthorizationMethodPrivateToken

	Type SourceGitlabUpdateAuthorizationMethodType
}

func CreateSourceGitlabUpdateAuthorizationMethodSourceGitlabUpdateAuthorizationMethodOAuth20(sourceGitlabUpdateAuthorizationMethodOAuth20 SourceGitlabUpdateAuthorizationMethodOAuth20) SourceGitlabUpdateAuthorizationMethod {
	typ := SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodOAuth20

	return SourceGitlabUpdateAuthorizationMethod{
		SourceGitlabUpdateAuthorizationMethodOAuth20: &sourceGitlabUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceGitlabUpdateAuthorizationMethodSourceGitlabUpdateAuthorizationMethodPrivateToken(sourceGitlabUpdateAuthorizationMethodPrivateToken SourceGitlabUpdateAuthorizationMethodPrivateToken) SourceGitlabUpdateAuthorizationMethod {
	typ := SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodPrivateToken

	return SourceGitlabUpdateAuthorizationMethod{
		SourceGitlabUpdateAuthorizationMethodPrivateToken: &sourceGitlabUpdateAuthorizationMethodPrivateToken,
		Type: typ,
	}
}

func (u *SourceGitlabUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGitlabUpdateAuthorizationMethodOAuth20 := new(SourceGitlabUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGitlabUpdateAuthorizationMethodOAuth20); err == nil {
		u.SourceGitlabUpdateAuthorizationMethodOAuth20 = sourceGitlabUpdateAuthorizationMethodOAuth20
		u.Type = SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodOAuth20
		return nil
	}

	sourceGitlabUpdateAuthorizationMethodPrivateToken := new(SourceGitlabUpdateAuthorizationMethodPrivateToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGitlabUpdateAuthorizationMethodPrivateToken); err == nil {
		u.SourceGitlabUpdateAuthorizationMethodPrivateToken = sourceGitlabUpdateAuthorizationMethodPrivateToken
		u.Type = SourceGitlabUpdateAuthorizationMethodTypeSourceGitlabUpdateAuthorizationMethodPrivateToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGitlabUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceGitlabUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceGitlabUpdateAuthorizationMethodOAuth20)
	}

	if u.SourceGitlabUpdateAuthorizationMethodPrivateToken != nil {
		return json.Marshal(u.SourceGitlabUpdateAuthorizationMethodPrivateToken)
	}

	return nil, nil
}

type SourceGitlabUpdate struct {
	// Please enter your basic URL from GitLab instance.
	APIURL      *string                               `json:"api_url,omitempty"`
	Credentials SourceGitlabUpdateAuthorizationMethod `json:"credentials"`
	// Space-delimited list of groups. e.g. airbyte.io.
	Groups *string `json:"groups,omitempty"`
	// Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.
	Projects *string `json:"projects,omitempty"`
	// The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
}
