// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceGitlabUpdateSchemasAuthType string

const (
	SourceGitlabUpdateSchemasAuthTypeAccessToken SourceGitlabUpdateSchemasAuthType = "access_token"
)

func (e SourceGitlabUpdateSchemasAuthType) ToPointer() *SourceGitlabUpdateSchemasAuthType {
	return &e
}

func (e *SourceGitlabUpdateSchemasAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceGitlabUpdateSchemasAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabUpdateSchemasAuthType: %v", v)
	}
}

type PrivateToken struct {
	// Log into your Gitlab account and then generate a personal Access Token.
	AccessToken string                             `json:"access_token"`
	authType    *SourceGitlabUpdateSchemasAuthType `const:"access_token" json:"auth_type,omitempty"`
}

func (p PrivateToken) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PrivateToken) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *PrivateToken) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *PrivateToken) GetAuthType() *SourceGitlabUpdateSchemasAuthType {
	return SourceGitlabUpdateSchemasAuthTypeAccessToken.ToPointer()
}

type SourceGitlabUpdateAuthType string

const (
	SourceGitlabUpdateAuthTypeOauth20 SourceGitlabUpdateAuthType = "oauth2.0"
)

func (e SourceGitlabUpdateAuthType) ToPointer() *SourceGitlabUpdateAuthType {
	return &e
}

func (e *SourceGitlabUpdateAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceGitlabUpdateAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGitlabUpdateAuthType: %v", v)
	}
}

type SourceGitlabUpdateOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken string                      `json:"access_token"`
	authType    *SourceGitlabUpdateAuthType `const:"oauth2.0" json:"auth_type,omitempty"`
	// The API ID of the Gitlab developer application.
	ClientID string `json:"client_id"`
	// The API Secret the Gitlab developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access_token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

func (s SourceGitlabUpdateOAuth20) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGitlabUpdateOAuth20) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGitlabUpdateOAuth20) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceGitlabUpdateOAuth20) GetAuthType() *SourceGitlabUpdateAuthType {
	return SourceGitlabUpdateAuthTypeOauth20.ToPointer()
}

func (o *SourceGitlabUpdateOAuth20) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *SourceGitlabUpdateOAuth20) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *SourceGitlabUpdateOAuth20) GetRefreshToken() string {
	if o == nil {
		return ""
	}
	return o.RefreshToken
}

func (o *SourceGitlabUpdateOAuth20) GetTokenExpiryDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.TokenExpiryDate
}

type SourceGitlabUpdateAuthorizationMethodType string

const (
	SourceGitlabUpdateAuthorizationMethodTypeOAuth20      SourceGitlabUpdateAuthorizationMethodType = "OAuth20"
	SourceGitlabUpdateAuthorizationMethodTypePrivateToken SourceGitlabUpdateAuthorizationMethodType = "PrivateToken"
)

type SourceGitlabUpdateAuthorizationMethod struct {
	OAuth20      *SourceGitlabUpdateOAuth20
	PrivateToken *PrivateToken

	Type SourceGitlabUpdateAuthorizationMethodType
}

func CreateSourceGitlabUpdateAuthorizationMethodOAuth20(oAuth20 SourceGitlabUpdateOAuth20) SourceGitlabUpdateAuthorizationMethod {
	typ := SourceGitlabUpdateAuthorizationMethodTypeOAuth20

	return SourceGitlabUpdateAuthorizationMethod{
		OAuth20: &oAuth20,
		Type:    typ,
	}
}

func CreateSourceGitlabUpdateAuthorizationMethodPrivateToken(privateToken PrivateToken) SourceGitlabUpdateAuthorizationMethod {
	typ := SourceGitlabUpdateAuthorizationMethodTypePrivateToken

	return SourceGitlabUpdateAuthorizationMethod{
		PrivateToken: &privateToken,
		Type:         typ,
	}
}

func (u *SourceGitlabUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {

	privateToken := new(PrivateToken)
	if err := utils.UnmarshalJSON(data, &privateToken, "", true, true); err == nil {
		u.PrivateToken = privateToken
		u.Type = SourceGitlabUpdateAuthorizationMethodTypePrivateToken
		return nil
	}

	oAuth20 := new(SourceGitlabUpdateOAuth20)
	if err := utils.UnmarshalJSON(data, &oAuth20, "", true, true); err == nil {
		u.OAuth20 = oAuth20
		u.Type = SourceGitlabUpdateAuthorizationMethodTypeOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGitlabUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.OAuth20 != nil {
		return utils.MarshalJSON(u.OAuth20, "", true)
	}

	if u.PrivateToken != nil {
		return utils.MarshalJSON(u.PrivateToken, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceGitlabUpdate struct {
	// Please enter your basic URL from GitLab instance.
	APIURL      *string                               `default:"gitlab.com" json:"api_url"`
	Credentials SourceGitlabUpdateAuthorizationMethod `json:"credentials"`
	// Space-delimited list of groups. e.g. airbyte.io.
	Groups *string `json:"groups,omitempty"`
	// Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.
	Projects *string `json:"projects,omitempty"`
	// The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
}

func (s SourceGitlabUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGitlabUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGitlabUpdate) GetAPIURL() *string {
	if o == nil {
		return nil
	}
	return o.APIURL
}

func (o *SourceGitlabUpdate) GetCredentials() SourceGitlabUpdateAuthorizationMethod {
	if o == nil {
		return SourceGitlabUpdateAuthorizationMethod{}
	}
	return o.Credentials
}

func (o *SourceGitlabUpdate) GetGroups() *string {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *SourceGitlabUpdate) GetProjects() *string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *SourceGitlabUpdate) GetStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartDate
}
