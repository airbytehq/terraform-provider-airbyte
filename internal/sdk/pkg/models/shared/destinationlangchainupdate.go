// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationLangchainUpdateEmbeddingFakeMode string

const (
	DestinationLangchainUpdateEmbeddingFakeModeFake DestinationLangchainUpdateEmbeddingFakeMode = "fake"
)

func (e DestinationLangchainUpdateEmbeddingFakeMode) ToPointer() *DestinationLangchainUpdateEmbeddingFakeMode {
	return &e
}

func (e *DestinationLangchainUpdateEmbeddingFakeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationLangchainUpdateEmbeddingFakeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateEmbeddingFakeMode: %v", v)
	}
}

// DestinationLangchainUpdateEmbeddingFake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type DestinationLangchainUpdateEmbeddingFake struct {
	mode *DestinationLangchainUpdateEmbeddingFakeMode `const:"fake" json:"mode"`
}

func (d DestinationLangchainUpdateEmbeddingFake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateEmbeddingFake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateEmbeddingFake) GetMode() *DestinationLangchainUpdateEmbeddingFakeMode {
	return DestinationLangchainUpdateEmbeddingFakeModeFake.ToPointer()
}

type DestinationLangchainUpdateEmbeddingOpenAIMode string

const (
	DestinationLangchainUpdateEmbeddingOpenAIModeOpenai DestinationLangchainUpdateEmbeddingOpenAIMode = "openai"
)

func (e DestinationLangchainUpdateEmbeddingOpenAIMode) ToPointer() *DestinationLangchainUpdateEmbeddingOpenAIMode {
	return &e
}

func (e *DestinationLangchainUpdateEmbeddingOpenAIMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationLangchainUpdateEmbeddingOpenAIMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateEmbeddingOpenAIMode: %v", v)
	}
}

// DestinationLangchainUpdateEmbeddingOpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type DestinationLangchainUpdateEmbeddingOpenAI struct {
	mode      *DestinationLangchainUpdateEmbeddingOpenAIMode `const:"openai" json:"mode"`
	OpenaiKey string                                         `json:"openai_key"`
}

func (d DestinationLangchainUpdateEmbeddingOpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateEmbeddingOpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateEmbeddingOpenAI) GetMode() *DestinationLangchainUpdateEmbeddingOpenAIMode {
	return DestinationLangchainUpdateEmbeddingOpenAIModeOpenai.ToPointer()
}

func (o *DestinationLangchainUpdateEmbeddingOpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type DestinationLangchainUpdateEmbeddingType string

const (
	DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingOpenAI DestinationLangchainUpdateEmbeddingType = "destination-langchain-update_Embedding_OpenAI"
	DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingFake   DestinationLangchainUpdateEmbeddingType = "destination-langchain-update_Embedding_Fake"
)

type DestinationLangchainUpdateEmbedding struct {
	DestinationLangchainUpdateEmbeddingOpenAI *DestinationLangchainUpdateEmbeddingOpenAI
	DestinationLangchainUpdateEmbeddingFake   *DestinationLangchainUpdateEmbeddingFake

	Type DestinationLangchainUpdateEmbeddingType
}

func CreateDestinationLangchainUpdateEmbeddingDestinationLangchainUpdateEmbeddingOpenAI(destinationLangchainUpdateEmbeddingOpenAI DestinationLangchainUpdateEmbeddingOpenAI) DestinationLangchainUpdateEmbedding {
	typ := DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingOpenAI

	return DestinationLangchainUpdateEmbedding{
		DestinationLangchainUpdateEmbeddingOpenAI: &destinationLangchainUpdateEmbeddingOpenAI,
		Type: typ,
	}
}

func CreateDestinationLangchainUpdateEmbeddingDestinationLangchainUpdateEmbeddingFake(destinationLangchainUpdateEmbeddingFake DestinationLangchainUpdateEmbeddingFake) DestinationLangchainUpdateEmbedding {
	typ := DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingFake

	return DestinationLangchainUpdateEmbedding{
		DestinationLangchainUpdateEmbeddingFake: &destinationLangchainUpdateEmbeddingFake,
		Type:                                    typ,
	}
}

func (u *DestinationLangchainUpdateEmbedding) UnmarshalJSON(data []byte) error {

	destinationLangchainUpdateEmbeddingFake := new(DestinationLangchainUpdateEmbeddingFake)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdateEmbeddingFake, "", true, true); err == nil {
		u.DestinationLangchainUpdateEmbeddingFake = destinationLangchainUpdateEmbeddingFake
		u.Type = DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingFake
		return nil
	}

	destinationLangchainUpdateEmbeddingOpenAI := new(DestinationLangchainUpdateEmbeddingOpenAI)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdateEmbeddingOpenAI, "", true, true); err == nil {
		u.DestinationLangchainUpdateEmbeddingOpenAI = destinationLangchainUpdateEmbeddingOpenAI
		u.Type = DestinationLangchainUpdateEmbeddingTypeDestinationLangchainUpdateEmbeddingOpenAI
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationLangchainUpdateEmbedding) MarshalJSON() ([]byte, error) {
	if u.DestinationLangchainUpdateEmbeddingOpenAI != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdateEmbeddingOpenAI, "", true)
	}

	if u.DestinationLangchainUpdateEmbeddingFake != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdateEmbeddingFake, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationLangchainUpdateIndexingChromaLocalPersistanceMode string

const (
	DestinationLangchainUpdateIndexingChromaLocalPersistanceModeChromaLocal DestinationLangchainUpdateIndexingChromaLocalPersistanceMode = "chroma_local"
)

func (e DestinationLangchainUpdateIndexingChromaLocalPersistanceMode) ToPointer() *DestinationLangchainUpdateIndexingChromaLocalPersistanceMode {
	return &e
}

func (e *DestinationLangchainUpdateIndexingChromaLocalPersistanceMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chroma_local":
		*e = DestinationLangchainUpdateIndexingChromaLocalPersistanceMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateIndexingChromaLocalPersistanceMode: %v", v)
	}
}

// DestinationLangchainUpdateIndexingChromaLocalPersistance - Chroma is a popular vector store that can be used to store and retrieve embeddings. It will build its index in memory and persist it to disk by the end of the sync.
type DestinationLangchainUpdateIndexingChromaLocalPersistance struct {
	// Name of the collection to use.
	CollectionName *string `default:"langchain" json:"collection_name"`
	// Path to the directory where chroma files will be written. The files will be placed inside that local mount.
	DestinationPath string                                                        `json:"destination_path"`
	mode            *DestinationLangchainUpdateIndexingChromaLocalPersistanceMode `const:"chroma_local" json:"mode"`
}

func (d DestinationLangchainUpdateIndexingChromaLocalPersistance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateIndexingChromaLocalPersistance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateIndexingChromaLocalPersistance) GetCollectionName() *string {
	if o == nil {
		return nil
	}
	return o.CollectionName
}

func (o *DestinationLangchainUpdateIndexingChromaLocalPersistance) GetDestinationPath() string {
	if o == nil {
		return ""
	}
	return o.DestinationPath
}

func (o *DestinationLangchainUpdateIndexingChromaLocalPersistance) GetMode() *DestinationLangchainUpdateIndexingChromaLocalPersistanceMode {
	return DestinationLangchainUpdateIndexingChromaLocalPersistanceModeChromaLocal.ToPointer()
}

type DestinationLangchainUpdateIndexingDocArrayHnswSearchMode string

const (
	DestinationLangchainUpdateIndexingDocArrayHnswSearchModeDocArrayHnswSearch DestinationLangchainUpdateIndexingDocArrayHnswSearchMode = "DocArrayHnswSearch"
)

func (e DestinationLangchainUpdateIndexingDocArrayHnswSearchMode) ToPointer() *DestinationLangchainUpdateIndexingDocArrayHnswSearchMode {
	return &e
}

func (e *DestinationLangchainUpdateIndexingDocArrayHnswSearchMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DocArrayHnswSearch":
		*e = DestinationLangchainUpdateIndexingDocArrayHnswSearchMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateIndexingDocArrayHnswSearchMode: %v", v)
	}
}

// DestinationLangchainUpdateIndexingDocArrayHnswSearch - DocArrayHnswSearch is a lightweight Document Index implementation provided by Docarray that runs fully locally and is best suited for small- to medium-sized datasets. It stores vectors on disk in hnswlib, and stores all other data in SQLite.
type DestinationLangchainUpdateIndexingDocArrayHnswSearch struct {
	// Path to the directory where hnswlib and meta data files will be written. The files will be placed inside that local mount. All files in the specified destination directory will be deleted on each run.
	DestinationPath string                                                    `json:"destination_path"`
	mode            *DestinationLangchainUpdateIndexingDocArrayHnswSearchMode `const:"DocArrayHnswSearch" json:"mode"`
}

func (d DestinationLangchainUpdateIndexingDocArrayHnswSearch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateIndexingDocArrayHnswSearch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateIndexingDocArrayHnswSearch) GetDestinationPath() string {
	if o == nil {
		return ""
	}
	return o.DestinationPath
}

func (o *DestinationLangchainUpdateIndexingDocArrayHnswSearch) GetMode() *DestinationLangchainUpdateIndexingDocArrayHnswSearchMode {
	return DestinationLangchainUpdateIndexingDocArrayHnswSearchModeDocArrayHnswSearch.ToPointer()
}

type DestinationLangchainUpdateIndexingPineconeMode string

const (
	DestinationLangchainUpdateIndexingPineconeModePinecone DestinationLangchainUpdateIndexingPineconeMode = "pinecone"
)

func (e DestinationLangchainUpdateIndexingPineconeMode) ToPointer() *DestinationLangchainUpdateIndexingPineconeMode {
	return &e
}

func (e *DestinationLangchainUpdateIndexingPineconeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinecone":
		*e = DestinationLangchainUpdateIndexingPineconeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateIndexingPineconeMode: %v", v)
	}
}

// DestinationLangchainUpdateIndexingPinecone - Pinecone is a popular vector store that can be used to store and retrieve embeddings. It is a managed service and can also be queried from outside of langchain.
type DestinationLangchainUpdateIndexingPinecone struct {
	// Pinecone index to use
	Index string                                          `json:"index"`
	mode  *DestinationLangchainUpdateIndexingPineconeMode `const:"pinecone" json:"mode"`
	// Pinecone environment to use
	PineconeEnvironment string `json:"pinecone_environment"`
	PineconeKey         string `json:"pinecone_key"`
}

func (d DestinationLangchainUpdateIndexingPinecone) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateIndexingPinecone) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateIndexingPinecone) GetIndex() string {
	if o == nil {
		return ""
	}
	return o.Index
}

func (o *DestinationLangchainUpdateIndexingPinecone) GetMode() *DestinationLangchainUpdateIndexingPineconeMode {
	return DestinationLangchainUpdateIndexingPineconeModePinecone.ToPointer()
}

func (o *DestinationLangchainUpdateIndexingPinecone) GetPineconeEnvironment() string {
	if o == nil {
		return ""
	}
	return o.PineconeEnvironment
}

func (o *DestinationLangchainUpdateIndexingPinecone) GetPineconeKey() string {
	if o == nil {
		return ""
	}
	return o.PineconeKey
}

type DestinationLangchainUpdateIndexingType string

const (
	DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingPinecone               DestinationLangchainUpdateIndexingType = "destination-langchain-update_Indexing_Pinecone"
	DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingDocArrayHnswSearch     DestinationLangchainUpdateIndexingType = "destination-langchain-update_Indexing_DocArrayHnswSearch"
	DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingChromaLocalPersistance DestinationLangchainUpdateIndexingType = "destination-langchain-update_Indexing_Chroma (local persistance)"
)

type DestinationLangchainUpdateIndexing struct {
	DestinationLangchainUpdateIndexingPinecone               *DestinationLangchainUpdateIndexingPinecone
	DestinationLangchainUpdateIndexingDocArrayHnswSearch     *DestinationLangchainUpdateIndexingDocArrayHnswSearch
	DestinationLangchainUpdateIndexingChromaLocalPersistance *DestinationLangchainUpdateIndexingChromaLocalPersistance

	Type DestinationLangchainUpdateIndexingType
}

func CreateDestinationLangchainUpdateIndexingDestinationLangchainUpdateIndexingPinecone(destinationLangchainUpdateIndexingPinecone DestinationLangchainUpdateIndexingPinecone) DestinationLangchainUpdateIndexing {
	typ := DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingPinecone

	return DestinationLangchainUpdateIndexing{
		DestinationLangchainUpdateIndexingPinecone: &destinationLangchainUpdateIndexingPinecone,
		Type: typ,
	}
}

func CreateDestinationLangchainUpdateIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearch(destinationLangchainUpdateIndexingDocArrayHnswSearch DestinationLangchainUpdateIndexingDocArrayHnswSearch) DestinationLangchainUpdateIndexing {
	typ := DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingDocArrayHnswSearch

	return DestinationLangchainUpdateIndexing{
		DestinationLangchainUpdateIndexingDocArrayHnswSearch: &destinationLangchainUpdateIndexingDocArrayHnswSearch,
		Type: typ,
	}
}

func CreateDestinationLangchainUpdateIndexingDestinationLangchainUpdateIndexingChromaLocalPersistance(destinationLangchainUpdateIndexingChromaLocalPersistance DestinationLangchainUpdateIndexingChromaLocalPersistance) DestinationLangchainUpdateIndexing {
	typ := DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingChromaLocalPersistance

	return DestinationLangchainUpdateIndexing{
		DestinationLangchainUpdateIndexingChromaLocalPersistance: &destinationLangchainUpdateIndexingChromaLocalPersistance,
		Type: typ,
	}
}

func (u *DestinationLangchainUpdateIndexing) UnmarshalJSON(data []byte) error {

	destinationLangchainUpdateIndexingDocArrayHnswSearch := new(DestinationLangchainUpdateIndexingDocArrayHnswSearch)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdateIndexingDocArrayHnswSearch, "", true, true); err == nil {
		u.DestinationLangchainUpdateIndexingDocArrayHnswSearch = destinationLangchainUpdateIndexingDocArrayHnswSearch
		u.Type = DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingDocArrayHnswSearch
		return nil
	}

	destinationLangchainUpdateIndexingChromaLocalPersistance := new(DestinationLangchainUpdateIndexingChromaLocalPersistance)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdateIndexingChromaLocalPersistance, "", true, true); err == nil {
		u.DestinationLangchainUpdateIndexingChromaLocalPersistance = destinationLangchainUpdateIndexingChromaLocalPersistance
		u.Type = DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingChromaLocalPersistance
		return nil
	}

	destinationLangchainUpdateIndexingPinecone := new(DestinationLangchainUpdateIndexingPinecone)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdateIndexingPinecone, "", true, true); err == nil {
		u.DestinationLangchainUpdateIndexingPinecone = destinationLangchainUpdateIndexingPinecone
		u.Type = DestinationLangchainUpdateIndexingTypeDestinationLangchainUpdateIndexingPinecone
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationLangchainUpdateIndexing) MarshalJSON() ([]byte, error) {
	if u.DestinationLangchainUpdateIndexingPinecone != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdateIndexingPinecone, "", true)
	}

	if u.DestinationLangchainUpdateIndexingDocArrayHnswSearch != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdateIndexingDocArrayHnswSearch, "", true)
	}

	if u.DestinationLangchainUpdateIndexingChromaLocalPersistance != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdateIndexingChromaLocalPersistance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationLangchainUpdateProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be used to calculate the embedding. All other fields are passed along as meta fields. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields"`
}

func (d DestinationLangchainUpdateProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdateProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdateProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *DestinationLangchainUpdateProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *DestinationLangchainUpdateProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return []string{}
	}
	return o.TextFields
}

type DestinationLangchainUpdate struct {
	// Embedding configuration
	Embedding DestinationLangchainUpdateEmbedding `json:"embedding"`
	// Indexing configuration
	Indexing   DestinationLangchainUpdateIndexing              `json:"indexing"`
	Processing DestinationLangchainUpdateProcessingConfigModel `json:"processing"`
}

func (o *DestinationLangchainUpdate) GetEmbedding() DestinationLangchainUpdateEmbedding {
	if o == nil {
		return DestinationLangchainUpdateEmbedding{}
	}
	return o.Embedding
}

func (o *DestinationLangchainUpdate) GetIndexing() DestinationLangchainUpdateIndexing {
	if o == nil {
		return DestinationLangchainUpdateIndexing{}
	}
	return o.Indexing
}

func (o *DestinationLangchainUpdate) GetProcessing() DestinationLangchainUpdateProcessingConfigModel {
	if o == nil {
		return DestinationLangchainUpdateProcessingConfigModel{}
	}
	return o.Processing
}
