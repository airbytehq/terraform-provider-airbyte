// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type DestinationLangchainUpdateMode string

const (
	DestinationLangchainUpdateModeFake DestinationLangchainUpdateMode = "fake"
)

func (e DestinationLangchainUpdateMode) ToPointer() *DestinationLangchainUpdateMode {
	return &e
}

func (e *DestinationLangchainUpdateMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fake":
		*e = DestinationLangchainUpdateMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateMode: %v", v)
	}
}

// Fake - Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
type Fake struct {
	mode *DestinationLangchainUpdateMode `const:"fake" json:"mode"`
}

func (f Fake) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Fake) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Fake) GetMode() *DestinationLangchainUpdateMode {
	return DestinationLangchainUpdateModeFake.ToPointer()
}

type DestinationLangchainUpdateSchemasEmbeddingMode string

const (
	DestinationLangchainUpdateSchemasEmbeddingModeOpenai DestinationLangchainUpdateSchemasEmbeddingMode = "openai"
)

func (e DestinationLangchainUpdateSchemasEmbeddingMode) ToPointer() *DestinationLangchainUpdateSchemasEmbeddingMode {
	return &e
}

func (e *DestinationLangchainUpdateSchemasEmbeddingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		*e = DestinationLangchainUpdateSchemasEmbeddingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateSchemasEmbeddingMode: %v", v)
	}
}

// OpenAI - Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
type OpenAI struct {
	mode      *DestinationLangchainUpdateSchemasEmbeddingMode `const:"openai" json:"mode"`
	OpenaiKey string                                          `json:"openai_key"`
}

func (o OpenAI) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpenAI) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OpenAI) GetMode() *DestinationLangchainUpdateSchemasEmbeddingMode {
	return DestinationLangchainUpdateSchemasEmbeddingModeOpenai.ToPointer()
}

func (o *OpenAI) GetOpenaiKey() string {
	if o == nil {
		return ""
	}
	return o.OpenaiKey
}

type EmbeddingType string

const (
	EmbeddingTypeOpenAI EmbeddingType = "OpenAI"
	EmbeddingTypeFake   EmbeddingType = "Fake"
)

type Embedding struct {
	OpenAI *OpenAI
	Fake   *Fake

	Type EmbeddingType
}

func CreateEmbeddingOpenAI(openAI OpenAI) Embedding {
	typ := EmbeddingTypeOpenAI

	return Embedding{
		OpenAI: &openAI,
		Type:   typ,
	}
}

func CreateEmbeddingFake(fake Fake) Embedding {
	typ := EmbeddingTypeFake

	return Embedding{
		Fake: &fake,
		Type: typ,
	}
}

func (u *Embedding) UnmarshalJSON(data []byte) error {

	fake := new(Fake)
	if err := utils.UnmarshalJSON(data, &fake, "", true, true); err == nil {
		u.Fake = fake
		u.Type = EmbeddingTypeFake
		return nil
	}

	openAI := new(OpenAI)
	if err := utils.UnmarshalJSON(data, &openAI, "", true, true); err == nil {
		u.OpenAI = openAI
		u.Type = EmbeddingTypeOpenAI
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Embedding) MarshalJSON() ([]byte, error) {
	if u.OpenAI != nil {
		return utils.MarshalJSON(u.OpenAI, "", true)
	}

	if u.Fake != nil {
		return utils.MarshalJSON(u.Fake, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type DestinationLangchainUpdateSchemasIndexingIndexingMode string

const (
	DestinationLangchainUpdateSchemasIndexingIndexingModeChromaLocal DestinationLangchainUpdateSchemasIndexingIndexingMode = "chroma_local"
)

func (e DestinationLangchainUpdateSchemasIndexingIndexingMode) ToPointer() *DestinationLangchainUpdateSchemasIndexingIndexingMode {
	return &e
}

func (e *DestinationLangchainUpdateSchemasIndexingIndexingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chroma_local":
		*e = DestinationLangchainUpdateSchemasIndexingIndexingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateSchemasIndexingIndexingMode: %v", v)
	}
}

// ChromaLocalPersistance - Chroma is a popular vector store that can be used to store and retrieve embeddings. It will build its index in memory and persist it to disk by the end of the sync.
type ChromaLocalPersistance struct {
	// Name of the collection to use.
	CollectionName *string `default:"langchain" json:"collection_name"`
	// Path to the directory where chroma files will be written. The files will be placed inside that local mount.
	DestinationPath string                                                 `json:"destination_path"`
	mode            *DestinationLangchainUpdateSchemasIndexingIndexingMode `const:"chroma_local" json:"mode"`
}

func (c ChromaLocalPersistance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChromaLocalPersistance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ChromaLocalPersistance) GetCollectionName() *string {
	if o == nil {
		return nil
	}
	return o.CollectionName
}

func (o *ChromaLocalPersistance) GetDestinationPath() string {
	if o == nil {
		return ""
	}
	return o.DestinationPath
}

func (o *ChromaLocalPersistance) GetMode() *DestinationLangchainUpdateSchemasIndexingIndexingMode {
	return DestinationLangchainUpdateSchemasIndexingIndexingModeChromaLocal.ToPointer()
}

type DestinationLangchainUpdateSchemasIndexingMode string

const (
	DestinationLangchainUpdateSchemasIndexingModeDocArrayHnswSearch DestinationLangchainUpdateSchemasIndexingMode = "DocArrayHnswSearch"
)

func (e DestinationLangchainUpdateSchemasIndexingMode) ToPointer() *DestinationLangchainUpdateSchemasIndexingMode {
	return &e
}

func (e *DestinationLangchainUpdateSchemasIndexingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DocArrayHnswSearch":
		*e = DestinationLangchainUpdateSchemasIndexingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateSchemasIndexingMode: %v", v)
	}
}

// DocArrayHnswSearch is a lightweight Document Index implementation provided by Docarray that runs fully locally and is best suited for small- to medium-sized datasets. It stores vectors on disk in hnswlib, and stores all other data in SQLite.
type DocArrayHnswSearch struct {
	// Path to the directory where hnswlib and meta data files will be written. The files will be placed inside that local mount. All files in the specified destination directory will be deleted on each run.
	DestinationPath string                                         `json:"destination_path"`
	mode            *DestinationLangchainUpdateSchemasIndexingMode `const:"DocArrayHnswSearch" json:"mode"`
}

func (d DocArrayHnswSearch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DocArrayHnswSearch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DocArrayHnswSearch) GetDestinationPath() string {
	if o == nil {
		return ""
	}
	return o.DestinationPath
}

func (o *DocArrayHnswSearch) GetMode() *DestinationLangchainUpdateSchemasIndexingMode {
	return DestinationLangchainUpdateSchemasIndexingModeDocArrayHnswSearch.ToPointer()
}

type DestinationLangchainUpdateSchemasMode string

const (
	DestinationLangchainUpdateSchemasModePinecone DestinationLangchainUpdateSchemasMode = "pinecone"
)

func (e DestinationLangchainUpdateSchemasMode) ToPointer() *DestinationLangchainUpdateSchemasMode {
	return &e
}

func (e *DestinationLangchainUpdateSchemasMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinecone":
		*e = DestinationLangchainUpdateSchemasMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationLangchainUpdateSchemasMode: %v", v)
	}
}

// DestinationLangchainUpdatePinecone - Pinecone is a popular vector store that can be used to store and retrieve embeddings. It is a managed service and can also be queried from outside of langchain.
type DestinationLangchainUpdatePinecone struct {
	// Pinecone index to use
	Index string                                 `json:"index"`
	mode  *DestinationLangchainUpdateSchemasMode `const:"pinecone" json:"mode"`
	// Pinecone environment to use
	PineconeEnvironment string `json:"pinecone_environment"`
	PineconeKey         string `json:"pinecone_key"`
}

func (d DestinationLangchainUpdatePinecone) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DestinationLangchainUpdatePinecone) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DestinationLangchainUpdatePinecone) GetIndex() string {
	if o == nil {
		return ""
	}
	return o.Index
}

func (o *DestinationLangchainUpdatePinecone) GetMode() *DestinationLangchainUpdateSchemasMode {
	return DestinationLangchainUpdateSchemasModePinecone.ToPointer()
}

func (o *DestinationLangchainUpdatePinecone) GetPineconeEnvironment() string {
	if o == nil {
		return ""
	}
	return o.PineconeEnvironment
}

func (o *DestinationLangchainUpdatePinecone) GetPineconeKey() string {
	if o == nil {
		return ""
	}
	return o.PineconeKey
}

type IndexingType string

const (
	IndexingTypeDestinationLangchainUpdatePinecone IndexingType = "destination-langchain-update_Pinecone"
	IndexingTypeDocArrayHnswSearch                 IndexingType = "DocArrayHnswSearch"
	IndexingTypeChromaLocalPersistance             IndexingType = "Chroma (local persistance)"
)

type Indexing struct {
	DestinationLangchainUpdatePinecone *DestinationLangchainUpdatePinecone
	DocArrayHnswSearch                 *DocArrayHnswSearch
	ChromaLocalPersistance             *ChromaLocalPersistance

	Type IndexingType
}

func CreateIndexingDestinationLangchainUpdatePinecone(destinationLangchainUpdatePinecone DestinationLangchainUpdatePinecone) Indexing {
	typ := IndexingTypeDestinationLangchainUpdatePinecone

	return Indexing{
		DestinationLangchainUpdatePinecone: &destinationLangchainUpdatePinecone,
		Type:                               typ,
	}
}

func CreateIndexingDocArrayHnswSearch(docArrayHnswSearch DocArrayHnswSearch) Indexing {
	typ := IndexingTypeDocArrayHnswSearch

	return Indexing{
		DocArrayHnswSearch: &docArrayHnswSearch,
		Type:               typ,
	}
}

func CreateIndexingChromaLocalPersistance(chromaLocalPersistance ChromaLocalPersistance) Indexing {
	typ := IndexingTypeChromaLocalPersistance

	return Indexing{
		ChromaLocalPersistance: &chromaLocalPersistance,
		Type:                   typ,
	}
}

func (u *Indexing) UnmarshalJSON(data []byte) error {

	docArrayHnswSearch := new(DocArrayHnswSearch)
	if err := utils.UnmarshalJSON(data, &docArrayHnswSearch, "", true, true); err == nil {
		u.DocArrayHnswSearch = docArrayHnswSearch
		u.Type = IndexingTypeDocArrayHnswSearch
		return nil
	}

	chromaLocalPersistance := new(ChromaLocalPersistance)
	if err := utils.UnmarshalJSON(data, &chromaLocalPersistance, "", true, true); err == nil {
		u.ChromaLocalPersistance = chromaLocalPersistance
		u.Type = IndexingTypeChromaLocalPersistance
		return nil
	}

	destinationLangchainUpdatePinecone := new(DestinationLangchainUpdatePinecone)
	if err := utils.UnmarshalJSON(data, &destinationLangchainUpdatePinecone, "", true, true); err == nil {
		u.DestinationLangchainUpdatePinecone = destinationLangchainUpdatePinecone
		u.Type = IndexingTypeDestinationLangchainUpdatePinecone
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Indexing) MarshalJSON() ([]byte, error) {
	if u.DestinationLangchainUpdatePinecone != nil {
		return utils.MarshalJSON(u.DestinationLangchainUpdatePinecone, "", true)
	}

	if u.DocArrayHnswSearch != nil {
		return utils.MarshalJSON(u.DocArrayHnswSearch, "", true)
	}

	if u.ChromaLocalPersistance != nil {
		return utils.MarshalJSON(u.ChromaLocalPersistance, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ProcessingConfigModel struct {
	// Size of overlap between chunks in tokens to store in vector store to better capture relevant context
	ChunkOverlap *int64 `default:"0" json:"chunk_overlap"`
	// Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
	ChunkSize int64 `json:"chunk_size"`
	// List of fields in the record that should be used to calculate the embedding. All other fields are passed along as meta fields. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
	TextFields []string `json:"text_fields"`
}

func (p ProcessingConfigModel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProcessingConfigModel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ProcessingConfigModel) GetChunkOverlap() *int64 {
	if o == nil {
		return nil
	}
	return o.ChunkOverlap
}

func (o *ProcessingConfigModel) GetChunkSize() int64 {
	if o == nil {
		return 0
	}
	return o.ChunkSize
}

func (o *ProcessingConfigModel) GetTextFields() []string {
	if o == nil {
		return []string{}
	}
	return o.TextFields
}

type DestinationLangchainUpdate struct {
	// Embedding configuration
	Embedding Embedding `json:"embedding"`
	// Indexing configuration
	Indexing   Indexing              `json:"indexing"`
	Processing ProcessingConfigModel `json:"processing"`
}

func (o *DestinationLangchainUpdate) GetEmbedding() Embedding {
	if o == nil {
		return Embedding{}
	}
	return o.Embedding
}

func (o *DestinationLangchainUpdate) GetIndexing() Indexing {
	if o == nil {
		return Indexing{}
	}
	return o.Indexing
}

func (o *DestinationLangchainUpdate) GetProcessing() ProcessingConfigModel {
	if o == nil {
		return ProcessingConfigModel{}
	}
	return o.Processing
}
