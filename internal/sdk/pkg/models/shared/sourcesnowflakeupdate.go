// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType string

const (
	SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthTypeUsernamePassword SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType = "username/password"
)

func (e SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username/password":
		*e = SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword struct {
	AuthType SourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType `json:"auth_type"`
	// The password associated with the username.
	Password string `json:"password"`
	// The username you created to allow Airbyte to access the database.
	Username string `json:"username"`
}

type SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType string

const (
	SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthTypeOAuth SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType = "OAuth"
)

func (e SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth":
		*e = SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type SourceSnowflakeUpdateAuthorizationMethodOAuth20 struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                                 `json:"access_token,omitempty"`
	AuthType    SourceSnowflakeUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type"`
	// The Client ID of your Snowflake developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Snowflake developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token for making authenticated requests.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

type SourceSnowflakeUpdateAuthorizationMethodType string

const (
	SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodOAuth20             SourceSnowflakeUpdateAuthorizationMethodType = "source-snowflake-update_Authorization Method_OAuth2.0"
	SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword SourceSnowflakeUpdateAuthorizationMethodType = "source-snowflake-update_Authorization Method_Username and Password"
)

type SourceSnowflakeUpdateAuthorizationMethod struct {
	SourceSnowflakeUpdateAuthorizationMethodOAuth20             *SourceSnowflakeUpdateAuthorizationMethodOAuth20
	SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword *SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	Type SourceSnowflakeUpdateAuthorizationMethodType
}

func CreateSourceSnowflakeUpdateAuthorizationMethodSourceSnowflakeUpdateAuthorizationMethodOAuth20(sourceSnowflakeUpdateAuthorizationMethodOAuth20 SourceSnowflakeUpdateAuthorizationMethodOAuth20) SourceSnowflakeUpdateAuthorizationMethod {
	typ := SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodOAuth20

	return SourceSnowflakeUpdateAuthorizationMethod{
		SourceSnowflakeUpdateAuthorizationMethodOAuth20: &sourceSnowflakeUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceSnowflakeUpdateAuthorizationMethodSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword(sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword) SourceSnowflakeUpdateAuthorizationMethod {
	typ := SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	return SourceSnowflakeUpdateAuthorizationMethod{
		SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword: &sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *SourceSnowflakeUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword := new(SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword); err == nil {
		u.SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword = sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		u.Type = SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		return nil
	}

	sourceSnowflakeUpdateAuthorizationMethodOAuth20 := new(SourceSnowflakeUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSnowflakeUpdateAuthorizationMethodOAuth20); err == nil {
		u.SourceSnowflakeUpdateAuthorizationMethodOAuth20 = sourceSnowflakeUpdateAuthorizationMethodOAuth20
		u.Type = SourceSnowflakeUpdateAuthorizationMethodTypeSourceSnowflakeUpdateAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSnowflakeUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword != nil {
		return json.Marshal(u.SourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	}

	if u.SourceSnowflakeUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceSnowflakeUpdateAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceSnowflakeUpdate struct {
	Credentials *SourceSnowflakeUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// The database you created for Airbyte to access data.
	Database string `json:"database"`
	// The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The role you created for Airbyte to access Snowflake.
	Role string `json:"role"`
	// The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
	Schema *string `json:"schema,omitempty"`
	// The warehouse you created for Airbyte to access data.
	Warehouse string `json:"warehouse"`
}
