// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
	"time"
)

type SourceGcsGcs string

const (
	SourceGcsGcsGcs SourceGcsGcs = "gcs"
)

func (e SourceGcsGcs) ToPointer() *SourceGcsGcs {
	return &e
}

func (e *SourceGcsGcs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcs":
		*e = SourceGcsGcs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsGcs: %v", v)
	}
}

type SourceGcsFiletype string

const (
	SourceGcsFiletypeCsv SourceGcsFiletype = "csv"
)

func (e SourceGcsFiletype) ToPointer() *SourceGcsFiletype {
	return &e
}

func (e *SourceGcsFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceGcsFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsFiletype: %v", v)
	}
}

type SourceGcsSchemasStreamsHeaderDefinitionType string

const (
	SourceGcsSchemasStreamsHeaderDefinitionTypeUserProvided SourceGcsSchemasStreamsHeaderDefinitionType = "User Provided"
)

func (e SourceGcsSchemasStreamsHeaderDefinitionType) ToPointer() *SourceGcsSchemasStreamsHeaderDefinitionType {
	return &e
}

func (e *SourceGcsSchemasStreamsHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "User Provided":
		*e = SourceGcsSchemasStreamsHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsSchemasStreamsHeaderDefinitionType: %v", v)
	}
}

// SourceGcsUserProvided - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceGcsUserProvided struct {
	// The column names that will be used while emitting the CSV records
	ColumnNames          []string                                     `json:"column_names"`
	headerDefinitionType *SourceGcsSchemasStreamsHeaderDefinitionType `const:"User Provided" json:"header_definition_type"`
}

func (s SourceGcsUserProvided) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsUserProvided) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsUserProvided) GetColumnNames() []string {
	if o == nil {
		return []string{}
	}
	return o.ColumnNames
}

func (o *SourceGcsUserProvided) GetHeaderDefinitionType() *SourceGcsSchemasStreamsHeaderDefinitionType {
	return SourceGcsSchemasStreamsHeaderDefinitionTypeUserProvided.ToPointer()
}

type SourceGcsSchemasHeaderDefinitionType string

const (
	SourceGcsSchemasHeaderDefinitionTypeAutogenerated SourceGcsSchemasHeaderDefinitionType = "Autogenerated"
)

func (e SourceGcsSchemasHeaderDefinitionType) ToPointer() *SourceGcsSchemasHeaderDefinitionType {
	return &e
}

func (e *SourceGcsSchemasHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Autogenerated":
		*e = SourceGcsSchemasHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsSchemasHeaderDefinitionType: %v", v)
	}
}

// SourceGcsAutogenerated - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceGcsAutogenerated struct {
	headerDefinitionType *SourceGcsSchemasHeaderDefinitionType `const:"Autogenerated" json:"header_definition_type"`
}

func (s SourceGcsAutogenerated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsAutogenerated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsAutogenerated) GetHeaderDefinitionType() *SourceGcsSchemasHeaderDefinitionType {
	return SourceGcsSchemasHeaderDefinitionTypeAutogenerated.ToPointer()
}

type SourceGcsHeaderDefinitionType string

const (
	SourceGcsHeaderDefinitionTypeFromCsv SourceGcsHeaderDefinitionType = "From CSV"
)

func (e SourceGcsHeaderDefinitionType) ToPointer() *SourceGcsHeaderDefinitionType {
	return &e
}

func (e *SourceGcsHeaderDefinitionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "From CSV":
		*e = SourceGcsHeaderDefinitionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsHeaderDefinitionType: %v", v)
	}
}

// SourceGcsFromCSV - How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
type SourceGcsFromCSV struct {
	headerDefinitionType *SourceGcsHeaderDefinitionType `const:"From CSV" json:"header_definition_type"`
}

func (s SourceGcsFromCSV) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsFromCSV) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsFromCSV) GetHeaderDefinitionType() *SourceGcsHeaderDefinitionType {
	return SourceGcsHeaderDefinitionTypeFromCsv.ToPointer()
}

type SourceGcsCSVHeaderDefinitionType string

const (
	SourceGcsCSVHeaderDefinitionTypeSourceGcsFromCSV       SourceGcsCSVHeaderDefinitionType = "source-gcs_From CSV"
	SourceGcsCSVHeaderDefinitionTypeSourceGcsAutogenerated SourceGcsCSVHeaderDefinitionType = "source-gcs_Autogenerated"
	SourceGcsCSVHeaderDefinitionTypeSourceGcsUserProvided  SourceGcsCSVHeaderDefinitionType = "source-gcs_User Provided"
)

type SourceGcsCSVHeaderDefinition struct {
	SourceGcsFromCSV       *SourceGcsFromCSV
	SourceGcsAutogenerated *SourceGcsAutogenerated
	SourceGcsUserProvided  *SourceGcsUserProvided

	Type SourceGcsCSVHeaderDefinitionType
}

func CreateSourceGcsCSVHeaderDefinitionSourceGcsFromCSV(sourceGcsFromCSV SourceGcsFromCSV) SourceGcsCSVHeaderDefinition {
	typ := SourceGcsCSVHeaderDefinitionTypeSourceGcsFromCSV

	return SourceGcsCSVHeaderDefinition{
		SourceGcsFromCSV: &sourceGcsFromCSV,
		Type:             typ,
	}
}

func CreateSourceGcsCSVHeaderDefinitionSourceGcsAutogenerated(sourceGcsAutogenerated SourceGcsAutogenerated) SourceGcsCSVHeaderDefinition {
	typ := SourceGcsCSVHeaderDefinitionTypeSourceGcsAutogenerated

	return SourceGcsCSVHeaderDefinition{
		SourceGcsAutogenerated: &sourceGcsAutogenerated,
		Type:                   typ,
	}
}

func CreateSourceGcsCSVHeaderDefinitionSourceGcsUserProvided(sourceGcsUserProvided SourceGcsUserProvided) SourceGcsCSVHeaderDefinition {
	typ := SourceGcsCSVHeaderDefinitionTypeSourceGcsUserProvided

	return SourceGcsCSVHeaderDefinition{
		SourceGcsUserProvided: &sourceGcsUserProvided,
		Type:                  typ,
	}
}

func (u *SourceGcsCSVHeaderDefinition) UnmarshalJSON(data []byte) error {

	sourceGcsFromCSV := new(SourceGcsFromCSV)
	if err := utils.UnmarshalJSON(data, &sourceGcsFromCSV, "", true, true); err == nil {
		u.SourceGcsFromCSV = sourceGcsFromCSV
		u.Type = SourceGcsCSVHeaderDefinitionTypeSourceGcsFromCSV
		return nil
	}

	sourceGcsAutogenerated := new(SourceGcsAutogenerated)
	if err := utils.UnmarshalJSON(data, &sourceGcsAutogenerated, "", true, true); err == nil {
		u.SourceGcsAutogenerated = sourceGcsAutogenerated
		u.Type = SourceGcsCSVHeaderDefinitionTypeSourceGcsAutogenerated
		return nil
	}

	sourceGcsUserProvided := new(SourceGcsUserProvided)
	if err := utils.UnmarshalJSON(data, &sourceGcsUserProvided, "", true, true); err == nil {
		u.SourceGcsUserProvided = sourceGcsUserProvided
		u.Type = SourceGcsCSVHeaderDefinitionTypeSourceGcsUserProvided
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGcsCSVHeaderDefinition) MarshalJSON() ([]byte, error) {
	if u.SourceGcsFromCSV != nil {
		return utils.MarshalJSON(u.SourceGcsFromCSV, "", true)
	}

	if u.SourceGcsAutogenerated != nil {
		return utils.MarshalJSON(u.SourceGcsAutogenerated, "", true)
	}

	if u.SourceGcsUserProvided != nil {
		return utils.MarshalJSON(u.SourceGcsUserProvided, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceGcsInferenceType - How to infer the types of the columns. If none, inference default to strings.
type SourceGcsInferenceType string

const (
	SourceGcsInferenceTypeNone               SourceGcsInferenceType = "None"
	SourceGcsInferenceTypePrimitiveTypesOnly SourceGcsInferenceType = "Primitive Types Only"
)

func (e SourceGcsInferenceType) ToPointer() *SourceGcsInferenceType {
	return &e
}

func (e *SourceGcsInferenceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Primitive Types Only":
		*e = SourceGcsInferenceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsInferenceType: %v", v)
	}
}

// SourceGcsCSVFormat - The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
type SourceGcsCSVFormat struct {
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `default:"," json:"delimiter"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `default:"true" json:"double_quote"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `default:"utf8" json:"encoding"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string `json:"escape_char,omitempty"`
	// A set of case-sensitive strings that should be interpreted as false values.
	FalseValues []string           `json:"false_values,omitempty"`
	filetype    *SourceGcsFiletype `const:"csv" json:"filetype"`
	// How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
	HeaderDefinition *SourceGcsCSVHeaderDefinition `json:"header_definition,omitempty"`
	// How to infer the types of the columns. If none, inference default to strings.
	InferenceType *SourceGcsInferenceType `default:"None" json:"inference_type"`
	// A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
	NullValues []string `json:"null_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `default:""" json:"quote_char"`
	// The number of rows to skip after the header row.
	SkipRowsAfterHeader *int64 `default:"0" json:"skip_rows_after_header"`
	// The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.
	SkipRowsBeforeHeader *int64 `default:"0" json:"skip_rows_before_header"`
	// Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.
	StringsCanBeNull *bool `default:"true" json:"strings_can_be_null"`
	// A set of case-sensitive strings that should be interpreted as true values.
	TrueValues []string `json:"true_values,omitempty"`
}

func (s SourceGcsCSVFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcsCSVFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcsCSVFormat) GetDelimiter() *string {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *SourceGcsCSVFormat) GetDoubleQuote() *bool {
	if o == nil {
		return nil
	}
	return o.DoubleQuote
}

func (o *SourceGcsCSVFormat) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *SourceGcsCSVFormat) GetEscapeChar() *string {
	if o == nil {
		return nil
	}
	return o.EscapeChar
}

func (o *SourceGcsCSVFormat) GetFalseValues() []string {
	if o == nil {
		return nil
	}
	return o.FalseValues
}

func (o *SourceGcsCSVFormat) GetFiletype() *SourceGcsFiletype {
	return SourceGcsFiletypeCsv.ToPointer()
}

func (o *SourceGcsCSVFormat) GetHeaderDefinition() *SourceGcsCSVHeaderDefinition {
	if o == nil {
		return nil
	}
	return o.HeaderDefinition
}

func (o *SourceGcsCSVFormat) GetInferenceType() *SourceGcsInferenceType {
	if o == nil {
		return nil
	}
	return o.InferenceType
}

func (o *SourceGcsCSVFormat) GetNullValues() []string {
	if o == nil {
		return nil
	}
	return o.NullValues
}

func (o *SourceGcsCSVFormat) GetQuoteChar() *string {
	if o == nil {
		return nil
	}
	return o.QuoteChar
}

func (o *SourceGcsCSVFormat) GetSkipRowsAfterHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsAfterHeader
}

func (o *SourceGcsCSVFormat) GetSkipRowsBeforeHeader() *int64 {
	if o == nil {
		return nil
	}
	return o.SkipRowsBeforeHeader
}

func (o *SourceGcsCSVFormat) GetStringsCanBeNull() *bool {
	if o == nil {
		return nil
	}
	return o.StringsCanBeNull
}

func (o *SourceGcsCSVFormat) GetTrueValues() []string {
	if o == nil {
		return nil
	}
	return o.TrueValues
}

type SourceGcsFormatType string

const (
	SourceGcsFormatTypeSourceGcsCSVFormat SourceGcsFormatType = "source-gcs_CSV Format"
)

type SourceGcsFormat struct {
	SourceGcsCSVFormat *SourceGcsCSVFormat

	Type SourceGcsFormatType
}

func CreateSourceGcsFormatSourceGcsCSVFormat(sourceGcsCSVFormat SourceGcsCSVFormat) SourceGcsFormat {
	typ := SourceGcsFormatTypeSourceGcsCSVFormat

	return SourceGcsFormat{
		SourceGcsCSVFormat: &sourceGcsCSVFormat,
		Type:               typ,
	}
}

func (u *SourceGcsFormat) UnmarshalJSON(data []byte) error {

	sourceGcsCSVFormat := new(SourceGcsCSVFormat)
	if err := utils.UnmarshalJSON(data, &sourceGcsCSVFormat, "", true, true); err == nil {
		u.SourceGcsCSVFormat = sourceGcsCSVFormat
		u.Type = SourceGcsFormatTypeSourceGcsCSVFormat
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGcsFormat) MarshalJSON() ([]byte, error) {
	if u.SourceGcsCSVFormat != nil {
		return utils.MarshalJSON(u.SourceGcsCSVFormat, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// SourceGcsValidationPolicy - The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
type SourceGcsValidationPolicy string

const (
	SourceGcsValidationPolicyEmitRecord      SourceGcsValidationPolicy = "Emit Record"
	SourceGcsValidationPolicySkipRecord      SourceGcsValidationPolicy = "Skip Record"
	SourceGcsValidationPolicyWaitForDiscover SourceGcsValidationPolicy = "Wait for Discover"
)

func (e SourceGcsValidationPolicy) ToPointer() *SourceGcsValidationPolicy {
	return &e
}

func (e *SourceGcsValidationPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Emit Record":
		fallthrough
	case "Skip Record":
		fallthrough
	case "Wait for Discover":
		*e = SourceGcsValidationPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGcsValidationPolicy: %v", v)
	}
}

type SourceGCSSourceGCSStreamConfig struct {
	// When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.
	DaysToSyncIfHistoryIsFull *int64 `default:"3" json:"days_to_sync_if_history_is_full"`
	// The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
	Format SourceGcsFormat `json:"format"`
	// The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
	Globs []string `json:"globs,omitempty"`
	// The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
	InputSchema *string `json:"input_schema,omitempty"`
	// The path prefix configured in previous versions of the GCS connector. This option is deprecated in favor of a single glob.
	LegacyPrefix *string `json:"legacy_prefix,omitempty"`
	// The name of the stream.
	Name string `json:"name"`
	// The column or columns (for a composite key) that serves as the unique identifier of a record.
	PrimaryKey *string `json:"primary_key,omitempty"`
	// When enabled, syncs will not validate or structure records against the stream's schema.
	Schemaless *bool `default:"false" json:"schemaless"`
	// The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.
	ValidationPolicy *SourceGcsValidationPolicy `default:"Emit Record" json:"validation_policy"`
}

func (s SourceGCSSourceGCSStreamConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGCSSourceGCSStreamConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGCSSourceGCSStreamConfig) GetDaysToSyncIfHistoryIsFull() *int64 {
	if o == nil {
		return nil
	}
	return o.DaysToSyncIfHistoryIsFull
}

func (o *SourceGCSSourceGCSStreamConfig) GetFormat() SourceGcsFormat {
	if o == nil {
		return SourceGcsFormat{}
	}
	return o.Format
}

func (o *SourceGCSSourceGCSStreamConfig) GetGlobs() []string {
	if o == nil {
		return nil
	}
	return o.Globs
}

func (o *SourceGCSSourceGCSStreamConfig) GetInputSchema() *string {
	if o == nil {
		return nil
	}
	return o.InputSchema
}

func (o *SourceGCSSourceGCSStreamConfig) GetLegacyPrefix() *string {
	if o == nil {
		return nil
	}
	return o.LegacyPrefix
}

func (o *SourceGCSSourceGCSStreamConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SourceGCSSourceGCSStreamConfig) GetPrimaryKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *SourceGCSSourceGCSStreamConfig) GetSchemaless() *bool {
	if o == nil {
		return nil
	}
	return o.Schemaless
}

func (o *SourceGCSSourceGCSStreamConfig) GetValidationPolicy() *SourceGcsValidationPolicy {
	if o == nil {
		return nil
	}
	return o.ValidationPolicy
}

// SourceGcs - NOTE: When this Spec is changed, legacy_config_transformer.py must also be
// modified to uptake the changes because it is responsible for converting
// legacy GCS configs into file based configs using the File-Based CDK.
type SourceGcs struct {
	// Name of the GCS bucket where the file(s) exist.
	Bucket string `json:"bucket"`
	// Enter your Google Cloud <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">service account key</a> in JSON format
	ServiceAccount string       `json:"service_account"`
	sourceType     SourceGcsGcs `const:"gcs" json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
	// Each instance of this configuration defines a <a href=https://docs.airbyte.com/cloud/core-concepts#stream>stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
	Streams []SourceGCSSourceGCSStreamConfig `json:"streams"`
}

func (s SourceGcs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceGcs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceGcs) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *SourceGcs) GetServiceAccount() string {
	if o == nil {
		return ""
	}
	return o.ServiceAccount
}

func (o *SourceGcs) GetSourceType() SourceGcsGcs {
	return SourceGcsGcsGcs
}

func (o *SourceGcs) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SourceGcs) GetStreams() []SourceGCSSourceGCSStreamConfig {
	if o == nil {
		return []SourceGCSSourceGCSStreamConfig{}
	}
	return o.Streams
}
