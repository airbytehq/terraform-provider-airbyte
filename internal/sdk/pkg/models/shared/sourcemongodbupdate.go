// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance string

const (
	SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstanceAtlas SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance = "atlas"
)

func (e SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance) ToPointer() *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas struct {
	// The URL of a cluster to connect to.
	ClusterURL string                                                     `json:"cluster_url"`
	Instance   SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance `json:"instance"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas

func (c *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) UnmarshalJSON(bs []byte) error {
	data := _SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "cluster_url")
	delete(additionalFields, "instance")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance string

const (
	SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstanceReplica SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance = "replica"
)

func (e SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance) ToPointer() *SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDbInstanceTypeReplicaSet - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDbInstanceTypeReplicaSet struct {
	Instance SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance `json:"instance"`
	// A replica set in MongoDB is a group of mongod processes that maintain the same data set.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member separated by comma.
	ServerAddresses string `json:"server_addresses"`
}

type SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance string

const (
	SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance = "standalone"
)

func (e SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) ToPointer() *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance struct {
	// The host name of the Mongo database.
	Host     string                                                                  `json:"host"`
	Instance SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance `json:"instance"`
	// The port of the Mongo database.
	Port int64 `json:"port"`
}

type SourceMongodbUpdateMongoDbInstanceTypeType string

const (
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_Standalone MongoDb Instance"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet                SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_Replica Set"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas              SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_MongoDB Atlas"
)

type SourceMongodbUpdateMongoDbInstanceType struct {
	SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
	SourceMongodbUpdateMongoDbInstanceTypeReplicaSet                *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet
	SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas              *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas

	Type SourceMongodbUpdateMongoDbInstanceTypeType
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance(sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance: &sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance,
		Type: typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet(sourceMongodbUpdateMongoDbInstanceTypeReplicaSet SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDbInstanceTypeReplicaSet: &sourceMongodbUpdateMongoDbInstanceTypeReplicaSet,
		Type: typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas(sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas: &sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas,
		Type: typ,
	}
}

func (u *SourceMongodbUpdateMongoDbInstanceType) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas := new(SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas); err == nil {
		u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas = sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas
		return nil
	}

	sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance := new(SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance); err == nil {
		u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance = sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
		return nil
	}

	sourceMongodbUpdateMongoDbInstanceTypeReplicaSet := new(SourceMongodbUpdateMongoDbInstanceTypeReplicaSet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodbUpdateMongoDbInstanceTypeReplicaSet); err == nil {
		u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet = sourceMongodbUpdateMongoDbInstanceTypeReplicaSet
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMongodbUpdateMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas != nil {
		return json.Marshal(u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas)
	}

	if u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		return json.Marshal(u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance)
	}

	if u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet != nil {
		return json.Marshal(u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet)
	}

	return nil, nil
}

type SourceMongodbUpdate struct {
	// The authentication source where the user information is stored.
	AuthSource *string `json:"auth_source,omitempty"`
	// The database you want to replicate.
	Database string `json:"database"`
	// The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *SourceMongodbUpdateMongoDbInstanceType `json:"instance_type,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The username which is used to access the database.
	User *string `json:"user,omitempty"`
}
