// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/airbytehq/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

type SourceMongodbUpdateSchemasInstanceTypeInstance string

const (
	SourceMongodbUpdateSchemasInstanceTypeInstanceAtlas SourceMongodbUpdateSchemasInstanceTypeInstance = "atlas"
)

func (e SourceMongodbUpdateSchemasInstanceTypeInstance) ToPointer() *SourceMongodbUpdateSchemasInstanceTypeInstance {
	return &e
}

func (e *SourceMongodbUpdateSchemasInstanceTypeInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = SourceMongodbUpdateSchemasInstanceTypeInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateSchemasInstanceTypeInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDBAtlas - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDBAtlas struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The URL of a cluster to connect to.
	ClusterURL string                                         `json:"cluster_url"`
	instance   SourceMongodbUpdateSchemasInstanceTypeInstance `const:"atlas" json:"instance"`
}

func (s SourceMongodbUpdateMongoDBAtlas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateMongoDBAtlas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateMongoDBAtlas) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceMongodbUpdateMongoDBAtlas) GetClusterURL() string {
	if o == nil {
		return ""
	}
	return o.ClusterURL
}

func (o *SourceMongodbUpdateMongoDBAtlas) GetInstance() SourceMongodbUpdateSchemasInstanceTypeInstance {
	return SourceMongodbUpdateSchemasInstanceTypeInstanceAtlas
}

type SourceMongodbUpdateSchemasInstance string

const (
	SourceMongodbUpdateSchemasInstanceReplica SourceMongodbUpdateSchemasInstance = "replica"
)

func (e SourceMongodbUpdateSchemasInstance) ToPointer() *SourceMongodbUpdateSchemasInstance {
	return &e
}

func (e *SourceMongodbUpdateSchemasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = SourceMongodbUpdateSchemasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateSchemasInstance: %v", v)
	}
}

// SourceMongodbUpdateReplicaSet - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateReplicaSet struct {
	instance SourceMongodbUpdateSchemasInstance `const:"replica" json:"instance"`
	// A replica set in MongoDB is a group of mongod processes that maintain the same data set.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member separated by comma.
	ServerAddresses string `json:"server_addresses"`
}

func (s SourceMongodbUpdateReplicaSet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateReplicaSet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateReplicaSet) GetInstance() SourceMongodbUpdateSchemasInstance {
	return SourceMongodbUpdateSchemasInstanceReplica
}

func (o *SourceMongodbUpdateReplicaSet) GetReplicaSet() *string {
	if o == nil {
		return nil
	}
	return o.ReplicaSet
}

func (o *SourceMongodbUpdateReplicaSet) GetServerAddresses() string {
	if o == nil {
		return ""
	}
	return o.ServerAddresses
}

type SourceMongodbUpdateInstance string

const (
	SourceMongodbUpdateInstanceStandalone SourceMongodbUpdateInstance = "standalone"
)

func (e SourceMongodbUpdateInstance) ToPointer() *SourceMongodbUpdateInstance {
	return &e
}

func (e *SourceMongodbUpdateInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = SourceMongodbUpdateInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateInstance: %v", v)
	}
}

// SourceMongodbUpdateStandaloneMongoDbInstance - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateStandaloneMongoDbInstance struct {
	// The host name of the Mongo database.
	Host     string                      `json:"host"`
	instance SourceMongodbUpdateInstance `const:"standalone" json:"instance"`
	// The port of the Mongo database.
	Port *int64 `default:"27017" json:"port"`
}

func (s SourceMongodbUpdateStandaloneMongoDbInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateStandaloneMongoDbInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateStandaloneMongoDbInstance) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceMongodbUpdateStandaloneMongoDbInstance) GetInstance() SourceMongodbUpdateInstance {
	return SourceMongodbUpdateInstanceStandalone
}

func (o *SourceMongodbUpdateStandaloneMongoDbInstance) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SourceMongodbUpdateMongoDbInstanceTypeType string

const (
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateStandaloneMongoDbInstance SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_Standalone MongoDb Instance"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateReplicaSet                SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_Replica Set"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBAtlas              SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDB Atlas"
)

type SourceMongodbUpdateMongoDbInstanceType struct {
	SourceMongodbUpdateStandaloneMongoDbInstance *SourceMongodbUpdateStandaloneMongoDbInstance
	SourceMongodbUpdateReplicaSet                *SourceMongodbUpdateReplicaSet
	SourceMongodbUpdateMongoDBAtlas              *SourceMongodbUpdateMongoDBAtlas

	Type SourceMongodbUpdateMongoDbInstanceTypeType
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateStandaloneMongoDbInstance(sourceMongodbUpdateStandaloneMongoDbInstance SourceMongodbUpdateStandaloneMongoDbInstance) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateStandaloneMongoDbInstance

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateStandaloneMongoDbInstance: &sourceMongodbUpdateStandaloneMongoDbInstance,
		Type: typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateReplicaSet(sourceMongodbUpdateReplicaSet SourceMongodbUpdateReplicaSet) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateReplicaSet

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateReplicaSet: &sourceMongodbUpdateReplicaSet,
		Type:                          typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDBAtlas(sourceMongodbUpdateMongoDBAtlas SourceMongodbUpdateMongoDBAtlas) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBAtlas

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDBAtlas: &sourceMongodbUpdateMongoDBAtlas,
		Type:                            typ,
	}
}

func (u *SourceMongodbUpdateMongoDbInstanceType) UnmarshalJSON(data []byte) error {

	sourceMongodbUpdateStandaloneMongoDbInstance := new(SourceMongodbUpdateStandaloneMongoDbInstance)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateStandaloneMongoDbInstance, "", true, true); err == nil {
		u.SourceMongodbUpdateStandaloneMongoDbInstance = sourceMongodbUpdateStandaloneMongoDbInstance
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateStandaloneMongoDbInstance
		return nil
	}

	sourceMongodbUpdateReplicaSet := new(SourceMongodbUpdateReplicaSet)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateReplicaSet, "", true, true); err == nil {
		u.SourceMongodbUpdateReplicaSet = sourceMongodbUpdateReplicaSet
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateReplicaSet
		return nil
	}

	sourceMongodbUpdateMongoDBAtlas := new(SourceMongodbUpdateMongoDBAtlas)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateMongoDBAtlas, "", true, true); err == nil {
		u.SourceMongodbUpdateMongoDBAtlas = sourceMongodbUpdateMongoDBAtlas
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBAtlas
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMongodbUpdateMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.SourceMongodbUpdateStandaloneMongoDbInstance != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateStandaloneMongoDbInstance, "", true)
	}

	if u.SourceMongodbUpdateReplicaSet != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateReplicaSet, "", true)
	}

	if u.SourceMongodbUpdateMongoDBAtlas != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateMongoDBAtlas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceMongodbUpdate struct {
	// The authentication source where the user information is stored.
	AuthSource *string `default:"admin" json:"auth_source"`
	// The database you want to replicate.
	Database string `json:"database"`
	// The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *SourceMongodbUpdateMongoDbInstanceType `json:"instance_type,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The username which is used to access the database.
	User *string `json:"user,omitempty"`
}

func (s SourceMongodbUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdate) GetAuthSource() *string {
	if o == nil {
		return nil
	}
	return o.AuthSource
}

func (o *SourceMongodbUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceMongodbUpdate) GetInstanceType() *SourceMongodbUpdateMongoDbInstanceType {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *SourceMongodbUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceMongodbUpdate) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
