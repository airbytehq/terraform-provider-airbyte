// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance string

const (
	SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstanceAtlas SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance = "atlas"
)

func (e SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance) ToPointer() *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "atlas":
		*e = SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// The URL of a cluster to connect to.
	ClusterURL string                                                     `json:"cluster_url"`
	instance   SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance `const:"atlas" json:"instance"`
}

func (s SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) GetClusterURL() string {
	if o == nil {
		return ""
	}
	return o.ClusterURL
}

func (o *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) GetInstance() SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstance {
	return SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlasInstanceAtlas
}

type SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance string

const (
	SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstanceReplica SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance = "replica"
)

func (e SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance) ToPointer() *SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "replica":
		*e = SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDbInstanceTypeReplicaSet - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDbInstanceTypeReplicaSet struct {
	instance SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance `const:"replica" json:"instance"`
	// A replica set in MongoDB is a group of mongod processes that maintain the same data set.
	ReplicaSet *string `json:"replica_set,omitempty"`
	// The members of a replica set. Please specify `host`:`port` of each member separated by comma.
	ServerAddresses string `json:"server_addresses"`
}

func (s SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) GetInstance() SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstance {
	return SourceMongodbUpdateMongoDbInstanceTypeReplicaSetInstanceReplica
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) GetReplicaSet() *string {
	if o == nil {
		return nil
	}
	return o.ReplicaSet
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) GetServerAddresses() string {
	if o == nil {
		return ""
	}
	return o.ServerAddresses
}

type SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance string

const (
	SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance = "standalone"
)

func (e SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) ToPointer() *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return &e
}

func (e *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standalone":
		*e = SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance: %v", v)
	}
}

// SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance - The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
type SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance struct {
	// The host name of the Mongo database.
	Host     string                                                                  `json:"host"`
	instance SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance `const:"standalone" json:"instance"`
	// The port of the Mongo database.
	Port *int64 `default:"27017" json:"port"`
}

func (s SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) GetInstance() SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstance {
	return SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceStandalone
}

func (o *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SourceMongodbUpdateMongoDbInstanceTypeType string

const (
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_Standalone MongoDb Instance"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet                SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_Replica Set"
	SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas              SourceMongodbUpdateMongoDbInstanceTypeType = "source-mongodb-update_MongoDb Instance Type_MongoDB Atlas"
)

type SourceMongodbUpdateMongoDbInstanceType struct {
	SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance *SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
	SourceMongodbUpdateMongoDbInstanceTypeReplicaSet                *SourceMongodbUpdateMongoDbInstanceTypeReplicaSet
	SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas              *SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas

	Type SourceMongodbUpdateMongoDbInstanceTypeType
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance(sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance: &sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance,
		Type: typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet(sourceMongodbUpdateMongoDbInstanceTypeReplicaSet SourceMongodbUpdateMongoDbInstanceTypeReplicaSet) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDbInstanceTypeReplicaSet: &sourceMongodbUpdateMongoDbInstanceTypeReplicaSet,
		Type: typ,
	}
}

func CreateSourceMongodbUpdateMongoDbInstanceTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas(sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas) SourceMongodbUpdateMongoDbInstanceType {
	typ := SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas

	return SourceMongodbUpdateMongoDbInstanceType{
		SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas: &sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas,
		Type: typ,
	}
}

func (u *SourceMongodbUpdateMongoDbInstanceType) UnmarshalJSON(data []byte) error {

	sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance := new(SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance, "", true, true); err == nil {
		u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance = sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance
		return nil
	}

	sourceMongodbUpdateMongoDbInstanceTypeReplicaSet := new(SourceMongodbUpdateMongoDbInstanceTypeReplicaSet)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateMongoDbInstanceTypeReplicaSet, "", true, true); err == nil {
		u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet = sourceMongodbUpdateMongoDbInstanceTypeReplicaSet
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSet
		return nil
	}

	sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas := new(SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas)
	if err := utils.UnmarshalJSON(data, &sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas, "", true, true); err == nil {
		u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas = sourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas
		u.Type = SourceMongodbUpdateMongoDbInstanceTypeTypeSourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMongodbUpdateMongoDbInstanceType) MarshalJSON() ([]byte, error) {
	if u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance, "", true)
	}

	if u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateMongoDbInstanceTypeReplicaSet, "", true)
	}

	if u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas != nil {
		return utils.MarshalJSON(u.SourceMongodbUpdateMongoDBInstanceTypeMongoDBAtlas, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceMongodbUpdate struct {
	// The authentication source where the user information is stored.
	AuthSource *string `default:"admin" json:"auth_source"`
	// The database you want to replicate.
	Database string `json:"database"`
	// The MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
	InstanceType *SourceMongodbUpdateMongoDbInstanceType `json:"instance_type,omitempty"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The username which is used to access the database.
	User *string `json:"user,omitempty"`
}

func (s SourceMongodbUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceMongodbUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SourceMongodbUpdate) GetAuthSource() *string {
	if o == nil {
		return nil
	}
	return o.AuthSource
}

func (o *SourceMongodbUpdate) GetDatabase() string {
	if o == nil {
		return ""
	}
	return o.Database
}

func (o *SourceMongodbUpdate) GetInstanceType() *SourceMongodbUpdateMongoDbInstanceType {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *SourceMongodbUpdate) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SourceMongodbUpdate) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}
