// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/utils"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase string

const (
	SourceSurveySparrowUpdateBaseURLGlobalAccountURLBaseHTTPSAPISurveysparrowComV3 SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase = "https://api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase) ToPointer() *SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase {
	return &e
}

func (e *SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://api.surveysparrow.com/v3":
		*e = SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase: %v", v)
	}
}

// SourceSurveySparrowUpdateBaseURLGlobalAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowUpdateBaseURLGlobalAccount struct {
	urlBase *SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase `const:"https://api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowUpdateBaseURLGlobalAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowUpdateBaseURLGlobalAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowUpdateBaseURLGlobalAccount) GetURLBase() *SourceSurveySparrowUpdateBaseURLGlobalAccountURLBase {
	return SourceSurveySparrowUpdateBaseURLGlobalAccountURLBaseHTTPSAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase string

const (
	SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBaseHTTPSEuAPISurveysparrowComV3 SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase = "https://eu-api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase) ToPointer() *SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase {
	return &e
}

func (e *SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://eu-api.surveysparrow.com/v3":
		*e = SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase: %v", v)
	}
}

// SourceSurveySparrowUpdateBaseURLEUBasedAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowUpdateBaseURLEUBasedAccount struct {
	urlBase *SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase `const:"https://eu-api.surveysparrow.com/v3" json:"url_base,omitempty"`
}

func (s SourceSurveySparrowUpdateBaseURLEUBasedAccount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SourceSurveySparrowUpdateBaseURLEUBasedAccount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SourceSurveySparrowUpdateBaseURLEUBasedAccount) GetURLBase() *SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBase {
	return SourceSurveySparrowUpdateBaseURLEUBasedAccountURLBaseHTTPSEuAPISurveysparrowComV3.ToPointer()
}

type SourceSurveySparrowUpdateBaseURLType string

const (
	SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLEUBasedAccount SourceSurveySparrowUpdateBaseURLType = "source-survey-sparrow-update_Base URL_EU-based account"
	SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLGlobalAccount  SourceSurveySparrowUpdateBaseURLType = "source-survey-sparrow-update_Base URL_Global account"
)

type SourceSurveySparrowUpdateBaseURL struct {
	SourceSurveySparrowUpdateBaseURLEUBasedAccount *SourceSurveySparrowUpdateBaseURLEUBasedAccount
	SourceSurveySparrowUpdateBaseURLGlobalAccount  *SourceSurveySparrowUpdateBaseURLGlobalAccount

	Type SourceSurveySparrowUpdateBaseURLType
}

func CreateSourceSurveySparrowUpdateBaseURLSourceSurveySparrowUpdateBaseURLEUBasedAccount(sourceSurveySparrowUpdateBaseURLEUBasedAccount SourceSurveySparrowUpdateBaseURLEUBasedAccount) SourceSurveySparrowUpdateBaseURL {
	typ := SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLEUBasedAccount

	return SourceSurveySparrowUpdateBaseURL{
		SourceSurveySparrowUpdateBaseURLEUBasedAccount: &sourceSurveySparrowUpdateBaseURLEUBasedAccount,
		Type: typ,
	}
}

func CreateSourceSurveySparrowUpdateBaseURLSourceSurveySparrowUpdateBaseURLGlobalAccount(sourceSurveySparrowUpdateBaseURLGlobalAccount SourceSurveySparrowUpdateBaseURLGlobalAccount) SourceSurveySparrowUpdateBaseURL {
	typ := SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLGlobalAccount

	return SourceSurveySparrowUpdateBaseURL{
		SourceSurveySparrowUpdateBaseURLGlobalAccount: &sourceSurveySparrowUpdateBaseURLGlobalAccount,
		Type: typ,
	}
}

func (u *SourceSurveySparrowUpdateBaseURL) UnmarshalJSON(data []byte) error {

	sourceSurveySparrowUpdateBaseURLEUBasedAccount := new(SourceSurveySparrowUpdateBaseURLEUBasedAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowUpdateBaseURLEUBasedAccount, "", true, true); err == nil {
		u.SourceSurveySparrowUpdateBaseURLEUBasedAccount = sourceSurveySparrowUpdateBaseURLEUBasedAccount
		u.Type = SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLEUBasedAccount
		return nil
	}

	sourceSurveySparrowUpdateBaseURLGlobalAccount := new(SourceSurveySparrowUpdateBaseURLGlobalAccount)
	if err := utils.UnmarshalJSON(data, &sourceSurveySparrowUpdateBaseURLGlobalAccount, "", true, true); err == nil {
		u.SourceSurveySparrowUpdateBaseURLGlobalAccount = sourceSurveySparrowUpdateBaseURLGlobalAccount
		u.Type = SourceSurveySparrowUpdateBaseURLTypeSourceSurveySparrowUpdateBaseURLGlobalAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSurveySparrowUpdateBaseURL) MarshalJSON() ([]byte, error) {
	if u.SourceSurveySparrowUpdateBaseURLEUBasedAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowUpdateBaseURLEUBasedAccount, "", true)
	}

	if u.SourceSurveySparrowUpdateBaseURLGlobalAccount != nil {
		return utils.MarshalJSON(u.SourceSurveySparrowUpdateBaseURLGlobalAccount, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SourceSurveySparrowUpdate struct {
	// Your access token. See <a href="https://developers.surveysparrow.com/rest-apis#authentication">here</a>. The key is case sensitive.
	AccessToken string `json:"access_token"`
	// Is your account location is EU based? If yes, the base url to retrieve data will be different.
	Region *SourceSurveySparrowUpdateBaseURL `json:"region,omitempty"`
	// A List of your survey ids for survey-specific stream
	SurveyID []interface{} `json:"survey_id,omitempty"`
}

func (o *SourceSurveySparrowUpdate) GetAccessToken() string {
	if o == nil {
		return ""
	}
	return o.AccessToken
}

func (o *SourceSurveySparrowUpdate) GetRegion() *SourceSurveySparrowUpdateBaseURL {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SourceSurveySparrowUpdate) GetSurveyID() []interface{} {
	if o == nil {
		return nil
	}
	return o.SurveyID
}
